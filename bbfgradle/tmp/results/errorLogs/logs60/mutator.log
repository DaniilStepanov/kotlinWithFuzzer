2021-03-12 01:11:48,729 [main:66] - Compilation checking started
2021-03-12 01:11:49,795 [main:50] - replacing f: () -> String Function0<String>
2021-03-12 01:11:49,795 [main:54] - Getting value of type Function0<String>
2021-03-12 01:11:49,948 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-12 01:11:49,949 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:11:49,952 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "dlewn"}
2021-03-12 01:11:49,953 [main:61] - GENERATED IS CALL =false
2021-03-12 01:11:50,155 [main:67] - randomType = ULong
2021-03-12 01:11:50,284 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 01:11:50,415 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 01:11:50,415 [main:66] - Compilation checking started
2021-03-12 01:11:51,147 [main:53] - Result = true
Text:


inline fun stub(f: () -> String = { "dlewn"}): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}


2021-03-12 01:11:51,147 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:11:51,148 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 01:11:51,149 [main:66] - Compilation checking started
2021-03-12 01:11:51,794 [main:53] - Result = true
Text:


inline fun stub(f: () -> String = { "dlewn"}): String = f()

class A(val z: String = "fcuyc") {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}


2021-03-12 01:11:51,795 [main:50] - replacing s: String String
2021-03-12 01:11:51,795 [main:54] - Getting value of type String
2021-03-12 01:11:51,909 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:11:51,909 [main:58] - GENERATED VALUE OF TYPE String = "lyjaw"
2021-03-12 01:11:51,910 [main:61] - GENERATED IS CALL =false
2021-03-12 01:11:52,180 [main:67] - randomType = Double?
2021-03-12 01:11:52,309 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:11:52,409 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2c87e895]
2021-03-12 01:11:52,410 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]
2021-03-12 01:11:52,411 [main:78] - Generated call from random type = (0.046547792652378406)?.toChar().titlecase()
2021-03-12 01:11:52,411 [main:106] - GETTING String from String
2021-03-12 01:11:52,456 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f7c18e5]]
2021-03-12 01:11:52,456 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f7c18e5]
2021-03-12 01:11:52,458 [main:117] - GENERATED CALL = (z).replaceIndent(z)
2021-03-12 01:11:52,458 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cfdfc94]]
2021-03-12 01:11:52,458 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cfdfc94]
2021-03-12 01:11:52,559 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 01:11:52,692 [main:43] - GENERATING CALL OF fun <T> listOf(): Iterable<Int> = TODO()
2021-03-12 01:11:52,695 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(): Iterable<Int> = TODO()
2021-03-12 01:11:52,796 [main:95] - GENERATED = listOf<Int>()
2021-03-12 01:11:52,797 [main:117] - GENERATED CALL = (z).slice(listOf<Int>())
2021-03-12 01:11:52,797 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]]
2021-03-12 01:11:52,798 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]
2021-03-12 01:11:52,890 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:11:52,892 [main:117] - GENERATED CALL = (z).takeLast(-1675604116)
2021-03-12 01:11:52,892 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]]
2021-03-12 01:11:52,892 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]
2021-03-12 01:11:52,893 [main:117] - GENERATED CALL = (z).lowercase()
2021-03-12 01:11:52,893 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]]
2021-03-12 01:11:52,893 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:11:52,999 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:11:53,091 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:11:53,092 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]
2021-03-12 01:11:53,199 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:11:53,308 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:11:53,309 [main:117] - GENERATED CALL = (z).subSequence(1759091815, 1577969669).commonPrefixWith(StringBuilder(), true)
2021-03-12 01:11:53,310 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e632037]]
2021-03-12 01:11:53,310 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e632037]
2021-03-12 01:11:53,311 [main:117] - GENERATED CALL = (z).uppercase()
2021-03-12 01:11:53,311 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@797c3840]]
2021-03-12 01:11:53,311 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@797c3840]
2021-03-12 01:11:53,312 [main:117] - GENERATED CALL = (z).decapitalize()
2021-03-12 01:11:53,313 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]]
2021-03-12 01:11:53,313 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]
2021-03-12 01:11:53,415 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:11:53,415 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:11:53,417 [main:117] - GENERATED CALL = (z).filterNot({a: Char -> true})
2021-03-12 01:11:53,417 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]]
2021-03-12 01:11:53,418 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]
2021-03-12 01:11:53,419 [main:117] - GENERATED CALL = (z).prependIndent(z)
2021-03-12 01:11:53,419 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e748520]]
2021-03-12 01:11:53,419 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e748520]
2021-03-12 01:11:53,420 [main:117] - GENERATED CALL = (z).trimStart()
2021-03-12 01:11:53,420 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 01:11:53,421 [main:66] - Compilation checking started
2021-03-12 01:11:53,936 [main:53] - Result = true
Text:


inline fun stub(f: () -> String = { "dlewn"}): String = f()

class A(val z: String = "fcuyc") {
    fun map(s: String = (z).trimStart()) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}


2021-03-12 01:11:54,150 [main:112] - generating klass A text = class A(val z: String) {
    fun map(s: String) = z + s
}
2021-03-12 01:11:54,269 [main:194] - Type params = []
2021-03-12 01:11:54,361 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:11:54,580 [main:43] - GENERATING CALL OF inline fun stub(f: () -> String): String = f()
2021-03-12 01:11:54,580 [main:61] - WITHOUT TYPE PARAMS = inline fun stub(f: () -> String): String = f()
2021-03-12 01:11:54,801 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-12 01:11:54,802 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:11:54,802 [main:95] - GENERATED = stub({ "zmxbv"})
2021-03-12 01:11:54,922 [main:45] - Trying to change 12 nodes
2021-03-12 01:11:54,925 [main:53] - replacing (a, A)
2021-03-12 01:11:54,926 [main:50] - replacing a A
2021-03-12 01:11:54,926 [main:54] - Getting value of type A
2021-03-12 01:11:55,023 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:11:55,024 [main:112] - generating klass A text = class A(val z: String) {
    fun map(s: String) = z + s
}
2021-03-12 01:11:55,114 [main:194] - Type params = []
2021-03-12 01:11:55,199 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:11:55,199 [main:58] - GENERATED VALUE OF TYPE A = A("owlba")
2021-03-12 01:11:55,200 [main:61] - GENERATED IS CALL =true
2021-03-12 01:11:55,201 [main:67] - randomType = A
2021-03-12 01:11:55,316 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:11:55,316 [main:112] - generating klass A text = class A(val z: String) {
    fun map(s: String) = z + s
}
2021-03-12 01:11:55,406 [main:194] - Type params = []
2021-03-12 01:11:55,496 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:11:55,508 [main:106] - GETTING A from Array<String>
2021-03-12 01:11:55,529 [main:113] - Case = [public fun <T, A : kotlin.text.Appendable> kotlin.Array<out T>.joinTo(buffer: A, separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): A defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4520fb54]]
2021-03-12 01:11:55,529 [main:149] - GENERATING call of type public fun <T, A : kotlin.text.Appendable> kotlin.Array<out T>.joinTo(buffer: A, separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): A defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4520fb54]
2021-03-12 01:11:55,616 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:11:55,617 [main:112] - generating klass A text = class A(val z: String) {
    fun map(s: String) = z + s
}
2021-03-12 01:11:55,724 [main:194] - Type params = []
2021-03-12 01:11:55,816 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:11:55,912 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:11:56,004 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:11:56,006 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:11:56,238 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:11:56,238 [main:95] - GENERATED = StringBuilder("ivstp")
2021-03-12 01:11:56,328 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:11:56,429 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:11:56,516 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:11:56,518 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:11:56,738 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 01:11:56,743 [main:95] - GENERATED = StringBuilder("fnnrl")
2021-03-12 01:11:56,829 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:11:56,914 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:11:56,999 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 01:11:57,000 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 01:11:57,121 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:11:57,123 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:11:57,301 [main:302] - generating value of type = Int true depth = 4
2021-03-12 01:11:57,302 [main:95] - GENERATED = StringBuilder(-952041389)
2021-03-12 01:11:57,303 [main:117] - GENERATED CALL = (s).joinTo(A("xfkwq"), StringBuilder("ivstp"), "whplt", StringBuilder("fnnrl"), -774758195, "ncfsk", {a: T -> StringBuilder(-952041389)})
2021-03-12 01:11:57,303 [main:61] - replacement of a of type A is A("owlba")
2021-03-12 01:11:57,391 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:11:57,391 [main:66] - Compilation checking started
2021-03-12 01:11:57,767 [main:53] - Result = true
Text:


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(A("owlba")::map).first()
}


2021-03-12 01:11:57,768 [main:53] - replacing (s, String)
2021-03-12 01:11:57,768 [main:50] - replacing s String
2021-03-12 01:11:57,768 [main:54] - Getting value of type String
2021-03-12 01:11:57,889 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:11:57,889 [main:58] - GENERATED VALUE OF TYPE String = "ddglw"
2021-03-12 01:11:57,890 [main:61] - GENERATED IS CALL =false
2021-03-12 01:11:57,890 [main:67] - randomType = A
2021-03-12 01:11:57,976 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:11:57,977 [main:112] - generating klass A text = class A(val z: String) {
    fun map(s: String) = z + s
}
2021-03-12 01:11:58,064 [main:194] - Type params = []
2021-03-12 01:11:58,150 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:11:58,158 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@f49d9a5]
2021-03-12 01:11:58,159 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c072050]
2021-03-12 01:11:58,297 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:11:58,298 [main:78] - Generated call from random type = (A("tdvwz")).map(stub({ "zmxbv"})).replaceAfterLast('¾', A("yizdx").z, A("yizdx").map())
2021-03-12 01:11:58,299 [main:106] - GETTING String from String
2021-03-12 01:11:58,325 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]]
2021-03-12 01:11:58,325 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]
2021-03-12 01:11:58,409 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:11:58,503 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:11:58,504 [main:117] - GENERATED CALL = (s).commonSuffixWith("hnijs", false)
2021-03-12 01:11:58,504 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]]
2021-03-12 01:11:58,504 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]
2021-03-12 01:11:58,598 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:11:58,599 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:11:58,600 [main:117] - GENERATED CALL = (s).filterNot({a: Char -> true})
2021-03-12 01:11:58,600 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]]
2021-03-12 01:11:58,600 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:11:58,699 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:11:58,793 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:11:58,793 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]
2021-03-12 01:11:58,887 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:11:58,979 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:11:58,980 [main:117] - GENERATED CALL = (s).subSequence(1683274622, 373742290).commonSuffixWith("tycpd", false)
2021-03-12 01:11:58,980 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]]
2021-03-12 01:11:58,980 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]
2021-03-12 01:11:59,076 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:11:59,078 [main:117] - GENERATED CALL = (s).replaceAfter('迥', s, A("yizdx").map())
2021-03-12 01:11:59,078 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305e8885]]
2021-03-12 01:11:59,078 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:11:59,171 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:11:59,171 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305e8885]
2021-03-12 01:11:59,172 [main:117] - GENERATED CALL = (s).get(-1298739479).lowercase()
2021-03-12 01:11:59,172 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@779dda8c]]
2021-03-12 01:11:59,172 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:11:59,253 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:11:59,254 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@779dda8c]
2021-03-12 01:11:59,255 [main:117] - GENERATED CALL = (s).get(723442210).plus(stub({ "zmxbv"}))
2021-03-12 01:11:59,255 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]]
2021-03-12 01:11:59,255 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:11:59,343 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:11:59,344 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]
2021-03-12 01:11:59,344 [main:117] - GENERATED CALL = (s).get(499278927).uppercase()
2021-03-12 01:11:59,344 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e37e3ea]]
2021-03-12 01:11:59,344 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e37e3ea]
2021-03-12 01:11:59,451 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:11:59,540 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:11:59,622 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:11:59,627 [main:117] - GENERATED CALL = (s).replaceRange(-582785688, -1531584354, "kohzv")
2021-03-12 01:11:59,627 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]]
2021-03-12 01:11:59,627 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]
2021-03-12 01:11:59,710 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:11:59,813 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:11:59,816 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:12:00,010 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:12:00,010 [main:95] - GENERATED = StringBuilder(1463269478)
2021-03-12 01:12:00,011 [main:117] - GENERATED CALL = (s).removePrefix(StringBuilder(1463269478))
2021-03-12 01:12:00,011 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c072050]]
2021-03-12 01:12:00,011 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c072050]
2021-03-12 01:12:00,094 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:12:00,198 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:12:00,200 [main:117] - GENERATED CALL = (s).replaceAfterLast('訢', "ktvce", s)
2021-03-12 01:12:00,200 [main:61] - replacement of s of type String is (s).get(499278927).uppercase()
2021-03-12 01:12:00,290 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:12:00,290 [main:66] - Compilation checking started
2021-03-12 01:12:00,662 [main:53] - Result = true
Text:


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + (s).get(499278927).uppercase()
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(A("owlba")::map).first()
}


2021-03-12 01:12:00,663 [main:53] - replacing (f, Function0<String>)
2021-03-12 01:12:00,663 [main:50] - replacing f Function0<String>
2021-03-12 01:12:00,663 [main:54] - Getting value of type Function0<String>
2021-03-12 01:12:00,766 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-12 01:12:00,766 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:12:00,766 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "vanhh"}
2021-03-12 01:12:00,767 [main:61] - GENERATED IS CALL =false
2021-03-12 01:12:00,865 [main:67] - randomType = Char
2021-03-12 01:12:00,946 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:12:00,978 [main:106] - GETTING Function0<String> from String
2021-03-12 01:12:01,010 [main:106] - GETTING Function0<String> from String
2021-03-12 01:12:01,010 [main:106] - GETTING Function0<String> from Function0<String>
2021-03-12 01:12:01,024 [main:61] - replacement of f of type Function0<String> is { "vanhh"}
2021-03-12 01:12:01,107 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 01:12:01,108 [main:66] - Compilation checking started
2021-03-12 01:12:01,448 [main:53] - Result = true
Text:


inline fun stub(f: () -> String): String = { "vanhh"}()

class A(val z: String) {
    fun map(s: String) = z + (s).get(499278927).uppercase()
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(A("owlba")::map).first()
}


2021-03-12 01:12:01,449 [main:53] - replacing (z + (s).get(499278927).uppercase(), String)
2021-03-12 01:12:01,449 [main:50] - replacing z + (s).get(499278927).uppercase() String
2021-03-12 01:12:01,449 [main:54] - Getting value of type String
2021-03-12 01:12:01,542 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:12:01,542 [main:58] - GENERATED VALUE OF TYPE String = "aifya"
2021-03-12 01:12:01,542 [main:61] - GENERATED IS CALL =false
2021-03-12 01:12:01,543 [main:67] - randomType = A
2021-03-12 01:12:01,633 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:12:01,633 [main:112] - generating klass A text = class A(val z: String) {
    fun map(s: String) = z + (s).get(499278927).uppercase()
}
2021-03-12 01:12:01,735 [main:194] - Type params = []
2021-03-12 01:12:01,836 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:12:01,843 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@5741a953]
2021-03-12 01:12:01,844 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1573a7e0]
2021-03-12 01:12:01,926 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:12:01,927 [main:78] - Generated call from random type = (A("nsyme")).map(A("yizdx").z).substringAfterLast('ꕔ', s)
2021-03-12 01:12:01,928 [main:106] - GETTING String from String
2021-03-12 01:12:01,950 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]]
2021-03-12 01:12:01,950 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:12:02,032 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:02,113 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:02,114 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]
2021-03-12 01:12:02,211 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:12:02,304 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:12:02,306 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:12:02,473 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:12:02,474 [main:95] - GENERATED = StringBuilder(-253349837)
2021-03-12 01:12:02,555 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:12:02,556 [main:117] - GENERATED CALL = (A("yizdx").z).subSequence(855795942, -1786973972).commonPrefixWith(StringBuilder(-253349837), false)
2021-03-12 01:12:02,556 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f7c18e5]]
2021-03-12 01:12:02,556 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f7c18e5]
2021-03-12 01:12:02,639 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:12:02,640 [main:117] - GENERATED CALL = (A("yizdx").z).replaceIndent("aghth")
2021-03-12 01:12:02,640 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]]
2021-03-12 01:12:02,640 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]
2021-03-12 01:12:02,739 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:02,740 [main:117] - GENERATED CALL = (A("yizdx").z).dropLast(1344556409)
2021-03-12 01:12:02,740 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d9973a9]]
2021-03-12 01:12:02,740 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d9973a9]
2021-03-12 01:12:02,831 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:12:02,832 [main:117] - GENERATED CALL = (A("yizdx").z).substringAfter('懺', s)
2021-03-12 01:12:02,832 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a16d90e]]
2021-03-12 01:12:02,832 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a16d90e]
2021-03-12 01:12:02,833 [main:117] - GENERATED CALL = (A("yizdx").z).concat(stub({ "zmxbv"}))
2021-03-12 01:12:02,833 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:12:02,833 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:12:02,927 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:12:02,928 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:12:03,018 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:03,019 [main:117] - GENERATED CALL = (A("yizdx").z).compareTo("gzgtc").toString(864876378)
2021-03-12 01:12:03,019 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a471dbf]]
2021-03-12 01:12:03,019 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a471dbf]
2021-03-12 01:12:03,104 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:12:03,104 [main:117] - GENERATED CALL = (A("yizdx").z).substringBefore('錏', A("yizdx").map())
2021-03-12 01:12:03,105 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]]
2021-03-12 01:12:03,105 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]
2021-03-12 01:12:03,187 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:12:03,317 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:12:03,406 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:12:03,407 [main:117] - GENERATED CALL = (A("yizdx").z).replace('뇆', 'ꋰ', true)
2021-03-12 01:12:03,407 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e37e3ea]]
2021-03-12 01:12:03,407 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e37e3ea]
2021-03-12 01:12:03,492 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:03,576 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:03,661 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:12:03,768 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:12:03,771 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:12:04,018 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 01:12:04,024 [main:95] - GENERATED = StringBuilder("qqlxl")
2021-03-12 01:12:04,025 [main:117] - GENERATED CALL = (A("yizdx").z).replaceRange(920594381, 1680492637, StringBuilder("qqlxl"))
2021-03-12 01:12:04,026 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]]
2021-03-12 01:12:04,026 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]
2021-03-12 01:12:04,139 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:12:04,139 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:12:04,140 [main:117] - GENERATED CALL = (A("yizdx").z).dropLastWhile({a: Char -> false})
2021-03-12 01:12:04,140 [main:61] - replacement of z + (s).get(499278927).uppercase() of type String is "aifya"
2021-03-12 01:12:04,226 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 01:12:04,227 [main:66] - Compilation checking started
2021-03-12 01:12:04,587 [main:53] - Result = true
Text:


inline fun stub(f: () -> String): String = { "vanhh"}()

class A(val z: String) {
    fun map(s: String) = "aifya"
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(A("owlba")::map).first()
}


2021-03-12 01:12:04,587 [main:53] - replacing (z, String)
2021-03-12 01:12:04,587 [main:50] - replacing z String
2021-03-12 01:12:04,588 [main:54] - Getting value of type String
2021-03-12 01:12:04,696 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:12:04,696 [main:58] - GENERATED VALUE OF TYPE String = "uapke"
2021-03-12 01:12:04,697 [main:61] - GENERATED IS CALL =false
2021-03-12 01:12:04,800 [main:67] - randomType = Byte
2021-03-12 01:12:04,883 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:12:04,953 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@36ee9dfc]
2021-03-12 01:12:05,043 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:12:05,044 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:12:05,129 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:05,130 [main:78] - Generated call from random type = (-123).compareTo(-81).toString(-1194031766)
2021-03-12 01:12:05,130 [main:61] - replacement of z of type String is (-123).compareTo(-81).toString(-1194031766)
2021-03-12 01:12:05,212 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:12:05,214 [main:53] - replacing ("O", String)
2021-03-12 01:12:05,214 [main:50] - replacing "O" String
2021-03-12 01:12:05,214 [main:54] - Getting value of type String
2021-03-12 01:12:05,297 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:12:05,298 [main:58] - GENERATED VALUE OF TYPE String = "ekhwg"
2021-03-12 01:12:05,298 [main:61] - GENERATED IS CALL =false
2021-03-12 01:12:05,400 [main:67] - randomType = UByte
2021-03-12 01:12:05,504 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 01:12:05,545 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@6edb6aac]
2021-03-12 01:12:05,545 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38059803]
2021-03-12 01:12:05,628 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:05,629 [main:78] - Generated call from random type = (56.toUByte()).toShort().toString(-1237420726)
2021-03-12 01:12:05,629 [main:106] - GETTING String from String
2021-03-12 01:12:05,660 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8422c70]]
2021-03-12 01:12:05,660 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8422c70]
2021-03-12 01:12:05,661 [main:117] - GENERATED CALL = (A("yizdx").z).capitalize()
2021-03-12 01:12:05,661 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@809c776]]
2021-03-12 01:12:05,661 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@809c776]
2021-03-12 01:12:05,741 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 01:12:05,741 [main:302] - generating value of type = Char true depth = 1
2021-03-12 01:12:05,743 [main:117] - GENERATED CALL = (A("yizdx").z).replaceFirstChar({a: Char -> '鑨'})
2021-03-12 01:12:05,743 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]]
2021-03-12 01:12:05,743 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]
2021-03-12 01:12:05,821 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:12:05,901 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:12:05,902 [main:117] - GENERATED CALL = (A("yizdx").z).replaceIndentByMargin("paxqh", "oaesb")
2021-03-12 01:12:05,903 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56864111]]
2021-03-12 01:12:05,903 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:12:06,001 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:06,095 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:06,096 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56864111]
2021-03-12 01:12:06,173 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 01:12:06,254 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 01:12:06,256 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 01:12:06,522 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:12:06,523 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 01:12:06,615 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Set<RegexOption> = TODO()
2021-03-12 01:12:06,617 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Set<RegexOption> = TODO()
2021-03-12 01:12:06,853 [main:302] - generating value of type = Int true depth = 6
2021-03-12 01:12:06,854 [main:302] - generating value of type = Float true depth = 6
2021-03-12 01:12:06,854 [main:95] - GENERATED = LinkedHashSet<RegexOption>(-1034085055, 0.059176028f)
2021-03-12 01:12:06,854 [main:95] - GENERATED = Regex("rabbi", LinkedHashSet<RegexOption>(-1034085055, 0.059176028f))
2021-03-12 01:12:06,961 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:12:06,962 [main:117] - GENERATED CALL = (A("yizdx").z).subSequence(248748670, -121688669).replaceFirst(Regex("rabbi", LinkedHashSet<RegexOption>(-1034085055, 0.059176028f)), "xrolc")
2021-03-12 01:12:06,962 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:12:06,963 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:12:06,963 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:12:07,075 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:07,076 [main:117] - GENERATED CALL = (A("yizdx").z).compareTo(A("yizdx").z).toString(1092505089)
2021-03-12 01:12:07,076 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]]
2021-03-12 01:12:07,076 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]
2021-03-12 01:12:07,153 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:12:07,154 [main:117] - GENERATED CALL = (A("yizdx").z).substringBeforeLast('', stub({ "zmxbv"}))
2021-03-12 01:12:07,154 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]]
2021-03-12 01:12:07,154 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]
2021-03-12 01:12:07,229 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:12:07,233 [main:117] - GENERATED CALL = (A("yizdx").z).removePrefix("ebtpg")
2021-03-12 01:12:07,234 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]]
2021-03-12 01:12:07,234 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]
2021-03-12 01:12:07,310 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:12:07,310 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:12:07,311 [main:117] - GENERATED CALL = (A("yizdx").z).dropWhile({a: Char -> false})
2021-03-12 01:12:07,311 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]]
2021-03-12 01:12:07,311 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:12:07,396 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:07,513 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:07,514 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]
2021-03-12 01:12:07,597 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:12:07,677 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:12:07,679 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:12:07,833 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:12:07,833 [main:95] - GENERATED = StringBuilder(546014167)
2021-03-12 01:12:07,921 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:12:07,922 [main:117] - GENERATED CALL = (A("yizdx").z).subSequence(676962182, 966649254).commonPrefixWith(StringBuilder(546014167), false)
2021-03-12 01:12:07,922 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:12:07,922 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:12:08,018 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:08,019 [main:117] - GENERATED CALL = (A("yizdx").z).length.toString(1533107063)
2021-03-12 01:12:08,019 [main:61] - replacement of "O" of type String is (A("yizdx").z).dropWhile({a: Char -> false})
2021-03-12 01:12:08,094 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:12:08,094 [main:66] - Compilation checking started
2021-03-12 01:12:08,393 [main:53] - Result = true
Text:


inline fun stub(f: () -> String): String = { "vanhh"}()

class A(val z: String) {
    fun map(s: String) = "aifya"
}


fun box(): String {
    val a = A((A("yizdx").z).dropWhile({a: Char -> false}))
    val s = arrayOf("K")
    return s.map(A("owlba")::map).first()
}


2021-03-12 01:12:08,473 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 01:12:08,553 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 01:12:08,553 [main:66] - Compilation checking started
2021-03-12 01:12:08,882 [main:41] - AFTER TRY 0 res = 

inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}


2021-03-12 01:12:09,036 [main:112] - generating klass A text = class A(val z: String) {
    fun map(s: String) = z + s
}
2021-03-12 01:12:09,114 [main:194] - Type params = []
2021-03-12 01:12:09,189 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:12:09,379 [main:43] - GENERATING CALL OF inline fun stub(f: () -> String): String = f()
2021-03-12 01:12:09,380 [main:61] - WITHOUT TYPE PARAMS = inline fun stub(f: () -> String): String = f()
2021-03-12 01:12:09,581 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-12 01:12:09,581 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:12:09,582 [main:95] - GENERATED = stub({ "feqkq"})
2021-03-12 01:12:09,675 [main:43] - Try №0
2021-03-12 01:12:19,502 [main:48] - Already checked
2021-03-12 01:12:24,056 [main:69] - Trying to insert override fun resumeWith(prope2: Result<Ty0>) {
        Ty1(prope2.getOrThrow())
    }
2021-03-12 01:12:24,168 [main:66] - Compilation checking started
2021-03-12 01:12:25,374 [main:103] - Trying to change 144 nodes
2021-03-12 01:12:25,375 [main:107] - replacing (Ty1 + Ty2, String)
2021-03-12 01:12:25,377 [main:50] - replacing Ty1 + Ty2 String
2021-03-12 01:12:25,377 [main:54] - Getting value of type String
2021-03-12 01:12:25,558 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:12:25,560 [main:58] - GENERATED VALUE OF TYPE String = "dlgct"
2021-03-12 01:12:25,561 [main:61] - GENERATED IS CALL =false
2021-03-12 01:12:25,566 [main:67] - randomType = Int
2021-03-12 01:12:25,735 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:25,807 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a485b5]
2021-03-12 01:12:25,808 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]
2021-03-12 01:12:25,808 [main:78] - Generated call from random type = (2011449952).toChar().titlecase()
2021-03-12 01:12:25,808 [main:106] - GETTING String from String
2021-03-12 01:12:25,840 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e61f45]]
2021-03-12 01:12:25,840 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e61f45]
2021-03-12 01:12:25,984 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:12:26,139 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:12:26,141 [main:117] - GENERATED CALL = (A("lhnqj").map()).replaceBefore('흱', "nwcnm", stub({ "feqkq"}))
2021-03-12 01:12:26,142 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707202d1]]
2021-03-12 01:12:26,142 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707202d1]
2021-03-12 01:12:26,294 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:12:26,296 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:12:26,298 [main:117] - GENERATED CALL = (A("lhnqj").map()).takeLastWhile({a: Char -> false})
2021-03-12 01:12:26,298 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]]
2021-03-12 01:12:26,298 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]
2021-03-12 01:12:26,299 [main:117] - GENERATED CALL = (A("lhnqj").map()).prependIndent(A("lhnqj").z)
2021-03-12 01:12:26,299 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]]
2021-03-12 01:12:26,299 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]
2021-03-12 01:12:26,482 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:26,484 [main:117] - GENERATED CALL = (A("lhnqj").map()).drop(1062572164)
2021-03-12 01:12:26,484 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]]
2021-03-12 01:12:26,484 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]
2021-03-12 01:12:26,622 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:12:26,625 [main:117] - GENERATED CALL = (A("lhnqj").map()).replaceBeforeLast('꘳', stub({ "feqkq"}), A("lhnqj").map())
2021-03-12 01:12:26,625 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]]
2021-03-12 01:12:26,625 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]
2021-03-12 01:12:26,765 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:12:26,908 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:12:26,911 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:12:27,206 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 01:12:27,212 [main:95] - GENERATED = StringBuilder("awfzn")
2021-03-12 01:12:27,343 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:12:27,345 [main:117] - GENERATED CALL = (A("lhnqj").map()).commonPrefixWith(StringBuilder("awfzn"), true)
2021-03-12 01:12:27,346 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8422c70]]
2021-03-12 01:12:27,346 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8422c70]
2021-03-12 01:12:27,346 [main:117] - GENERATED CALL = (A("lhnqj").map()).capitalize()
2021-03-12 01:12:27,346 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7fe90b]]
2021-03-12 01:12:27,346 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7fe90b]
2021-03-12 01:12:27,472 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:27,612 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:12:27,614 [main:117] - GENERATED CALL = (A("lhnqj").map()).padEnd(204528876, '킉')
2021-03-12 01:12:27,614 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]]
2021-03-12 01:12:27,615 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:12:27,762 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:27,907 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:27,909 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]
2021-03-12 01:12:28,044 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:28,047 [main:117] - GENERATED CALL = (A("lhnqj").map()).subSequence(-819341399, -2058841553).repeat(1187464315)
2021-03-12 01:12:28,048 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]]
2021-03-12 01:12:28,048 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]
2021-03-12 01:12:28,185 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:28,187 [main:117] - GENERATED CALL = (A("lhnqj").map()).dropLast(-1697274894)
2021-03-12 01:12:28,187 [main:114] - replacement of Ty1 + Ty2 of type String is "dlgct"
2021-03-12 01:12:28,307 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 01:12:28,308 [main:66] - Compilation checking started
2021-03-12 01:12:28,993 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    (c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:12:28,996 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 01:12:28,996 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 01:12:28,996 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 01:12:29,131 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 01:12:29,136 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 01:12:29,142 [main:67] - randomType = Kla1
2021-03-12 01:12:29,319 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 01:12:29,322 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-12 01:12:29,472 [main:194] - Type params = []
2021-03-12 01:12:29,593 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 01:12:29,741 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:12:29,743 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:12:30,070 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 01:12:30,225 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:12:30,228 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:12:30,680 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:12:30,680 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:12:30,708 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 01:12:30,772 [main:106] - GETTING EmptyCoroutineContext from Array<String>
2021-03-12 01:12:30,795 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 01:12:30,806 [main:106] - GETTING EmptyCoroutineContext from List<String>
2021-03-12 01:12:30,858 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 01:12:30,859 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 01:12:30,860 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 01:12:30,860 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 01:12:30,860 [main:50] - replacing {} Function0<Unit>
2021-03-12 01:12:30,860 [main:54] - Getting value of type Function0<Unit>
2021-03-12 01:12:31,008 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 01:12:31,010 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:12:31,155 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:12:31,158 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:12:31,438 [main:302] - generating value of type = Any false depth = 4
2021-03-12 01:12:31,439 [main:95] - GENERATED = print("seajl")
2021-03-12 01:12:31,439 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("seajl")}
2021-03-12 01:12:31,439 [main:61] - GENERATED IS CALL =false
2021-03-12 01:12:32,326 [main:67] - randomType = MutableMap<ArrayDeque<ULong?>, Double?>
2021-03-12 01:12:32,327 [main:106] - GETTING Function0<Unit> from A
2021-03-12 01:12:32,336 [main:106] - GETTING Function0<Unit> from Array<String>
2021-03-12 01:12:32,352 [main:106] - GETTING Function0<Unit> from List<String>
2021-03-12 01:12:32,385 [main:106] - GETTING Function0<Unit> from String
2021-03-12 01:12:32,405 [main:106] - GETTING Function0<Unit> from String
2021-03-12 01:12:32,406 [main:106] - GETTING Function0<Unit> from String
2021-03-12 01:12:32,406 [main:114] - replacement of {} of type Function0<Unit> is { print("seajl")}
2021-03-12 01:12:32,524 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:12:32,524 [main:66] - Compilation checking started
2021-03-12 01:12:33,156 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    (c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:12:33,159 [main:107] - replacing (false, Boolean)
2021-03-12 01:12:33,159 [main:50] - replacing false Boolean
2021-03-12 01:12:33,159 [main:54] - Getting value of type Boolean
2021-03-12 01:12:33,297 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:12:33,299 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 01:12:33,299 [main:61] - GENERATED IS CALL =false
2021-03-12 01:12:33,435 [main:67] - randomType = Char
2021-03-12 01:12:33,554 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:12:33,579 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50d4b6b8]
2021-03-12 01:12:33,579 [main:78] - Generated call from random type = ('ꏽ').isISOControl()
2021-03-12 01:12:33,580 [main:106] - GETTING Boolean from Array<String>
2021-03-12 01:12:33,590 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]]
2021-03-12 01:12:33,590 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:12:33,709 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:33,711 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]
2021-03-12 01:12:33,860 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:12:33,861 [main:117] - GENERATED CALL = (s).get(-1626110699).equals("pbupi")
2021-03-12 01:12:33,861 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a]]
2021-03-12 01:12:33,861 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a]
2021-03-12 01:12:33,993 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:12:33,993 [main:117] - GENERATED CALL = (s).equals("zbvpi")
2021-03-12 01:12:33,993 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1c290b82]]
2021-03-12 01:12:33,993 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1c290b82]
2021-03-12 01:12:33,993 [main:117] - GENERATED CALL = (s).isNotEmpty()
2021-03-12 01:12:33,994 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@388bb1cd]]
2021-03-12 01:12:33,994 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:12:34,116 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:34,118 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@388bb1cd]
2021-03-12 01:12:34,118 [main:117] - GENERATED CALL = (s).get(-1566380170).toBoolean()
2021-03-12 01:12:34,118 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]]
2021-03-12 01:12:34,118 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a]
2021-03-12 01:12:34,238 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:12:34,239 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]
2021-03-12 01:12:34,359 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:12:34,361 [main:117] - GENERATED CALL = (s).equals("zimtg").xor(true)
2021-03-12 01:12:34,364 [main:113] - Case = [public final operator fun set(index: kotlin.Int, value: kotlin.String): kotlin.Unit defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@505c33f5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@5ea3d8ed]]
2021-03-12 01:12:34,364 [main:149] - GENERATING call of type public final operator fun set(index: kotlin.Int, value: kotlin.String): kotlin.Unit defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@505c33f5]
2021-03-12 01:12:34,487 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:34,611 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:12:34,612 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@5ea3d8ed]
2021-03-12 01:12:34,739 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:12:34,739 [main:117] - GENERATED CALL = (s).set(-128086690, "ifluf").equals("mwfll")
2021-03-12 01:12:34,739 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]]
2021-03-12 01:12:34,739 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a]
2021-03-12 01:12:34,874 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:12:34,875 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]
2021-03-12 01:12:34,991 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:12:34,993 [main:117] - GENERATED CALL = (s).equals("hvdhk").or(true)
2021-03-12 01:12:34,993 [main:113] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun <T> kotlin.Array<out T>.contentEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3d29a22d]]
2021-03-12 01:12:34,994 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun <T> kotlin.Array<out T>.contentEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3d29a22d]
2021-03-12 01:12:35,112 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-12 01:12:35,258 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-12 01:12:35,260 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-12 01:12:35,379 [main:302] - generating value of type = T false depth = 3
2021-03-12 01:12:35,646 [main:43] - GENERATING CALL OF fun <T> requireNotNull(value: Short, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-12 01:12:35,649 [main:61] - WITHOUT TYPE PARAMS = fun <T> requireNotNull(value: Short, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-12 01:12:35,904 [main:302] - generating value of type = Short true depth = 6
2021-03-12 01:12:35,905 [main:302] - generating value of type = Function0<Any> false depth = 6
2021-03-12 01:12:35,907 [main:302] - generating value of type = Any false depth = 7
2021-03-12 01:12:35,907 [main:95] - GENERATED = requireNotNull<Short>(12148, { "kiday"})
2021-03-12 01:12:35,907 [main:95] - GENERATED = arrayOf<T>(requireNotNull<Short>(12148, { "kiday"}))
2021-03-12 01:12:35,908 [main:117] - GENERATED CALL = (s).contentEquals(arrayOf<T>(requireNotNull<Short>(12148, { "kiday"})))
2021-03-12 01:12:35,908 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24bfea79]]
2021-03-12 01:12:35,908 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:12:36,027 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:36,028 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24bfea79]
2021-03-12 01:12:36,029 [main:117] - GENERATED CALL = (s).get(1706437756).matches(A("lhnqj").map())
2021-03-12 01:12:36,029 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14ca80b4]]
2021-03-12 01:12:36,029 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a]
2021-03-12 01:12:36,154 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:12:36,155 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14ca80b4]
2021-03-12 01:12:36,155 [main:117] - GENERATED CALL = (s).equals("gydgd").not()
2021-03-12 01:12:36,155 [main:114] - replacement of false of type Boolean is (s).equals("hvdhk").or(true)
2021-03-12 01:12:36,287 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:12:36,287 [main:66] - Compilation checking started
2021-03-12 01:12:36,672 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    (c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = (s).equals("hvdhk").or(true)

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:12:36,674 [main:107] - replacing (0, Int)
2021-03-12 01:12:36,674 [main:50] - replacing 0 Int
2021-03-12 01:12:36,674 [main:54] - Getting value of type Int
2021-03-12 01:12:36,791 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:36,792 [main:58] - GENERATED VALUE OF TYPE Int = -1608438768
2021-03-12 01:12:36,793 [main:61] - GENERATED IS CALL =false
2021-03-12 01:12:37,056 [main:67] - randomType = Collection<Byte>
2021-03-12 01:12:37,057 [main:106] - GETTING Int from List<String>
2021-03-12 01:12:37,094 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@6fa75b71], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5be872b6]]
2021-03-12 01:12:37,094 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5be872b6]
2021-03-12 01:12:37,208 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:37,210 [main:117] - GENERATED CALL = (s.map(a::map)).size.coerceAtMost(1633891674)
2021-03-12 01:12:37,210 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@6fa75b71], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2f8a6f35]]
2021-03-12 01:12:37,210 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2f8a6f35]
2021-03-12 01:12:37,322 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:12:37,324 [main:117] - GENERATED CALL = (s.map(a::map)).size.plus(75)
2021-03-12 01:12:37,324 [main:113] - Case = [public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@2a517974], public abstract fun previousIndex(): kotlin.Int defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@60ac9629]]
2021-03-12 01:12:37,324 [main:149] - GENERATING call of type public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@2a517974]
2021-03-12 01:12:37,324 [main:149] - GENERATING call of type public abstract fun previousIndex(): kotlin.Int defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@60ac9629]
2021-03-12 01:12:37,325 [main:117] - GENERATED CALL = (s.map(a::map)).listIterator().previousIndex()
2021-03-12 01:12:37,325 [main:113] - Case = [public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.List<T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@58e53c27]]
2021-03-12 01:12:37,325 [main:149] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.List<T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@58e53c27]
2021-03-12 01:12:37,440 [main:302] - generating value of type = T false depth = 0
2021-03-12 01:12:37,563 [main:43] - GENERATING CALL OF fun <T> minOf(a: Kla4, other: Kla4, comparator: kotlin.Comparator<Kla4>): T = TODO()
2021-03-12 01:12:37,566 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Kla4, other: Kla4, comparator: kotlin.Comparator<Kla4>): T = TODO()
2021-03-12 01:12:37,828 [main:302] - generating value of type = Kla4 false depth = 3
2021-03-12 01:12:37,830 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 01:12:37,830 [main:302] - generating value of type = Kla4 false depth = 3
2021-03-12 01:12:37,832 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 01:12:37,832 [main:302] - generating value of type = Comparator<Kla4> false depth = 3
2021-03-12 01:12:37,952 [main:43] - GENERATING CALL OF fun <T> nullsLast(comparator: kotlin.Comparator<Kla4>): Comparator<Kla4> = TODO()
2021-03-12 01:12:37,955 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsLast(comparator: kotlin.Comparator<Kla4>): Comparator<Kla4> = TODO()
2021-03-12 01:12:38,237 [main:302] - generating value of type = Comparator<Kla4> false depth = 6
2021-03-12 01:12:38,358 [main:43] - GENERATING CALL OF fun <T> nullsFirst(): Comparator<Kla4> = TODO()
2021-03-12 01:12:38,361 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(): Comparator<Kla4> = TODO()
2021-03-12 01:12:38,484 [main:95] - GENERATED = nullsFirst<Kla4>()
2021-03-12 01:12:38,485 [main:95] - GENERATED = nullsLast<Kla4>(nullsFirst<Kla4>())
2021-03-12 01:12:38,485 [main:95] - GENERATED = minOf<Kla4>(Kla4(), Kla4(), nullsLast<Kla4>(nullsFirst<Kla4>()))
2021-03-12 01:12:38,485 [main:117] - GENERATED CALL = (s.map(a::map)).lastIndexOf(minOf<Kla4>(Kla4(), Kla4(), nullsLast<Kla4>(nullsFirst<Kla4>())))
2021-03-12 01:12:38,485 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@6fa75b71], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@615adefa]]
2021-03-12 01:12:38,485 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@615adefa]
2021-03-12 01:12:38,597 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:12:38,599 [main:117] - GENERATED CALL = (s.map(a::map)).size.rem(-77)
2021-03-12 01:12:38,599 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@6fa75b71], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@67cce6e8]]
2021-03-12 01:12:38,599 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@67cce6e8]
2021-03-12 01:12:38,711 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:38,713 [main:117] - GENERATED CALL = (s.map(a::map)).size.rotateLeft(317352147)
2021-03-12 01:12:38,713 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@6fa75b71], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@825ab3a]]
2021-03-12 01:12:38,713 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@825ab3a]
2021-03-12 01:12:38,827 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:38,828 [main:117] - GENERATED CALL = (s.map(a::map)).size.xor(-778014583)
2021-03-12 01:12:38,829 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@6fa75b71], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78f7a9c0]]
2021-03-12 01:12:38,829 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78f7a9c0]
2021-03-12 01:12:38,829 [main:117] - GENERATED CALL = (s.map(a::map)).size.unaryMinus()
2021-03-12 01:12:38,829 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@6fa75b71], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@497d3a85]]
2021-03-12 01:12:38,829 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@497d3a85]
2021-03-12 01:12:38,829 [main:117] - GENERATED CALL = (s.map(a::map)).size.countOneBits()
2021-03-12 01:12:38,829 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@6fa75b71], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dd7feb7]]
2021-03-12 01:12:38,829 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dd7feb7]
2021-03-12 01:12:38,941 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:38,943 [main:117] - GENERATED CALL = (s.map(a::map)).size.shr(1860348377)
2021-03-12 01:12:38,943 [main:114] - replacement of 0 of type Int is (s.map(a::map)).listIterator().previousIndex()
2021-03-12 01:12:39,056 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:12:39,056 [main:66] - Compilation checking started
2021-03-12 01:12:39,423 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    (c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = (s.map(a::map)).listIterator().previousIndex()
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:12:39,424 [main:107] - replacing (c as (suspend Kla0.() -> Unit), [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>)
2021-03-12 01:12:39,426 [main:50] - replacing c as (suspend Kla0.() -> Unit) [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>
2021-03-12 01:12:39,426 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>
2021-03-12 01:12:39,565 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> false depth = 0
2021-03-12 01:12:39,567 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:12:39,692 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:12:39,695 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:12:40,086 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 01:12:40,088 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 01:12:40,090 [main:302] - generating value of type = Any false depth = 5
2021-03-12 01:12:40,090 [main:95] - GENERATED = require(true, { "kzkrs"})
2021-03-12 01:12:40,090 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> = {a: Kla0 -> require(true, { "kzkrs"})}
2021-03-12 01:12:40,090 [main:61] - GENERATED IS CALL =false
2021-03-12 01:12:40,354 [main:67] - randomType = Float?
2021-03-12 01:12:40,470 [main:302] - generating value of type = Float true depth = 0
2021-03-12 01:12:40,511 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from Array<String>
2021-03-12 01:12:40,527 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from String
2021-03-12 01:12:40,550 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from String
2021-03-12 01:12:40,554 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from String
2021-03-12 01:12:40,558 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from List<String>
2021-03-12 01:12:40,589 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from A
2021-03-12 01:12:40,593 [main:114] - replacement of c as (suspend Kla0.() -> Unit) of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> is {a: Kla0 -> require(true, { "kzkrs"})}
2021-03-12 01:12:40,712 [main:33] - Trying to replace Element(BINARY_WITH_TYPE) on LAMBDA_EXPRESSION
2021-03-12 01:12:40,712 [main:66] - Compilation checking started
2021-03-12 01:12:41,123 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> require(true, { "kzkrs"})}).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:12:41,125 [main:107] - replacing ("\n", String)
2021-03-12 01:12:41,127 [main:50] - replacing "\n" String
2021-03-12 01:12:41,127 [main:54] - Getting value of type String
2021-03-12 01:12:41,273 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:12:41,274 [main:58] - GENERATED VALUE OF TYPE String = "sxdcm"
2021-03-12 01:12:41,275 [main:61] - GENERATED IS CALL =false
2021-03-12 01:12:41,406 [main:67] - randomType = ULong
2021-03-12 01:12:41,524 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 01:12:41,573 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@4d6257e1]
2021-03-12 01:12:41,708 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 01:12:41,710 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:12:41,834 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:41,836 [main:78] - Generated call from random type = (5126493904095723308.toULong()).compareTo(21.toUByte()).toString(-1783919415)
2021-03-12 01:12:41,836 [main:106] - GETTING String from String
2021-03-12 01:12:41,858 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cfdfc94]]
2021-03-12 01:12:41,858 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cfdfc94]
2021-03-12 01:12:41,976 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 01:12:42,110 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Iterable<Int> = TODO()
2021-03-12 01:12:42,113 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Iterable<Int> = TODO()
2021-03-12 01:12:42,500 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:12:42,502 [main:302] - generating value of type = Float true depth = 3
2021-03-12 01:12:42,504 [main:95] - GENERATED = LinkedHashSet<Kla1>(-249899251, 0.6071123f)
2021-03-12 01:12:42,504 [main:117] - GENERATED CALL = (stub({ "feqkq"})).slice(LinkedHashSet<Kla1>(-249899251, 0.6071123f))
2021-03-12 01:12:42,505 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52806f8a]]
2021-03-12 01:12:42,505 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52806f8a]
2021-03-12 01:12:42,505 [main:117] - GENERATED CALL = (stub({ "feqkq"})).trimMargin(A("lhnqj").map())
2021-03-12 01:12:42,505 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]]
2021-03-12 01:12:42,505 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]
2021-03-12 01:12:42,620 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:42,622 [main:117] - GENERATED CALL = (stub({ "feqkq"})).take(-314627531)
2021-03-12 01:12:42,622 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e632037]]
2021-03-12 01:12:42,622 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e632037]
2021-03-12 01:12:42,622 [main:117] - GENERATED CALL = (stub({ "feqkq"})).uppercase()
2021-03-12 01:12:42,622 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]]
2021-03-12 01:12:42,622 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]
2021-03-12 01:12:42,763 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:12:42,919 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:12:42,920 [main:117] - GENERATED CALL = (stub({ "feqkq"})).commonPrefixWith("havrq", false)
2021-03-12 01:12:42,921 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@779dda8c]]
2021-03-12 01:12:42,921 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:12:43,040 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:43,042 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@779dda8c]
2021-03-12 01:12:43,042 [main:117] - GENERATED CALL = (stub({ "feqkq"})).get(-1026653294).plus(stub({ "feqkq"}))
2021-03-12 01:12:43,042 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e61f45]]
2021-03-12 01:12:43,042 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e61f45]
2021-03-12 01:12:43,160 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:12:43,163 [main:117] - GENERATED CALL = (stub({ "feqkq"})).replaceBefore('沐', A("lhnqj").map(), stub({ "feqkq"}))
2021-03-12 01:12:43,163 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a471dbf]]
2021-03-12 01:12:43,163 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a471dbf]
2021-03-12 01:12:43,286 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:12:43,402 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:12:43,404 [main:117] - GENERATED CALL = (stub({ "feqkq"})).substringBefore('鎟', "qnujb")
2021-03-12 01:12:43,404 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]]
2021-03-12 01:12:43,404 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:12:43,521 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:43,638 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:43,639 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]
2021-03-12 01:12:43,826 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:43,964 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:43,966 [main:117] - GENERATED CALL = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390)
2021-03-12 01:12:43,966 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1573a7e0]]
2021-03-12 01:12:43,966 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1573a7e0]
2021-03-12 01:12:44,098 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:12:44,100 [main:117] - GENERATED CALL = (stub({ "feqkq"})).substringAfterLast('蔫', A("lhnqj").z)
2021-03-12 01:12:44,100 [main:114] - replacement of "\n" of type String is (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390)
2021-03-12 01:12:44,213 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:12:44,213 [main:66] - Compilation checking started
2021-03-12 01:12:44,846 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:12:44,848 [main:107] - replacing (prope2, Result<Any?>)
2021-03-12 01:12:44,849 [main:50] - replacing prope2 Result<Any?>
2021-03-12 01:12:44,849 [main:54] - Getting value of type Result<Any?>
2021-03-12 01:12:44,972 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 01:12:45,112 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 01:12:45,116 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 01:12:45,378 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 01:12:45,381 [main:302] - generating value of type = Any false depth = 4
2021-03-12 01:12:45,381 [main:95] - GENERATED = runCatching<Any?>({ "iunrc"})
2021-03-12 01:12:45,381 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "iunrc"})
2021-03-12 01:12:45,382 [main:61] - GENERATED IS CALL =true
2021-03-12 01:12:45,518 [main:67] - randomType = Byte
2021-03-12 01:12:45,636 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:12:45,691 [main:106] - GETTING Result<Any?> from String
2021-03-12 01:12:45,722 [main:106] - GETTING Result<Any?> from A
2021-03-12 01:12:45,731 [main:106] - GETTING Result<Any?> from String
2021-03-12 01:12:45,732 [main:106] - GETTING Result<Any?> from List<String>
2021-03-12 01:12:45,771 [main:106] - GETTING Result<Any?> from String
2021-03-12 01:12:45,773 [main:106] - GETTING Result<Any?> from Array<String>
2021-03-12 01:12:45,789 [main:114] - replacement of prope2 of type Result<Any?> is runCatching<Any?>({ "iunrc"})
2021-03-12 01:12:45,911 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:12:45,911 [main:66] - Compilation checking started
2021-03-12 01:12:46,614 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:12:46,618 [main:107] - replacing ({
        prope2.exceptionOrNull()?.let(Ty1)
    }, Unit?)
2021-03-12 01:12:46,620 [main:50] - replacing {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    } Unit?
2021-03-12 01:12:46,620 [main:54] - Getting value of type Unit?
2021-03-12 01:12:46,779 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 01:12:46,916 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:12:46,920 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:12:47,219 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 01:12:47,222 [main:95] - GENERATED = check(false)
2021-03-12 01:12:47,222 [main:58] - GENERATED VALUE OF TYPE Unit? = check(false)
2021-03-12 01:12:47,223 [main:61] - GENERATED IS CALL =true
2021-03-12 01:12:47,380 [main:67] - randomType = Float
2021-03-12 01:12:47,498 [main:302] - generating value of type = Float true depth = 0
2021-03-12 01:12:47,563 [main:106] - GETTING Unit? from Array<String>
2021-03-12 01:12:47,585 [main:113] - Case = [public inline fun <T> kotlin.Array<out T>.forEach(action: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5c6af94d]]
2021-03-12 01:12:47,585 [main:149] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.forEach(action: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5c6af94d]
2021-03-12 01:12:47,768 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-12 01:12:47,770 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:12:47,901 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:12:47,904 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:12:48,301 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 01:12:48,303 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 01:12:48,306 [main:302] - generating value of type = Any false depth = 5
2021-03-12 01:12:48,306 [main:95] - GENERATED = check(false, { "cuowu"})
2021-03-12 01:12:48,306 [main:117] - GENERATED CALL = (s)?.forEach({a: T -> check(false, { "cuowu"})})
2021-03-12 01:12:48,307 [main:113] - Case = [public fun <T> kotlin.Array<T>.reverse(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@17444cb9]]
2021-03-12 01:12:48,307 [main:149] - GENERATING call of type public fun <T> kotlin.Array<T>.reverse(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@17444cb9]
2021-03-12 01:12:48,307 [main:117] - GENERATED CALL = (s)?.reverse()
2021-03-12 01:12:48,307 [main:113] - Case = [public inline fun <T, R : kotlin.Comparable<R>> kotlin.Array<out T>.sortBy(crossinline selector: (T) -> R?): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1199a91]]
2021-03-12 01:12:48,307 [main:149] - GENERATING call of type public inline fun <T, R : kotlin.Comparable<R>> kotlin.Array<out T>.sortBy(crossinline selector: (T) -> R?): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1199a91]
2021-03-12 01:12:48,422 [main:302] - generating value of type = Function1<T, R?> false depth = 0
2021-03-12 01:12:48,425 [main:302] - generating value of type = R false depth = 1
2021-03-12 01:12:48,860 [main:43] - GENERATING CALL OF fun <R> run(block: ()->HashMap<String, Kla0?>): R = TODO()
2021-03-12 01:12:48,864 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->HashMap<String, Kla0?>): R = TODO()
2021-03-12 01:12:49,130 [main:302] - generating value of type = Function0<HashMap<String, Kla0?>> false depth = 4
2021-03-12 01:12:49,133 [main:302] - generating value of type = HashMap<String, Kla0?> false depth = 5
2021-03-12 01:12:49,258 [main:43] - GENERATING CALL OF fun <V> linkedStringMapOf(pairs: Pair<String, Kla0?>): HashMap<Strg, Kla0?> = TODO()
2021-03-12 01:12:49,262 [main:61] - WITHOUT TYPE PARAMS = fun <V> linkedStringMapOf(pairs: Pair<String, Kla0?>): HashMap<Strg, Kla0?> = TODO()
2021-03-12 01:12:49,389 [main:302] - generating value of type = Pair<String, Kla0?> false depth = 8
2021-03-12 01:12:49,511 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: String, second: Kla0?): Pair<String, Kla0?> = TODO()
2021-03-12 01:12:49,515 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: String, second: Kla0?): Pair<String, Kla0?> = TODO()
2021-03-12 01:12:49,639 [main:302] - generating value of type = String true depth = 11
2021-03-12 01:12:49,642 [main:302] - generating value of type = Kla0 false depth = 11
2021-03-12 01:12:49,644 [main:112] - generating klass Kla0 text = data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}
2021-03-12 01:12:49,765 [main:194] - Type params = []
2021-03-12 01:12:49,887 [main:302] - generating value of type = String true depth = 13
2021-03-12 01:12:49,890 [main:95] - GENERATED = Pair<String, Kla0?>("hajmc", Kla0("dijgs"))
2021-03-12 01:12:49,890 [main:95] - GENERATED = linkedStringMapOf<Kla0?>(Pair<String, Kla0?>("hajmc", Kla0("dijgs")))
2021-03-12 01:12:49,890 [main:95] - GENERATED = run<HashMap<String, Kla0?>>({ linkedStringMapOf<Kla0?>(Pair<String, Kla0?>("hajmc", Kla0("dijgs")))})
2021-03-12 01:12:49,891 [main:117] - GENERATED CALL = (s)?.sortBy({a: T -> run<HashMap<String, Kla0?>>({ linkedStringMapOf<Kla0?>(Pair<String, Kla0?>("hajmc", Kla0("dijgs")))})})
2021-03-12 01:12:49,891 [main:113] - Case = [public inline fun <T, R : kotlin.Comparable<R>> kotlin.Array<out T>.sortByDescending(crossinline selector: (T) -> R?): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6e64444d]]
2021-03-12 01:12:49,891 [main:149] - GENERATING call of type public inline fun <T, R : kotlin.Comparable<R>> kotlin.Array<out T>.sortByDescending(crossinline selector: (T) -> R?): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6e64444d]
2021-03-12 01:12:50,037 [main:302] - generating value of type = Function1<T, R?> false depth = 0
2021-03-12 01:12:50,040 [main:302] - generating value of type = R false depth = 1
2021-03-12 01:12:50,332 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Kla1, block: T.()->Kla2?): R = TODO()
2021-03-12 01:12:50,336 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Kla1, block: T.()->Kla2?): R = TODO()
2021-03-12 01:12:50,611 [main:302] - generating value of type = Kla1 false depth = 4
2021-03-12 01:12:50,614 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-12 01:12:50,733 [main:194] - Type params = []
2021-03-12 01:12:50,848 [main:302] - generating value of type = CoroutineContext false depth = 6
2021-03-12 01:12:50,975 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:12:50,980 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:12:51,276 [main:302] - generating value of type = Key<*> false depth = 9
2021-03-12 01:12:51,411 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:12:51,415 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:12:51,832 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-12 01:12:51,960 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:12:51,964 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:12:52,366 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 15
2021-03-12 01:12:52,534 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:12:52,538 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:12:52,931 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:12:52,931 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:12:52,931 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:12:52,931 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:12:52,931 [main:385] - Cant generate call of fun <T, R> with(receiver: Kla1, block: T.()->Kla2?): R = TODO()
2021-03-12 01:12:52,932 [main:117] - GENERATED CALL = (s)?.sortByDescending({a: T -> })
2021-03-12 01:12:52,932 [main:113] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.Array<out T>.sort(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@365d1cbf]]
2021-03-12 01:12:52,932 [main:149] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.Array<out T>.sort(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@365d1cbf]
2021-03-12 01:12:52,932 [main:117] - GENERATED CALL = (s)?.sort()
2021-03-12 01:12:52,932 [main:113] - Case = [public final operator fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@b9cbaf7], public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3daf4e64]]
2021-03-12 01:12:52,932 [main:149] - GENERATING call of type public final operator fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@b9cbaf7]
2021-03-12 01:12:52,932 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3daf4e64]
2021-03-12 01:12:53,045 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-12 01:12:53,048 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:12:53,168 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:12:53,172 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:12:53,435 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 01:12:53,438 [main:95] - GENERATED = check(false)
2021-03-12 01:12:53,438 [main:117] - GENERATED CALL = (s)?.iterator().forEach({a: T -> check(false)})
2021-03-12 01:12:53,438 [main:113] - Case = [public fun <T> kotlin.Array<out T>.sortWith(comparator: kotlin.Comparator<in T>): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@25417242]]
2021-03-12 01:12:53,438 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.sortWith(comparator: kotlin.Comparator<in T>): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@25417242]
2021-03-12 01:12:53,552 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-12 01:12:54,258 [main:43] - GENERATING CALL OF fun <T, K> compareBy(comparator: kotlin.Comparator<HashMap<Kla4, LinkedHashSet<Long>>?>, selector: (T)->HashMap<Kla4, LinkedHashSet<Long>>?): Comparator<T> = TODO()
2021-03-12 01:12:54,262 [main:61] - WITHOUT TYPE PARAMS = fun <T, K> compareBy(comparator: kotlin.Comparator<HashMap<Kla4, LinkedHashSet<Long>>?>, selector: (T)->HashMap<Kla4, LinkedHashSet<Long>>?): Comparator<T> = TODO()
2021-03-12 01:12:54,673 [main:302] - generating value of type = Comparator<HashMap<Kla4, LinkedHashSet<Long>>?> false depth = 3
2021-03-12 01:12:54,794 [main:43] - GENERATING CALL OF fun <T> nullsLast(comparator: kotlin.Comparator<HashMap<Kla4, LinkedHashSet<Long>>?>): Comparator<HashMap<Kla4, LkedHashSet<Long>>?> = TODO()
2021-03-12 01:12:54,798 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsLast(comparator: kotlin.Comparator<HashMap<Kla4, LinkedHashSet<Long>>?>): Comparator<HashMap<Kla4, LkedHashSet<Long>>?> = TODO()
2021-03-12 01:12:55,069 [main:302] - generating value of type = Comparator<HashMap<Kla4, LinkedHashSet<Long>>?> false depth = 6
2021-03-12 01:12:55,500 [main:43] - GENERATING CALL OF fun <T, K> compareBy(comparator: kotlin.Comparator<HashSet<Kla3<Kla2>>>, selector: (HashMap<Kla4, LinkedHashSet<Long>>?)->HashSet<Kla3<Kla2>>): Comparator<HashMap<Kla4, LkedHashSet<Long>>?> = TODO()
2021-03-12 01:12:55,504 [main:61] - WITHOUT TYPE PARAMS = fun <T, K> compareBy(comparator: kotlin.Comparator<HashSet<Kla3<Kla2>>>, selector: (HashMap<Kla4, LinkedHashSet<Long>>?)->HashSet<Kla3<Kla2>>): Comparator<HashMap<Kla4, LkedHashSet<Long>>?> = TODO()
2021-03-12 01:12:55,917 [main:302] - generating value of type = Comparator<HashSet<Kla3<Kla2>>> false depth = 9
2021-03-12 01:12:56,038 [main:43] - GENERATING CALL OF fun <T> compareBy(selector: (HashSet<Kla3<Kla2>>)->kotlin.Comparable<*>?): Comparator<HashSet<Kla3<Kla2>>> = TODO()
2021-03-12 01:12:56,042 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selector: (HashSet<Kla3<Kla2>>)->kotlin.Comparable<*>?): Comparator<HashSet<Kla3<Kla2>>> = TODO()
2021-03-12 01:12:56,302 [main:302] - generating value of type = Function1<HashSet<Kla3<Kla2>>, Comparable<*>?> false depth = 12
2021-03-12 01:12:56,305 [main:302] - generating value of type = Comparable<*> false depth = 13
2021-03-12 01:12:56,312 [main:95] - GENERATED = compareBy<HashSet<Kla3<Kla2>>>({a: HashSet<Kla3<Kla2>> -> 0.21596122f})
2021-03-12 01:12:56,312 [main:302] - generating value of type = Function1<HashMap<Kla4, LinkedHashSet<Long>>?, HashSet<Kla3<Kla2>>> false depth = 9
2021-03-12 01:12:56,315 [main:302] - generating value of type = HashSet<Kla3<Kla2>> false depth = 10
2021-03-12 01:12:56,433 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<Kla3<Kla2>> = TODO()
2021-03-12 01:12:56,437 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<Kla3<Kla2>> = TODO()
2021-03-12 01:12:56,601 [main:95] - GENERATED = linkedSetOf<Kla3<Kla2>>()
2021-03-12 01:12:56,601 [main:95] - GENERATED = compareBy<HashMap<Kla4, LinkedHashSet<Long>>?, HashSet<Kla3<Kla2>>>(compareBy<HashSet<Kla3<Kla2>>>({a: HashSet<Kla3<Kla2>> -> 0.21596122f}), {a: HashMap<Kla4, LinkedHashSet<Long>>? -> linkedSetOf<Kla3<Kla2>>()})
2021-03-12 01:12:56,602 [main:95] - GENERATED = nullsLast<HashMap<Kla4, LinkedHashSet<Long>>?>(compareBy<HashMap<Kla4, LinkedHashSet<Long>>?, HashSet<Kla3<Kla2>>>(compareBy<HashSet<Kla3<Kla2>>>({a: HashSet<Kla3<Kla2>> -> 0.21596122f}), {a: HashMap<Kla4, LinkedHashSet<Long>>? -> linkedSetOf<Kla3<Kla2>>()}))
2021-03-12 01:12:56,602 [main:302] - generating value of type = Function1<T, HashMap<Kla4, LinkedHashSet<Long>>?> false depth = 3
2021-03-12 01:12:56,605 [main:302] - generating value of type = HashMap<Kla4, LinkedHashSet<Long>> false depth = 4
2021-03-12 01:12:56,743 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Kla4, LinkedHashSet<Long>>): HashMap<Kla4, LkedHashSet<Long>> = TODO()
2021-03-12 01:12:56,746 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Kla4, LinkedHashSet<Long>>): HashMap<Kla4, LkedHashSet<Long>> = TODO()
2021-03-12 01:12:56,866 [main:302] - generating value of type = Pair<Kla4, LinkedHashSet<Long>> false depth = 7
2021-03-12 01:12:56,984 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla4, second: LinkedHashSet<Long>): Pair<Kla4, LinkedHashSet<Long>> = TODO()
2021-03-12 01:12:56,988 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla4, second: LinkedHashSet<Long>): Pair<Kla4, LinkedHashSet<Long>> = TODO()
2021-03-12 01:12:57,110 [main:302] - generating value of type = Kla4 false depth = 10
2021-03-12 01:12:57,113 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 01:12:57,113 [main:302] - generating value of type = LinkedHashSet<Long> false depth = 10
2021-03-12 01:12:57,235 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Long> = TODO()
2021-03-12 01:12:57,238 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Long> = TODO()
2021-03-12 01:12:57,360 [main:95] - GENERATED = linkedSetOf<Long>()
2021-03-12 01:12:57,361 [main:95] - GENERATED = Pair<Kla4, LinkedHashSet<Long>>(Kla4(), linkedSetOf<Long>())
2021-03-12 01:12:57,361 [main:95] - GENERATED = linkedMapOf<Kla4, LinkedHashSet<Long>>(Pair<Kla4, LinkedHashSet<Long>>(Kla4(), linkedSetOf<Long>()))
2021-03-12 01:12:57,361 [main:95] - GENERATED = compareBy<T, HashMap<Kla4, LinkedHashSet<Long>>?>(nullsLast<HashMap<Kla4, LinkedHashSet<Long>>?>(compareBy<HashMap<Kla4, LinkedHashSet<Long>>?, HashSet<Kla3<Kla2>>>(compareBy<HashSet<Kla3<Kla2>>>({a: HashSet<Kla3<Kla2>> -> 0.21596122f}), {a: HashMap<Kla4, LinkedHashSet<Long>>? -> linkedSetOf<Kla3<Kla2>>()})), {a: T -> linkedMapOf<Kla4, LinkedHashSet<Long>>(Pair<Kla4, LinkedHashSet<Long>>(Kla4(), linkedSetOf<Long>()))})
2021-03-12 01:12:57,362 [main:117] - GENERATED CALL = (s)?.sortWith(compareBy<T, HashMap<Kla4, LinkedHashSet<Long>>?>(nullsLast<HashMap<Kla4, LinkedHashSet<Long>>?>(compareBy<HashMap<Kla4, LinkedHashSet<Long>>?, HashSet<Kla3<Kla2>>>(compareBy<HashSet<Kla3<Kla2>>>({a: HashSet<Kla3<Kla2>> -> 0.21596122f}), {a: HashMap<Kla4, LinkedHashSet<Long>>? -> linkedSetOf<Kla3<Kla2>>()})), {a: T -> linkedMapOf<Kla4, LinkedHashSet<Long>>(Pair<Kla4, LinkedHashSet<Long>>(Kla4(), linkedSetOf<Long>()))}))
2021-03-12 01:12:57,362 [main:113] - Case = [@kotlin.SinceKotlin public fun <T> kotlin.Array<T>.shuffle(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@701d0d0]]
2021-03-12 01:12:57,363 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun <T> kotlin.Array<T>.shuffle(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@701d0d0]
2021-03-12 01:12:57,363 [main:117] - GENERATED CALL = (s)?.shuffle()
2021-03-12 01:12:57,363 [main:113] - Case = [public final operator fun set(index: kotlin.Int, value: kotlin.String): kotlin.Unit defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@505c33f5]]
2021-03-12 01:12:57,363 [main:149] - GENERATING call of type public final operator fun set(index: kotlin.Int, value: kotlin.String): kotlin.Unit defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@505c33f5]
2021-03-12 01:12:57,477 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:57,479 [main:117] - GENERATED CALL = (s)?.set(-1680054268, A("lhnqj").map())
2021-03-12 01:12:57,479 [main:113] - Case = [public inline fun <T> kotlin.Array<out T>.forEachIndexed(action: (index: kotlin.Int, T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@748ee45e]]
2021-03-12 01:12:57,480 [main:149] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.forEachIndexed(action: (index: kotlin.Int, T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@748ee45e]
2021-03-12 01:12:57,592 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, T, Unit> false depth = 0
2021-03-12 01:12:57,595 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:12:57,601 [main:117] - GENERATED CALL = (s)?.forEachIndexed({a: Int, b: T -> println()})
2021-03-12 01:12:57,601 [main:114] - replacement of {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    } of type Unit? is (s)?.sortBy({a: T -> run<HashMap<String, Kla0?>>({ linkedStringMapOf<Kla0?>(Pair<String, Kla0?>("hajmc", Kla0("dijgs")))})})
2021-03-12 01:12:57,714 [main:33] - Trying to replace BLOCK on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 01:12:57,715 [main:66] - Compilation checking started
2021-03-12 01:12:57,720 [main:71] - Wrong syntax or breaks conditions
2021-03-12 01:12:57,720 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) (s)?.sortBy({a: T -> run<HashMap<String, Kla0?>>({ linkedStringMapOf<Kla0?>(Pair<String, Kla0?>("hajmc", Kla0("dijgs")))})})
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:12:57,722 [main:107] - replacing (method, String)
2021-03-12 01:12:57,723 [main:50] - replacing method String
2021-03-12 01:12:57,723 [main:54] - Getting value of type String
2021-03-12 01:12:57,840 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:12:57,843 [main:58] - GENERATED VALUE OF TYPE String = "wutgj"
2021-03-12 01:12:57,843 [main:61] - GENERATED IS CALL =false
2021-03-12 01:12:57,998 [main:67] - randomType = Long
2021-03-12 01:12:58,132 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:12:58,169 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@6f664ab3]
2021-03-12 01:12:58,169 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@779dda8c]
2021-03-12 01:12:58,282 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:12:58,285 [main:78] - Generated call from random type = (1893021707369950529).toChar().plus("cdnjc")
2021-03-12 01:12:58,286 [main:106] - GETTING String from Array<String>
2021-03-12 01:12:58,301 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]]
2021-03-12 01:12:58,301 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:12:58,433 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:58,436 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]
2021-03-12 01:12:58,551 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:58,554 [main:117] - GENERATED CALL = (s).get(-1935200843).takeLast(-2008820126)
2021-03-12 01:12:58,554 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f7c18e5]]
2021-03-12 01:12:58,554 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:12:58,668 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:58,671 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f7c18e5]
2021-03-12 01:12:58,671 [main:117] - GENERATED CALL = (s).get(1427084661).replaceIndent(A("lhnqj").map())
2021-03-12 01:12:58,671 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]]
2021-03-12 01:12:58,671 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:12:58,784 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:58,787 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]
2021-03-12 01:12:58,787 [main:117] - GENERATED CALL = (s).get(-1884433085).prependIndent(A("lhnqj").z)
2021-03-12 01:12:58,788 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4997a579]]
2021-03-12 01:12:58,788 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:12:58,901 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:58,904 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4997a579]
2021-03-12 01:12:58,904 [main:117] - GENERATED CALL = (s).get(-1859106306).trimEnd()
2021-03-12 01:12:58,904 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]]
2021-03-12 01:12:58,904 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:12:59,018 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:59,021 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]
2021-03-12 01:12:59,136 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:12:59,136 [main:117] - GENERATED CALL = (s).get(-220200966).plus("takax")
2021-03-12 01:12:59,136 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]]
2021-03-12 01:12:59,136 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:12:59,266 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:59,269 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]
2021-03-12 01:12:59,269 [main:117] - GENERATED CALL = (s).get(-1197058543).trimIndent()
2021-03-12 01:12:59,269 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f548ae4]]
2021-03-12 01:12:59,269 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:12:59,412 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:59,415 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f548ae4]
2021-03-12 01:12:59,536 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 01:12:59,539 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:12:59,542 [main:117] - GENERATED CALL = (s).get(-1230157744).filterIndexed({a: Int, b: Char -> true})
2021-03-12 01:12:59,542 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]]
2021-03-12 01:12:59,542 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:12:59,660 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:12:59,663 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]
2021-03-12 01:12:59,784 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:12:59,908 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:13:00,088 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:13:00,091 [main:117] - GENERATED CALL = (s).get(-419407020).replace('伔', '䎌', true)
2021-03-12 01:13:00,091 [main:113] - Case = [public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5e94494e]]
2021-03-12 01:13:00,091 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5e94494e]
2021-03-12 01:13:00,208 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:13:00,343 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:13:00,473 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:13:00,477 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:13:00,723 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:13:00,726 [main:95] - GENERATED = StringBuilder("nfiqb")
2021-03-12 01:13:00,838 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:13:00,956 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:01,077 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:13:01,203 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:13:01,207 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:13:01,490 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:13:01,492 [main:95] - GENERATED = StringBuilder(-1471953850)
2021-03-12 01:13:01,604 [main:117] - GENERATED CALL = (s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)
2021-03-12 01:13:01,604 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@797c3840]]
2021-03-12 01:13:01,604 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:13:01,718 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:01,721 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@797c3840]
2021-03-12 01:13:01,721 [main:117] - GENERATED CALL = (s).get(-279355589).decapitalize()
2021-03-12 01:13:01,722 [main:114] - replacement of method of type String is (s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)
2021-03-12 01:13:01,834 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:13:01,834 [main:66] - Compilation checking started
2021-03-12 01:13:02,477 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:13:02,481 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 01:13:02,482 [main:50] - replacing numberOfSuspensions Int
2021-03-12 01:13:02,482 [main:54] - Getting value of type Int
2021-03-12 01:13:02,642 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:02,645 [main:58] - GENERATED VALUE OF TYPE Int = 473430588
2021-03-12 01:13:02,645 [main:61] - GENERATED IS CALL =false
2021-03-12 01:13:03,858 [main:67] - randomType = Function2<ArrayList<Map<Kla6, Float>>, Float, Boolean?>
2021-03-12 01:13:03,859 [main:106] - GETTING Int from String
2021-03-12 01:13:03,884 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6455ad9b]]
2021-03-12 01:13:03,884 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:13:03,885 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6455ad9b]
2021-03-12 01:13:03,885 [main:117] - GENERATED CALL = (stub({ "feqkq"})).compareTo(A("lhnqj").map()).takeHighestOneBit()
2021-03-12 01:13:03,885 [main:113] - Case = [public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e68f5f]]
2021-03-12 01:13:03,885 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e68f5f]
2021-03-12 01:13:04,017 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 01:13:04,020 [main:302] - generating value of type = Int true depth = 1
2021-03-12 01:13:04,023 [main:117] - GENERATED CALL = (stub({ "feqkq"})).sumBy({a: Char -> -602704309})
2021-03-12 01:13:04,023 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7073e568]]
2021-03-12 01:13:04,023 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:13:04,150 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:04,310 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:04,313 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7073e568]
2021-03-12 01:13:04,466 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 01:13:04,469 [main:302] - generating value of type = Int true depth = 1
2021-03-12 01:13:04,473 [main:117] - GENERATED CALL = (stub({ "feqkq"})).subSequence(723096477, -590724576).sumOf({a: Char -> 1625086108})
2021-03-12 01:13:04,473 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6742e276]]
2021-03-12 01:13:04,473 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6742e276]
2021-03-12 01:13:04,473 [main:117] - GENERATED CALL = (stub({ "feqkq"})).length.unaryPlus()
2021-03-12 01:13:04,473 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3af207fc]]
2021-03-12 01:13:04,474 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:13:04,596 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:13:04,599 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3af207fc]
2021-03-12 01:13:04,599 [main:117] - GENERATED CALL = (stub({ "feqkq"})).compareTo("slhsy").takeLowestOneBit()
2021-03-12 01:13:04,599 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@629a23da]]
2021-03-12 01:13:04,599 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:13:04,600 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@629a23da]
2021-03-12 01:13:04,723 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:04,726 [main:117] - GENERATED CALL = (stub({ "feqkq"})).compareTo(A("lhnqj").map()).coerceAtLeast(401371908)
2021-03-12 01:13:04,726 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@71c90ddf]]
2021-03-12 01:13:04,726 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:13:04,726 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@71c90ddf]
2021-03-12 01:13:04,853 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:13:04,856 [main:117] - GENERATED CALL = (stub({ "feqkq"})).compareTo(stub({ "feqkq"})).times(77)
2021-03-12 01:13:04,856 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3af207fc]]
2021-03-12 01:13:04,856 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3af207fc]
2021-03-12 01:13:04,856 [main:117] - GENERATED CALL = (stub({ "feqkq"})).length.takeLowestOneBit()
2021-03-12 01:13:04,857 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6dc78fa8]]
2021-03-12 01:13:04,857 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:13:04,857 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6dc78fa8]
2021-03-12 01:13:04,857 [main:117] - GENERATED CALL = (stub({ "feqkq"})).compareTo(A("lhnqj").map()).countTrailingZeroBits()
2021-03-12 01:13:04,857 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d9fffd8]]
2021-03-12 01:13:04,857 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d9fffd8]
2021-03-12 01:13:04,977 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:13:05,102 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:13:05,105 [main:117] - GENERATED CALL = (stub({ "feqkq"})).compareTo("yailn", true)
2021-03-12 01:13:05,106 [main:114] - replacement of numberOfSuspensions of type Int is (stub({ "feqkq"})).compareTo(A("lhnqj").map()).takeHighestOneBit()
2021-03-12 01:13:05,225 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:13:05,226 [main:66] - Compilation checking started
2021-03-12 01:13:05,615 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..(stub({ "feqkq"})).compareTo(A("lhnqj").map()).takeHighestOneBit()) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:13:05,618 [main:107] - replacing (!prope5, Boolean)
2021-03-12 01:13:05,618 [main:50] - replacing !prope5 Boolean
2021-03-12 01:13:05,618 [main:54] - Getting value of type Boolean
2021-03-12 01:13:05,759 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:13:05,762 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 01:13:05,762 [main:61] - GENERATED IS CALL =false
2021-03-12 01:13:06,033 [main:67] - randomType = Char?
2021-03-12 01:13:06,154 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:13:06,186 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Char defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@347f94ac]
2021-03-12 01:13:06,187 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92d847a]
2021-03-12 01:13:06,305 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:13:06,424 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:13:06,427 [main:78] - Generated call from random type = ('᪰')?.dec().equals('鉤', false)
2021-03-12 01:13:06,428 [main:106] - GETTING Boolean from String
2021-03-12 01:13:06,451 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3df8a0d8]]
2021-03-12 01:13:06,451 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]
2021-03-12 01:13:06,567 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:13:06,567 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3df8a0d8]
2021-03-12 01:13:06,685 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:13:06,688 [main:117] - GENERATED CALL = (stub({ "feqkq"})).equals("kjthu").and(true)
2021-03-12 01:13:06,688 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]]
2021-03-12 01:13:06,688 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]
2021-03-12 01:13:06,816 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:13:06,816 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]
2021-03-12 01:13:06,932 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:13:06,935 [main:117] - GENERATED CALL = (stub({ "feqkq"})).equals("kfifp").or(false)
2021-03-12 01:13:06,935 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fe28489]]
2021-03-12 01:13:06,935 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:13:07,075 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:07,078 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fe28489]
2021-03-12 01:13:07,078 [main:117] - GENERATED CALL = (stub({ "feqkq"})).get(-694041667).isLetter()
2021-03-12 01:13:07,078 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]]
2021-03-12 01:13:07,078 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]
2021-03-12 01:13:07,212 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:13:07,212 [main:117] - GENERATED CALL = (stub({ "feqkq"})).equals("zdkjx")
2021-03-12 01:13:07,212 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bd4a13]]
2021-03-12 01:13:07,212 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:13:07,334 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:07,455 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:07,458 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bd4a13]
2021-03-12 01:13:07,576 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:13:07,579 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:13:07,582 [main:117] - GENERATED CALL = (stub({ "feqkq"})).subSequence(863635354, -1997631173).all({a: Char -> true})
2021-03-12 01:13:07,582 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b823c34]]
2021-03-12 01:13:07,582 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:13:07,699 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:07,820 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:07,823 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b823c34]
2021-03-12 01:13:07,823 [main:117] - GENERATED CALL = (stub({ "feqkq"})).subSequence(-608950040, 1839787833).isNotEmpty()
2021-03-12 01:13:07,823 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bd4a13]]
2021-03-12 01:13:07,823 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bd4a13]
2021-03-12 01:13:07,940 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:13:07,943 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:13:07,946 [main:117] - GENERATED CALL = (stub({ "feqkq"})).all({a: Char -> true})
2021-03-12 01:13:07,946 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@642a041d]]
2021-03-12 01:13:07,946 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:13:08,063 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:08,066 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@642a041d]
2021-03-12 01:13:08,066 [main:117] - GENERATED CALL = (stub({ "feqkq"})).get(1493870583).isWhitespace()
2021-03-12 01:13:08,067 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a1bce3]]
2021-03-12 01:13:08,067 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a1bce3]
2021-03-12 01:13:08,203 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:13:08,206 [main:117] - GENERATED CALL = (stub({ "feqkq"})).startsWith(stub({ "feqkq"}), false)
2021-03-12 01:13:08,206 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6458768e]]
2021-03-12 01:13:08,206 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:13:08,344 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:08,460 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:08,463 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6458768e]
2021-03-12 01:13:08,464 [main:117] - GENERATED CALL = (stub({ "feqkq"})).subSequence(693384623, 1837129367).any()
2021-03-12 01:13:08,464 [main:114] - replacement of !prope5 of type Boolean is (stub({ "feqkq"})).get(-694041667).isLetter()
2021-03-12 01:13:08,582 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:13:08,582 [main:66] - Compilation checking started
2021-03-12 01:13:09,244 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:13:09,247 [main:107] - replacing (c, Continuation<*>)
2021-03-12 01:13:09,248 [main:50] - replacing c Continuation<*>
2021-03-12 01:13:09,249 [main:54] - Getting value of type Continuation<*>
2021-03-12 01:13:09,374 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 01:13:09,500 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 01:13:09,504 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 01:13:09,948 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 01:13:10,071 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:13:10,075 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:13:10,343 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 01:13:10,468 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:13:10,472 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:13:10,888 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:13:10,888 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:13:10,888 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 01:13:10,888 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 01:13:11,174 [main:67] - randomType = Float?
2021-03-12 01:13:11,293 [main:302] - generating value of type = Float true depth = 0
2021-03-12 01:13:11,326 [main:106] - GETTING Continuation<*> from String
2021-03-12 01:13:11,343 [main:106] - GETTING Continuation<*> from String
2021-03-12 01:13:11,344 [main:106] - GETTING Continuation<*> from String
2021-03-12 01:13:11,344 [main:106] - GETTING Continuation<*> from List<String>
2021-03-12 01:13:11,368 [main:106] - GETTING Continuation<*> from A
2021-03-12 01:13:11,373 [main:106] - GETTING Continuation<*> from Array<String>
2021-03-12 01:13:11,382 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 01:13:11,382 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 01:13:11,382 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 01:13:11,382 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 01:13:11,499 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 01:13:11,504 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 01:13:11,515 [main:67] - randomType = Kla4
2021-03-12 01:13:11,636 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 01:13:11,638 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 01:13:11,646 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 01:13:11,675 [main:106] - GETTING EmptyCoroutineContext from Array<String>
2021-03-12 01:13:11,689 [main:106] - GETTING EmptyCoroutineContext from List<String>
2021-03-12 01:13:11,721 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 01:13:11,721 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 01:13:11,728 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 01:13:11,728 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 01:13:11,728 [main:107] - replacing (prope4++, Int)
2021-03-12 01:13:11,728 [main:50] - replacing prope4++ Int
2021-03-12 01:13:11,728 [main:54] - Getting value of type Int
2021-03-12 01:13:11,846 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:11,849 [main:58] - GENERATED VALUE OF TYPE Int = 2082746309
2021-03-12 01:13:11,849 [main:61] - GENERATED IS CALL =false
2021-03-12 01:13:11,854 [main:67] - randomType = String
2021-03-12 01:13:11,972 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:13:11,996 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dd7feb7]
2021-03-12 01:13:12,114 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:12,117 [main:78] - Generated call from random type = ("owudh").length.shr(1223824968)
2021-03-12 01:13:12,117 [main:114] - replacement of prope4++ of type Int is ("owudh").length.shr(1223824968)
2021-03-12 01:13:12,236 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:13:12,236 [main:66] - Compilation checking started
2021-03-12 01:13:12,892 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:13:12,895 [main:107] - replacing ("Continuation " + c, String)
2021-03-12 01:13:12,895 [main:50] - replacing "Continuation " + c String
2021-03-12 01:13:12,896 [main:54] - Getting value of type String
2021-03-12 01:13:13,041 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:13:13,046 [main:58] - GENERATED VALUE OF TYPE String = "uehlf"
2021-03-12 01:13:13,046 [main:61] - GENERATED IS CALL =false
2021-03-12 01:13:13,064 [main:67] - randomType = Kla1
2021-03-12 01:13:13,207 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 01:13:13,210 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-12 01:13:13,350 [main:194] - Type params = []
2021-03-12 01:13:13,470 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 01:13:13,594 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:13:13,597 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:13:13,861 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 01:13:13,988 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:13:13,992 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:13:14,440 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-12 01:13:14,572 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:13:14,576 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:13:14,990 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:13:14,990 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:13:14,991 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:13:15,004 [main:106] - GETTING String from List<String>
2021-03-12 01:13:15,027 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.elementAtOrNull(index: kotlin.Int): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@26de2bf8]]
2021-03-12 01:13:15,027 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.elementAtOrNull(index: kotlin.Int): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@26de2bf8]
2021-03-12 01:13:15,144 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:15,147 [main:117] - GENERATED CALL = (s.map(a::map)).elementAtOrNull(1960159562)
2021-03-12 01:13:15,147 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.findLast(predicate: (T) -> kotlin.Boolean): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@46ae23ca]]
2021-03-12 01:13:15,147 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.findLast(predicate: (T) -> kotlin.Boolean): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@46ae23ca]
2021-03-12 01:13:15,264 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 01:13:15,267 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:13:15,270 [main:117] - GENERATED CALL = (s.map(a::map)).findLast({a: T -> true})
2021-03-12 01:13:15,270 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]]
2021-03-12 01:13:15,270 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903]
2021-03-12 01:13:15,388 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:15,391 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]
2021-03-12 01:13:15,507 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:13:15,510 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:13:15,513 [main:117] - GENERATED CALL = (s.map(a::map)).get(-132537861).dropLastWhile({a: Char -> false})
2021-03-12 01:13:15,513 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e748520]]
2021-03-12 01:13:15,513 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903]
2021-03-12 01:13:15,628 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:15,631 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e748520]
2021-03-12 01:13:15,631 [main:117] - GENERATED CALL = (s.map(a::map)).get(1773704992).trimStart()
2021-03-12 01:13:15,632 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.min(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@aa09e8d]]
2021-03-12 01:13:15,632 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.min(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@aa09e8d]
2021-03-12 01:13:15,632 [main:117] - GENERATED CALL = (s.map(a::map)).min()
2021-03-12 01:13:15,632 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component5(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@620c558e]]
2021-03-12 01:13:15,632 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component5(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@620c558e]
2021-03-12 01:13:15,632 [main:117] - GENERATED CALL = (s.map(a::map)).component5()
2021-03-12 01:13:15,632 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c072050]]
2021-03-12 01:13:15,632 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903]
2021-03-12 01:13:15,773 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:15,776 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c072050]
2021-03-12 01:13:15,894 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:13:16,018 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:13:16,021 [main:117] - GENERATED CALL = (s.map(a::map)).get(911323672).replaceAfterLast('셎', "outam", A("lhnqj").map())
2021-03-12 01:13:16,022 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.minBy(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6cfd4e82]]
2021-03-12 01:13:16,022 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.minBy(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6cfd4e82]
2021-03-12 01:13:16,141 [main:302] - generating value of type = Function1<T, R> false depth = 0
2021-03-12 01:13:16,143 [main:302] - generating value of type = R false depth = 1
2021-03-12 01:13:16,574 [main:43] - GENERATING CALL OF fun <R> run(block: ()->List<Kla1?>): R = TODO()
2021-03-12 01:13:16,578 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->List<Kla1?>): R = TODO()
2021-03-12 01:13:16,842 [main:302] - generating value of type = Function0<List<Kla1?>> false depth = 4
2021-03-12 01:13:16,845 [main:302] - generating value of type = List<Kla1?> false depth = 5
2021-03-12 01:13:16,969 [main:43] - GENERATING CALL OF fun <T> emptyList(): List<Kla1?> = TODO()
2021-03-12 01:13:16,973 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyList(): List<Kla1?> = TODO()
2021-03-12 01:13:17,099 [main:95] - GENERATED = emptyList<Kla1?>()
2021-03-12 01:13:17,099 [main:95] - GENERATED = run<List<Kla1?>>({ emptyList<Kla1?>()})
2021-03-12 01:13:17,099 [main:117] - GENERATED CALL = (s.map(a::map)).minBy({a: T -> run<List<Kla1?>>({ emptyList<Kla1?>()})})
2021-03-12 01:13:17,099 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f7c18e5]]
2021-03-12 01:13:17,099 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903]
2021-03-12 01:13:17,216 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:17,219 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f7c18e5]
2021-03-12 01:13:17,219 [main:117] - GENERATED CALL = (s.map(a::map)).get(-1602247481).replaceIndent(stub({ "feqkq"}))
2021-03-12 01:13:17,219 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]]
2021-03-12 01:13:17,219 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903]
2021-03-12 01:13:17,357 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:17,360 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]
2021-03-12 01:13:17,495 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:13:17,498 [main:117] - GENERATED CALL = (s.map(a::map)).get(1442460582).substringBeforeLast('ꠦ', A("lhnqj").map())
2021-03-12 01:13:17,498 [main:114] - replacement of "Continuation " + c of type String is (s.map(a::map)).findLast({a: T -> true})
2021-03-12 01:13:17,617 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:13:17,617 [main:66] - Compilation checking started
2021-03-12 01:13:18,002 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((s.map(a::map)).findLast({a: T -> true}) + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:13:18,004 [main:107] - replacing ("tail-call optimization hit: method " + method, String)
2021-03-12 01:13:18,005 [main:50] - replacing "tail-call optimization hit: method " + method String
2021-03-12 01:13:18,005 [main:54] - Getting value of type String
2021-03-12 01:13:18,138 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:13:18,141 [main:58] - GENERATED VALUE OF TYPE String = "earkc"
2021-03-12 01:13:18,141 [main:61] - GENERATED IS CALL =false
2021-03-12 01:13:18,152 [main:67] - randomType = Kla4
2021-03-12 01:13:18,277 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 01:13:18,280 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 01:13:18,285 [main:106] - GETTING String from String
2021-03-12 01:13:18,309 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e748520]]
2021-03-12 01:13:18,309 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e748520]
2021-03-12 01:13:18,310 [main:117] - GENERATED CALL = (A("lhnqj").map()).trimStart()
2021-03-12 01:13:18,310 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:13:18,310 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:13:18,310 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:13:18,428 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:18,431 [main:117] - GENERATED CALL = (A("lhnqj").map()).compareTo(A("lhnqj").map()).toString(292332698)
2021-03-12 01:13:18,431 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706fa500]]
2021-03-12 01:13:18,432 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706fa500]
2021-03-12 01:13:18,554 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:13:18,557 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:13:18,560 [main:117] - GENERATED CALL = (A("lhnqj").map()).takeWhile({a: Char -> true})
2021-03-12 01:13:18,560 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]]
2021-03-12 01:13:18,560 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]
2021-03-12 01:13:18,676 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:18,679 [main:117] - GENERATED CALL = (A("lhnqj").map()).dropLast(1869748436)
2021-03-12 01:13:18,679 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]]
2021-03-12 01:13:18,679 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]
2021-03-12 01:13:18,797 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:13:18,928 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:13:18,931 [main:117] - GENERATED CALL = (A("lhnqj").map()).commonPrefixWith("fvyot", true)
2021-03-12 01:13:18,931 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]]
2021-03-12 01:13:18,931 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]
2021-03-12 01:13:19,058 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:19,061 [main:117] - GENERATED CALL = (A("lhnqj").map()).takeLast(-1120008069)
2021-03-12 01:13:19,062 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]]
2021-03-12 01:13:19,062 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]
2021-03-12 01:13:19,062 [main:117] - GENERATED CALL = (A("lhnqj").map()).prependIndent(A("lhnqj").map())
2021-03-12 01:13:19,062 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ad4cc3f]]
2021-03-12 01:13:19,062 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:13:19,179 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:19,299 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:19,302 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ad4cc3f]
2021-03-12 01:13:19,419 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 01:13:19,542 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 01:13:19,546 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 01:13:19,937 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:13:19,940 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 01:13:19,946 [main:95] - GENERATED = Regex("yoxio", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 01:13:20,069 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 01:13:20,072 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 01:13:20,078 [main:117] - GENERATED CALL = (A("lhnqj").map()).subSequence(-1217408147, -771575703).replace(Regex("yoxio", kotlin.text.RegexOption.IGNORE_CASE), {a: MatchResult -> StringBuilder()})
2021-03-12 01:13:20,078 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]]
2021-03-12 01:13:20,079 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]
2021-03-12 01:13:20,199 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:13:20,202 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:13:20,205 [main:117] - GENERATED CALL = (A("lhnqj").map()).filterNot({a: Char -> true})
2021-03-12 01:13:20,205 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e61f45]]
2021-03-12 01:13:20,205 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e61f45]
2021-03-12 01:13:20,323 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:13:20,498 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:13:20,502 [main:117] - GENERATED CALL = (A("lhnqj").map()).replaceBefore('', A("lhnqj").z, "iqoot")
2021-03-12 01:13:20,502 [main:114] - replacement of "tail-call optimization hit: method " + method of type String is (A("lhnqj").map()).subSequence(-1217408147, -771575703).replace(Regex("yoxio", kotlin.text.RegexOption.IGNORE_CASE), {a: MatchResult -> StringBuilder()})
2021-03-12 01:13:20,635 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:13:20,636 [main:66] - Compilation checking started
2021-03-12 01:13:21,031 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((A("lhnqj").map()).subSequence(-1217408147, -771575703).replace(Regex("yoxio", kotlin.text.RegexOption.IGNORE_CASE), {a: MatchResult -> StringBuilder()}) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:13:21,033 [main:107] - replacing (prope4 != numberOfSuspensions, Boolean)
2021-03-12 01:13:21,033 [main:50] - replacing prope4 != numberOfSuspensions Boolean
2021-03-12 01:13:21,033 [main:54] - Getting value of type Boolean
2021-03-12 01:13:21,162 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:13:21,165 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 01:13:21,165 [main:61] - GENERATED IS CALL =false
2021-03-12 01:13:21,170 [main:67] - randomType = Int
2021-03-12 01:13:21,295 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:21,329 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3734e41b]
2021-03-12 01:13:21,329 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@61fe7da7]
2021-03-12 01:13:21,450 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:13:21,451 [main:78] - Generated call from random type = (1798815733).toFloat().equals("iiyun")
2021-03-12 01:13:21,452 [main:106] - GETTING Boolean from Array<String>
2021-03-12 01:13:21,465 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Array<*>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@74884fdd]]
2021-03-12 01:13:21,465 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Array<*>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@74884fdd]
2021-03-12 01:13:21,466 [main:117] - GENERATED CALL = (s).isNullOrEmpty()
2021-03-12 01:13:21,466 [main:113] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun <T> kotlin.Array<out T>.contentEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3d29a22d]]
2021-03-12 01:13:21,466 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun <T> kotlin.Array<out T>.contentEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3d29a22d]
2021-03-12 01:13:21,585 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-12 01:13:21,714 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-12 01:13:21,718 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-12 01:13:21,844 [main:95] - GENERATED = emptyArray<T>()
2021-03-12 01:13:21,844 [main:117] - GENERATED CALL = (s).contentEquals(emptyArray<T>())
2021-03-12 01:13:21,844 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1c290b82]]
2021-03-12 01:13:21,844 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1c290b82]
2021-03-12 01:13:21,844 [main:117] - GENERATED CALL = (s).isNotEmpty()
2021-03-12 01:13:21,844 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a1bce3]]
2021-03-12 01:13:21,844 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:13:21,965 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:21,968 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a1bce3]
2021-03-12 01:13:22,101 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:13:22,104 [main:117] - GENERATED CALL = (s).get(1906071606).startsWith(stub({ "feqkq"}), true)
2021-03-12 01:13:22,105 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14ca80b4]]
2021-03-12 01:13:22,105 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a]
2021-03-12 01:13:22,225 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:13:22,225 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14ca80b4]
2021-03-12 01:13:22,226 [main:117] - GENERATED CALL = (s).equals("jomqs").not()
2021-03-12 01:13:22,226 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@550cc78c]]
2021-03-12 01:13:22,226 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:13:22,346 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:22,349 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@550cc78c]
2021-03-12 01:13:22,475 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:13:22,607 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:13:22,610 [main:117] - GENERATED CALL = (s).get(1369006783).endsWith("zykye", true)
2021-03-12 01:13:22,611 [main:113] - Case = [public final operator fun set(index: kotlin.Int, value: kotlin.String): kotlin.Unit defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@505c33f5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@5ea3d8ed]]
2021-03-12 01:13:22,611 [main:149] - GENERATING call of type public final operator fun set(index: kotlin.Int, value: kotlin.String): kotlin.Unit defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@505c33f5]
2021-03-12 01:13:22,728 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:22,731 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@5ea3d8ed]
2021-03-12 01:13:22,849 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:13:22,849 [main:117] - GENERATED CALL = (s).set(-1089582384, stub({ "feqkq"})).equals("fcoqo")
2021-03-12 01:13:22,849 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]]
2021-03-12 01:13:22,849 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a]
2021-03-12 01:13:22,973 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:13:22,973 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]
2021-03-12 01:13:23,095 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:13:23,098 [main:117] - GENERATED CALL = (s).equals("dtsmq").xor(false)
2021-03-12 01:13:23,098 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@388bb1cd]]
2021-03-12 01:13:23,098 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:13:23,216 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:23,219 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@388bb1cd]
2021-03-12 01:13:23,219 [main:117] - GENERATED CALL = (s).get(409561462).toBoolean()
2021-03-12 01:13:23,219 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]]
2021-03-12 01:13:23,219 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a]
2021-03-12 01:13:23,342 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:13:23,342 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]
2021-03-12 01:13:23,493 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:13:23,496 [main:117] - GENERATED CALL = (s).equals("kynpb").or(false)
2021-03-12 01:13:23,496 [main:114] - replacement of prope4 != numberOfSuspensions of type Boolean is (s).equals("jomqs").not()
2021-03-12 01:13:23,632 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:13:23,633 [main:66] - Compilation checking started
2021-03-12 01:13:24,255 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:13:24,258 [main:107] - replacing (prope6, Function0<Unit>)
2021-03-12 01:13:24,259 [main:50] - replacing prope6 Function0<Unit>
2021-03-12 01:13:24,260 [main:54] - Getting value of type Function0<Unit>
2021-03-12 01:13:24,398 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 01:13:24,401 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:13:24,525 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:13:24,531 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:13:24,841 [main:302] - generating value of type = Any false depth = 4
2021-03-12 01:13:24,842 [main:95] - GENERATED = print("tiyou")
2021-03-12 01:13:24,842 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("tiyou")}
2021-03-12 01:13:24,842 [main:61] - GENERATED IS CALL =false
2021-03-12 01:13:24,985 [main:67] - randomType = Double
2021-03-12 01:13:25,109 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:13:25,146 [main:106] - GETTING Function0<Unit> from String
2021-03-12 01:13:25,166 [main:106] - GETTING Function0<Unit> from A
2021-03-12 01:13:25,172 [main:106] - GETTING Function0<Unit> from Array<String>
2021-03-12 01:13:25,185 [main:106] - GETTING Function0<Unit> from String
2021-03-12 01:13:25,186 [main:106] - GETTING Function0<Unit> from List<String>
2021-03-12 01:13:25,212 [main:106] - GETTING Function0<Unit> from String
2021-03-12 01:13:25,212 [main:114] - replacement of prope6 of type Function0<Unit> is { print("tiyou")}
2021-03-12 01:13:25,343 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 01:13:25,344 [main:66] - Compilation checking started
2021-03-12 01:13:25,704 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.{ print("tiyou")} = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:13:25,706 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 01:13:25,707 [main:50] - replacing getOrThrow() Ty0
2021-03-12 01:13:25,707 [main:54] - Getting value of type Ty0
2021-03-12 01:13:25,828 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 01:13:25,834 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 01:13:26,126 [main:67] - randomType = List<Kla5?>
2021-03-12 01:13:26,128 [main:106] - GETTING Ty0 from String
2021-03-12 01:13:26,148 [main:106] - GETTING Ty0 from Array<String>
2021-03-12 01:13:26,160 [main:106] - GETTING Ty0 from String
2021-03-12 01:13:26,161 [main:106] - GETTING Ty0 from String
2021-03-12 01:13:26,162 [main:106] - GETTING Ty0 from List<String>
2021-03-12 01:13:26,192 [main:106] - GETTING Ty0 from A
2021-03-12 01:13:26,196 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-12 01:13:26,196 [main:107] - replacing (" has no state-machine ", String)
2021-03-12 01:13:26,196 [main:50] - replacing " has no state-machine " String
2021-03-12 01:13:26,196 [main:54] - Getting value of type String
2021-03-12 01:13:26,320 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:13:26,323 [main:58] - GENERATED VALUE OF TYPE String = "dvqtj"
2021-03-12 01:13:26,323 [main:61] - GENERATED IS CALL =false
2021-03-12 01:13:26,630 [main:67] - randomType = ArrayList<Kla0?>
2021-03-12 01:13:26,749 [main:302] - generating value of type = ArrayList<Kla0?> false depth = 0
2021-03-12 01:13:26,877 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Kla0?): ArrayList<Kla0?> = TODO()
2021-03-12 01:13:26,881 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Kla0?): ArrayList<Kla0?> = TODO()
2021-03-12 01:13:27,012 [main:302] - generating value of type = Kla0 false depth = 3
2021-03-12 01:13:27,015 [main:112] - generating klass Kla0 text = data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}
2021-03-12 01:13:27,170 [main:194] - Type params = []
2021-03-12 01:13:27,288 [main:302] - generating value of type = String true depth = 5
2021-03-12 01:13:27,291 [main:95] - GENERATED = arrayListOf<Kla0?>(Kla0("sqfcm"))
2021-03-12 01:13:27,440 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@456d676d]
2021-03-12 01:13:27,440 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3d8904f8]
2021-03-12 01:13:27,441 [main:78] - Generated call from random type = (arrayListOf<Kla0?>(Kla0("sqfcm"))).toArray().contentToString()
2021-03-12 01:13:27,441 [main:106] - GETTING String from String
2021-03-12 01:13:27,456 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e61f45]]
2021-03-12 01:13:27,456 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e61f45]
2021-03-12 01:13:27,579 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:13:27,583 [main:117] - GENERATED CALL = (A("lhnqj").map()).replaceBefore('뷺', stub({ "feqkq"}), stub({ "feqkq"}))
2021-03-12 01:13:27,583 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56864111]]
2021-03-12 01:13:27,583 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:13:27,701 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:27,821 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:27,824 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56864111]
2021-03-12 01:13:27,941 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 01:13:28,073 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 01:13:28,077 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 01:13:28,474 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:13:28,477 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 01:13:28,480 [main:95] - GENERATED = Regex("uwhmg", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 01:13:28,481 [main:117] - GENERATED CALL = (A("lhnqj").map()).subSequence(600114340, -446724983).replaceFirst(Regex("uwhmg", kotlin.text.RegexOption.IGNORE_CASE), stub({ "feqkq"}))
2021-03-12 01:13:28,481 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@779dda8c]]
2021-03-12 01:13:28,481 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:13:28,599 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:28,602 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@779dda8c]
2021-03-12 01:13:28,603 [main:117] - GENERATED CALL = (A("lhnqj").map()).get(-1246254645).plus(stub({ "feqkq"}))
2021-03-12 01:13:28,603 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:13:28,603 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:13:28,745 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:28,749 [main:117] - GENERATED CALL = (A("lhnqj").map()).length.toString(1581440706)
2021-03-12 01:13:28,749 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]]
2021-03-12 01:13:28,749 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]
2021-03-12 01:13:28,866 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:28,869 [main:117] - GENERATED CALL = (A("lhnqj").map()).dropLast(-927767102)
2021-03-12 01:13:28,869 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:13:28,869 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:13:28,869 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:13:28,987 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:28,990 [main:117] - GENERATED CALL = (A("lhnqj").map()).compareTo(stub({ "feqkq"})).toString(-500236679)
2021-03-12 01:13:28,990 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]]
2021-03-12 01:13:28,990 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:13:29,108 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:29,230 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:29,233 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]
2021-03-12 01:13:29,356 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:29,482 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:29,485 [main:117] - GENERATED CALL = (A("lhnqj").map()).subSequence(302335387, -1313574531).substring(-1423027412, 2086996757)
2021-03-12 01:13:29,485 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]]
2021-03-12 01:13:29,485 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]
2021-03-12 01:13:29,611 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:13:29,734 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:13:29,855 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:13:29,858 [main:117] - GENERATED CALL = (A("lhnqj").map()).replace('뜑', '꣫', false)
2021-03-12 01:13:29,859 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]]
2021-03-12 01:13:29,859 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]
2021-03-12 01:13:29,983 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:13:29,986 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:13:29,989 [main:117] - GENERATED CALL = (A("lhnqj").map()).filterNot({a: Char -> true})
2021-03-12 01:13:29,989 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]]
2021-03-12 01:13:29,989 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]
2021-03-12 01:13:30,108 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:13:30,237 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:13:30,240 [main:117] - GENERATED CALL = (A("lhnqj").map()).replaceBeforeLast('㫀', "egvig", A("lhnqj").z)
2021-03-12 01:13:30,240 [main:114] - replacement of " has no state-machine " of type String is (A("lhnqj").map()).filterNot({a: Char -> true})
2021-03-12 01:13:30,386 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:13:30,386 [main:66] - Compilation checking started
2021-03-12 01:13:30,795 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + (A("lhnqj").map()).filterNot({a: Char -> true}) +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:13:30,797 [main:107] - replacing ("tail-call optimization miss: method at " + it + " has state-machine ", String)
2021-03-12 01:13:30,797 [main:50] - replacing "tail-call optimization miss: method at " + it + " has state-machine " String
2021-03-12 01:13:30,797 [main:54] - Getting value of type String
2021-03-12 01:13:30,921 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:13:30,924 [main:58] - GENERATED VALUE OF TYPE String = "psptn"
2021-03-12 01:13:30,924 [main:61] - GENERATED IS CALL =false
2021-03-12 01:13:30,936 [main:67] - randomType = Kla2
2021-03-12 01:13:31,062 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 01:13:31,066 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 01:13:31,085 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@4e7dcf03]
2021-03-12 01:13:31,085 [main:78] - Generated call from random type = (Kla2()).prope2?.toString()!!
2021-03-12 01:13:31,086 [main:106] - GETTING String from String
2021-03-12 01:13:31,101 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]]
2021-03-12 01:13:31,101 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:13:31,220 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:31,342 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:31,345 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]
2021-03-12 01:13:31,463 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:31,585 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:31,588 [main:117] - GENERATED CALL = (A("lhnqj").map()).subSequence(1318417345, 585950790).substring(867731296, -1595403404)
2021-03-12 01:13:31,589 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]]
2021-03-12 01:13:31,589 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]
2021-03-12 01:13:31,589 [main:117] - GENERATED CALL = (A("lhnqj").map()).lowercase()
2021-03-12 01:13:31,589 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:13:31,589 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:13:31,706 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:31,709 [main:117] - GENERATED CALL = (A("lhnqj").map()).length.toString(1299473871)
2021-03-12 01:13:31,709 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]]
2021-03-12 01:13:31,709 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]
2021-03-12 01:13:31,828 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:31,831 [main:117] - GENERATED CALL = (A("lhnqj").map()).drop(2063713438)
2021-03-12 01:13:31,832 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:13:31,832 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:13:31,832 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:13:31,973 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:31,976 [main:117] - GENERATED CALL = (A("lhnqj").map()).compareTo(stub({ "feqkq"})).toString(-1811691215)
2021-03-12 01:13:31,976 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]]
2021-03-12 01:13:31,976 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:13:32,095 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:32,098 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]
2021-03-12 01:13:32,098 [main:117] - GENERATED CALL = (A("lhnqj").map()).get(-1360745276).titlecase()
2021-03-12 01:13:32,099 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ed1eadc]]
2021-03-12 01:13:32,099 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ed1eadc]
2021-03-12 01:13:32,216 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:13:32,219 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:13:32,222 [main:117] - GENERATED CALL = (A("lhnqj").map()).filter({a: Char -> true})
2021-03-12 01:13:32,222 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0d521b]]
2021-03-12 01:13:32,222 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0d521b]
2021-03-12 01:13:32,222 [main:117] - GENERATED CALL = (A("lhnqj").map()).toUpperCase()
2021-03-12 01:13:32,222 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f7c18e5]]
2021-03-12 01:13:32,222 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f7c18e5]
2021-03-12 01:13:32,222 [main:117] - GENERATED CALL = (A("lhnqj").map()).replaceIndent(stub({ "feqkq"}))
2021-03-12 01:13:32,222 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a471dbf]]
2021-03-12 01:13:32,222 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a471dbf]
2021-03-12 01:13:32,340 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:13:32,344 [main:117] - GENERATED CALL = (A("lhnqj").map()).substringBefore('', A("lhnqj").z)
2021-03-12 01:13:32,344 [main:114] - replacement of "tail-call optimization miss: method at " + it + " has state-machine " of type String is (A("lhnqj").map()).compareTo(stub({ "feqkq"})).toString(-1811691215)
2021-03-12 01:13:32,465 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:13:32,465 [main:66] - Compilation checking started
2021-03-12 01:13:32,832 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error((A("lhnqj").map()).compareTo(stub({ "feqkq"})).toString(-1811691215) +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:13:32,834 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got ", String)
2021-03-12 01:13:32,834 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " String
2021-03-12 01:13:32,835 [main:54] - Getting value of type String
2021-03-12 01:13:32,953 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:13:32,956 [main:58] - GENERATED VALUE OF TYPE String = "gcisv"
2021-03-12 01:13:32,956 [main:61] - GENERATED IS CALL =false
2021-03-12 01:13:33,093 [main:67] - randomType = UByte
2021-03-12 01:13:33,209 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 01:13:33,242 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@119c6c02]
2021-03-12 01:13:33,242 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38059803]
2021-03-12 01:13:33,358 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:33,361 [main:78] - Generated call from random type = (118.toUByte()).toShort().toString(-2137637397)
2021-03-12 01:13:33,361 [main:106] - GETTING String from String
2021-03-12 01:13:33,386 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]]
2021-03-12 01:13:33,386 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]
2021-03-12 01:13:33,529 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:13:33,532 [main:117] - GENERATED CALL = (A("lhnqj").z).replaceIndentByMargin("rwcsg", A("lhnqj").map())
2021-03-12 01:13:33,532 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]]
2021-03-12 01:13:33,532 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]
2021-03-12 01:13:33,652 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:33,655 [main:117] - GENERATED CALL = (A("lhnqj").z).takeLast(457544520)
2021-03-12 01:13:33,655 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507f736]]
2021-03-12 01:13:33,655 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507f736]
2021-03-12 01:13:33,775 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:33,894 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:33,897 [main:117] - GENERATED CALL = (A("lhnqj").z).removeRange(-515364686, 1207292196)
2021-03-12 01:13:33,898 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]]
2021-03-12 01:13:33,898 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:13:34,014 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:34,017 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]
2021-03-12 01:13:34,017 [main:117] - GENERATED CALL = (A("lhnqj").z).get(-650550033).uppercase()
2021-03-12 01:13:34,017 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]]
2021-03-12 01:13:34,017 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]
2021-03-12 01:13:34,137 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:13:34,140 [main:117] - GENERATED CALL = (A("lhnqj").z).replaceAfter('琉', A("lhnqj").map(), stub({ "feqkq"}))
2021-03-12 01:13:34,140 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4997a579]]
2021-03-12 01:13:34,141 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4997a579]
2021-03-12 01:13:34,141 [main:117] - GENERATED CALL = (A("lhnqj").z).trimEnd()
2021-03-12 01:13:34,141 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]]
2021-03-12 01:13:34,141 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]
2021-03-12 01:13:34,141 [main:117] - GENERATED CALL = (A("lhnqj").z).trimIndent()
2021-03-12 01:13:34,141 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]]
2021-03-12 01:13:34,141 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:13:34,259 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:34,382 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:34,385 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]
2021-03-12 01:13:34,507 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:34,629 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:34,633 [main:117] - GENERATED CALL = (A("lhnqj").z).subSequence(299181717, 1049545256).substring(522424895, -772594962)
2021-03-12 01:13:34,633 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]]
2021-03-12 01:13:34,633 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]
2021-03-12 01:13:34,751 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:13:34,754 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:13:34,757 [main:117] - GENERATED CALL = (A("lhnqj").z).dropLastWhile({a: Char -> false})
2021-03-12 01:13:34,757 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@809c776]]
2021-03-12 01:13:34,757 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@809c776]
2021-03-12 01:13:34,902 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 01:13:34,905 [main:302] - generating value of type = Char true depth = 1
2021-03-12 01:13:34,909 [main:117] - GENERATED CALL = (A("lhnqj").z).replaceFirstChar({a: Char -> '떾'})
2021-03-12 01:13:34,909 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " of type String is (A("lhnqj").z).replaceAfter('琉', A("lhnqj").map(), stub({ "feqkq"}))
2021-03-12 01:13:35,040 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:13:35,041 [main:66] - Compilation checking started
2021-03-12 01:13:35,588 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error((A("lhnqj").z).replaceAfter('琉', A("lhnqj").map(), stub({ "feqkq"})) + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:13:35,591 [main:107] - replacing (i, Int)
2021-03-12 01:13:35,591 [main:50] - replacing i Int
2021-03-12 01:13:35,591 [main:54] - Getting value of type Int
2021-03-12 01:13:35,716 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:35,719 [main:58] - GENERATED VALUE OF TYPE Int = 99320775
2021-03-12 01:13:35,719 [main:61] - GENERATED IS CALL =false
2021-03-12 01:13:35,731 [main:67] - randomType = Kla1
2021-03-12 01:13:35,856 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 01:13:35,859 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-12 01:13:35,997 [main:194] - Type params = []
2021-03-12 01:13:36,117 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 01:13:36,246 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:13:36,250 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:13:36,527 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 01:13:36,657 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:13:36,661 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:13:37,112 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:13:37,112 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:13:37,127 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@364812ff]
2021-03-12 01:13:37,246 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:13:37,247 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@491e892a]
2021-03-12 01:13:37,364 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:13:37,368 [main:78] - Generated call from random type = (Kla1()).equals("hkpzc").compareTo(true)
2021-03-12 01:13:37,368 [main:114] - replacement of i of type Int is (Kla1()).equals("hkpzc").compareTo(true)
2021-03-12 01:13:37,492 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:13:37,492 [main:66] - Compilation checking started
2021-03-12 01:13:38,156 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:13:38,158 [main:107] - replacing ("tail-call optimization miss: method at ", String)
2021-03-12 01:13:38,158 [main:50] - replacing "tail-call optimization miss: method at " String
2021-03-12 01:13:38,159 [main:54] - Getting value of type String
2021-03-12 01:13:38,278 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:13:38,281 [main:58] - GENERATED VALUE OF TYPE String = "hgzgf"
2021-03-12 01:13:38,281 [main:61] - GENERATED IS CALL =false
2021-03-12 01:13:38,293 [main:67] - randomType = A
2021-03-12 01:13:38,410 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:13:38,413 [main:112] - generating klass A text = class A(val z: String) {
    fun map(s: String) = z + s
}
2021-03-12 01:13:38,531 [main:194] - Type params = []
2021-03-12 01:13:38,676 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:13:38,684 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@6503be87]
2021-03-12 01:13:38,684 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a16d90e]
2021-03-12 01:13:38,685 [main:78] - Generated call from random type = (A("kchyh")).map(stub({ "feqkq"})).concat(stub({ "feqkq"}))
2021-03-12 01:13:38,685 [main:106] - GETTING String from String
2021-03-12 01:13:38,700 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305e8885]]
2021-03-12 01:13:38,700 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:13:38,820 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:38,823 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305e8885]
2021-03-12 01:13:38,823 [main:117] - GENERATED CALL = (stub({ "feqkq"})).get(1154244874).lowercase()
2021-03-12 01:13:38,823 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ed1eadc]]
2021-03-12 01:13:38,823 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ed1eadc]
2021-03-12 01:13:38,948 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:13:38,951 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:13:38,955 [main:117] - GENERATED CALL = (stub({ "feqkq"})).filter({a: Char -> false})
2021-03-12 01:13:38,955 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]]
2021-03-12 01:13:38,955 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]
2021-03-12 01:13:39,075 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:13:39,078 [main:117] - GENERATED CALL = (stub({ "feqkq"})).prependIndent("ptnen")
2021-03-12 01:13:39,078 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f548ae4]]
2021-03-12 01:13:39,078 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f548ae4]
2021-03-12 01:13:39,195 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 01:13:39,198 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:13:39,201 [main:117] - GENERATED CALL = (stub({ "feqkq"})).filterIndexed({a: Int, b: Char -> true})
2021-03-12 01:13:39,201 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]]
2021-03-12 01:13:39,201 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:13:39,319 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:39,322 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]
2021-03-12 01:13:39,323 [main:117] - GENERATED CALL = (stub({ "feqkq"})).get(-306020694).titlecase()
2021-03-12 01:13:39,323 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d9973a9]]
2021-03-12 01:13:39,323 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d9973a9]
2021-03-12 01:13:39,448 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:13:39,568 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:13:39,572 [main:117] - GENERATED CALL = (stub({ "feqkq"})).substringAfter('', "dfoku")
2021-03-12 01:13:39,572 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]]
2021-03-12 01:13:39,572 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:13:39,689 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:39,810 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:39,813 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]
2021-03-12 01:13:39,932 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:13:40,055 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:13:40,059 [main:117] - GENERATED CALL = (stub({ "feqkq"})).subSequence(-1701688924, -2126618785).commonSuffixWith("ozlir", true)
2021-03-12 01:13:40,059 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:13:40,059 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:13:40,059 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:13:40,181 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:40,184 [main:117] - GENERATED CALL = (stub({ "feqkq"})).compareTo(A("lhnqj").map()).toString(1262911090)
2021-03-12 01:13:40,184 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8422c70]]
2021-03-12 01:13:40,184 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8422c70]
2021-03-12 01:13:40,185 [main:117] - GENERATED CALL = (stub({ "feqkq"})).capitalize()
2021-03-12 01:13:40,185 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]]
2021-03-12 01:13:40,185 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]
2021-03-12 01:13:40,327 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:13:40,333 [main:117] - GENERATED CALL = (stub({ "feqkq"})).removePrefix("zitdx")
2021-03-12 01:13:40,333 [main:114] - replacement of "tail-call optimization miss: method at " of type String is (stub({ "feqkq"})).compareTo(A("lhnqj").map()).toString(1262911090)
2021-03-12 01:13:40,469 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:13:40,469 [main:66] - Compilation checking started
2021-03-12 01:13:40,863 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error((stub({ "feqkq"})).compareTo(A("lhnqj").map()).toString(1262911090) + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:13:40,865 [main:107] - replacing (c, Continuation<Unit>)
2021-03-12 01:13:40,865 [main:50] - replacing c Continuation<Unit>
2021-03-12 01:13:40,865 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 01:13:40,992 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 01:13:41,119 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 01:13:41,123 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 01:13:41,537 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 01:13:41,660 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:13:41,664 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:13:41,931 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 01:13:42,095 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:13:42,099 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:13:42,504 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:13:42,504 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:13:42,504 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 01:13:42,504 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 01:13:43,232 [main:67] - randomType = Function2<Kla2, Collection<Sequence<Kla5>>, ArrayList<Float>>
2021-03-12 01:13:43,233 [main:106] - GETTING Continuation<Unit> from List<String>
2021-03-12 01:13:43,259 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 01:13:43,277 [main:106] - GETTING Continuation<Unit> from Array<String>
2021-03-12 01:13:43,288 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 01:13:43,289 [main:106] - GETTING Continuation<Unit> from A
2021-03-12 01:13:43,294 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 01:13:43,294 [main:111] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-12 01:13:43,294 [main:107] - replacing (it, Continuation<Unit>)
2021-03-12 01:13:43,294 [main:50] - replacing it Continuation<Unit>
2021-03-12 01:13:43,294 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 01:13:43,410 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 01:13:43,534 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 01:13:43,538 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 01:13:43,967 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 01:13:44,091 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:13:44,095 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:13:44,371 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 01:13:44,504 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:13:44,508 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:13:44,919 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 01:13:45,045 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:13:45,049 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:13:45,456 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:13:45,457 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:13:45,457 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:13:45,457 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 01:13:45,457 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 01:13:45,757 [main:67] - randomType = Pair<Char, ULong>
2021-03-12 01:13:45,876 [main:302] - generating value of type = Pair<Char, ULong> false depth = 0
2021-03-12 01:13:46,001 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Char, second: ULong): Pair<Char, ULong> = TODO()
2021-03-12 01:13:46,005 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Char, second: ULong): Pair<Char, ULong> = TODO()
2021-03-12 01:13:46,129 [main:302] - generating value of type = Char true depth = 3
2021-03-12 01:13:46,132 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 01:13:46,135 [main:95] - GENERATED = Pair<Char, ULong>('￫', 2187472429540447178.toULong())
2021-03-12 01:13:46,148 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 01:13:46,168 [main:106] - GETTING Continuation<Unit> from Array<String>
2021-03-12 01:13:46,182 [main:106] - GETTING Continuation<Unit> from A
2021-03-12 01:13:46,189 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 01:13:46,190 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 01:13:46,191 [main:106] - GETTING Continuation<Unit> from List<String>
2021-03-12 01:13:46,221 [main:111] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-12 01:13:46,221 [main:107] - replacing (prope2, Result<Ty0>)
2021-03-12 01:13:46,221 [main:50] - replacing prope2 Result<Ty0>
2021-03-12 01:13:46,221 [main:54] - Getting value of type Result<Ty0>
2021-03-12 01:13:46,343 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 01:13:46,473 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 01:13:46,477 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 01:13:46,740 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 01:13:46,740 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 01:13:46,746 [main:67] - randomType = Int
2021-03-12 01:13:46,865 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:46,906 [main:106] - GETTING Result<Ty0> from String
2021-03-12 01:13:46,930 [main:106] - GETTING Result<Ty0> from String
2021-03-12 01:13:46,931 [main:106] - GETTING Result<Ty0> from String
2021-03-12 01:13:46,932 [main:106] - GETTING Result<Ty0> from A
2021-03-12 01:13:46,940 [main:106] - GETTING Result<Ty0> from Array<String>
2021-03-12 01:13:46,954 [main:106] - GETTING Result<Ty0> from List<String>
2021-03-12 01:13:46,977 [main:111] - Cant find and generate replacement for prope2 type Result<Ty0>
2021-03-12 01:13:46,978 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-12 01:13:46,978 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-12 01:13:46,978 [main:54] - Getting value of type String
2021-03-12 01:13:47,097 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:13:47,100 [main:58] - GENERATED VALUE OF TYPE String = "nvbtf"
2021-03-12 01:13:47,100 [main:61] - GENERATED IS CALL =false
2021-03-12 01:13:49,300 [main:67] - randomType = Triple<UInt, UByte, Function2<HashMap<Function2<Set<Kla6>, Int, LinkedHashSet<Kla0>>, Kla6>, ArrayList<Long?>, UShort>>?
2021-03-12 01:13:49,448 [main:302] - generating value of type = Triple<UInt, UByte, Function2<HashMap<Function2<Set<Kla6>, Int, LinkedHashSet<Kla0>>, Kla6>, ArrayList<Long?>, UShort>> false depth = 0
2021-03-12 01:13:49,583 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: UInt, second: UByte, third: Function2<HashMap<Function2<Set<Kla6>, Int, LinkedHashSet<Kla0>>, Kla6>, ArrayList<Long?>, UShort>): Triple<UInt, UByte, Function2<HashMap<Function2<Set<Kla6>, Int, LinkedHashSet<Kla0>>, Kla6>, ArrayList<Long?>, UShort>> = TODO()
2021-03-12 01:13:49,587 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: UInt, second: UByte, third: Function2<HashMap<Function2<Set<Kla6>, Int, LinkedHashSet<Kla0>>, Kla6>, ArrayList<Long?>, UShort>): Triple<UInt, UByte, Function2<HashMap<Function2<Set<Kla6>, Int, LinkedHashSet<Kla0>>, Kla6>, ArrayList<Long?>, UShort>> = TODO()
2021-03-12 01:13:49,711 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 01:13:49,714 [main:302] - generating value of type = UByte true depth = 3
2021-03-12 01:13:49,717 [main:302] - generating value of type = Function2<HashMap<Function2<Set<Kla6>, Int, LinkedHashSet<Kla0>>, Kla6>, ArrayList<Long?>, UShort> false depth = 3
2021-03-12 01:13:49,720 [main:302] - generating value of type = UShort true depth = 4
2021-03-12 01:13:49,723 [main:95] - GENERATED = Triple<UInt, UByte, Function2<HashMap<Function2<Set<Kla6>, Int, LinkedHashSet<Kla0>>, Kla6>, ArrayList<Long?>, UShort>>(1353783063.toUInt(), 76.toUByte(), {a: HashMap<Function2<Set<Kla6>, Int, LinkedHashSet<Kla0>>, Kla6>, b: ArrayList<Long?> -> 3570.toUShort()})
2021-03-12 01:13:49,773 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@573d4ab0]
2021-03-12 01:13:49,888 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:49,892 [main:78] - Generated call from random type = (Triple<UInt, UByte, Function2<HashMap<Function2<Set<Kla6>, Int, LinkedHashSet<Kla0>>, Kla6>, ArrayList<Long?>, UShort>>(1353783063.toUInt(), 76.toUByte(), {a: HashMap<Function2<Set<Kla6>, Int, LinkedHashSet<Kla0>>, Kla6>, b: ArrayList<Long?> -> 3570.toUShort()}))?.second.toString(1344963581)
2021-03-12 01:13:49,892 [main:106] - GETTING String from String
2021-03-12 01:13:49,912 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]]
2021-03-12 01:13:49,912 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]
2021-03-12 01:13:50,027 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:13:50,033 [main:117] - GENERATED CALL = (stub({ "feqkq"})).removeSurrounding("ghdcb")
2021-03-12 01:13:50,033 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e37e3ea]]
2021-03-12 01:13:50,033 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e37e3ea]
2021-03-12 01:13:50,149 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:50,267 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:50,386 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:13:50,392 [main:117] - GENERATED CALL = (stub({ "feqkq"})).replaceRange(704162585, -1526543441, "gkfbc")
2021-03-12 01:13:50,392 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]]
2021-03-12 01:13:50,392 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]
2021-03-12 01:13:50,507 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:13:50,626 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:13:50,745 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:13:50,748 [main:117] - GENERATED CALL = (stub({ "feqkq"})).replace('繂', '?', true)
2021-03-12 01:13:50,749 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]]
2021-03-12 01:13:50,749 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:13:50,867 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:50,986 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:50,989 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]
2021-03-12 01:13:51,107 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:13:51,231 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:13:51,234 [main:117] - GENERATED CALL = (stub({ "feqkq"})).subSequence(1415110661, -184415437).commonSuffixWith(StringBuilder(), true)
2021-03-12 01:13:51,234 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]]
2021-03-12 01:13:51,234 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]
2021-03-12 01:13:51,375 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:13:51,379 [main:117] - GENERATED CALL = (stub({ "feqkq"})).replaceBeforeLast('틚', A("lhnqj").z, A("lhnqj").map())
2021-03-12 01:13:51,379 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]]
2021-03-12 01:13:51,379 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]
2021-03-12 01:13:51,379 [main:117] - GENERATED CALL = (stub({ "feqkq"})).replaceIndentByMargin(stub({ "feqkq"}), A("lhnqj").map())
2021-03-12 01:13:51,379 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]]
2021-03-12 01:13:51,379 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:13:51,497 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:51,616 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:51,619 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]
2021-03-12 01:13:51,735 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:51,855 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:51,858 [main:117] - GENERATED CALL = (stub({ "feqkq"})).subSequence(-1253299266, 453820018).substring(-2003651048, -1788982265)
2021-03-12 01:13:51,858 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52806f8a]]
2021-03-12 01:13:51,858 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52806f8a]
2021-03-12 01:13:51,858 [main:117] - GENERATED CALL = (stub({ "feqkq"})).trimMargin(stub({ "feqkq"}))
2021-03-12 01:13:51,859 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]]
2021-03-12 01:13:51,859 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]
2021-03-12 01:13:51,975 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:13:51,976 [main:117] - GENERATED CALL = (stub({ "feqkq"})).plus("cchsy")
2021-03-12 01:13:51,976 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]]
2021-03-12 01:13:51,976 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]
2021-03-12 01:13:52,094 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:13:52,100 [main:117] - GENERATED CALL = (stub({ "feqkq"})).removePrefix("ypegv")
2021-03-12 01:13:52,100 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is (stub({ "feqkq"})).replace('繂', '?', true)
2021-03-12 01:13:52,217 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:13:52,217 [main:66] - Compilation checking started
2021-03-12 01:13:52,880 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:13:52,884 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 01:13:52,885 [main:50] - replacing {} Function0<Unit>
2021-03-12 01:13:52,885 [main:54] - Getting value of type Function0<Unit>
2021-03-12 01:13:53,030 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 01:13:53,033 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:13:53,165 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:13:53,169 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:13:53,434 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 01:13:53,437 [main:95] - GENERATED = check(true)
2021-03-12 01:13:53,437 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-12 01:13:53,437 [main:61] - GENERATED IS CALL =false
2021-03-12 01:13:53,449 [main:67] - randomType = Kla1
2021-03-12 01:13:53,572 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 01:13:53,575 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-12 01:13:53,724 [main:194] - Type params = []
2021-03-12 01:13:53,840 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 01:13:53,964 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:13:53,968 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:13:54,238 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 01:13:54,367 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:13:54,371 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:13:54,782 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-12 01:13:54,910 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:13:54,914 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:13:55,326 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:13:55,326 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:13:55,326 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:13:55,345 [main:106] - GETTING Function0<Unit> from A
2021-03-12 01:13:55,349 [main:106] - GETTING Function0<Unit> from String
2021-03-12 01:13:55,366 [main:106] - GETTING Function0<Unit> from String
2021-03-12 01:13:55,368 [main:106] - GETTING Function0<Unit> from List<String>
2021-03-12 01:13:55,392 [main:106] - GETTING Function0<Unit> from String
2021-03-12 01:13:55,393 [main:106] - GETTING Function0<Unit> from Array<String>
2021-03-12 01:13:55,402 [main:114] - replacement of {} of type Function0<Unit> is { check(true)}
2021-03-12 01:13:55,519 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:13:55,520 [main:66] - Compilation checking started
2021-03-12 01:13:56,116 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:13:56,119 [main:107] - replacing (prope2.getOrThrow(), Ty0)
2021-03-12 01:13:56,121 [main:50] - replacing prope2.getOrThrow() Ty0
2021-03-12 01:13:56,121 [main:54] - Getting value of type Ty0
2021-03-12 01:13:56,260 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 01:13:56,266 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 01:13:56,408 [main:67] - randomType = Short
2021-03-12 01:13:56,529 [main:302] - generating value of type = Short true depth = 0
2021-03-12 01:13:56,562 [main:106] - GETTING Ty0 from A
2021-03-12 01:13:56,566 [main:106] - GETTING Ty0 from List<String>
2021-03-12 01:13:56,589 [main:106] - GETTING Ty0 from String
2021-03-12 01:13:56,606 [main:106] - GETTING Ty0 from Array<String>
2021-03-12 01:13:56,615 [main:106] - GETTING Ty0 from String
2021-03-12 01:13:56,616 [main:106] - GETTING Ty0 from String
2021-03-12 01:13:56,616 [main:111] - Cant find and generate replacement for prope2.getOrThrow() type Ty0
2021-03-12 01:13:56,616 [main:107] - replacing (prope2.getOrThrow(), Ty0)
2021-03-12 01:13:56,616 [main:50] - replacing prope2.getOrThrow() Ty0
2021-03-12 01:13:56,616 [main:54] - Getting value of type Ty0
2021-03-12 01:13:56,734 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 01:13:56,740 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 01:13:56,890 [main:67] - randomType = LinkedHashSet<Kla4>
2021-03-12 01:13:57,009 [main:302] - generating value of type = LinkedHashSet<Kla4> false depth = 0
2021-03-12 01:13:57,136 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Kla4): LkedHashSet<Kla4> = TODO()
2021-03-12 01:13:57,140 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Kla4): LkedHashSet<Kla4> = TODO()
2021-03-12 01:13:57,266 [main:302] - generating value of type = Kla4 false depth = 3
2021-03-12 01:13:57,269 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390))) }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 01:13:57,269 [main:95] - GENERATED = linkedSetOf<Kla4>(Kla4())
2021-03-12 01:13:57,391 [main:106] - GETTING Ty0 from String
2021-03-12 01:13:57,408 [main:106] - GETTING Ty0 from A
2021-03-12 01:13:57,412 [main:106] - GETTING Ty0 from List<String>
2021-03-12 01:13:57,436 [main:106] - GETTING Ty0 from String
2021-03-12 01:13:57,437 [main:106] - GETTING Ty0 from Array<String>
2021-03-12 01:13:57,447 [main:106] - GETTING Ty0 from String
2021-03-12 01:13:57,447 [main:111] - Cant find and generate replacement for prope2.getOrThrow() type Ty0
2021-03-12 01:13:57,447 [main:107] - replacing ("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390)), String)
2021-03-12 01:13:57,447 [main:50] - replacing "tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390)) String
2021-03-12 01:13:57,447 [main:54] - Getting value of type String
2021-03-12 01:13:57,566 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:13:57,569 [main:58] - GENERATED VALUE OF TYPE String = "sxcrh"
2021-03-12 01:13:57,569 [main:61] - GENERATED IS CALL =false
2021-03-12 01:13:58,163 [main:67] - randomType = HashMap<Double?, UInt>
2021-03-12 01:13:58,288 [main:302] - generating value of type = HashMap<Double?, UInt> false depth = 0
2021-03-12 01:13:58,419 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Double?, UInt> = TODO()
2021-03-12 01:13:58,423 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Double?, UInt> = TODO()
2021-03-12 01:13:58,548 [main:95] - GENERATED = linkedMapOf<Double?, UInt>()
2021-03-12 01:13:58,677 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:13:58,798 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:58,801 [main:78] - Generated call from random type = (linkedMapOf<Double?, UInt>()).size.toString(1860302888)
2021-03-12 01:13:58,802 [main:106] - GETTING String from List<String>
2021-03-12 01:13:58,826 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]]
2021-03-12 01:13:58,826 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903]
2021-03-12 01:13:58,945 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:58,948 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]
2021-03-12 01:13:59,070 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:13:59,073 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:13:59,077 [main:117] - GENERATED CALL = (s.map(a::map)).get(1397364392).filterNot({a: Char -> false})
2021-03-12 01:13:59,077 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0d521b]]
2021-03-12 01:13:59,077 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903]
2021-03-12 01:13:59,202 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:59,206 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0d521b]
2021-03-12 01:13:59,206 [main:117] - GENERATED CALL = (s.map(a::map)).get(823482446).toUpperCase()
2021-03-12 01:13:59,206 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]]
2021-03-12 01:13:59,206 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903]
2021-03-12 01:13:59,330 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:59,333 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]
2021-03-12 01:13:59,453 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:13:59,456 [main:117] - GENERATED CALL = (s.map(a::map)).get(-985937465).replaceAfter('⺮', A("lhnqj").z, stub({ "feqkq"}))
2021-03-12 01:13:59,456 [main:113] - Case = [@kotlin.SinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.minOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@78ffb0ca]]
2021-03-12 01:13:59,456 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.minOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@78ffb0ca]
2021-03-12 01:13:59,457 [main:117] - GENERATED CALL = (s.map(a::map)).minOrNull()
2021-03-12 01:13:59,457 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e61f45]]
2021-03-12 01:13:59,457 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903]
2021-03-12 01:13:59,581 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:13:59,584 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e61f45]
2021-03-12 01:13:59,711 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:13:59,835 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:13:59,838 [main:117] - GENERATED CALL = (s.map(a::map)).get(-1717819024).replaceBefore('䄐', "bgbka", A("lhnqj").map())
2021-03-12 01:13:59,838 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.first(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@31c00d59]]
2021-03-12 01:13:59,839 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.first(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@31c00d59]
2021-03-12 01:13:59,839 [main:117] - GENERATED CALL = (s.map(a::map)).first()
2021-03-12 01:13:59,839 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.find(predicate: (T) -> kotlin.Boolean): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@600e8be]]
2021-03-12 01:13:59,839 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.find(predicate: (T) -> kotlin.Boolean): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@600e8be]
2021-03-12 01:13:59,959 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 01:13:59,962 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:13:59,965 [main:117] - GENERATED CALL = (s.map(a::map)).find({a: T -> true})
2021-03-12 01:13:59,965 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]]
2021-03-12 01:13:59,965 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903]
2021-03-12 01:14:00,090 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:00,093 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]
2021-03-12 01:14:00,213 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:00,216 [main:117] - GENERATED CALL = (s.map(a::map)).get(-1362660727).substringBeforeLast('ꑚ', A("lhnqj").map())
2021-03-12 01:14:00,216 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52806f8a]]
2021-03-12 01:14:00,216 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903]
2021-03-12 01:14:00,362 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:00,365 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52806f8a]
2021-03-12 01:14:00,365 [main:117] - GENERATED CALL = (s.map(a::map)).get(-715130593).trimMargin(stub({ "feqkq"}))
2021-03-12 01:14:00,365 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]]
2021-03-12 01:14:00,365 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903]
2021-03-12 01:14:00,484 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:00,487 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]
2021-03-12 01:14:00,488 [main:117] - GENERATED CALL = (s.map(a::map)).get(-474965423).lowercase()
2021-03-12 01:14:00,488 [main:114] - replacement of "tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = (stub({ "feqkq"})).subSequence(-207648017, 1247481833).substring(-43698247, 201841390)) of type String is "sxcrh"
2021-03-12 01:14:00,605 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 01:14:00,605 [main:66] - Compilation checking started
2021-03-12 01:14:01,368 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:14:01,370 [main:107] - replacing (false, Boolean)
2021-03-12 01:14:01,370 [main:50] - replacing false Boolean
2021-03-12 01:14:01,370 [main:54] - Getting value of type Boolean
2021-03-12 01:14:01,504 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:01,506 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 01:14:01,506 [main:61] - GENERATED IS CALL =false
2021-03-12 01:14:01,649 [main:67] - randomType = Kla5?
2021-03-12 01:14:01,764 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 01:14:01,766 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}
2021-03-12 01:14:01,773 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]
2021-03-12 01:14:01,889 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:01,892 [main:78] - Generated call from random type = (Kla5())?.prope5.xor(false)
2021-03-12 01:14:01,893 [main:106] - GETTING Boolean from Array<String>
2021-03-12 01:14:01,907 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@cdcd08d]]
2021-03-12 01:14:01,907 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@cdcd08d]
2021-03-12 01:14:01,907 [main:117] - GENERATED CALL = (s).isEmpty()
2021-03-12 01:14:01,907 [main:113] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun <T> kotlin.Array<out T>.contentEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3d29a22d]]
2021-03-12 01:14:01,907 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun <T> kotlin.Array<out T>.contentEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3d29a22d]
2021-03-12 01:14:02,030 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-12 01:14:02,153 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-12 01:14:02,156 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-12 01:14:02,553 [main:385] - Cant generate call of fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-12 01:14:02,553 [main:158] - CANT GENERATE PARAMS FOR @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun <T> kotlin.Array<out T>.contentEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3d29a22d]
2021-03-12 01:14:02,553 [main:113] - Case = [public fun <T> kotlin.Array<out T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@312e3de0]]
2021-03-12 01:14:02,553 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@312e3de0]
2021-03-12 01:14:02,553 [main:117] - GENERATED CALL = (s).none()
2021-03-12 01:14:02,553 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]]
2021-03-12 01:14:02,553 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a]
2021-03-12 01:14:02,671 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:14:02,671 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]
2021-03-12 01:14:02,795 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:02,798 [main:117] - GENERATED CALL = (s).equals("wnptm").or(false)
2021-03-12 01:14:02,798 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6bb59fa4]]
2021-03-12 01:14:02,798 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6bb59fa4]
2021-03-12 01:14:02,915 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-12 01:14:03,075 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-12 01:14:03,078 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-12 01:14:03,332 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:14:03,335 [main:95] - GENERATED = arrayOfNulls<T>(1155627493)
2021-03-12 01:14:03,335 [main:117] - GENERATED CALL = (s).contentDeepEquals(arrayOfNulls<T>(1155627493))
2021-03-12 01:14:03,335 [main:113] - Case = [public inline fun <T> kotlin.Array<out T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a2883f]]
2021-03-12 01:14:03,335 [main:149] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a2883f]
2021-03-12 01:14:03,451 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 01:14:03,453 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:14:03,456 [main:117] - GENERATED CALL = (s).all({a: T -> true})
2021-03-12 01:14:03,456 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]]
2021-03-12 01:14:03,456 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:14:03,582 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:03,584 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]
2021-03-12 01:14:03,700 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:14:03,701 [main:117] - GENERATED CALL = (s).get(-1026080672).equals("cjiid")
2021-03-12 01:14:03,701 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c479748]]
2021-03-12 01:14:03,701 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a]
2021-03-12 01:14:03,816 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:14:03,816 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c479748]
2021-03-12 01:14:03,931 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:14:03,931 [main:117] - GENERATED CALL = (s).equals("nlrie").equals("nqcnd")
2021-03-12 01:14:03,932 [main:113] - Case = [public final operator fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@b9cbaf7], public abstract operator fun hasNext(): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@52c5c07b]]
2021-03-12 01:14:03,932 [main:149] - GENERATING call of type public final operator fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@b9cbaf7]
2021-03-12 01:14:03,932 [main:149] - GENERATING call of type public abstract operator fun hasNext(): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@52c5c07b]
2021-03-12 01:14:03,932 [main:117] - GENERATED CALL = (s).iterator().hasNext()
2021-03-12 01:14:03,932 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@44c8da67], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e2eab74]]
2021-03-12 01:14:03,932 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e2eab74]
2021-03-12 01:14:04,048 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:14:04,049 [main:117] - GENERATED CALL = (s).size.equals("qhhoa")
2021-03-12 01:14:04,049 [main:114] - replacement of false of type Boolean is (s).contentDeepEquals(arrayOfNulls<T>(1155627493))
2021-03-12 01:14:04,165 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:14:04,166 [main:66] - Compilation checking started
2021-03-12 01:14:04,557 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).contentDeepEquals(arrayOfNulls<T>(1155627493))
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:14:04,560 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-12 01:14:04,560 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-12 01:14:04,560 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 01:14:04,691 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 01:14:04,693 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:14:04,696 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-12 01:14:04,696 [main:61] - GENERATED IS CALL =false
2021-03-12 01:14:04,843 [main:67] - randomType = UByte
2021-03-12 01:14:04,977 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 01:14:05,021 [main:106] - GETTING Function0<Boolean> from List<String>
2021-03-12 01:14:05,060 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 01:14:05,090 [main:106] - GETTING Function0<Boolean> from Array<String>
2021-03-12 01:14:05,107 [main:106] - GETTING Function0<Boolean> from A
2021-03-12 01:14:05,115 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 01:14:05,117 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 01:14:05,117 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { true}
2021-03-12 01:14:05,251 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:14:05,251 [main:66] - Compilation checking started
2021-03-12 01:14:05,939 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:14:05,942 [main:107] - replacing (Kla4(), Kla4)
2021-03-12 01:14:05,942 [main:50] - replacing Kla4() Kla4
2021-03-12 01:14:05,942 [main:54] - Getting value of type Kla4
2021-03-12 01:14:06,074 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 01:14:06,077 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 01:14:06,078 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-12 01:14:06,078 [main:61] - GENERATED IS CALL =true
2021-03-12 01:14:06,088 [main:67] - randomType = Kla4
2021-03-12 01:14:06,221 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 01:14:06,224 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 01:14:06,231 [main:106] - GETTING Kla4 from List<String>
2021-03-12 01:14:06,266 [main:106] - GETTING Kla4 from String
2021-03-12 01:14:06,293 [main:106] - GETTING Kla4 from Array<String>
2021-03-12 01:14:06,308 [main:106] - GETTING Kla4 from String
2021-03-12 01:14:06,309 [main:106] - GETTING Kla4 from String
2021-03-12 01:14:06,309 [main:106] - GETTING Kla4 from A
2021-03-12 01:14:06,315 [main:114] - replacement of Kla4() of type Kla4 is Kla4()
2021-03-12 01:14:06,439 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:14:06,441 [main:107] - replacing (prope4 != (Kla1()).equals("hkpzc").compareTo(true), Boolean)
2021-03-12 01:14:06,441 [main:50] - replacing prope4 != (Kla1()).equals("hkpzc").compareTo(true) Boolean
2021-03-12 01:14:06,441 [main:54] - Getting value of type Boolean
2021-03-12 01:14:06,568 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:06,571 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 01:14:06,571 [main:61] - GENERATED IS CALL =false
2021-03-12 01:14:07,023 [main:67] - randomType = Sequence<Long>
2021-03-12 01:14:07,024 [main:106] - GETTING Boolean from String
2021-03-12 01:14:07,051 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@732c0a10]]
2021-03-12 01:14:07,051 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:14:07,175 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:07,177 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@732c0a10]
2021-03-12 01:14:07,178 [main:117] - GENERATED CALL = (A("lhnqj").map()).get(-472858907).isHighSurrogate()
2021-03-12 01:14:07,178 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b823c34]]
2021-03-12 01:14:07,178 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:14:07,302 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:07,429 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:07,431 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b823c34]
2021-03-12 01:14:07,432 [main:117] - GENERATED CALL = (A("lhnqj").map()).subSequence(304426360, 1298447144).isNotEmpty()
2021-03-12 01:14:07,432 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5421c076]]
2021-03-12 01:14:07,432 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:14:07,558 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:07,688 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:07,691 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5421c076]
2021-03-12 01:14:07,819 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 01:14:07,950 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 01:14:07,954 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 01:14:08,418 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:14:08,421 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 01:14:08,424 [main:95] - GENERATED = Regex("yhdul", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 01:14:08,425 [main:117] - GENERATED CALL = (A("lhnqj").map()).subSequence(55682457, 1162482713).matches(Regex("yhdul", kotlin.text.RegexOption.IGNORE_CASE))
2021-03-12 01:14:08,425 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e2eab74]]
2021-03-12 01:14:08,425 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e2eab74]
2021-03-12 01:14:08,550 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:14:08,551 [main:117] - GENERATED CALL = (A("lhnqj").map()).length.equals("qpnyl")
2021-03-12 01:14:08,551 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e6cda34]]
2021-03-12 01:14:08,551 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:14:08,678 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:08,680 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e6cda34]
2021-03-12 01:14:08,681 [main:117] - GENERATED CALL = (A("lhnqj").map()).get(613981129).isUpperCase()
2021-03-12 01:14:08,681 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6458768e]]
2021-03-12 01:14:08,681 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6458768e]
2021-03-12 01:14:08,681 [main:117] - GENERATED CALL = (A("lhnqj").map()).any()
2021-03-12 01:14:08,681 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fbf64ea]]
2021-03-12 01:14:08,681 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:14:08,808 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:08,811 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fbf64ea]
2021-03-12 01:14:08,811 [main:117] - GENERATED CALL = (A("lhnqj").map()).get(-1940857101).isSurrogate()
2021-03-12 01:14:08,811 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bd4a13]]
2021-03-12 01:14:08,811 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bd4a13]
2021-03-12 01:14:08,938 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:14:08,940 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:14:08,943 [main:117] - GENERATED CALL = (A("lhnqj").map()).all({a: Char -> true})
2021-03-12 01:14:08,943 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92d847a]]
2021-03-12 01:14:08,944 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:14:09,075 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:09,078 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92d847a]
2021-03-12 01:14:09,208 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:09,336 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:09,339 [main:117] - GENERATED CALL = (A("lhnqj").map()).get(-48750669).equals('霷', false)
2021-03-12 01:14:09,339 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d24d012]]
2021-03-12 01:14:09,339 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d24d012]
2021-03-12 01:14:09,339 [main:117] - GENERATED CALL = (A("lhnqj").map()).isNotBlank()
2021-03-12 01:14:09,339 [main:114] - replacement of prope4 != (Kla1()).equals("hkpzc").compareTo(true) of type Boolean is (A("lhnqj").map()).get(-48750669).equals('霷', false)
2021-03-12 01:14:09,468 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:14:09,468 [main:66] - Compilation checking started
2021-03-12 01:14:09,857 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((A("lhnqj").map()).get(-48750669).equals('霷', false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:14:09,859 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected ", String)
2021-03-12 01:14:09,860 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " String
2021-03-12 01:14:09,860 [main:54] - Getting value of type String
2021-03-12 01:14:09,991 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:14:09,995 [main:58] - GENERATED VALUE OF TYPE String = "cnkbh"
2021-03-12 01:14:09,995 [main:61] - GENERATED IS CALL =false
2021-03-12 01:14:10,146 [main:67] - randomType = Byte
2021-03-12 01:14:10,271 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:14:10,322 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3df23a4a]
2021-03-12 01:14:10,322 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@779dda8c]
2021-03-12 01:14:10,322 [main:78] - Generated call from random type = (1).toChar().plus(A("lhnqj").z)
2021-03-12 01:14:10,322 [main:106] - GETTING String from String
2021-03-12 01:14:10,342 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b88a22]]
2021-03-12 01:14:10,342 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b88a22]
2021-03-12 01:14:10,469 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:10,472 [main:117] - GENERATED CALL = (stub({ "feqkq"})).substring(1523865509)
2021-03-12 01:14:10,472 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d3514e]]
2021-03-12 01:14:10,472 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d3514e]
2021-03-12 01:14:10,472 [main:117] - GENERATED CALL = (stub({ "feqkq"})).toLowerCase()
2021-03-12 01:14:10,472 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@404181f8]]
2021-03-12 01:14:10,472 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@404181f8]
2021-03-12 01:14:10,597 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:14:10,725 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:14:10,729 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:14:11,051 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:14:11,054 [main:95] - GENERATED = StringBuilder(1146049919)
2021-03-12 01:14:11,055 [main:117] - GENERATED CALL = (stub({ "feqkq"})).removeSuffix(StringBuilder(1146049919))
2021-03-12 01:14:11,055 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56864111]]
2021-03-12 01:14:11,055 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:14:11,177 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:11,302 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:11,305 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56864111]
2021-03-12 01:14:11,428 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 01:14:11,562 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 01:14:11,566 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 01:14:11,971 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:14:11,973 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 01:14:11,976 [main:95] - GENERATED = Regex("scors", kotlin.text.RegexOption.MULTILINE)
2021-03-12 01:14:12,102 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:14:12,105 [main:117] - GENERATED CALL = (stub({ "feqkq"})).subSequence(23038138, -1698451938).replaceFirst(Regex("scors", kotlin.text.RegexOption.MULTILINE), "xchcr")
2021-03-12 01:14:12,105 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0a1b3]]
2021-03-12 01:14:12,105 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0a1b3]
2021-03-12 01:14:12,228 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:12,358 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:12,361 [main:117] - GENERATED CALL = (stub({ "feqkq"})).padStart(-1468019593, '䖫')
2021-03-12 01:14:12,361 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]]
2021-03-12 01:14:12,361 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]
2021-03-12 01:14:12,483 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:14:12,489 [main:117] - GENERATED CALL = (stub({ "feqkq"})).removePrefix("nwdfe")
2021-03-12 01:14:12,490 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]]
2021-03-12 01:14:12,490 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]
2021-03-12 01:14:12,611 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:12,614 [main:117] - GENERATED CALL = (stub({ "feqkq"})).takeLast(-183480482)
2021-03-12 01:14:12,614 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]]
2021-03-12 01:14:12,614 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]
2021-03-12 01:14:12,736 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:12,739 [main:117] - GENERATED CALL = (stub({ "feqkq"})).drop(-820132068)
2021-03-12 01:14:12,739 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]]
2021-03-12 01:14:12,739 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:14:12,860 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:12,863 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]
2021-03-12 01:14:12,863 [main:117] - GENERATED CALL = (stub({ "feqkq"})).get(-1930385604).uppercase()
2021-03-12 01:14:12,863 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e748520]]
2021-03-12 01:14:12,863 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e748520]
2021-03-12 01:14:12,864 [main:117] - GENERATED CALL = (stub({ "feqkq"})).trimStart()
2021-03-12 01:14:12,864 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " of type String is (stub({ "feqkq"})).trimStart()
2021-03-12 01:14:12,987 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:14:12,987 [main:66] - Compilation checking started
2021-03-12 01:14:13,635 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu5(it)
    }

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((stub({ "feqkq"})).trimStart() + i + ", got " + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:14:13,637 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 01:14:13,638 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 01:14:13,638 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 01:14:13,774 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 01:14:13,780 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 01:14:13,988 [main:67] - randomType = Function1<A, Kla5>
2021-03-12 01:14:13,989 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 01:14:14,019 [main:106] - GETTING EmptyCoroutineContext from List<String>
2021-03-12 01:14:14,052 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 01:14:14,052 [main:106] - GETTING EmptyCoroutineContext from Array<String>
2021-03-12 01:14:14,067 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 01:14:14,074 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 01:14:14,074 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 01:14:14,074 [main:107] - replacing ({
        fu5(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 01:14:14,074 [main:50] - replacing {
        fu5(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-12 01:14:14,074 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 01:14:14,214 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 01:14:14,218 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:14:14,364 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:14:14,367 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:14:14,639 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 01:14:14,641 [main:95] - GENERATED = check(true)
2021-03-12 01:14:14,641 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> check(true)}
2021-03-12 01:14:14,641 [main:61] - GENERATED IS CALL =false
2021-03-12 01:14:14,651 [main:67] - randomType = A
2021-03-12 01:14:14,772 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:14:14,774 [main:112] - generating klass A text = class A(val z: String) {
    fun map(s: String) = z + s
}
2021-03-12 01:14:14,896 [main:194] - Type params = []
2021-03-12 01:14:15,019 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:14:15,030 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 01:14:15,056 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from A
2021-03-12 01:14:15,062 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 01:14:15,064 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 01:14:15,066 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from List<String>
2021-03-12 01:14:15,101 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Array<String>
2021-03-12 01:14:15,117 [main:114] - replacement of {
        fu5(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> check(true)}
2021-03-12 01:14:15,237 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:14:15,238 [main:66] - Compilation checking started
2021-03-12 01:14:15,916 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((stub({ "feqkq"})).trimStart() + i + ", got " + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:14:15,920 [main:107] - replacing (prope2.getOrThrow(), Ty0)
2021-03-12 01:14:15,920 [main:50] - replacing prope2.getOrThrow() Ty0
2021-03-12 01:14:15,920 [main:54] - Getting value of type Ty0
2021-03-12 01:14:16,062 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 01:14:16,068 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 01:14:16,078 [main:67] - randomType = Kla5
2021-03-12 01:14:16,202 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 01:14:16,205 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((stub({ "feqkq"})).trimStart() + i + ", got " + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}
2021-03-12 01:14:16,215 [main:106] - GETTING Ty0 from String
2021-03-12 01:14:16,242 [main:106] - GETTING Ty0 from List<String>
2021-03-12 01:14:16,276 [main:106] - GETTING Ty0 from String
2021-03-12 01:14:16,277 [main:106] - GETTING Ty0 from String
2021-03-12 01:14:16,277 [main:106] - GETTING Ty0 from A
2021-03-12 01:14:16,284 [main:106] - GETTING Ty0 from Array<String>
2021-03-12 01:14:16,299 [main:111] - Cant find and generate replacement for prope2.getOrThrow() type Ty0
2021-03-12 01:14:16,299 [main:107] - replacing (", got ", String)
2021-03-12 01:14:16,300 [main:50] - replacing ", got " String
2021-03-12 01:14:16,300 [main:54] - Getting value of type String
2021-03-12 01:14:16,424 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:14:16,427 [main:58] - GENERATED VALUE OF TYPE String = "rguze"
2021-03-12 01:14:16,427 [main:61] - GENERATED IS CALL =false
2021-03-12 01:14:17,052 [main:67] - randomType = ArrayList<Function1<Set<UInt>, Int>>
2021-03-12 01:14:17,196 [main:302] - generating value of type = ArrayList<Function1<Set<UInt>, Int>> false depth = 0
2021-03-12 01:14:17,326 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Function1<Set<UInt>, Int>> = TODO()
2021-03-12 01:14:17,330 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Function1<Set<UInt>, Int>> = TODO()
2021-03-12 01:14:17,468 [main:95] - GENERATED = arrayListOf<Function1<Set<UInt>, Int>>()
2021-03-12 01:14:17,708 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@65463b83]
2021-03-12 01:14:17,844 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:14:17,993 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:14:17,997 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:14:18,273 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:14:18,276 [main:95] - GENERATED = StringBuilder(-504519342)
2021-03-12 01:14:18,400 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:14:18,529 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:14:18,656 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:14:18,659 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:14:18,945 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:14:18,947 [main:95] - GENERATED = StringBuilder("ipkow")
2021-03-12 01:14:19,072 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:19,197 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:14:19,326 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:14:19,329 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:14:19,597 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:14:19,600 [main:95] - GENERATED = StringBuilder(-697924740)
2021-03-12 01:14:19,761 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 01:14:19,764 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 01:14:19,770 [main:78] - Generated call from random type = (arrayListOf<Function1<Set<UInt>, Int>>()).joinToString(StringBuilder(-504519342), "zecwe", StringBuilder("ipkow"), -291668586, StringBuilder(-697924740), {a: T -> "kcwcz"})
2021-03-12 01:14:19,771 [main:106] - GETTING String from String
2021-03-12 01:14:19,798 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]]
2021-03-12 01:14:19,798 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]
2021-03-12 01:14:19,922 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:14:19,925 [main:117] - GENERATED CALL = (stub({ "feqkq"})).prependIndent("yyqra")
2021-03-12 01:14:19,925 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@809c776]]
2021-03-12 01:14:19,925 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@809c776]
2021-03-12 01:14:20,050 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 01:14:20,052 [main:302] - generating value of type = Char true depth = 1
2021-03-12 01:14:20,055 [main:117] - GENERATED CALL = (stub({ "feqkq"})).replaceFirstChar({a: Char -> '䘿'})
2021-03-12 01:14:20,055 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]]
2021-03-12 01:14:20,055 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:14:20,180 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:20,311 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:20,314 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]
2021-03-12 01:14:20,437 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:20,440 [main:117] - GENERATED CALL = (stub({ "feqkq"})).subSequence(-653766710, 1608822281).repeat(-1749401900)
2021-03-12 01:14:20,440 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]]
2021-03-12 01:14:20,440 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]
2021-03-12 01:14:20,562 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:20,686 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:20,811 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:20,814 [main:117] - GENERATED CALL = (stub({ "feqkq"})).replaceFirst('㩤', 'ᖌ', true)
2021-03-12 01:14:20,814 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]]
2021-03-12 01:14:20,814 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]
2021-03-12 01:14:20,936 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:21,062 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:21,188 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:21,191 [main:117] - GENERATED CALL = (stub({ "feqkq"})).replace('▞', '㢆', true)
2021-03-12 01:14:21,191 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e61f45]]
2021-03-12 01:14:21,192 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e61f45]
2021-03-12 01:14:21,315 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:21,441 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:14:21,444 [main:117] - GENERATED CALL = (stub({ "feqkq"})).replaceBefore('ힹ', A("lhnqj").z, "gdtvw")
2021-03-12 01:14:21,444 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8422c70]]
2021-03-12 01:14:21,444 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8422c70]
2021-03-12 01:14:21,444 [main:117] - GENERATED CALL = (stub({ "feqkq"})).capitalize()
2021-03-12 01:14:21,444 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]]
2021-03-12 01:14:21,444 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]
2021-03-12 01:14:21,568 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:14:21,571 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:14:21,573 [main:117] - GENERATED CALL = (stub({ "feqkq"})).dropWhile({a: Char -> true})
2021-03-12 01:14:21,574 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cfdfc94]]
2021-03-12 01:14:21,574 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cfdfc94]
2021-03-12 01:14:21,697 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 01:14:21,827 [main:43] - GENERATING CALL OF fun <T> listOf(element: Int): Iterable<Int> = TODO()
2021-03-12 01:14:21,830 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(element: Int): Iterable<Int> = TODO()
2021-03-12 01:14:21,958 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:14:21,961 [main:95] - GENERATED = listOf<Int>(1848878380)
2021-03-12 01:14:21,961 [main:117] - GENERATED CALL = (stub({ "feqkq"})).slice(listOf<Int>(1848878380))
2021-03-12 01:14:21,961 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]]
2021-03-12 01:14:21,961 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:14:22,085 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:22,088 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]
2021-03-12 01:14:22,088 [main:117] - GENERATED CALL = (stub({ "feqkq"})).get(-1956454218).titlecase()
2021-03-12 01:14:22,088 [main:114] - replacement of ", got " of type String is (stub({ "feqkq"})).get(-1956454218).titlecase()
2021-03-12 01:14:22,212 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:14:22,212 [main:66] - Compilation checking started
2021-03-12 01:14:22,876 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((stub({ "feqkq"})).trimStart() + i + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:14:22,879 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-12 01:14:22,880 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-12 01:14:22,880 [main:54] - Getting value of type String
2021-03-12 01:14:23,012 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:14:23,015 [main:58] - GENERATED VALUE OF TYPE String = "tyhpm"
2021-03-12 01:14:23,015 [main:61] - GENERATED IS CALL =false
2021-03-12 01:14:23,025 [main:67] - randomType = Kla5
2021-03-12 01:14:23,149 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 01:14:23,152 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((stub({ "feqkq"})).trimStart() + i + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}
2021-03-12 01:14:23,162 [main:106] - GETTING String from String
2021-03-12 01:14:23,188 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]]
2021-03-12 01:14:23,188 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]
2021-03-12 01:14:23,318 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:14:23,321 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:14:23,324 [main:117] - GENERATED CALL = (A("lhnqj").z).dropWhile({a: Char -> false})
2021-03-12 01:14:23,324 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:14:23,324 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:14:23,324 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:14:23,447 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:23,450 [main:117] - GENERATED CALL = (A("lhnqj").z).compareTo(A("lhnqj").z).toString(-1331041311)
2021-03-12 01:14:23,451 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4997a579]]
2021-03-12 01:14:23,451 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4997a579]
2021-03-12 01:14:23,451 [main:117] - GENERATED CALL = (A("lhnqj").z).trimEnd()
2021-03-12 01:14:23,451 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]]
2021-03-12 01:14:23,451 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]
2021-03-12 01:14:23,575 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:14:23,707 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:23,710 [main:117] - GENERATED CALL = (A("lhnqj").z).commonPrefixWith("lebaj", false)
2021-03-12 01:14:23,710 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]]
2021-03-12 01:14:23,710 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:14:23,833 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:23,836 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]
2021-03-12 01:14:23,836 [main:117] - GENERATED CALL = (A("lhnqj").z).get(188715823).uppercase()
2021-03-12 01:14:23,836 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56864111]]
2021-03-12 01:14:23,837 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:14:23,962 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:24,093 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:24,095 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56864111]
2021-03-12 01:14:24,222 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 01:14:24,355 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 01:14:24,359 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 01:14:24,795 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:14:24,798 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 01:14:24,930 [main:43] - GENERATING CALL OF fun <T> setOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 01:14:24,933 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 01:14:25,063 [main:302] - generating value of type = RegexOption false depth = 6
2021-03-12 01:14:25,066 [main:95] - GENERATED = setOf<RegexOption>(kotlin.text.RegexOption.MULTILINE)
2021-03-12 01:14:25,066 [main:95] - GENERATED = Regex("kbqlg", setOf<RegexOption>(kotlin.text.RegexOption.MULTILINE))
2021-03-12 01:14:25,066 [main:117] - GENERATED CALL = (A("lhnqj").z).subSequence(1475906456, 409842778).replaceFirst(Regex("kbqlg", setOf<RegexOption>(kotlin.text.RegexOption.MULTILINE)), stub({ "feqkq"}))
2021-03-12 01:14:25,066 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]]
2021-03-12 01:14:25,066 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]
2021-03-12 01:14:25,190 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:25,318 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:14:25,321 [main:117] - GENERATED CALL = (A("lhnqj").z).replaceAfter('鯗', "vvrdr", A("lhnqj").z)
2021-03-12 01:14:25,321 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@809c776]]
2021-03-12 01:14:25,321 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@809c776]
2021-03-12 01:14:25,445 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 01:14:25,448 [main:302] - generating value of type = Char true depth = 1
2021-03-12 01:14:25,451 [main:117] - GENERATED CALL = (A("lhnqj").z).replaceFirstChar({a: Char -> '뽑'})
2021-03-12 01:14:25,451 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]]
2021-03-12 01:14:25,451 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:14:25,613 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:25,741 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:25,744 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]
2021-03-12 01:14:25,867 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:14:25,996 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:25,999 [main:117] - GENERATED CALL = (A("lhnqj").z).subSequence(1728728934, -240501885).commonPrefixWith("zgjqn", true)
2021-03-12 01:14:25,999 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0d521b]]
2021-03-12 01:14:25,999 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0d521b]
2021-03-12 01:14:25,999 [main:117] - GENERATED CALL = (A("lhnqj").z).toUpperCase()
2021-03-12 01:14:25,999 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is (A("lhnqj").z).toUpperCase()
2021-03-12 01:14:26,124 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:14:26,124 [main:66] - Compilation checking started
2021-03-12 01:14:26,764 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((stub({ "feqkq"})).trimStart() + i + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:14:26,767 [main:107] - replacing ({ c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 01:14:26,767 [main:50] - replacing { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-12 01:14:26,767 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 01:14:26,902 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 01:14:26,905 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:14:26,911 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> println()}
2021-03-12 01:14:26,911 [main:61] - GENERATED IS CALL =false
2021-03-12 01:14:27,637 [main:67] - randomType = Set<Function1<Sequence<Byte>, Set<Kla4>>>
2021-03-12 01:14:27,639 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from A
2021-03-12 01:14:27,648 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 01:14:27,674 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from List<String>
2021-03-12 01:14:27,707 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 01:14:27,709 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Array<String>
2021-03-12 01:14:27,726 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 01:14:27,726 [main:114] - replacement of { c ->
        ("owudh").length.shr(1223824968)
        prope6 = { c.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> println()}
2021-03-12 01:14:27,851 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:14:27,851 [main:66] - Compilation checking started
2021-03-12 01:14:28,482 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((stub({ "feqkq"})).trimStart() + i + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:14:28,485 [main:107] - replacing (prope2.exceptionOrNull()!!, Throwable)
2021-03-12 01:14:28,485 [main:50] - replacing prope2.exceptionOrNull()!! Throwable
2021-03-12 01:14:28,486 [main:54] - Getting value of type Throwable
2021-03-12 01:14:28,643 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 01:14:28,798 [main:43] - GENERATING CALL OF fun CharacterCodingException(message: kotlin.String?): Throwable = TODO()
2021-03-12 01:14:28,802 [main:61] - WITHOUT TYPE PARAMS = fun CharacterCodingException(message: kotlin.String?): Throwable = TODO()
2021-03-12 01:14:29,139 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:14:29,141 [main:95] - GENERATED = CharacterCodingException("lydqu")
2021-03-12 01:14:29,141 [main:58] - GENERATED VALUE OF TYPE Throwable = CharacterCodingException("lydqu")
2021-03-12 01:14:29,142 [main:61] - GENERATED IS CALL =true
2021-03-12 01:14:29,289 [main:67] - randomType = Boolean?
2021-03-12 01:14:29,416 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:29,435 [main:106] - GETTING Throwable from String
2021-03-12 01:14:29,463 [main:106] - GETTING Throwable from List<String>
2021-03-12 01:14:29,498 [main:106] - GETTING Throwable from String
2021-03-12 01:14:29,499 [main:106] - GETTING Throwable from Array<String>
2021-03-12 01:14:29,516 [main:106] - GETTING Throwable from A
2021-03-12 01:14:29,523 [main:106] - GETTING Throwable from String
2021-03-12 01:14:29,523 [main:114] - replacement of prope2.exceptionOrNull()!! of type Throwable is CharacterCodingException("lydqu")
2021-03-12 01:14:29,647 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:14:29,648 [main:66] - Compilation checking started
2021-03-12 01:14:30,033 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(CharacterCodingException("lydqu"))
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((stub({ "feqkq"})).trimStart() + i + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:14:30,035 [main:107] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-12 01:14:30,035 [main:50] - replacing c !is CoroutineStackFrame Boolean
2021-03-12 01:14:30,035 [main:54] - Getting value of type Boolean
2021-03-12 01:14:30,159 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:30,161 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 01:14:30,162 [main:61] - GENERATED IS CALL =false
2021-03-12 01:14:30,329 [main:67] - randomType = Kla6
2021-03-12 01:14:30,469 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 01:14:30,471 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}
2021-03-12 01:14:30,499 [main:149] - GENERATING call of type public open fun resumeWith(prope2: kotlin.Result<kotlin.Unit>): kotlin.Unit defined in Kla3[SimpleFunctionDescriptorImpl@3a2bcad5]
2021-03-12 01:14:30,623 [main:302] - generating value of type = Result<Unit> false depth = 0
2021-03-12 01:14:30,754 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Unit): Result<Unit> = TODO()
2021-03-12 01:14:30,757 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Unit): Result<Unit> = TODO()
2021-03-12 01:14:31,033 [main:302] - generating value of type = Function0<Unit> false depth = 3
2021-03-12 01:14:31,036 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 01:14:31,164 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 01:14:31,168 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 01:14:31,440 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 7
2021-03-12 01:14:31,443 [main:302] - generating value of type = Unit false depth = 8
2021-03-12 01:14:31,573 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:14:31,577 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:14:31,853 [main:302] - generating value of type = Any false depth = 11
2021-03-12 01:14:31,853 [main:95] - GENERATED = println("bwoiv")
2021-03-12 01:14:31,853 [main:95] - GENERATED = contract({ println("bwoiv")})
2021-03-12 01:14:31,853 [main:95] - GENERATED = runCatching<Unit>({ contract({ println("bwoiv")})})
2021-03-12 01:14:31,853 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@5ea3d8ed]
2021-03-12 01:14:31,977 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:14:31,977 [main:78] - Generated call from random type = (Kla6).resumeWith(runCatching<Unit>({ contract({ println("bwoiv")})})).equals("ocxte")
2021-03-12 01:14:31,978 [main:106] - GETTING Boolean from List<String>
2021-03-12 01:14:32,013 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d730f36]]
2021-03-12 01:14:32,013 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d730f36]
2021-03-12 01:14:32,013 [main:117] - GENERATED CALL = (s.map(a::map)).isNullOrEmpty()
2021-03-12 01:14:32,013 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@69242944]]
2021-03-12 01:14:32,014 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@69242944]
2021-03-12 01:14:32,014 [main:117] - GENERATED CALL = (s.map(a::map)).isNotEmpty()
2021-03-12 01:14:32,014 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@3df111e8], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]]
2021-03-12 01:14:32,014 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@3df111e8]
2021-03-12 01:14:32,178 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:14:32,179 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]
2021-03-12 01:14:32,303 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:32,306 [main:117] - GENERATED CALL = (s.map(a::map)).equals("sntag").xor(false)
2021-03-12 01:14:32,307 [main:113] - Case = [public abstract fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@69fde6f0], public abstract operator fun hasNext(): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68f0fcc7]]
2021-03-12 01:14:32,307 [main:149] - GENERATING call of type public abstract fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@69fde6f0]
2021-03-12 01:14:32,307 [main:149] - GENERATING call of type public abstract operator fun hasNext(): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@68f0fcc7]
2021-03-12 01:14:32,307 [main:117] - GENERATED CALL = (s.map(a::map)).iterator().hasNext()
2021-03-12 01:14:32,307 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3cf32107]]
2021-03-12 01:14:32,307 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3cf32107]
2021-03-12 01:14:32,307 [main:117] - GENERATED CALL = (s.map(a::map)).any()
2021-03-12 01:14:32,308 [main:113] - Case = [public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@2a517974], public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@251dab95]]
2021-03-12 01:14:32,308 [main:149] - GENERATING call of type public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@2a517974]
2021-03-12 01:14:32,308 [main:149] - GENERATING call of type public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@251dab95]
2021-03-12 01:14:32,308 [main:117] - GENERATED CALL = (s.map(a::map)).listIterator().hasNext()
2021-03-12 01:14:32,308 [main:113] - Case = [public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@2a517974], public abstract fun hasPrevious(): kotlin.Boolean defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@3d9aaf71]]
2021-03-12 01:14:32,308 [main:149] - GENERATING call of type public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@2a517974]
2021-03-12 01:14:32,308 [main:149] - GENERATING call of type public abstract fun hasPrevious(): kotlin.Boolean defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@3d9aaf71]
2021-03-12 01:14:32,308 [main:117] - GENERATED CALL = (s.map(a::map)).listIterator().hasPrevious()
2021-03-12 01:14:32,308 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@3df111e8], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]]
2021-03-12 01:14:32,309 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@3df111e8]
2021-03-12 01:14:32,433 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:14:32,433 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]
2021-03-12 01:14:32,556 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:32,559 [main:117] - GENERATED CALL = (s.map(a::map)).equals("aukug").or(false)
2021-03-12 01:14:32,559 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6ea70999]]
2021-03-12 01:14:32,559 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6ea70999]
2021-03-12 01:14:32,559 [main:117] - GENERATED CALL = (s.map(a::map)).none()
2021-03-12 01:14:32,559 [main:113] - Case = [public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4131880d], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14ca80b4]]
2021-03-12 01:14:32,559 [main:149] - GENERATING call of type public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4131880d]
2021-03-12 01:14:32,683 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:14:32,686 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14ca80b4]
2021-03-12 01:14:32,686 [main:117] - GENERATED CALL = (s.map(a::map)).contains("yzcxh").not()
2021-03-12 01:14:32,686 [main:114] - replacement of c !is CoroutineStackFrame of type Boolean is (s.map(a::map)).listIterator().hasPrevious()
2021-03-12 01:14:32,809 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:14:32,810 [main:66] - Compilation checking started
2021-03-12 01:14:33,195 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if ((s.map(a::map)).listIterator().hasPrevious()) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((stub({ "feqkq"})).trimStart() + i + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:14:33,199 [main:107] - replacing (prope2, Result<Ty0>)
2021-03-12 01:14:33,199 [main:50] - replacing prope2 Result<Ty0>
2021-03-12 01:14:33,199 [main:54] - Getting value of type Result<Ty0>
2021-03-12 01:14:33,328 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 01:14:33,456 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 01:14:33,460 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 01:14:33,731 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 01:14:33,731 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 01:14:34,152 [main:67] - randomType = Array<Long?>
2021-03-12 01:14:34,281 [main:302] - generating value of type = Array<Long?> false depth = 0
2021-03-12 01:14:34,411 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Long?> = TODO()
2021-03-12 01:14:34,415 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Long?> = TODO()
2021-03-12 01:14:34,544 [main:95] - GENERATED = emptyArray<Long?>()
2021-03-12 01:14:34,562 [main:106] - GETTING Result<Ty0> from A
2021-03-12 01:14:34,569 [main:106] - GETTING Result<Ty0> from Array<String>
2021-03-12 01:14:34,585 [main:106] - GETTING Result<Ty0> from String
2021-03-12 01:14:34,609 [main:106] - GETTING Result<Ty0> from String
2021-03-12 01:14:34,610 [main:106] - GETTING Result<Ty0> from String
2021-03-12 01:14:34,611 [main:106] - GETTING Result<Ty0> from List<String>
2021-03-12 01:14:34,640 [main:111] - Cant find and generate replacement for prope2 type Result<Ty0>
2021-03-12 01:14:34,640 [main:107] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-12 01:14:34,640 [main:50] - replacing c !is CoroutineStackFrame Boolean
2021-03-12 01:14:34,640 [main:54] - Getting value of type Boolean
2021-03-12 01:14:34,763 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:34,766 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 01:14:34,766 [main:61] - GENERATED IS CALL =false
2021-03-12 01:14:36,056 [main:67] - randomType = List<Triple<Int, Function2<Int, Triple<ULong, Kla2, UInt>, Double>, String>?>
2021-03-12 01:14:36,057 [main:106] - GETTING Boolean from String
2021-03-12 01:14:36,084 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3df8a0d8]]
2021-03-12 01:14:36,084 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]
2021-03-12 01:14:36,206 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:14:36,206 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3df8a0d8]
2021-03-12 01:14:36,333 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:36,336 [main:117] - GENERATED CALL = (stub({ "feqkq"})).equals("jebdu").and(false)
2021-03-12 01:14:36,336 [main:113] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16dc2b8d]]
2021-03-12 01:14:36,336 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16dc2b8d]
2021-03-12 01:14:36,337 [main:117] - GENERATED CALL = (stub({ "feqkq"})).isBlank()
2021-03-12 01:14:36,337 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@50a48a40]]
2021-03-12 01:14:36,337 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:14:36,459 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:36,583 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:36,586 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@50a48a40]
2021-03-12 01:14:36,713 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:14:36,714 [main:117] - GENERATED CALL = (stub({ "feqkq"})).subSequence(1864229199, 2073571710).equals("qwimq")
2021-03-12 01:14:36,714 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f6ae739]]
2021-03-12 01:14:36,714 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:14:36,836 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:36,839 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f6ae739]
2021-03-12 01:14:36,839 [main:117] - GENERATED CALL = (stub({ "feqkq"})).get(-1819224312).isDefined()
2021-03-12 01:14:36,839 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79c9f253]]
2021-03-12 01:14:36,839 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79c9f253]
2021-03-12 01:14:36,963 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:36,966 [main:117] - GENERATED CALL = (stub({ "feqkq"})).hasSurrogatePairAt(-1183318919)
2021-03-12 01:14:36,966 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14cf536a]]
2021-03-12 01:14:36,966 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:14:37,091 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:37,095 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14cf536a]
2021-03-12 01:14:37,095 [main:117] - GENERATED CALL = (stub({ "feqkq"})).get(1430054994).isLowSurrogate()
2021-03-12 01:14:37,095 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6458768e]]
2021-03-12 01:14:37,095 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6458768e]
2021-03-12 01:14:37,095 [main:117] - GENERATED CALL = (stub({ "feqkq"})).any()
2021-03-12 01:14:37,095 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]]
2021-03-12 01:14:37,096 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]
2021-03-12 01:14:37,217 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:14:37,217 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]
2021-03-12 01:14:37,338 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:37,341 [main:117] - GENERATED CALL = (stub({ "feqkq"})).equals("selbo").xor(true)
2021-03-12 01:14:37,341 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92d847a]]
2021-03-12 01:14:37,341 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:14:37,463 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:37,466 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92d847a]
2021-03-12 01:14:37,588 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:37,714 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:37,717 [main:117] - GENERATED CALL = (stub({ "feqkq"})).get(2019477498).equals('ⱇ', true)
2021-03-12 01:14:37,717 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@176a8a]]
2021-03-12 01:14:37,717 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:14:37,840 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:37,965 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:37,968 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@176a8a]
2021-03-12 01:14:38,099 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:38,275 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:14:38,405 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:38,531 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:38,656 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:38,659 [main:117] - GENERATED CALL = (stub({ "feqkq"})).subSequence(-465232839, -1756805408).regionMatches(-1807634425, "nkqug", -841386295, -891930758, true)
2021-03-12 01:14:38,659 [main:114] - replacement of c !is CoroutineStackFrame of type Boolean is (stub({ "feqkq"})).get(-1819224312).isDefined()
2021-03-12 01:14:38,781 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:14:38,781 [main:66] - Compilation checking started
2021-03-12 01:14:39,158 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if ((stub({ "feqkq"})).get(-1819224312).isDefined()) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((stub({ "feqkq"})).trimStart() + i + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:14:39,161 [main:107] - replacing ((stub({ "feqkq"})).trimStart() + i, String)
2021-03-12 01:14:39,161 [main:50] - replacing (stub({ "feqkq"})).trimStart() + i String
2021-03-12 01:14:39,161 [main:54] - Getting value of type String
2021-03-12 01:14:39,284 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:14:39,287 [main:58] - GENERATED VALUE OF TYPE String = "amvrb"
2021-03-12 01:14:39,287 [main:61] - GENERATED IS CALL =false
2021-03-12 01:14:39,297 [main:67] - randomType = Kla0
2021-03-12 01:14:39,421 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 01:14:39,424 [main:112] - generating klass Kla0 text = data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}
2021-03-12 01:14:39,547 [main:194] - Type params = []
2021-03-12 01:14:39,668 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:14:39,678 [main:149] - GENERATING call of type public final operator fun component2(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@604f48a5]
2021-03-12 01:14:39,679 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f548ae4]
2021-03-12 01:14:39,800 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 01:14:39,803 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:14:39,806 [main:78] - Generated call from random type = (Kla0("wankp")).component2().filterIndexed({a: Int, b: Char -> true})
2021-03-12 01:14:39,807 [main:106] - GETTING String from Array<String>
2021-03-12 01:14:39,822 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]]
2021-03-12 01:14:39,822 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:14:39,945 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:39,948 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]
2021-03-12 01:14:40,071 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:40,201 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:14:40,330 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:14:40,333 [main:117] - GENERATED CALL = (s).get(-616372228).replaceBeforeLast('ꗾ', "mmste", "zukbn")
2021-03-12 01:14:40,333 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706fa500]]
2021-03-12 01:14:40,333 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:14:40,460 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:40,463 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706fa500]
2021-03-12 01:14:40,589 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:14:40,591 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:14:40,594 [main:117] - GENERATED CALL = (s).get(1749727842).takeWhile({a: Char -> true})
2021-03-12 01:14:40,594 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0d521b]]
2021-03-12 01:14:40,594 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:14:40,720 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:40,723 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0d521b]
2021-03-12 01:14:40,723 [main:117] - GENERATED CALL = (s).get(-500970600).toUpperCase()
2021-03-12 01:14:40,723 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]]
2021-03-12 01:14:40,723 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:14:40,848 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:40,851 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]
2021-03-12 01:14:40,974 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:41,099 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:41,224 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:41,227 [main:117] - GENERATED CALL = (s).get(-571474368).replaceFirst('?', '阏', true)
2021-03-12 01:14:41,386 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]]
2021-03-12 01:14:41,386 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:14:41,519 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:41,521 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]
2021-03-12 01:14:41,683 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:41,686 [main:117] - GENERATED CALL = (s).get(84183681).take(796487048)
2021-03-12 01:14:41,686 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]]
2021-03-12 01:14:41,686 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:14:41,813 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:41,815 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]
2021-03-12 01:14:41,816 [main:117] - GENERATED CALL = (s).get(1095683513).replaceIndentByMargin(A("lhnqj").z, A("lhnqj").map())
2021-03-12 01:14:41,816 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e632037]]
2021-03-12 01:14:41,816 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:14:41,942 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:41,945 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e632037]
2021-03-12 01:14:41,945 [main:117] - GENERATED CALL = (s).get(-1023876715).uppercase()
2021-03-12 01:14:41,945 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a16d90e]]
2021-03-12 01:14:41,945 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:14:42,071 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:42,074 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a16d90e]
2021-03-12 01:14:42,074 [main:117] - GENERATED CALL = (s).get(-1082410391).concat(A("lhnqj").z)
2021-03-12 01:14:42,074 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a471dbf]]
2021-03-12 01:14:42,075 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:14:42,201 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:42,203 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a471dbf]
2021-03-12 01:14:42,329 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:42,332 [main:117] - GENERATED CALL = (s).get(-721298099).substringBefore('਍', A("lhnqj").z)
2021-03-12 01:14:42,332 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0a1b3]]
2021-03-12 01:14:42,332 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:14:42,458 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:42,460 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0a1b3]
2021-03-12 01:14:42,582 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:42,707 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:42,710 [main:117] - GENERATED CALL = (s).get(-46133185).padStart(1740196076, '嘚')
2021-03-12 01:14:42,710 [main:114] - replacement of (stub({ "feqkq"})).trimStart() + i of type String is (s).get(84183681).take(796487048)
2021-03-12 01:14:42,831 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:14:42,832 [main:66] - Compilation checking started
2021-03-12 01:14:43,456 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:14:43,459 [main:107] - replacing ("tail-call optimization hit: method " + method, String)
2021-03-12 01:14:43,459 [main:50] - replacing "tail-call optimization hit: method " + method String
2021-03-12 01:14:43,459 [main:54] - Getting value of type String
2021-03-12 01:14:43,595 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:14:43,597 [main:58] - GENERATED VALUE OF TYPE String = "hjfvh"
2021-03-12 01:14:43,597 [main:61] - GENERATED IS CALL =false
2021-03-12 01:14:43,882 [main:67] - randomType = Sequence<Long>
2021-03-12 01:14:43,882 [main:106] - GETTING String from String
2021-03-12 01:14:43,909 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a471dbf]]
2021-03-12 01:14:43,910 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a471dbf]
2021-03-12 01:14:44,034 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:44,159 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:14:44,162 [main:117] - GENERATED CALL = (stub({ "feqkq"})).substringBefore('⨽', "rueji")
2021-03-12 01:14:44,162 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0a1b3]]
2021-03-12 01:14:44,162 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0a1b3]
2021-03-12 01:14:44,286 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:44,411 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:44,414 [main:117] - GENERATED CALL = (stub({ "feqkq"})).padStart(-1384116313, 'ბ')
2021-03-12 01:14:44,414 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f7c18e5]]
2021-03-12 01:14:44,414 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f7c18e5]
2021-03-12 01:14:44,415 [main:117] - GENERATED CALL = (stub({ "feqkq"})).replaceIndent(A("lhnqj").z)
2021-03-12 01:14:44,415 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]]
2021-03-12 01:14:44,415 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]
2021-03-12 01:14:44,539 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:44,542 [main:117] - GENERATED CALL = (stub({ "feqkq"})).repeat(138504803)
2021-03-12 01:14:44,542 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]]
2021-03-12 01:14:44,543 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]
2021-03-12 01:14:44,667 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:14:44,797 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:14:44,800 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:14:45,120 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:14:45,123 [main:95] - GENERATED = StringBuilder(1770200189)
2021-03-12 01:14:45,247 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:45,249 [main:117] - GENERATED CALL = (stub({ "feqkq"})).commonSuffixWith(StringBuilder(1770200189), false)
2021-03-12 01:14:45,249 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]]
2021-03-12 01:14:45,250 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]
2021-03-12 01:14:45,374 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:14:45,374 [main:117] - GENERATED CALL = (stub({ "feqkq"})).plus("ourqh")
2021-03-12 01:14:45,374 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]]
2021-03-12 01:14:45,374 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:14:45,504 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:45,634 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:45,637 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]
2021-03-12 01:14:45,761 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:45,887 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:45,890 [main:117] - GENERATED CALL = (stub({ "feqkq"})).subSequence(77947797, -1573737559).substring(-1573789494, 492787035)
2021-03-12 01:14:45,890 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f548ae4]]
2021-03-12 01:14:45,890 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f548ae4]
2021-03-12 01:14:46,014 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 01:14:46,017 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:14:46,020 [main:117] - GENERATED CALL = (stub({ "feqkq"})).filterIndexed({a: Int, b: Char -> false})
2021-03-12 01:14:46,020 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]]
2021-03-12 01:14:46,020 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]
2021-03-12 01:14:46,145 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:14:46,151 [main:117] - GENERATED CALL = (stub({ "feqkq"})).removeSurrounding("ehxiq")
2021-03-12 01:14:46,151 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305e8885]]
2021-03-12 01:14:46,151 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:14:46,274 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:46,276 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305e8885]
2021-03-12 01:14:46,277 [main:117] - GENERATED CALL = (stub({ "feqkq"})).get(-1467067534).lowercase()
2021-03-12 01:14:46,277 [main:114] - replacement of "tail-call optimization hit: method " + method of type String is (stub({ "feqkq"})).subSequence(77947797, -1573737559).substring(-1573789494, 492787035)
2021-03-12 01:14:46,399 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:14:46,400 [main:66] - Compilation checking started
2021-03-12 01:14:47,036 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return prope2
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).subSequence(77947797, -1573737559).substring(-1573789494, 492787035) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:14:47,039 [main:107] - replacing (prope2, String)
2021-03-12 01:14:47,039 [main:50] - replacing prope2 String
2021-03-12 01:14:47,040 [main:54] - Getting value of type String
2021-03-12 01:14:47,200 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:14:47,203 [main:58] - GENERATED VALUE OF TYPE String = "efshw"
2021-03-12 01:14:47,203 [main:61] - GENERATED IS CALL =false
2021-03-12 01:14:47,381 [main:67] - randomType = Kla1?
2021-03-12 01:14:47,528 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 01:14:47,531 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-12 01:14:47,671 [main:194] - Type params = []
2021-03-12 01:14:47,818 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 01:14:47,969 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:14:47,973 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:14:48,299 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 01:14:48,449 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:14:48,453 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:14:48,943 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:14:48,943 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:14:48,964 [main:106] - GETTING String from List<String>
2021-03-12 01:14:48,998 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707202d1]]
2021-03-12 01:14:48,998 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903]
2021-03-12 01:14:49,123 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:49,126 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707202d1]
2021-03-12 01:14:49,250 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:14:49,253 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:14:49,256 [main:117] - GENERATED CALL = (s.map(a::map)).get(885324923).takeLastWhile({a: Char -> false})
2021-03-12 01:14:49,256 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]]
2021-03-12 01:14:49,256 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903]
2021-03-12 01:14:49,381 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:49,384 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]
2021-03-12 01:14:49,510 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:49,513 [main:117] - GENERATED CALL = (s.map(a::map)).get(-1530735910).substringBeforeLast('晷', stub({ "feqkq"}))
2021-03-12 01:14:49,513 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@809c776]]
2021-03-12 01:14:49,513 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903]
2021-03-12 01:14:49,636 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:49,639 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@809c776]
2021-03-12 01:14:49,763 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 01:14:49,766 [main:302] - generating value of type = Char true depth = 1
2021-03-12 01:14:49,769 [main:117] - GENERATED CALL = (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
2021-03-12 01:14:49,769 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.elementAtOrNull(index: kotlin.Int): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@26de2bf8]]
2021-03-12 01:14:49,769 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.elementAtOrNull(index: kotlin.Int): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@26de2bf8]
2021-03-12 01:14:49,893 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:49,896 [main:117] - GENERATED CALL = (s.map(a::map)).elementAtOrNull(286724723)
2021-03-12 01:14:49,896 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.minBy(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6cfd4e82]]
2021-03-12 01:14:49,896 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.minBy(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6cfd4e82]
2021-03-12 01:14:50,021 [main:302] - generating value of type = Function1<T, R> false depth = 0
2021-03-12 01:14:50,023 [main:302] - generating value of type = R false depth = 1
2021-03-12 01:14:50,439 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->ULong?): R = TODO()
2021-03-12 01:14:50,442 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->ULong?): R = TODO()
2021-03-12 01:14:50,875 [main:302] - generating value of type = Any false depth = 4
2021-03-12 01:14:50,875 [main:302] - generating value of type = Function0<ULong?> false depth = 4
2021-03-12 01:14:50,878 [main:302] - generating value of type = ULong true depth = 5
2021-03-12 01:14:50,880 [main:95] - GENERATED = synchronized<ULong?>("wjsdd", { 5169744070498837722.toULong()})
2021-03-12 01:14:50,881 [main:117] - GENERATED CALL = (s.map(a::map)).minBy({a: T -> synchronized<ULong?>("wjsdd", { 5169744070498837722.toULong()})})
2021-03-12 01:14:50,881 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]]
2021-03-12 01:14:50,881 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903]
2021-03-12 01:14:51,008 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:51,011 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]
2021-03-12 01:14:51,137 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:51,140 [main:117] - GENERATED CALL = (s.map(a::map)).get(-514283138).dropLast(-1722339266)
2021-03-12 01:14:51,140 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.first(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@31c00d59]]
2021-03-12 01:14:51,140 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.first(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@31c00d59]
2021-03-12 01:14:51,140 [main:117] - GENERATED CALL = (s.map(a::map)).first()
2021-03-12 01:14:51,140 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]]
2021-03-12 01:14:51,140 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903]
2021-03-12 01:14:51,265 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:51,268 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]
2021-03-12 01:14:51,391 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:51,518 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:51,644 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:51,646 [main:117] - GENERATED CALL = (s.map(a::map)).get(139561497).replaceFirst('걮', '', false)
2021-03-12 01:14:51,647 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e37e3ea]]
2021-03-12 01:14:51,647 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903]
2021-03-12 01:14:51,773 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:51,776 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e37e3ea]
2021-03-12 01:14:51,908 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:52,063 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:52,208 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:14:52,216 [main:117] - GENERATED CALL = (s.map(a::map)).get(-997797724).replaceRange(1916857140, 1829589437, "idesx")
2021-03-12 01:14:52,216 [main:113] - Case = [@kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.minByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@68fc0079]]
2021-03-12 01:14:52,216 [main:149] - GENERATING call of type @kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.minByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@68fc0079]
2021-03-12 01:14:52,388 [main:302] - generating value of type = Function1<T, R> false depth = 0
2021-03-12 01:14:52,390 [main:302] - generating value of type = R false depth = 1
2021-03-12 01:14:52,660 [main:43] - GENERATING CALL OF fun <R> run(block: ()->Short): R = TODO()
2021-03-12 01:14:52,664 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->Short): R = TODO()
2021-03-12 01:14:52,937 [main:302] - generating value of type = Function0<Short> false depth = 4
2021-03-12 01:14:52,940 [main:302] - generating value of type = Short true depth = 5
2021-03-12 01:14:52,942 [main:95] - GENERATED = run<Short>({ -28748})
2021-03-12 01:14:52,943 [main:117] - GENERATED CALL = (s.map(a::map)).minByOrNull({a: T -> run<Short>({ -28748})})
2021-03-12 01:14:52,943 [main:114] - replacement of prope2 of type String is (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
2021-03-12 01:14:53,091 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:14:53,092 [main:66] - Compilation checking started
2021-03-12 01:14:53,766 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let(Ty1)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).subSequence(77947797, -1573737559).substring(-1573789494, 492787035) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:14:53,769 [main:107] - replacing (Ty1, Function1<Throwable, Unit>)
2021-03-12 01:14:53,769 [main:50] - replacing Ty1 Function1<Throwable, Unit>
2021-03-12 01:14:53,769 [main:54] - Getting value of type Function1<Throwable, Unit>
2021-03-12 01:14:53,918 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-12 01:14:53,921 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:14:54,056 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:14:54,060 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:14:54,489 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 01:14:54,492 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 01:14:54,494 [main:302] - generating value of type = Any false depth = 5
2021-03-12 01:14:54,495 [main:95] - GENERATED = check(true, { "yxdsb"})
2021-03-12 01:14:54,495 [main:58] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> check(true, { "yxdsb"})}
2021-03-12 01:14:54,495 [main:61] - GENERATED IS CALL =false
2021-03-12 01:14:54,505 [main:67] - randomType = A
2021-03-12 01:14:54,633 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:14:54,635 [main:112] - generating klass A text = class A(val z: String) {
    fun map(s: String) = z + s
}
2021-03-12 01:14:54,766 [main:194] - Type params = []
2021-03-12 01:14:54,899 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:14:54,910 [main:106] - GETTING Function1<Throwable, Unit> from Array<String>
2021-03-12 01:14:54,927 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 01:14:54,952 [main:106] - GETTING Function1<Throwable, Unit> from List<String>
2021-03-12 01:14:54,988 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 01:14:54,989 [main:106] - GETTING Function1<Throwable, Unit> from A
2021-03-12 01:14:54,998 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 01:14:54,998 [main:114] - replacement of Ty1 of type Function1<Throwable, Unit> is {a: Throwable -> check(true, { "yxdsb"})}
2021-03-12 01:14:55,128 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 01:14:55,129 [main:66] - Compilation checking started
2021-03-12 01:14:55,760 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).subSequence(77947797, -1573737559).substring(-1573789494, 492787035) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:14:55,763 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4, String)
2021-03-12 01:14:55,764 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4 String
2021-03-12 01:14:55,764 [main:54] - Getting value of type String
2021-03-12 01:14:55,902 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:14:55,905 [main:58] - GENERATED VALUE OF TYPE String = "rwvpy"
2021-03-12 01:14:55,906 [main:61] - GENERATED IS CALL =false
2021-03-12 01:14:55,920 [main:67] - randomType = A
2021-03-12 01:14:56,062 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:14:56,066 [main:112] - generating klass A text = class A(val z: String) {
    fun map(s: String) = z + s
}
2021-03-12 01:14:56,193 [main:194] - Type params = []
2021-03-12 01:14:56,323 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:14:56,363 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@5c3658a8]
2021-03-12 01:14:56,364 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1573a7e0]
2021-03-12 01:14:56,493 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:56,496 [main:78] - Generated call from random type = (A("mifpy")).map(A("lhnqj").map()).substringAfterLast('䆥', A("lhnqj").map())
2021-03-12 01:14:56,496 [main:106] - GETTING String from String
2021-03-12 01:14:56,523 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]]
2021-03-12 01:14:56,523 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]
2021-03-12 01:14:56,523 [main:117] - GENERATED CALL = (A("lhnqj").map()).trimIndent()
2021-03-12 01:14:56,523 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]]
2021-03-12 01:14:56,523 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]
2021-03-12 01:14:56,652 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:14:56,658 [main:117] - GENERATED CALL = (A("lhnqj").map()).removeSurrounding("xrlym")
2021-03-12 01:14:56,658 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e748520]]
2021-03-12 01:14:56,658 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e748520]
2021-03-12 01:14:56,658 [main:117] - GENERATED CALL = (A("lhnqj").map()).trimStart()
2021-03-12 01:14:56,658 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]]
2021-03-12 01:14:56,658 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]
2021-03-12 01:14:56,786 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:56,789 [main:117] - GENERATED CALL = (A("lhnqj").map()).replaceAfter('ꈤ', A("lhnqj").map(), A("lhnqj").map())
2021-03-12 01:14:56,789 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]]
2021-03-12 01:14:56,789 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]
2021-03-12 01:14:56,916 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:14:56,918 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:14:56,921 [main:117] - GENERATED CALL = (A("lhnqj").map()).filterNot({a: Char -> false})
2021-03-12 01:14:56,921 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]]
2021-03-12 01:14:56,922 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]
2021-03-12 01:14:56,922 [main:117] - GENERATED CALL = (A("lhnqj").map()).prependIndent(A("lhnqj").z)
2021-03-12 01:14:56,922 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]]
2021-03-12 01:14:56,922 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]
2021-03-12 01:14:56,922 [main:117] - GENERATED CALL = (A("lhnqj").map()).lowercase()
2021-03-12 01:14:56,922 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]]
2021-03-12 01:14:56,922 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]
2021-03-12 01:14:57,051 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:57,054 [main:117] - GENERATED CALL = (A("lhnqj").map()).dropLast(1627160183)
2021-03-12 01:14:57,054 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]]
2021-03-12 01:14:57,054 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]
2021-03-12 01:14:57,182 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:57,313 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:14:57,445 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:57,448 [main:117] - GENERATED CALL = (A("lhnqj").map()).replace('炈', '啕', true)
2021-03-12 01:14:57,448 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]]
2021-03-12 01:14:57,448 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:14:57,577 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:57,709 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:14:57,712 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]
2021-03-12 01:14:57,844 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:14:57,978 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:14:57,982 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:14:58,267 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:14:58,270 [main:95] - GENERATED = StringBuilder(-719971937)
2021-03-12 01:14:58,401 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:14:58,404 [main:117] - GENERATED CALL = (A("lhnqj").map()).subSequence(-889287629, -170751749).commonPrefixWith(StringBuilder(-719971937), false)
2021-03-12 01:14:58,404 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4 of type String is A("lhnqj").map()
2021-03-12 01:14:58,536 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:14:58,536 [main:66] - Compilation checking started
2021-03-12 01:14:58,951 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).subSequence(77947797, -1573737559).substring(-1573789494, 492787035) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error(A("lhnqj").map())
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:14:58,954 [main:107] - replacing ({
            prope1.prope5 = true
        }, Function0<Unit>)
2021-03-12 01:14:58,954 [main:50] - replacing {
            prope1.prope5 = true
        } Function0<Unit>
2021-03-12 01:14:58,954 [main:54] - Getting value of type Function0<Unit>
2021-03-12 01:14:59,088 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 01:14:59,091 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:14:59,230 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:14:59,233 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:14:59,666 [main:302] - generating value of type = Int true depth = 4
2021-03-12 01:14:59,668 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 01:14:59,671 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 01:14:59,806 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:14:59,810 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:15:00,152 [main:302] - generating value of type = Any false depth = 8
2021-03-12 01:15:00,152 [main:95] - GENERATED = println("gsmsa")
2021-03-12 01:15:00,152 [main:95] - GENERATED = repeat(-1517439392, {a: Int -> println("gsmsa")})
2021-03-12 01:15:00,152 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
2021-03-12 01:15:00,152 [main:61] - GENERATED IS CALL =false
2021-03-12 01:15:00,163 [main:67] - randomType = A
2021-03-12 01:15:00,289 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:15:00,292 [main:112] - generating klass A text = class A(val z: String) {
    fun map(s: String) = z + s
}
2021-03-12 01:15:00,420 [main:194] - Type params = []
2021-03-12 01:15:00,549 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:15:00,559 [main:106] - GETTING Function0<Unit> from String
2021-03-12 01:15:00,586 [main:106] - GETTING Function0<Unit> from Array<String>
2021-03-12 01:15:00,601 [main:106] - GETTING Function0<Unit> from List<String>
2021-03-12 01:15:00,637 [main:106] - GETTING Function0<Unit> from String
2021-03-12 01:15:00,638 [main:106] - GETTING Function0<Unit> from A
2021-03-12 01:15:00,646 [main:106] - GETTING Function0<Unit> from String
2021-03-12 01:15:00,646 [main:114] - replacement of {
            prope1.prope5 = true
        } of type Function0<Unit> is { repeat(-1517439392, {a: Int -> println("gsmsa")})}
2021-03-12 01:15:00,775 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:15:00,776 [main:66] - Compilation checking started
2021-03-12 01:15:01,456 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).subSequence(77947797, -1573737559).substring(-1573789494, 492787035) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:01,459 [main:107] - replacing (prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})}), Unit?)
2021-03-12 01:15:01,459 [main:50] - replacing prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})}) Unit?
2021-03-12 01:15:01,459 [main:54] - Getting value of type Unit?
2021-03-12 01:15:01,589 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 01:15:01,722 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:15:01,726 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:15:02,010 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 01:15:02,013 [main:95] - GENERATED = require(true)
2021-03-12 01:15:02,013 [main:58] - GENERATED VALUE OF TYPE Unit? = require(true)
2021-03-12 01:15:02,013 [main:61] - GENERATED IS CALL =true
2021-03-12 01:15:02,162 [main:67] - randomType = Long
2021-03-12 01:15:02,290 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:15:02,332 [main:106] - GETTING Unit? from List<String>
2021-03-12 01:15:02,360 [main:113] - Case = [public abstract fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@69fde6f0], public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3daf4e64]]
2021-03-12 01:15:02,360 [main:149] - GENERATING call of type public abstract fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@69fde6f0]
2021-03-12 01:15:02,360 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3daf4e64]
2021-03-12 01:15:02,488 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-12 01:15:02,491 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:15:02,625 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:15:02,629 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:15:03,060 [main:302] - generating value of type = Int true depth = 4
2021-03-12 01:15:03,063 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 01:15:03,067 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 01:15:03,202 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:15:03,206 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:15:03,640 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 01:15:03,643 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 01:15:03,645 [main:302] - generating value of type = Any false depth = 9
2021-03-12 01:15:03,646 [main:95] - GENERATED = check(true, { "ojfsy"})
2021-03-12 01:15:03,646 [main:95] - GENERATED = repeat(-878260561, {a: Int -> check(true, { "ojfsy"})})
2021-03-12 01:15:03,646 [main:117] - GENERATED CALL = (s.map(a::map))?.iterator().forEach({a: T -> repeat(-878260561, {a: Int -> check(true, { "ojfsy"})})})
2021-03-12 01:15:03,647 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.forEachIndexed(action: (index: kotlin.Int, T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@47a20fab]]
2021-03-12 01:15:03,647 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.forEachIndexed(action: (index: kotlin.Int, T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@47a20fab]
2021-03-12 01:15:03,777 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, T, Unit> false depth = 0
2021-03-12 01:15:03,780 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:15:03,915 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:15:03,919 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:15:04,241 [main:302] - generating value of type = Any false depth = 4
2021-03-12 01:15:04,242 [main:95] - GENERATED = print("pvwvg")
2021-03-12 01:15:04,242 [main:117] - GENERATED CALL = (s.map(a::map))?.forEachIndexed({a: Int, b: T -> print("pvwvg")})
2021-03-12 01:15:04,242 [main:113] - Case = [@kotlin.internal.HidesMembers public inline fun <T> kotlin.collections.Iterable<T>.forEach(action: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4ceb78cc]]
2021-03-12 01:15:04,242 [main:149] - GENERATING call of type @kotlin.internal.HidesMembers public inline fun <T> kotlin.collections.Iterable<T>.forEach(action: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4ceb78cc]
2021-03-12 01:15:04,372 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-12 01:15:04,375 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:15:04,509 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:15:04,513 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:15:04,795 [main:302] - generating value of type = Any false depth = 4
2021-03-12 01:15:04,795 [main:95] - GENERATED = println("rjxbz")
2021-03-12 01:15:04,795 [main:117] - GENERATED CALL = (s.map(a::map))?.forEach({a: T -> println("rjxbz")})
2021-03-12 01:15:04,795 [main:114] - replacement of prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})}) of type Unit? is (s.map(a::map))?.forEach({a: T -> println("rjxbz")})
2021-03-12 01:15:04,924 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 01:15:04,924 [main:66] - Compilation checking started
2021-03-12 01:15:05,385 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
(s.map(a::map))?.forEach({a: T -> println("rjxbz")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).subSequence(77947797, -1573737559).substring(-1573789494, 492787035) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:05,387 [main:107] - replacing (prope6, Function0<Unit>)
2021-03-12 01:15:05,387 [main:50] - replacing prope6 Function0<Unit>
2021-03-12 01:15:05,387 [main:54] - Getting value of type Function0<Unit>
2021-03-12 01:15:05,519 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 01:15:05,522 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:15:05,528 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-12 01:15:05,528 [main:61] - GENERATED IS CALL =false
2021-03-12 01:15:05,682 [main:67] - randomType = Kla6
2021-03-12 01:15:05,816 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 01:15:05,819 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}
2021-03-12 01:15:05,850 [main:106] - GETTING Function0<Unit> from List<String>
2021-03-12 01:15:05,887 [main:106] - GETTING Function0<Unit> from Array<String>
2021-03-12 01:15:05,903 [main:106] - GETTING Function0<Unit> from String
2021-03-12 01:15:05,928 [main:106] - GETTING Function0<Unit> from String
2021-03-12 01:15:05,929 [main:106] - GETTING Function0<Unit> from String
2021-03-12 01:15:05,930 [main:106] - GETTING Function0<Unit> from A
2021-03-12 01:15:05,937 [main:114] - replacement of prope6 of type Function0<Unit> is { println()}
2021-03-12 01:15:06,073 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 01:15:06,074 [main:66] - Compilation checking started
2021-03-12 01:15:06,511 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).subSequence(77947797, -1573737559).substring(-1573789494, 492787035) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.{ println()} = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:06,513 [main:107] - replacing (prope2.getOrThrow(), Ty0)
2021-03-12 01:15:06,513 [main:50] - replacing prope2.getOrThrow() Ty0
2021-03-12 01:15:06,514 [main:54] - Getting value of type Ty0
2021-03-12 01:15:06,661 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 01:15:06,667 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 01:15:06,828 [main:67] - randomType = Kla5?
2021-03-12 01:15:06,968 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 01:15:06,971 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}
2021-03-12 01:15:06,982 [main:106] - GETTING Ty0 from A
2021-03-12 01:15:06,989 [main:106] - GETTING Ty0 from String
2021-03-12 01:15:07,018 [main:106] - GETTING Ty0 from List<String>
2021-03-12 01:15:07,054 [main:106] - GETTING Ty0 from String
2021-03-12 01:15:07,055 [main:106] - GETTING Ty0 from String
2021-03-12 01:15:07,056 [main:106] - GETTING Ty0 from Array<String>
2021-03-12 01:15:07,071 [main:111] - Cant find and generate replacement for prope2.getOrThrow() type Ty0
2021-03-12 01:15:07,071 [main:107] - replacing (true, Boolean)
2021-03-12 01:15:07,071 [main:50] - replacing true Boolean
2021-03-12 01:15:07,071 [main:54] - Getting value of type Boolean
2021-03-12 01:15:07,203 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:15:07,205 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 01:15:07,205 [main:61] - GENERATED IS CALL =false
2021-03-12 01:15:07,513 [main:67] - randomType = Kla3<UShort>
2021-03-12 01:15:07,645 [main:302] - generating value of type = Kla3<UShort> false depth = 0
2021-03-12 01:15:07,647 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 01:15:08,557 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-12 01:15:08,559 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}
2021-03-12 01:15:08,579 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@3e373b24]
2021-03-12 01:15:08,708 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:15:08,708 [main:78] - Generated call from random type = (Kla6).equals("yydqd")
2021-03-12 01:15:08,709 [main:106] - GETTING Boolean from String
2021-03-12 01:15:08,736 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e9e12a5]]
2021-03-12 01:15:08,736 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e9e12a5]
2021-03-12 01:15:08,864 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:15:08,997 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:15:09,000 [main:117] - GENERATED CALL = (stub({ "feqkq"})).contains('礊', true)
2021-03-12 01:15:09,000 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]]
2021-03-12 01:15:09,000 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]
2021-03-12 01:15:09,130 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:15:09,130 [main:117] - GENERATED CALL = (stub({ "feqkq"})).equals("nuoht")
2021-03-12 01:15:09,130 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50d4b6b8]]
2021-03-12 01:15:09,130 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:15:09,260 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:09,263 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50d4b6b8]
2021-03-12 01:15:09,263 [main:117] - GENERATED CALL = (stub({ "feqkq"})).get(903905252).isISOControl()
2021-03-12 01:15:09,263 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d24d012]]
2021-03-12 01:15:09,263 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d24d012]
2021-03-12 01:15:09,263 [main:117] - GENERATED CALL = (stub({ "feqkq"})).isNotBlank()
2021-03-12 01:15:09,263 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14cf536a]]
2021-03-12 01:15:09,263 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:15:09,391 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:09,394 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14cf536a]
2021-03-12 01:15:09,395 [main:117] - GENERATED CALL = (stub({ "feqkq"})).get(-548239190).isLowSurrogate()
2021-03-12 01:15:09,395 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]]
2021-03-12 01:15:09,395 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]
2021-03-12 01:15:09,525 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:15:09,525 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]
2021-03-12 01:15:09,658 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:15:09,661 [main:117] - GENERATED CALL = (stub({ "feqkq"})).equals("wdtvx").or(true)
2021-03-12 01:15:09,661 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b823c34]]
2021-03-12 01:15:09,661 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b823c34]
2021-03-12 01:15:09,661 [main:117] - GENERATED CALL = (stub({ "feqkq"})).isNotEmpty()
2021-03-12 01:15:09,661 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6458768e]]
2021-03-12 01:15:09,661 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:15:09,793 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:09,923 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:09,926 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6458768e]
2021-03-12 01:15:09,926 [main:117] - GENERATED CALL = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()
2021-03-12 01:15:09,926 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d24d012]]
2021-03-12 01:15:09,926 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:15:10,053 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:10,182 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:10,185 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d24d012]
2021-03-12 01:15:10,186 [main:117] - GENERATED CALL = (stub({ "feqkq"})).subSequence(977874216, -959769194).isNotBlank()
2021-03-12 01:15:10,186 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e6cda34]]
2021-03-12 01:15:10,186 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:15:10,312 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:10,315 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e6cda34]
2021-03-12 01:15:10,315 [main:117] - GENERATED CALL = (stub({ "feqkq"})).get(476987763).isUpperCase()
2021-03-12 01:15:10,315 [main:114] - replacement of true of type Boolean is (stub({ "feqkq"})).subSequence(704260342, 14260282).any()
2021-03-12 01:15:10,443 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:15:10,443 [main:66] - Compilation checking started
2021-03-12 01:15:11,048 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).subSequence(77947797, -1573737559).substring(-1573789494, 492787035) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:11,052 [main:107] - replacing (prope2.getOrThrow(), Ty0)
2021-03-12 01:15:11,052 [main:50] - replacing prope2.getOrThrow() Ty0
2021-03-12 01:15:11,052 [main:54] - Getting value of type Ty0
2021-03-12 01:15:11,204 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 01:15:11,211 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 01:15:11,364 [main:67] - randomType = Double
2021-03-12 01:15:11,498 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:15:11,541 [main:106] - GETTING Ty0 from String
2021-03-12 01:15:11,560 [main:106] - GETTING Ty0 from String
2021-03-12 01:15:11,561 [main:106] - GETTING Ty0 from A
2021-03-12 01:15:11,568 [main:106] - GETTING Ty0 from String
2021-03-12 01:15:11,568 [main:106] - GETTING Ty0 from List<String>
2021-03-12 01:15:11,595 [main:106] - GETTING Ty0 from Array<String>
2021-03-12 01:15:11,607 [main:111] - Cant find and generate replacement for prope2.getOrThrow() type Ty0
2021-03-12 01:15:11,607 [main:107] - replacing (false, Boolean)
2021-03-12 01:15:11,607 [main:50] - replacing false Boolean
2021-03-12 01:15:11,607 [main:54] - Getting value of type Boolean
2021-03-12 01:15:11,741 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:15:11,744 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 01:15:11,744 [main:61] - GENERATED IS CALL =false
2021-03-12 01:15:11,755 [main:67] - randomType = Kla5
2021-03-12 01:15:11,888 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 01:15:11,891 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}
2021-03-12 01:15:11,901 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla5[DeserializedSimpleFunctionDescriptor@6fdaa7e3]
2021-03-12 01:15:12,067 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:15:12,068 [main:78] - Generated call from random type = (Kla5()).equals("ibvpk")
2021-03-12 01:15:12,069 [main:106] - GETTING Boolean from A
2021-03-12 01:15:12,075 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@62647c8a], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]]
2021-03-12 01:15:12,075 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@62647c8a]
2021-03-12 01:15:12,212 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:15:12,213 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]
2021-03-12 01:15:12,346 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:15:12,349 [main:117] - GENERATED CALL = (a).equals("avwre").xor(false)
2021-03-12 01:15:12,349 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@388bb1cd]]
2021-03-12 01:15:12,350 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2]
2021-03-12 01:15:12,482 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:15:12,485 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@388bb1cd]
2021-03-12 01:15:12,485 [main:117] - GENERATED CALL = (a).map("yziig").toBoolean()
2021-03-12 01:15:12,485 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@62647c8a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c479748]]
2021-03-12 01:15:12,486 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@62647c8a]
2021-03-12 01:15:12,619 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:15:12,620 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c479748]
2021-03-12 01:15:12,755 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:15:12,755 [main:117] - GENERATED CALL = (a).equals("ihoqb").equals("wesjd")
2021-03-12 01:15:12,756 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@62647c8a], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14ca80b4]]
2021-03-12 01:15:12,756 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@62647c8a]
2021-03-12 01:15:12,887 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:15:12,888 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14ca80b4]
2021-03-12 01:15:12,888 [main:117] - GENERATED CALL = (a).equals("dmeav").not()
2021-03-12 01:15:12,888 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a1bce3]]
2021-03-12 01:15:12,888 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2]
2021-03-12 01:15:12,888 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a1bce3]
2021-03-12 01:15:13,023 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:15:13,026 [main:117] - GENERATED CALL = (a).map(A("lhnqj").z).startsWith(A("lhnqj").map(), false)
2021-03-12 01:15:13,026 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@62647c8a]]
2021-03-12 01:15:13,026 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@62647c8a]
2021-03-12 01:15:13,160 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:15:13,160 [main:117] - GENERATED CALL = (a).equals("dcnce")
2021-03-12 01:15:13,160 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24bfea79]]
2021-03-12 01:15:13,160 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2]
2021-03-12 01:15:13,161 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24bfea79]
2021-03-12 01:15:13,161 [main:117] - GENERATED CALL = (a).map(A("lhnqj").z).matches(A("lhnqj").z)
2021-03-12 01:15:13,161 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@62647c8a], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]]
2021-03-12 01:15:13,161 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@62647c8a]
2021-03-12 01:15:13,295 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:15:13,295 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]
2021-03-12 01:15:13,430 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:15:13,433 [main:117] - GENERATED CALL = (a).equals("shkjz").or(true)
2021-03-12 01:15:13,434 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@550cc78c]]
2021-03-12 01:15:13,434 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2]
2021-03-12 01:15:13,434 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@550cc78c]
2021-03-12 01:15:13,568 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:15:13,571 [main:117] - GENERATED CALL = (a).map(stub({ "feqkq"})).endsWith(stub({ "feqkq"}), true)
2021-03-12 01:15:13,571 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@62647c8a], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3df8a0d8]]
2021-03-12 01:15:13,571 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@62647c8a]
2021-03-12 01:15:13,704 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:15:13,704 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3df8a0d8]
2021-03-12 01:15:13,839 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:15:13,842 [main:117] - GENERATED CALL = (a).equals("snldx").and(true)
2021-03-12 01:15:13,842 [main:114] - replacement of false of type Boolean is (a).map(stub({ "feqkq"})).endsWith(stub({ "feqkq"}), true)
2021-03-12 01:15:13,975 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:15:13,976 [main:66] - Compilation checking started
2021-03-12 01:15:14,378 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
(c as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).subSequence(77947797, -1573737559).substring(-1573789494, 492787035) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = (a).map(stub({ "feqkq"})).endsWith(stub({ "feqkq"}), true)

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:14,381 [main:107] - replacing (c, SuspendFunction1<Kla0, Unit>)
2021-03-12 01:15:14,381 [main:50] - replacing c SuspendFunction1<Kla0, Unit>
2021-03-12 01:15:14,381 [main:54] - Getting value of type SuspendFunction1<Kla0, Unit>
2021-03-12 01:15:14,514 [main:302] - generating value of type = SuspendFunction1<Kla0, Unit> false depth = 0
2021-03-12 01:15:14,517 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:15:14,657 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:15:14,661 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:15:15,110 [main:302] - generating value of type = Int true depth = 4
2021-03-12 01:15:15,113 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 01:15:15,116 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 01:15:15,271 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:15:15,276 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:15:15,604 [main:302] - generating value of type = Any false depth = 8
2021-03-12 01:15:15,604 [main:95] - GENERATED = print("wgecv")
2021-03-12 01:15:15,605 [main:95] - GENERATED = repeat(-743559576, {a: Int -> print("wgecv")})
2021-03-12 01:15:15,605 [main:58] - GENERATED VALUE OF TYPE SuspendFunction1<Kla0, Unit> = {a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})}
2021-03-12 01:15:15,605 [main:61] - GENERATED IS CALL =false
2021-03-12 01:15:15,618 [main:67] - randomType = Kla5
2021-03-12 01:15:15,767 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 01:15:15,770 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}
2021-03-12 01:15:15,784 [main:106] - GETTING SuspendFunction1<Kla0, Unit> from Array<String>
2021-03-12 01:15:15,802 [main:106] - GETTING SuspendFunction1<Kla0, Unit> from String
2021-03-12 01:15:15,834 [main:106] - GETTING SuspendFunction1<Kla0, Unit> from A
2021-03-12 01:15:15,844 [main:106] - GETTING SuspendFunction1<Kla0, Unit> from List<String>
2021-03-12 01:15:15,887 [main:106] - GETTING SuspendFunction1<Kla0, Unit> from String
2021-03-12 01:15:15,888 [main:106] - GETTING SuspendFunction1<Kla0, Unit> from String
2021-03-12 01:15:15,888 [main:114] - replacement of c of type SuspendFunction1<Kla0, Unit> is {a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})}
2021-03-12 01:15:16,070 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 01:15:16,071 [main:66] - Compilation checking started
2021-03-12 01:15:16,776 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).subSequence(77947797, -1573737559).substring(-1573789494, 492787035) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = false
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:16,778 [main:107] - replacing (false, Boolean)
2021-03-12 01:15:16,778 [main:50] - replacing false Boolean
2021-03-12 01:15:16,778 [main:54] - Getting value of type Boolean
2021-03-12 01:15:16,928 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:15:16,931 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 01:15:16,931 [main:61] - GENERATED IS CALL =false
2021-03-12 01:15:17,097 [main:67] - randomType = Kla2?
2021-03-12 01:15:17,230 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 01:15:17,233 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 01:15:17,256 [main:149] - GENERATING call of type public open fun resumeWith(prope2: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in Kla2[SimpleFunctionDescriptorImpl@5fda0611]
2021-03-12 01:15:17,387 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 01:15:17,526 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 01:15:17,530 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 01:15:17,819 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 01:15:17,822 [main:302] - generating value of type = Any false depth = 4
2021-03-12 01:15:17,822 [main:95] - GENERATED = runCatching<Any?>({ "ygesj"})
2021-03-12 01:15:17,822 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@5ea3d8ed]
2021-03-12 01:15:17,954 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:15:17,954 [main:78] - Generated call from random type = (Kla2())?.resumeWith(runCatching<Any?>({ "ygesj"})).equals("wjwoj")
2021-03-12 01:15:17,955 [main:106] - GETTING Boolean from Array<String>
2021-03-12 01:15:17,971 [main:113] - Case = [public final operator fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@b9cbaf7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@74ae2294]]
2021-03-12 01:15:17,971 [main:149] - GENERATING call of type public final operator fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@b9cbaf7]
2021-03-12 01:15:17,971 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@74ae2294]
2021-03-12 01:15:18,106 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:15:18,106 [main:117] - GENERATED CALL = (s).iterator().equals("uowji")
2021-03-12 01:15:18,107 [main:113] - Case = [public fun <T> kotlin.Array<out T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40c93da3]]
2021-03-12 01:15:18,107 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40c93da3]
2021-03-12 01:15:18,107 [main:117] - GENERATED CALL = (s).any()
2021-03-12 01:15:18,107 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@388bb1cd]]
2021-03-12 01:15:18,107 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:15:18,242 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:18,245 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@388bb1cd]
2021-03-12 01:15:18,245 [main:117] - GENERATED CALL = (s).get(-1348145652).toBoolean()
2021-03-12 01:15:18,245 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@cdcd08d]]
2021-03-12 01:15:18,245 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@cdcd08d]
2021-03-12 01:15:18,246 [main:117] - GENERATED CALL = (s).isEmpty()
2021-03-12 01:15:18,246 [main:113] - Case = [public final operator fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@b9cbaf7], public abstract operator fun hasNext(): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@52c5c07b]]
2021-03-12 01:15:18,246 [main:149] - GENERATING call of type public final operator fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@b9cbaf7]
2021-03-12 01:15:18,246 [main:149] - GENERATING call of type public abstract operator fun hasNext(): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@52c5c07b]
2021-03-12 01:15:18,246 [main:117] - GENERATED CALL = (s).iterator().hasNext()
2021-03-12 01:15:18,246 [main:113] - Case = [public fun <T> kotlin.Array<out T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@312e3de0]]
2021-03-12 01:15:18,246 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@312e3de0]
2021-03-12 01:15:18,246 [main:117] - GENERATED CALL = (s).none()
2021-03-12 01:15:18,246 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6bb59fa4]]
2021-03-12 01:15:18,246 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6bb59fa4]
2021-03-12 01:15:18,394 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-12 01:15:18,532 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-12 01:15:18,536 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-12 01:15:18,672 [main:302] - generating value of type = T false depth = 3
2021-03-12 01:15:19,266 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Function1<UInt, Double>, b: Function1<UInt, Double>, comparator: kotlin.Comparator<Function1<UInt, Double>>): T = TODO()
2021-03-12 01:15:19,270 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Function1<UInt, Double>, b: Function1<UInt, Double>, comparator: kotlin.Comparator<Function1<UInt, Double>>): T = TODO()
2021-03-12 01:15:19,571 [main:302] - generating value of type = Function1<UInt, Double> false depth = 6
2021-03-12 01:15:19,574 [main:302] - generating value of type = Double true depth = 7
2021-03-12 01:15:19,577 [main:302] - generating value of type = Function1<UInt, Double> false depth = 6
2021-03-12 01:15:19,579 [main:302] - generating value of type = Double true depth = 7
2021-03-12 01:15:19,582 [main:302] - generating value of type = Comparator<Function1<UInt, Double>> false depth = 6
2021-03-12 01:15:19,718 [main:43] - GENERATING CALL OF fun <T> nullsLast(comparator: kotlin.Comparator<Function1<UInt, Double>>): Comparator<Function1<UInt, Double>> = TODO()
2021-03-12 01:15:19,722 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsLast(comparator: kotlin.Comparator<Function1<UInt, Double>>): Comparator<Function1<UInt, Double>> = TODO()
2021-03-12 01:15:20,016 [main:302] - generating value of type = Comparator<Function1<UInt, Double>> false depth = 9
2021-03-12 01:15:20,372 [main:43] - GENERATING CALL OF fun <T, K> compareByDescending(comparator: kotlin.Comparator<Array<Kla1>>, selector: (Function1<UInt, Double>)->Array<Kla1>): Comparator<Function1<UInt, Double>> = TODO()
2021-03-12 01:15:20,376 [main:61] - WITHOUT TYPE PARAMS = fun <T, K> compareByDescending(comparator: kotlin.Comparator<Array<Kla1>>, selector: (Function1<UInt, Double>)->Array<Kla1>): Comparator<Function1<UInt, Double>> = TODO()
2021-03-12 01:15:20,824 [main:302] - generating value of type = Comparator<Array<Kla1>> false depth = 12
2021-03-12 01:15:20,968 [main:43] - GENERATING CALL OF fun <T> nullsFirst(comparator: kotlin.Comparator<Array<Kla1>>): Comparator<Array<Kla1>> = TODO()
2021-03-12 01:15:20,972 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(comparator: kotlin.Comparator<Array<Kla1>>): Comparator<Array<Kla1>> = TODO()
2021-03-12 01:15:21,264 [main:302] - generating value of type = Comparator<Array<Kla1>> false depth = 15
2021-03-12 01:15:21,402 [main:43] - GENERATING CALL OF fun <T> nullsFirst(): Comparator<Array<Kla1>> = TODO()
2021-03-12 01:15:21,406 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(): Comparator<Array<Kla1>> = TODO()
2021-03-12 01:15:21,542 [main:95] - GENERATED = nullsFirst<Array<Kla1>>()
2021-03-12 01:15:21,542 [main:95] - GENERATED = nullsFirst<Array<Kla1>>(nullsFirst<Array<Kla1>>())
2021-03-12 01:15:21,542 [main:302] - generating value of type = Function1<Function1<UInt, Double>, Array<Kla1>> false depth = 12
2021-03-12 01:15:21,545 [main:302] - generating value of type = Array<Kla1> false depth = 13
2021-03-12 01:15:21,683 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Kla1> = TODO()
2021-03-12 01:15:21,687 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Kla1> = TODO()
2021-03-12 01:15:21,825 [main:95] - GENERATED = emptyArray<Kla1>()
2021-03-12 01:15:21,825 [main:95] - GENERATED = compareByDescending<Function1<UInt, Double>, Array<Kla1>>(nullsFirst<Array<Kla1>>(nullsFirst<Array<Kla1>>()), {a: Function1<UInt, Double> -> emptyArray<Kla1>()})
2021-03-12 01:15:21,826 [main:95] - GENERATED = nullsLast<Function1<UInt, Double>>(compareByDescending<Function1<UInt, Double>, Array<Kla1>>(nullsFirst<Array<Kla1>>(nullsFirst<Array<Kla1>>()), {a: Function1<UInt, Double> -> emptyArray<Kla1>()}))
2021-03-12 01:15:21,827 [main:95] - GENERATED = maxOf<Function1<UInt, Double>>({a: UInt -> 0.4186843462888894}, {a: UInt -> 0.3177249469662091}, nullsLast<Function1<UInt, Double>>(compareByDescending<Function1<UInt, Double>, Array<Kla1>>(nullsFirst<Array<Kla1>>(nullsFirst<Array<Kla1>>()), {a: Function1<UInt, Double> -> emptyArray<Kla1>()})))
2021-03-12 01:15:21,827 [main:95] - GENERATED = arrayOf<T>(maxOf<Function1<UInt, Double>>({a: UInt -> 0.4186843462888894}, {a: UInt -> 0.3177249469662091}, nullsLast<Function1<UInt, Double>>(compareByDescending<Function1<UInt, Double>, Array<Kla1>>(nullsFirst<Array<Kla1>>(nullsFirst<Array<Kla1>>()), {a: Function1<UInt, Double> -> emptyArray<Kla1>()}))))
2021-03-12 01:15:21,828 [main:117] - GENERATED CALL = (s).contentDeepEquals(arrayOf<T>(maxOf<Function1<UInt, Double>>({a: UInt -> 0.4186843462888894}, {a: UInt -> 0.3177249469662091}, nullsLast<Function1<UInt, Double>>(compareByDescending<Function1<UInt, Double>, Array<Kla1>>(nullsFirst<Array<Kla1>>(nullsFirst<Array<Kla1>>()), {a: Function1<UInt, Double> -> emptyArray<Kla1>()})))))
2021-03-12 01:15:21,828 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c479748]]
2021-03-12 01:15:21,828 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a]
2021-03-12 01:15:21,959 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:15:21,960 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c479748]
2021-03-12 01:15:22,091 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:15:22,092 [main:117] - GENERATED CALL = (s).equals("qoyzi").equals("eqecu")
2021-03-12 01:15:22,092 [main:113] - Case = [public inline fun <T> kotlin.Array<out T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a2883f]]
2021-03-12 01:15:22,092 [main:149] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a2883f]
2021-03-12 01:15:22,222 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 01:15:22,225 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:15:22,228 [main:117] - GENERATED CALL = (s).all({a: T -> true})
2021-03-12 01:15:22,228 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1c290b82]]
2021-03-12 01:15:22,228 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1c290b82]
2021-03-12 01:15:22,228 [main:117] - GENERATED CALL = (s).isNotEmpty()
2021-03-12 01:15:22,228 [main:114] - replacement of false of type Boolean is (s).isNotEmpty()
2021-03-12 01:15:22,360 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:15:22,360 [main:66] - Compilation checking started
2021-03-12 01:15:22,987 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).subSequence(77947797, -1573737559).substring(-1573789494, 492787035) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:22,989 [main:107] - replacing ("Continuation " + c, String)
2021-03-12 01:15:22,990 [main:50] - replacing "Continuation " + c String
2021-03-12 01:15:22,990 [main:54] - Getting value of type String
2021-03-12 01:15:23,138 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:15:23,142 [main:58] - GENERATED VALUE OF TYPE String = "nwcpf"
2021-03-12 01:15:23,142 [main:61] - GENERATED IS CALL =false
2021-03-12 01:15:23,148 [main:67] - randomType = Int
2021-03-12 01:15:23,285 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:23,334 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4aef001f]
2021-03-12 01:15:23,335 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6692e134]
2021-03-12 01:15:23,466 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:23,469 [main:78] - Generated call from random type = (-642299093).toLong().toString(-1952421334)
2021-03-12 01:15:23,469 [main:106] - GETTING String from String
2021-03-12 01:15:23,497 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]]
2021-03-12 01:15:23,497 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]
2021-03-12 01:15:23,629 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:15:23,764 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:15:23,897 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:15:23,900 [main:117] - GENERATED CALL = (stub({ "feqkq"})).replace('数', '丄', false)
2021-03-12 01:15:23,900 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507f736]]
2021-03-12 01:15:23,900 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507f736]
2021-03-12 01:15:24,036 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:24,193 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:24,197 [main:117] - GENERATED CALL = (stub({ "feqkq"})).removeRange(389422719, 1299595670)
2021-03-12 01:15:24,198 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@797c3840]]
2021-03-12 01:15:24,198 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@797c3840]
2021-03-12 01:15:24,198 [main:117] - GENERATED CALL = (stub({ "feqkq"})).decapitalize()
2021-03-12 01:15:24,198 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]]
2021-03-12 01:15:24,198 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]
2021-03-12 01:15:24,384 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:15:24,521 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:15:24,525 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:15:24,812 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:15:24,815 [main:95] - GENERATED = StringBuilder("boppm")
2021-03-12 01:15:24,947 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:15:24,950 [main:117] - GENERATED CALL = (stub({ "feqkq"})).commonPrefixWith(StringBuilder("boppm"), true)
2021-03-12 01:15:24,950 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]]
2021-03-12 01:15:24,950 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:15:25,085 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:25,224 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:25,227 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]
2021-03-12 01:15:25,363 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:25,500 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:25,503 [main:117] - GENERATED CALL = (stub({ "feqkq"})).subSequence(-739285529, 1621989623).substring(999985739, -762558175)
2021-03-12 01:15:25,503 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4997a579]]
2021-03-12 01:15:25,503 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4997a579]
2021-03-12 01:15:25,503 [main:117] - GENERATED CALL = (stub({ "feqkq"})).trimEnd()
2021-03-12 01:15:25,503 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]]
2021-03-12 01:15:25,503 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]
2021-03-12 01:15:25,637 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:15:25,640 [main:117] - GENERATED CALL = (stub({ "feqkq"})).replaceBeforeLast('', A("lhnqj").map(), A("lhnqj").z)
2021-03-12 01:15:25,640 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]]
2021-03-12 01:15:25,640 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]
2021-03-12 01:15:25,772 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:15:25,916 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:15:25,919 [main:117] - GENERATED CALL = (stub({ "feqkq"})).substringBeforeLast('', "fsies")
2021-03-12 01:15:25,920 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f7c18e5]]
2021-03-12 01:15:25,920 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f7c18e5]
2021-03-12 01:15:25,920 [main:117] - GENERATED CALL = (stub({ "feqkq"})).replaceIndent(A("lhnqj").z)
2021-03-12 01:15:25,920 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@454d6062]]
2021-03-12 01:15:25,920 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@454d6062]
2021-03-12 01:15:25,920 [main:117] - GENERATED CALL = (stub({ "feqkq"})).reversed()
2021-03-12 01:15:25,920 [main:114] - replacement of "Continuation " + c of type String is (stub({ "feqkq"})).decapitalize()
2021-03-12 01:15:26,052 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:15:26,052 [main:66] - Compilation checking started
2021-03-12 01:15:26,728 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).subSequence(77947797, -1573737559).substring(-1573789494, 492787035) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:26,731 [main:107] - replacing (prope2.getOrThrow(), Ty0)
2021-03-12 01:15:26,731 [main:50] - replacing prope2.getOrThrow() Ty0
2021-03-12 01:15:26,731 [main:54] - Getting value of type Ty0
2021-03-12 01:15:26,864 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 01:15:26,869 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 01:15:27,187 [main:67] - randomType = ArrayDeque<Kla5>
2021-03-12 01:15:27,319 [main:302] - generating value of type = ArrayDeque<Kla5> false depth = 0
2021-03-12 01:15:27,460 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Kla5> = TODO()
2021-03-12 01:15:27,464 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Kla5> = TODO()
2021-03-12 01:15:27,607 [main:95] - GENERATED = ArrayDeque<Kla5>()
2021-03-12 01:15:27,773 [main:106] - GETTING Ty0 from String
2021-03-12 01:15:27,799 [main:106] - GETTING Ty0 from Array<String>
2021-03-12 01:15:27,814 [main:106] - GETTING Ty0 from String
2021-03-12 01:15:27,814 [main:106] - GETTING Ty0 from A
2021-03-12 01:15:27,821 [main:106] - GETTING Ty0 from List<String>
2021-03-12 01:15:27,855 [main:106] - GETTING Ty0 from String
2021-03-12 01:15:27,855 [main:111] - Cant find and generate replacement for prope2.getOrThrow() type Ty0
2021-03-12 01:15:27,855 [main:107] - replacing (" has no state-machine ", String)
2021-03-12 01:15:27,855 [main:50] - replacing " has no state-machine " String
2021-03-12 01:15:27,855 [main:54] - Getting value of type String
2021-03-12 01:15:27,995 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:15:27,998 [main:58] - GENERATED VALUE OF TYPE String = "sljbt"
2021-03-12 01:15:27,998 [main:61] - GENERATED IS CALL =false
2021-03-12 01:15:28,009 [main:67] - randomType = Kla1
2021-03-12 01:15:28,144 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 01:15:28,146 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-12 01:15:28,282 [main:194] - Type params = []
2021-03-12 01:15:28,414 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 01:15:28,594 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:15:28,598 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:15:28,894 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 01:15:29,035 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:15:29,039 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:15:29,496 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:15:29,496 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:15:29,519 [main:106] - GETTING String from A
2021-03-12 01:15:29,525 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]]
2021-03-12 01:15:29,525 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2]
2021-03-12 01:15:29,525 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]
2021-03-12 01:15:29,658 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:29,661 [main:117] - GENERATED CALL = (a).map(stub({ "feqkq"})).drop(199370528)
2021-03-12 01:15:29,661 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f7c18e5]]
2021-03-12 01:15:29,661 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2]
2021-03-12 01:15:29,661 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f7c18e5]
2021-03-12 01:15:29,793 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:15:29,796 [main:117] - GENERATED CALL = (a).map(A("lhnqj").z).replaceIndent("yltat")
2021-03-12 01:15:29,796 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a16d90e]]
2021-03-12 01:15:29,796 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2]
2021-03-12 01:15:29,796 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a16d90e]
2021-03-12 01:15:29,797 [main:117] - GENERATED CALL = (a).map(A("lhnqj").map()).concat(A("lhnqj").map())
2021-03-12 01:15:29,797 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]]
2021-03-12 01:15:29,797 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2]
2021-03-12 01:15:29,797 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]
2021-03-12 01:15:29,929 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:15:30,064 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:15:30,199 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:15:30,202 [main:117] - GENERATED CALL = (a).map(stub({ "feqkq"})).replace('衤', 'ᓞ', true)
2021-03-12 01:15:30,202 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]]
2021-03-12 01:15:30,202 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2]
2021-03-12 01:15:30,203 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]
2021-03-12 01:15:30,335 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:15:30,472 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:15:30,475 [main:117] - GENERATED CALL = (a).map(A("lhnqj").z).substringBeforeLast('ሺ', "fmqrw")
2021-03-12 01:15:30,475 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]]
2021-03-12 01:15:30,475 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2]
2021-03-12 01:15:30,475 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]
2021-03-12 01:15:30,606 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:15:30,612 [main:117] - GENERATED CALL = (a).map(A("lhnqj").map()).removeSurrounding("qykrd")
2021-03-12 01:15:30,613 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52806f8a]]
2021-03-12 01:15:30,613 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2]
2021-03-12 01:15:30,745 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:15:30,748 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52806f8a]
2021-03-12 01:15:30,748 [main:117] - GENERATED CALL = (a).map("yqpfc").trimMargin(stub({ "feqkq"}))
2021-03-12 01:15:30,748 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]]
2021-03-12 01:15:30,748 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2]
2021-03-12 01:15:30,748 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]
2021-03-12 01:15:30,880 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:15:30,880 [main:117] - GENERATED CALL = (a).map(A("lhnqj").map()).plus("pvgva")
2021-03-12 01:15:30,880 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]]
2021-03-12 01:15:30,880 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2]
2021-03-12 01:15:31,013 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:15:31,018 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]
2021-03-12 01:15:31,018 [main:117] - GENERATED CALL = (a).map("fgfwa").trimIndent()
2021-03-12 01:15:31,018 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]]
2021-03-12 01:15:31,018 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@138b30d2]
2021-03-12 01:15:31,156 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:15:31,159 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]
2021-03-12 01:15:31,159 [main:117] - GENERATED CALL = (a).map("msbyo").lowercase()
2021-03-12 01:15:31,159 [main:114] - replacement of " has no state-machine " of type String is (a).map("yqpfc").trimMargin(stub({ "feqkq"}))
2021-03-12 01:15:31,292 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:15:31,292 [main:66] - Compilation checking started
2021-03-12 01:15:31,952 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).subSequence(77947797, -1573737559).substring(-1573789494, 492787035) + (a).map("yqpfc").trimMargin(stub({ "feqkq"})) +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:31,955 [main:107] - replacing ((stub({ "feqkq"})).subSequence(77947797, -1573737559).substring(-1573789494, 492787035) + (a).map("yqpfc").trimMargin(stub({ "feqkq"})), String)
2021-03-12 01:15:31,955 [main:50] - replacing (stub({ "feqkq"})).subSequence(77947797, -1573737559).substring(-1573789494, 492787035) + (a).map("yqpfc").trimMargin(stub({ "feqkq"})) String
2021-03-12 01:15:31,955 [main:54] - Getting value of type String
2021-03-12 01:15:32,107 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:15:32,110 [main:58] - GENERATED VALUE OF TYPE String = "oawjl"
2021-03-12 01:15:32,110 [main:61] - GENERATED IS CALL =false
2021-03-12 01:15:32,274 [main:67] - randomType = Boolean?
2021-03-12 01:15:32,408 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:15:32,425 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@491e892a]
2021-03-12 01:15:32,564 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:15:32,567 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:15:32,740 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:32,744 [main:78] - Generated call from random type = (true)?.compareTo(false).toString(1054573108)
2021-03-12 01:15:32,744 [main:106] - GETTING String from String
2021-03-12 01:15:32,770 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]]
2021-03-12 01:15:32,770 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]
2021-03-12 01:15:32,903 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:32,906 [main:117] - GENERATED CALL = (stub({ "feqkq"})).dropLast(1195100227)
2021-03-12 01:15:32,906 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]]
2021-03-12 01:15:32,906 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]
2021-03-12 01:15:33,039 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:15:33,177 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:15:33,180 [main:117] - GENERATED CALL = (stub({ "feqkq"})).replaceAfter('琎', "yrnms", A("lhnqj").z)
2021-03-12 01:15:33,180 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a16d90e]]
2021-03-12 01:15:33,180 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a16d90e]
2021-03-12 01:15:33,180 [main:117] - GENERATED CALL = (stub({ "feqkq"})).concat(stub({ "feqkq"}))
2021-03-12 01:15:33,180 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]]
2021-03-12 01:15:33,180 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]
2021-03-12 01:15:33,313 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:15:33,316 [main:117] - GENERATED CALL = (stub({ "feqkq"})).replaceBeforeLast('ꁶ', stub({ "feqkq"}), A("lhnqj").map())
2021-03-12 01:15:33,317 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]]
2021-03-12 01:15:33,317 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]
2021-03-12 01:15:33,449 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:33,452 [main:117] - GENERATED CALL = (stub({ "feqkq"})).drop(2089248995)
2021-03-12 01:15:33,452 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c072050]]
2021-03-12 01:15:33,452 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c072050]
2021-03-12 01:15:33,584 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:15:33,720 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:15:33,856 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:15:33,860 [main:117] - GENERATED CALL = (stub({ "feqkq"})).replaceAfterLast('ώ', "gtenm", "zhhps")
2021-03-12 01:15:33,860 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56864111]]
2021-03-12 01:15:33,860 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:15:33,992 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:34,136 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:34,139 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56864111]
2021-03-12 01:15:34,273 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 01:15:34,412 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 01:15:34,416 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 01:15:34,858 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:15:34,861 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 01:15:34,864 [main:95] - GENERATED = Regex("qviqv", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 01:15:34,864 [main:117] - GENERATED CALL = (stub({ "feqkq"})).subSequence(-1404471900, 1215253261).replaceFirst(Regex("qviqv", kotlin.text.RegexOption.IGNORE_CASE), A("lhnqj").map())
2021-03-12 01:15:34,864 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305e8885]]
2021-03-12 01:15:34,864 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:15:34,998 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:35,001 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305e8885]
2021-03-12 01:15:35,002 [main:117] - GENERATED CALL = (stub({ "feqkq"})).get(-1518373365).lowercase()
2021-03-12 01:15:35,002 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]]
2021-03-12 01:15:35,002 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]
2021-03-12 01:15:35,135 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:35,138 [main:117] - GENERATED CALL = (stub({ "feqkq"})).repeat(-1154138772)
2021-03-12 01:15:35,138 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707202d1]]
2021-03-12 01:15:35,138 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707202d1]
2021-03-12 01:15:35,273 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:15:35,276 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:15:35,279 [main:117] - GENERATED CALL = (stub({ "feqkq"})).takeLastWhile({a: Char -> true})
2021-03-12 01:15:35,279 [main:114] - replacement of (stub({ "feqkq"})).subSequence(77947797, -1573737559).substring(-1573789494, 492787035) + (a).map("yqpfc").trimMargin(stub({ "feqkq"})) of type String is (stub({ "feqkq"})).get(-1518373365).lowercase()
2021-03-12 01:15:35,412 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:15:35,412 [main:66] - Compilation checking started
2021-03-12 01:15:36,029 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-1518373365).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if (prope4 != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:36,032 [main:107] - replacing (prope4, Int)
2021-03-12 01:15:36,032 [main:50] - replacing prope4 Int
2021-03-12 01:15:36,032 [main:54] - Getting value of type Int
2021-03-12 01:15:36,166 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:36,169 [main:58] - GENERATED VALUE OF TYPE Int = 2141374555
2021-03-12 01:15:36,169 [main:61] - GENERATED IS CALL =false
2021-03-12 01:15:36,325 [main:67] - randomType = UShort
2021-03-12 01:15:36,455 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 01:15:36,496 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@393024b4]
2021-03-12 01:15:36,628 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 01:15:36,631 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1847e32d]
2021-03-12 01:15:36,762 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:36,943 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:36,946 [main:78] - Generated call from random type = (4137.toUShort()).compareTo(119.toUByte()).coerceIn(523718187, -12810873)
2021-03-12 01:15:36,947 [main:106] - GETTING Int from Array<String>
2021-03-12 01:15:36,963 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@44c8da67], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79b1b471]]
2021-03-12 01:15:36,963 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79b1b471]
2021-03-12 01:15:37,109 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:37,112 [main:117] - GENERATED CALL = (s).size.ushr(-826519557)
2021-03-12 01:15:37,112 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@44c8da67], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f4b62c0]]
2021-03-12 01:15:37,112 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f4b62c0]
2021-03-12 01:15:37,244 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:15:37,247 [main:117] - GENERATED CALL = (s).size.compareTo(-30)
2021-03-12 01:15:37,247 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@44c8da67], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@615adefa]]
2021-03-12 01:15:37,247 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@615adefa]
2021-03-12 01:15:37,380 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:15:37,383 [main:117] - GENERATED CALL = (s).size.rem(43)
2021-03-12 01:15:37,383 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@44c8da67], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@60931e00]]
2021-03-12 01:15:37,383 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@60931e00]
2021-03-12 01:15:37,383 [main:117] - GENERATED CALL = (s).size.countLeadingZeroBits()
2021-03-12 01:15:37,383 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@44c8da67], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1847e32d]]
2021-03-12 01:15:37,383 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1847e32d]
2021-03-12 01:15:37,515 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:37,649 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:37,652 [main:117] - GENERATED CALL = (s).size.coerceIn(-1352367526, 151124127)
2021-03-12 01:15:37,652 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@44c8da67], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@71c90ddf]]
2021-03-12 01:15:37,652 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@71c90ddf]
2021-03-12 01:15:37,785 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:15:37,788 [main:117] - GENERATED CALL = (s).size.times(-42)
2021-03-12 01:15:37,789 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@44c8da67], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6742e276]]
2021-03-12 01:15:37,789 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6742e276]
2021-03-12 01:15:37,789 [main:117] - GENERATED CALL = (s).size.unaryPlus()
2021-03-12 01:15:37,789 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@44c8da67], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@4139c70b]]
2021-03-12 01:15:37,789 [main:117] - GENERATED CALL = (s).size.sign
2021-03-12 01:15:37,789 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d9fffd8]]
2021-03-12 01:15:37,789 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5849c5fa]
2021-03-12 01:15:37,922 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:37,925 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d9fffd8]
2021-03-12 01:15:38,057 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:15:38,191 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:15:38,194 [main:117] - GENERATED CALL = (s).get(-1438562241).compareTo("hnrxr", true)
2021-03-12 01:15:38,194 [main:113] - Case = [@kotlin.jvm.JvmName public fun kotlin.Array<out kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6ac62896]]
2021-03-12 01:15:38,194 [main:149] - GENERATING call of type @kotlin.jvm.JvmName public fun kotlin.Array<out kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6ac62896]
2021-03-12 01:15:38,194 [main:117] - GENERATED CALL = (s).sum()
2021-03-12 01:15:38,194 [main:114] - replacement of prope4 of type Int is (s).size.unaryPlus()
2021-03-12 01:15:38,324 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:15:38,324 [main:66] - Compilation checking started
2021-03-12 01:15:38,988 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-1518373365).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:38,991 [main:107] - replacing (prope4, Int)
2021-03-12 01:15:38,991 [main:50] - replacing prope4 Int
2021-03-12 01:15:38,991 [main:54] - Getting value of type Int
2021-03-12 01:15:39,123 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:39,126 [main:58] - GENERATED VALUE OF TYPE Int = 1590788393
2021-03-12 01:15:39,126 [main:61] - GENERATED IS CALL =false
2021-03-12 01:15:39,137 [main:67] - randomType = Kla0
2021-03-12 01:15:39,270 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 01:15:39,272 [main:112] - generating klass Kla0 text = data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}
2021-03-12 01:15:39,404 [main:194] - Type params = []
2021-03-12 01:15:39,537 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:15:39,547 [main:149] - GENERATING call of type public final operator fun component2(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@2988fc6e]
2021-03-12 01:15:39,547 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33c8ea16]
2021-03-12 01:15:39,547 [main:78] - Generated call from random type = (Kla0("omire")).component2().toInt()
2021-03-12 01:15:39,548 [main:114] - replacement of prope4 of type Int is (Kla0("omire")).component2().toInt()
2021-03-12 01:15:39,679 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:15:39,679 [main:66] - Compilation checking started
2021-03-12 01:15:40,085 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-1518373365).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
(Kla0("omire")).component2().toInt() = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:40,087 [main:107] - replacing (prope5, Boolean)
2021-03-12 01:15:40,087 [main:50] - replacing prope5 Boolean
2021-03-12 01:15:40,087 [main:54] - Getting value of type Boolean
2021-03-12 01:15:40,222 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:15:40,224 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 01:15:40,225 [main:61] - GENERATED IS CALL =false
2021-03-12 01:15:40,541 [main:67] - randomType = Function1<Double, Boolean>
2021-03-12 01:15:40,542 [main:106] - GETTING Boolean from List<String>
2021-03-12 01:15:40,577 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d730f36]]
2021-03-12 01:15:40,577 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d730f36]
2021-03-12 01:15:40,577 [main:117] - GENERATED CALL = (s.map(a::map)).isNullOrEmpty()
2021-03-12 01:15:40,577 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@550cc78c]]
2021-03-12 01:15:40,578 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903]
2021-03-12 01:15:40,709 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:40,712 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@550cc78c]
2021-03-12 01:15:40,845 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:15:40,983 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:15:40,986 [main:117] - GENERATED CALL = (s.map(a::map)).get(1022256923).endsWith("jqazu", false)
2021-03-12 01:15:40,986 [main:113] - Case = [public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4131880d]]
2021-03-12 01:15:40,986 [main:149] - GENERATING call of type public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4131880d]
2021-03-12 01:15:40,986 [main:117] - GENERATED CALL = (s.map(a::map)).contains(A("lhnqj").z)
2021-03-12 01:15:40,986 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]]
2021-03-12 01:15:40,986 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1b2ad903]
2021-03-12 01:15:41,120 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:15:41,123 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]
2021-03-12 01:15:41,294 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:15:41,295 [main:117] - GENERATED CALL = (s.map(a::map)).get(59353861).equals("hqmfy")
2021-03-12 01:15:41,295 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@3df111e8], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]]
2021-03-12 01:15:41,295 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@3df111e8]
2021-03-12 01:15:41,427 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:15:41,428 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]
2021-03-12 01:15:41,559 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:15:41,562 [main:117] - GENERATED CALL = (s.map(a::map)).equals("eryjx").xor(false)
2021-03-12 01:15:41,562 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3cf32107]]
2021-03-12 01:15:41,562 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3cf32107]
2021-03-12 01:15:41,563 [main:117] - GENERATED CALL = (s.map(a::map)).any()
2021-03-12 01:15:41,563 [main:113] - Case = [public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@2a517974], public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@251dab95]]
2021-03-12 01:15:41,563 [main:149] - GENERATING call of type public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@2a517974]
2021-03-12 01:15:41,563 [main:149] - GENERATING call of type public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@251dab95]
2021-03-12 01:15:41,563 [main:117] - GENERATED CALL = (s.map(a::map)).listIterator().hasNext()
2021-03-12 01:15:41,563 [main:113] - Case = [public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4131880d], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]]
2021-03-12 01:15:41,563 [main:149] - GENERATING call of type public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4131880d]
2021-03-12 01:15:41,563 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]
2021-03-12 01:15:41,696 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:15:41,699 [main:117] - GENERATED CALL = (s.map(a::map)).contains(A("lhnqj").map()).xor(true)
2021-03-12 01:15:41,699 [main:113] - Case = [public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4131880d], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14ca80b4]]
2021-03-12 01:15:41,699 [main:149] - GENERATING call of type public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4131880d]
2021-03-12 01:15:41,699 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14ca80b4]
2021-03-12 01:15:41,699 [main:117] - GENERATED CALL = (s.map(a::map)).contains(stub({ "feqkq"})).not()
2021-03-12 01:15:41,699 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6ea70999]]
2021-03-12 01:15:41,699 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6ea70999]
2021-03-12 01:15:41,700 [main:117] - GENERATED CALL = (s.map(a::map)).none()
2021-03-12 01:15:41,700 [main:114] - replacement of prope5 of type Boolean is (s.map(a::map)).equals("eryjx").xor(false)
2021-03-12 01:15:41,831 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:15:41,831 [main:66] - Compilation checking started
2021-03-12 01:15:42,241 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-1518373365).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        (s.map(a::map)).equals("eryjx").xor(false) = (s).isNotEmpty()
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:42,378 [main:141] - TRYING TO REPLACE CONSTANT null
2021-03-12 01:15:42,510 [main:33] - Trying to replace Element(NULL) on Element(NULL)
2021-03-12 01:15:42,511 [main:141] - TRYING TO REPLACE CONSTANT 279116085
2021-03-12 01:15:42,656 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 01:15:42,657 [main:66] - Compilation checking started
2021-03-12 01:15:43,282 [main:141] - TRYING TO REPLACE CONSTANT 1471953850
2021-03-12 01:15:43,430 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 01:15:43,430 [main:66] - Compilation checking started
2021-03-12 01:15:43,853 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(prope4), null)) == true } ?: error((stub({ "feqkq"})).get(-1518373365).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(-694041667).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:43,853 [main:141] - TRYING TO REPLACE CONSTANT 694041667
2021-03-12 01:15:43,985 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 01:15:43,986 [main:66] - Compilation checking started
2021-03-12 01:15:44,603 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-1518373365).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:44,603 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 01:15:44,740 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 01:15:44,740 [main:66] - Compilation checking started
2021-03-12 01:15:45,158 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-1518373365).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(not())) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:45,158 [main:141] - TRYING TO REPLACE CONSTANT '繂'
2021-03-12 01:15:45,290 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 01:15:45,291 [main:66] - Compilation checking started
2021-03-12 01:15:45,731 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-1518373365).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace(get(-1956454218), '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:45,732 [main:141] - TRYING TO REPLACE CONSTANT '?'
2021-03-12 01:15:45,870 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 01:15:45,870 [main:66] - Compilation checking started
2021-03-12 01:15:46,310 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-1518373365).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check(true)}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', get(704260342), true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:46,310 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 01:15:46,446 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 01:15:46,447 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 01:15:46,579 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:15:46,580 [main:66] - Compilation checking started
2021-03-12 01:15:47,199 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-1518373365).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(-1956454218).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:47,200 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 01:15:47,333 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 01:15:47,334 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 01:15:47,466 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 01:15:47,467 [main:141] - TRYING TO REPLACE CONSTANT 1956454218
2021-03-12 01:15:47,599 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 01:15:47,599 [main:66] - Compilation checking started
2021-03-12 01:15:48,226 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-1518373365).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(796487048) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:48,226 [main:141] - TRYING TO REPLACE CONSTANT 796487048
2021-03-12 01:15:48,362 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 01:15:48,363 [main:66] - Compilation checking started
2021-03-12 01:15:48,970 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-1518373365).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(84183681).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:48,970 [main:141] - TRYING TO REPLACE CONSTANT 84183681
2021-03-12 01:15:49,107 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 01:15:49,107 [main:66] - Compilation checking started
2021-03-12 01:15:49,705 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-1518373365).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:49,706 [main:141] - TRYING TO REPLACE CONSTANT 1466108888
2021-03-12 01:15:49,856 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 01:15:49,856 [main:66] - Compilation checking started
2021-03-12 01:15:50,329 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(unaryPlus()).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(true, { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-1518373365).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:50,330 [main:141] - TRYING TO REPLACE CONSTANT '揰'
2021-03-12 01:15:50,471 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 01:15:50,471 [main:66] - Compilation checking started
2021-03-12 01:15:51,130 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 01:15:51,262 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 01:15:51,262 [main:66] - Compilation checking started
2021-03-12 01:15:51,897 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-1518373365).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1517439392, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:51,898 [main:141] - TRYING TO REPLACE CONSTANT 1517439392
2021-03-12 01:15:52,048 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 01:15:52,049 [main:66] - Compilation checking started
2021-03-12 01:15:52,666 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-1518373365).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(704260342, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:52,666 [main:141] - TRYING TO REPLACE CONSTANT 704260342
2021-03-12 01:15:52,822 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 01:15:52,822 [main:66] - Compilation checking started
2021-03-12 01:15:53,456 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-1518373365).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, 14260282).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:53,456 [main:141] - TRYING TO REPLACE CONSTANT 14260282
2021-03-12 01:15:53,592 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 01:15:53,592 [main:66] - Compilation checking started
2021-03-12 01:15:54,195 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(-743559576, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-1518373365).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:54,195 [main:141] - TRYING TO REPLACE CONSTANT 743559576
2021-03-12 01:15:54,330 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 01:15:54,331 [main:66] - Compilation checking started
2021-03-12 01:15:54,947 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-1518373365).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:54,947 [main:141] - TRYING TO REPLACE CONSTANT 1518373365
2021-03-12 01:15:55,101 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 01:15:55,102 [main:66] - Compilation checking started
2021-03-12 01:15:55,753 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:55,754 [main:41] - AFTER TRY 1 res = import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:15:56,026 [main:112] - generating klass A text = class A(val z: String) {
    fun map(s: String) = z + s
}
2021-03-12 01:15:56,157 [main:194] - Type params = []
2021-03-12 01:15:56,288 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:15:56,291 [main:112] - generating klass Kla0 text = data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}
2021-03-12 01:15:56,424 [main:194] - Type params = []
2021-03-12 01:15:56,554 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:15:56,557 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-12 01:15:56,687 [main:194] - Type params = []
2021-03-12 01:15:56,819 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-12 01:15:56,956 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:15:56,960 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:15:57,256 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-12 01:15:57,398 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:15:57,402 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:15:57,866 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:15:57,866 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:15:57,867 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 01:15:57,867 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 01:15:58,466 [main:302] - generating value of type = Kla6 false depth = 1
2021-03-12 01:15:58,470 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}
2021-03-12 01:15:58,470 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 01:15:58,470 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}
2021-03-12 01:15:58,471 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}
2021-03-12 01:15:58,471 [main:112] - generating klass null text = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}
2021-03-12 01:15:58,471 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}
2021-03-12 01:15:58,471 [main:112] - generating klass Kla7 text = companion object Kla7 : Kla1()
2021-03-12 01:15:58,767 [main:43] - GENERATING CALL OF inline fun stub(f: () -> String): String = f()
2021-03-12 01:15:58,770 [main:61] - WITHOUT TYPE PARAMS = inline fun stub(f: () -> String): String = f()
2021-03-12 01:15:59,083 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-12 01:15:59,086 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:15:59,089 [main:95] - GENERATED = stub({ "lkuci"})
2021-03-12 01:15:59,224 [main:43] - GENERATING CALL OF fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}
2021-03-12 01:15:59,227 [main:61] - WITHOUT TYPE PARAMS = fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}
2021-03-12 01:15:59,582 [main:302] - generating value of type = SuspendFunction1<Kla0, Unit> false depth = 1
2021-03-12 01:15:59,585 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 01:15:59,725 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:15:59,729 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:16:00,186 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 01:16:00,189 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-12 01:16:00,191 [main:302] - generating value of type = Any false depth = 6
2021-03-12 01:16:00,192 [main:95] - GENERATED = require(false, { "vbnes"})
2021-03-12 01:16:00,192 [main:95] - GENERATED = fu0({a: Kla0 -> require(false, { "vbnes"})})
2021-03-12 01:16:00,324 [main:43] - GENERATING CALL OF fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}
2021-03-12 01:16:00,333 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu1(Ty1: (Int) -> Unit): Continuation<Int> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}
2021-03-12 01:16:00,634 [main:302] - generating value of type = Function1<Int, Unit> false depth = 1
2021-03-12 01:16:00,637 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 01:16:00,777 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:16:00,781 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:16:01,075 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 01:16:01,078 [main:95] - GENERATED = require(true)
2021-03-12 01:16:01,078 [main:95] - GENERATED = fu1<Int>({a: Int -> require(true)})
2021-03-12 01:16:01,213 [main:43] - GENERATING CALL OF fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}
2021-03-12 01:16:01,216 [main:61] - WITHOUT TYPE PARAMS = fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}
2021-03-12 01:16:01,509 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-12 01:16:01,512 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 01:16:01,652 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:16:01,655 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:16:01,946 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 01:16:01,949 [main:95] - GENERATED = check(false)
2021-03-12 01:16:01,950 [main:95] - GENERATED = fu2({a: Throwable -> check(false)})
2021-03-12 01:16:02,107 [main:43] - Try №1
2021-03-12 01:16:03,921 [main:69] - Trying to insert fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}
2021-03-12 01:16:04,102 [main:66] - Compilation checking started
2021-03-12 01:16:05,220 [main:103] - Trying to change 138 nodes
2021-03-12 01:16:05,220 [main:107] - replacing ("1_", String)
2021-03-12 01:16:05,223 [main:50] - replacing "1_" String
2021-03-12 01:16:05,223 [main:54] - Getting value of type String
2021-03-12 01:16:05,397 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:16:05,401 [main:58] - GENERATED VALUE OF TYPE String = "uhpdc"
2021-03-12 01:16:05,401 [main:61] - GENERATED IS CALL =false
2021-03-12 01:16:05,594 [main:67] - randomType = Byte
2021-03-12 01:16:05,764 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:16:05,813 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3df23a4a]
2021-03-12 01:16:05,813 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305e8885]
2021-03-12 01:16:05,813 [main:78] - Generated call from random type = (-101).toChar().lowercase()
2021-03-12 01:16:05,813 [main:114] - replacement of "1_" of type String is (-101).toChar().lowercase()
2021-03-12 01:16:05,982 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:16:05,983 [main:66] - Compilation checking started
2021-03-12 01:16:06,731 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = "";
    val prope9 = "0_1_9"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = {prope8 += "1_"; prope11}(), a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || prope14 != prope9) return "fail 1: $prope8 != $prope10 or $prope14 != $prope9"

    prope8 = "";
    prope14 = fu11(b = {prope8 += "1_"; prope11}(), c = {prope8 += "$prope13"; "$prope13"}, a = {prope8+="0_"; prope12}())
    if (prope8 != prope10 || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != prope10 || prope14 != prope9) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; prope11}())
    if (prope8 != "0_1_9" || prope14 != prope9) return "fail 4: $prope8 != 0_1_9 or $prope14 != $prope9"

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:16:06,732 [main:107] - replacing ({prope8 += "1_"; prope11}(), Long)
2021-03-12 01:16:06,732 [main:50] - replacing {prope8 += "1_"; prope11}() Long
2021-03-12 01:16:06,732 [main:54] - Getting value of type Long
2021-03-12 01:16:06,913 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:06,916 [main:58] - GENERATED VALUE OF TYPE Long = 7244811219828587230
2021-03-12 01:16:06,916 [main:61] - GENERATED IS CALL =false
2021-03-12 01:16:07,119 [main:67] - randomType = Short
2021-03-12 01:16:07,291 [main:302] - generating value of type = Short true depth = 0
2021-03-12 01:16:07,341 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4c198bd5]
2021-03-12 01:16:07,342 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Double.toBits(): kotlin.Long defined in kotlin[DeserializedSimpleFunctionDescriptor@4d914933]
2021-03-12 01:16:07,342 [main:78] - Generated call from random type = (-5923).toDouble().toBits()
2021-03-12 01:16:07,343 [main:106] - GETTING Long from String
2021-03-12 01:16:07,363 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]]
2021-03-12 01:16:07,363 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]
2021-03-12 01:16:07,536 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:07,539 [main:117] - GENERATED CALL = (stub({ "lkuci"})).length.plus(-7672110821994018843)
2021-03-12 01:16:07,540 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cef48b3]]
2021-03-12 01:16:07,540 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cef48b3]
2021-03-12 01:16:07,712 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:07,715 [main:117] - GENERATED CALL = (stub({ "lkuci"})).length.div(-3337177293224817164)
2021-03-12 01:16:07,715 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3c3b70b7]]
2021-03-12 01:16:07,715 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:16:07,884 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:07,888 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3c3b70b7]
2021-03-12 01:16:07,888 [main:117] - GENERATED CALL = (stub({ "lkuci"})).get(-1811654834).toLong()
2021-03-12 01:16:07,888 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ddc5ec6]]
2021-03-12 01:16:07,888 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:16:08,059 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:16:08,063 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ddc5ec6]
2021-03-12 01:16:08,063 [main:117] - GENERATED CALL = (stub({ "lkuci"})).compareTo("okbkm").toLong()
2021-03-12 01:16:08,063 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]]
2021-03-12 01:16:08,063 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:16:08,239 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:16:08,243 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]
2021-03-12 01:16:08,419 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:08,423 [main:117] - GENERATED CALL = (stub({ "lkuci"})).compareTo("cqkxu").plus(-439272172511619790)
2021-03-12 01:16:08,424 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ddc5ec6]]
2021-03-12 01:16:08,424 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ddc5ec6]
2021-03-12 01:16:08,424 [main:117] - GENERATED CALL = (stub({ "lkuci"})).length.toLong()
2021-03-12 01:16:08,424 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]]
2021-03-12 01:16:08,424 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]
2021-03-12 01:16:08,596 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:08,600 [main:117] - GENERATED CALL = (stub({ "lkuci"})).length.rem(3522118552486794226)
2021-03-12 01:16:08,600 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8fcc1fc]]
2021-03-12 01:16:08,600 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8fcc1fc]
2021-03-12 01:16:08,810 [main:302] - generating value of type = Function1<Char, Long> false depth = 0
2021-03-12 01:16:08,814 [main:302] - generating value of type = Long true depth = 1
2021-03-12 01:16:08,818 [main:117] - GENERATED CALL = (stub({ "lkuci"})).sumOf({a: Char -> 4162644308965224995})
2021-03-12 01:16:08,818 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]]
2021-03-12 01:16:08,818 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:16:08,818 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]
2021-03-12 01:16:08,989 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:08,993 [main:117] - GENERATED CALL = (stub({ "lkuci"})).compareTo(Kla0("qhnah").component2()).rem(3103791929388825259)
2021-03-12 01:16:08,994 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ce8b520]]
2021-03-12 01:16:08,994 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:16:09,164 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:16:09,168 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ce8b520]
2021-03-12 01:16:09,337 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:09,341 [main:117] - GENERATED CALL = (stub({ "lkuci"})).compareTo("awcbg").times(-7630035950755086263)
2021-03-12 01:16:09,341 [main:114] - replacement of {prope8 += "1_"; prope11}() of type Long is (stub({ "lkuci"})).length.plus(-7672110821994018843)
2021-03-12 01:16:09,511 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:16:09,511 [main:66] - Compilation checking started
2021-03-12 01:16:10,235 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = "";
    val prope9 = "0_1_9"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || prope14 != prope9) return "fail 1: $prope8 != $prope10 or $prope14 != $prope9"

    prope8 = "";
    prope14 = fu11(b = {prope8 += "1_"; prope11}(), c = {prope8 += "$prope13"; "$prope13"}, a = {prope8+="0_"; prope12}())
    if (prope8 != prope10 || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != prope10 || prope14 != prope9) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; prope11}())
    if (prope8 != "0_1_9" || prope14 != prope9) return "fail 4: $prope8 != 0_1_9 or $prope14 != $prope9"

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:16:10,236 [main:107] - replacing (prope11, Long)
2021-03-12 01:16:10,237 [main:50] - replacing prope11 Long
2021-03-12 01:16:10,237 [main:54] - Getting value of type Long
2021-03-12 01:16:10,410 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:10,414 [main:58] - GENERATED VALUE OF TYPE Long = 460472854835975632
2021-03-12 01:16:10,415 [main:61] - GENERATED IS CALL =false
2021-03-12 01:16:11,000 [main:67] - randomType = Function1<Double, Short>
2021-03-12 01:16:11,001 [main:106] - GETTING Long from CoroutineContext
2021-03-12 01:16:11,013 [main:106] - GETTING Long from Array<String>
2021-03-12 01:16:11,028 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@6e320517], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]]
2021-03-12 01:16:11,028 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]
2021-03-12 01:16:11,199 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:11,203 [main:117] - GENERATED CALL = (s).size.rem(2641569369350608049)
2021-03-12 01:16:11,203 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@6e320517], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c86ca]]
2021-03-12 01:16:11,203 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c86ca]
2021-03-12 01:16:11,373 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:11,377 [main:117] - GENERATED CALL = (s).size.minus(-8297094754724728891)
2021-03-12 01:16:11,377 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@6e320517], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ddc5ec6]]
2021-03-12 01:16:11,377 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ddc5ec6]
2021-03-12 01:16:11,377 [main:117] - GENERATED CALL = (s).size.toLong()
2021-03-12 01:16:11,377 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@6e320517], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cef48b3]]
2021-03-12 01:16:11,377 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cef48b3]
2021-03-12 01:16:11,544 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:11,548 [main:117] - GENERATED CALL = (s).size.div(4995820704639425785)
2021-03-12 01:16:11,548 [main:113] - Case = [@kotlin.jvm.JvmName public fun kotlin.Array<out kotlin.Long>.sum(): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@668a1fa5]]
2021-03-12 01:16:11,548 [main:149] - GENERATING call of type @kotlin.jvm.JvmName public fun kotlin.Array<out kotlin.Long>.sum(): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@668a1fa5]
2021-03-12 01:16:11,548 [main:117] - GENERATED CALL = (s).sum()
2021-03-12 01:16:11,548 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@6e320517], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ce8b520]]
2021-03-12 01:16:11,548 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ce8b520]
2021-03-12 01:16:11,718 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:11,722 [main:117] - GENERATED CALL = (s).size.times(-3081994056761307391)
2021-03-12 01:16:11,722 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@6e320517], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]]
2021-03-12 01:16:11,722 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]
2021-03-12 01:16:11,889 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:11,893 [main:117] - GENERATED CALL = (s).size.plus(3994386378527141144)
2021-03-12 01:16:11,893 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public fun kotlin.String.toLong(): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12f6783a]]
2021-03-12 01:16:11,894 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:16:12,067 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:12,071 [main:149] - GENERATING call of type public fun kotlin.String.toLong(): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12f6783a]
2021-03-12 01:16:12,071 [main:117] - GENERATED CALL = (s).get(-1334041225).toLong()
2021-03-12 01:16:12,071 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.Long): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6bf552d2]]
2021-03-12 01:16:12,071 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.Long): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6bf552d2]
2021-03-12 01:16:12,239 [main:302] - generating value of type = Function1<T, Long> false depth = 0
2021-03-12 01:16:12,243 [main:302] - generating value of type = Long true depth = 1
2021-03-12 01:16:12,247 [main:117] - GENERATED CALL = (s).sumOf({a: T -> 8022875711905726146})
2021-03-12 01:16:12,247 [main:114] - replacement of prope11 of type Long is (s).size.plus(3994386378527141144)
2021-03-12 01:16:12,413 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:16:12,413 [main:66] - Compilation checking started
2021-03-12 01:16:13,179 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = "";
    val prope9 = "0_1_9"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || prope14 != prope9) return "fail 1: $prope8 != $prope10 or $prope14 != $prope9"

    prope8 = "";
    prope14 = fu11(b = {prope8 += "1_"; prope11}(), c = {prope8 += "$prope13"; "$prope13"}, a = {prope8+="0_"; prope12}())
    if (prope8 != prope10 || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != prope10 || prope14 != prope9) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || prope14 != prope9) return "fail 4: $prope8 != 0_1_9 or $prope14 != $prope9"

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:16:13,181 [main:107] - replacing (prope14, String)
2021-03-12 01:16:13,182 [main:50] - replacing prope14 String
2021-03-12 01:16:13,182 [main:54] - Getting value of type String
2021-03-12 01:16:13,362 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:16:13,366 [main:58] - GENERATED VALUE OF TYPE String = "cegow"
2021-03-12 01:16:13,367 [main:61] - GENERATED IS CALL =false
2021-03-12 01:16:13,560 [main:67] - randomType = Double
2021-03-12 01:16:13,769 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:16:13,817 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2c87e895]
2021-03-12 01:16:13,817 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@779dda8c]
2021-03-12 01:16:13,986 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:16:13,990 [main:78] - Generated call from random type = (0.5816884515132748).toChar().plus("vpkby")
2021-03-12 01:16:13,990 [main:106] - GETTING String from String
2021-03-12 01:16:14,017 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8422c70]]
2021-03-12 01:16:14,017 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8422c70]
2021-03-12 01:16:14,018 [main:117] - GENERATED CALL = (A("jmkiq").map()).capitalize()
2021-03-12 01:16:14,018 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305e8885]]
2021-03-12 01:16:14,018 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:16:14,187 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:14,191 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305e8885]
2021-03-12 01:16:14,191 [main:117] - GENERATED CALL = (A("jmkiq").map()).get(-285940416).lowercase()
2021-03-12 01:16:14,191 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52806f8a]]
2021-03-12 01:16:14,191 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52806f8a]
2021-03-12 01:16:14,192 [main:117] - GENERATED CALL = (A("jmkiq").map()).trimMargin(A("jmkiq").z)
2021-03-12 01:16:14,192 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507f736]]
2021-03-12 01:16:14,192 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507f736]
2021-03-12 01:16:14,362 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:14,533 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:14,537 [main:117] - GENERATED CALL = (A("jmkiq").map()).removeRange(723192465, 25103945)
2021-03-12 01:16:14,537 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]]
2021-03-12 01:16:14,537 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:16:14,706 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:14,709 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]
2021-03-12 01:16:14,710 [main:117] - GENERATED CALL = (A("jmkiq").map()).get(1987506268).uppercase()
2021-03-12 01:16:14,710 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]]
2021-03-12 01:16:14,710 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]
2021-03-12 01:16:14,877 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:14,881 [main:117] - GENERATED CALL = (A("jmkiq").map()).drop(-101220353)
2021-03-12 01:16:14,881 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]]
2021-03-12 01:16:14,881 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:16:15,050 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:15,054 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]
2021-03-12 01:16:15,054 [main:117] - GENERATED CALL = (A("jmkiq").map()).get(-1454495291).titlecase()
2021-03-12 01:16:15,054 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]]
2021-03-12 01:16:15,054 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]
2021-03-12 01:16:15,222 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:16:15,229 [main:117] - GENERATED CALL = (A("jmkiq").map()).removeSurrounding("gzvtl")
2021-03-12 01:16:15,229 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]]
2021-03-12 01:16:15,229 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]
2021-03-12 01:16:15,395 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:15,399 [main:117] - GENERATED CALL = (A("jmkiq").map()).dropLast(550371874)
2021-03-12 01:16:15,400 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]]
2021-03-12 01:16:15,400 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]
2021-03-12 01:16:15,565 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:16:15,569 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:16:15,573 [main:117] - GENERATED CALL = (A("jmkiq").map()).dropWhile({a: Char -> false})
2021-03-12 01:16:15,573 [main:114] - replacement of prope14 of type String is (A("jmkiq").map()).capitalize()
2021-03-12 01:16:15,744 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:16:15,744 [main:66] - Compilation checking started
2021-03-12 01:16:16,250 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = "";
    val prope9 = "0_1_9"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || prope14 != prope9) return "fail 1: $prope8 != $prope10 or $(A("jmkiq").map()).capitalize() != $prope9"

    prope8 = "";
    prope14 = fu11(b = {prope8 += "1_"; prope11}(), c = {prope8 += "$prope13"; "$prope13"}, a = {prope8+="0_"; prope12}())
    if (prope8 != prope10 || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != prope10 || prope14 != prope9) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || prope14 != prope9) return "fail 4: $prope8 != 0_1_9 or $prope14 != $prope9"

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:16:16,251 [main:107] - replacing ("$prope13", String)
2021-03-12 01:16:16,252 [main:50] - replacing "$prope13" String
2021-03-12 01:16:16,252 [main:54] - Getting value of type String
2021-03-12 01:16:16,422 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:16:16,426 [main:58] - GENERATED VALUE OF TYPE String = "fighc"
2021-03-12 01:16:16,426 [main:61] - GENERATED IS CALL =false
2021-03-12 01:16:16,615 [main:67] - randomType = Short
2021-03-12 01:16:16,783 [main:302] - generating value of type = Short true depth = 0
2021-03-12 01:16:16,828 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@70ad20c1]
2021-03-12 01:16:16,828 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@779dda8c]
2021-03-12 01:16:16,996 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:16:17,000 [main:78] - Generated call from random type = (18107).toChar().plus("srdtd")
2021-03-12 01:16:17,001 [main:106] - GETTING String from Continuation<Int>
2021-03-12 01:16:17,011 [main:106] - GETTING String from String
2021-03-12 01:16:17,037 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]]
2021-03-12 01:16:17,037 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]
2021-03-12 01:16:17,207 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:16:17,377 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:16:17,381 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).replaceBeforeLast('穌', Kla0("qhnah").component2(), "sqbqe")
2021-03-12 01:16:17,381 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]]
2021-03-12 01:16:17,381 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]
2021-03-12 01:16:17,546 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:16:17,549 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:16:17,553 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).dropLastWhile({a: Char -> true})
2021-03-12 01:16:17,553 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]]
2021-03-12 01:16:17,553 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]
2021-03-12 01:16:17,719 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:17,723 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).takeLast(-430436899)
2021-03-12 01:16:17,723 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]]
2021-03-12 01:16:17,723 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]
2021-03-12 01:16:17,723 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).lowercase()
2021-03-12 01:16:17,723 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1573a7e0]]
2021-03-12 01:16:17,723 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1573a7e0]
2021-03-12 01:16:17,891 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:16:17,895 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).substringAfterLast('褦', prope2)
2021-03-12 01:16:17,895 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a16d90e]]
2021-03-12 01:16:17,895 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a16d90e]
2021-03-12 01:16:17,895 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).concat(Kla0("qhnah").o)
2021-03-12 01:16:17,896 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]]
2021-03-12 01:16:17,896 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:16:18,064 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:18,236 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:18,240 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]
2021-03-12 01:16:18,447 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:16:18,622 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:16:18,627 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:16:18,991 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:16:18,995 [main:95] - GENERATED = StringBuilder(-1950146876)
2021-03-12 01:16:18,996 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).subSequence(-706539052, 1933630682).commonSuffixWith(StringBuilder(-1950146876), Kla5().prope5)
2021-03-12 01:16:18,996 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cfdfc94]]
2021-03-12 01:16:18,996 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cfdfc94]
2021-03-12 01:16:19,164 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 01:16:19,339 [main:43] - GENERATING CALL OF fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-12 01:16:19,344 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-12 01:16:19,920 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:16:19,924 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableList<Int>, Unit> false depth = 3
2021-03-12 01:16:19,928 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 01:16:20,104 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 01:16:20,109 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 01:16:20,484 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 7
2021-03-12 01:16:20,488 [main:302] - generating value of type = Unit false depth = 8
2021-03-12 01:16:20,661 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:16:20,666 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:16:21,231 [main:302] - generating value of type = Int true depth = 11
2021-03-12 01:16:21,235 [main:302] - generating value of type = Function1<Int, Unit> false depth = 11
2021-03-12 01:16:21,239 [main:302] - generating value of type = Unit false depth = 12
2021-03-12 01:16:21,411 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:16:21,416 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:16:21,980 [main:302] - generating value of type = Int true depth = 15
2021-03-12 01:16:21,984 [main:302] - generating value of type = Function1<Int, Unit> false depth = 15
2021-03-12 01:16:21,987 [main:302] - generating value of type = Unit false depth = 16
2021-03-12 01:16:21,988 [main:95] - GENERATED = repeat(2041473841, {a: Int -> })
2021-03-12 01:16:21,988 [main:95] - GENERATED = repeat(-2089742787, {a: Int -> repeat(2041473841, {a: Int -> })})
2021-03-12 01:16:21,988 [main:95] - GENERATED = contract({ repeat(-2089742787, {a: Int -> repeat(2041473841, {a: Int -> })})})
2021-03-12 01:16:21,988 [main:95] - GENERATED = buildList<Int>(378544527, { contract({ repeat(-2089742787, {a: Int -> repeat(2041473841, {a: Int -> })})})})
2021-03-12 01:16:21,989 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).slice(buildList<Int>(378544527, { contract({ repeat(-2089742787, {a: Int -> repeat(2041473841, {a: Int -> })})})}))
2021-03-12 01:16:21,989 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56864111]]
2021-03-12 01:16:21,989 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:16:22,160 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:22,330 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:22,333 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56864111]
2021-03-12 01:16:22,498 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 01:16:22,672 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 01:16:22,677 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 01:16:23,303 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:16:23,307 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 01:16:23,311 [main:95] - GENERATED = Regex("anlzf", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 01:16:23,478 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:16:23,482 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).subSequence(1906136558, 442656400).replaceFirst(Regex("anlzf", kotlin.text.RegexOption.IGNORE_CASE), "jnmpy")
2021-03-12 01:16:23,482 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@797c3840]]
2021-03-12 01:16:23,482 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@797c3840]
2021-03-12 01:16:23,483 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).decapitalize()
2021-03-12 01:16:23,483 [main:114] - replacement of "$prope13" of type String is (Kla0("qhnah").component2()).takeLast(-430436899)
2021-03-12 01:16:23,650 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:16:23,650 [main:66] - Compilation checking started
2021-03-12 01:16:24,374 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = "";
    val prope9 = "0_1_9"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || prope14 != prope9) return "fail 1: $prope8 != $prope10 or $prope14 != $prope9"

    prope8 = "";
    prope14 = fu11(b = {prope8 += "1_"; prope11}(), c = {prope8 += "$prope13"; (Kla0("qhnah").component2()).takeLast(-430436899)}, a = {prope8+="0_"; prope12}())
    if (prope8 != prope10 || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != prope10 || prope14 != prope9) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || prope14 != prope9) return "fail 4: $prope8 != 0_1_9 or $prope14 != $prope9"

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:16:24,376 [main:107] - replacing (prope10, String)
2021-03-12 01:16:24,376 [main:50] - replacing prope10 String
2021-03-12 01:16:24,376 [main:54] - Getting value of type String
2021-03-12 01:16:24,560 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:16:24,563 [main:58] - GENERATED VALUE OF TYPE String = "bhkeb"
2021-03-12 01:16:24,564 [main:61] - GENERATED IS CALL =false
2021-03-12 01:16:24,765 [main:67] - randomType = Double
2021-03-12 01:16:24,935 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:16:24,974 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2c87e895]
2021-03-12 01:16:24,974 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]
2021-03-12 01:16:24,974 [main:78] - Generated call from random type = (0.4051563411286161).toChar().uppercase()
2021-03-12 01:16:24,974 [main:106] - GETTING String from String
2021-03-12 01:16:24,992 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305e8885]]
2021-03-12 01:16:24,992 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:16:25,161 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:25,165 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305e8885]
2021-03-12 01:16:25,165 [main:117] - GENERATED CALL = (A("jmkiq").z).get(-2032081259).lowercase()
2021-03-12 01:16:25,165 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:16:25,165 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:16:25,165 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:16:25,334 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:25,338 [main:117] - GENERATED CALL = (A("jmkiq").z).compareTo(A("jmkiq").map()).toString(-65015759)
2021-03-12 01:16:25,338 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0d521b]]
2021-03-12 01:16:25,338 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0d521b]
2021-03-12 01:16:25,338 [main:117] - GENERATED CALL = (A("jmkiq").z).toUpperCase()
2021-03-12 01:16:25,338 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]]
2021-03-12 01:16:25,338 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]
2021-03-12 01:16:25,339 [main:117] - GENERATED CALL = (A("jmkiq").z).replaceIndentByMargin(Kla0("qhnah").component2(), stub({ "lkuci"}))
2021-03-12 01:16:25,339 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cfdfc94]]
2021-03-12 01:16:25,339 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cfdfc94]
2021-03-12 01:16:25,506 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 01:16:25,684 [main:43] - GENERATING CALL OF fun <T> mutableListOf(): Iterable<Int> = TODO()
2021-03-12 01:16:25,689 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(): Iterable<Int> = TODO()
2021-03-12 01:16:25,875 [main:95] - GENERATED = mutableListOf<Int>()
2021-03-12 01:16:25,875 [main:117] - GENERATED CALL = (A("jmkiq").z).slice(mutableListOf<Int>())
2021-03-12 01:16:25,875 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a16d90e]]
2021-03-12 01:16:25,875 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a16d90e]
2021-03-12 01:16:25,875 [main:117] - GENERATED CALL = (A("jmkiq").z).concat(A("jmkiq").map())
2021-03-12 01:16:25,875 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@404181f8]]
2021-03-12 01:16:25,875 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@404181f8]
2021-03-12 01:16:26,043 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:16:26,219 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:16:26,224 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:16:26,602 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:16:26,606 [main:95] - GENERATED = StringBuilder("ggqgq")
2021-03-12 01:16:26,606 [main:117] - GENERATED CALL = (A("jmkiq").z).removeSuffix(StringBuilder("ggqgq"))
2021-03-12 01:16:26,606 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e748520]]
2021-03-12 01:16:26,606 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e748520]
2021-03-12 01:16:26,606 [main:117] - GENERATED CALL = (A("jmkiq").z).trimStart()
2021-03-12 01:16:26,607 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]]
2021-03-12 01:16:26,607 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:16:26,774 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:26,948 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:26,952 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]
2021-03-12 01:16:27,120 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:27,294 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:27,298 [main:117] - GENERATED CALL = (A("jmkiq").z).subSequence(-2079021274, 1369788063).substring(123543156, -286703893)
2021-03-12 01:16:27,299 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]]
2021-03-12 01:16:27,299 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]
2021-03-12 01:16:27,467 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:27,471 [main:117] - GENERATED CALL = (A("jmkiq").z).repeat(-1277563881)
2021-03-12 01:16:27,471 [main:114] - replacement of prope10 of type String is (A("jmkiq").z).trimStart()
2021-03-12 01:16:27,638 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:16:27,639 [main:66] - Compilation checking started
2021-03-12 01:16:28,424 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = "";
    val prope9 = "0_1_9"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || prope14 != prope9) return "fail 1: $prope8 != $prope10 or $prope14 != $prope9"

    prope8 = "";
    prope14 = fu11(b = {prope8 += "1_"; prope11}(), c = {prope8 += "$prope13"; (Kla0("qhnah").component2()).takeLast(-430436899)}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != prope10 || prope14 != prope9) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || prope14 != prope9) return "fail 4: $prope8 != 0_1_9 or $prope14 != $prope9"

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:16:28,426 [main:107] - replacing (prope14 != prope9, Boolean)
2021-03-12 01:16:28,426 [main:50] - replacing prope14 != prope9 Boolean
2021-03-12 01:16:28,427 [main:54] - Getting value of type Boolean
2021-03-12 01:16:28,597 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:16:28,601 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 01:16:28,601 [main:61] - GENERATED IS CALL =false
2021-03-12 01:16:28,807 [main:67] - randomType = Kla4?
2021-03-12 01:16:28,979 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 01:16:28,983 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 01:16:28,990 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@227db8df]
2021-03-12 01:16:28,991 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]
2021-03-12 01:16:28,991 [main:78] - Generated call from random type = (Kla4())?.equals(Kla2().prope2).xor(Kla5().prope5)
2021-03-12 01:16:28,992 [main:106] - GETTING Boolean from Array<String>
2021-03-12 01:16:29,007 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a]]
2021-03-12 01:16:29,007 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a]
2021-03-12 01:16:29,007 [main:117] - GENERATED CALL = (s).equals(Kla2().prope2)
2021-03-12 01:16:29,007 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]]
2021-03-12 01:16:29,007 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:16:29,175 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:29,179 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]
2021-03-12 01:16:29,180 [main:117] - GENERATED CALL = (s).get(1446859657).equals(Kla2().prope2)
2021-03-12 01:16:29,180 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24bfea79]]
2021-03-12 01:16:29,180 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:16:29,359 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:29,363 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24bfea79]
2021-03-12 01:16:29,364 [main:117] - GENERATED CALL = (s).get(-1179463606).matches(prope2)
2021-03-12 01:16:29,364 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@cdcd08d]]
2021-03-12 01:16:29,364 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@cdcd08d]
2021-03-12 01:16:29,364 [main:117] - GENERATED CALL = (s).isEmpty()
2021-03-12 01:16:29,364 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3df8a0d8]]
2021-03-12 01:16:29,364 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a]
2021-03-12 01:16:29,364 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3df8a0d8]
2021-03-12 01:16:29,534 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:16:29,538 [main:117] - GENERATED CALL = (s).equals(Kla2().prope2).and(true)
2021-03-12 01:16:29,538 [main:113] - Case = [public final operator fun set(index: kotlin.Int, value: kotlin.String): kotlin.Unit defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@3cb1786c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@5ea3d8ed]]
2021-03-12 01:16:29,539 [main:149] - GENERATING call of type public final operator fun set(index: kotlin.Int, value: kotlin.String): kotlin.Unit defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@3cb1786c]
2021-03-12 01:16:29,707 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:29,711 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@5ea3d8ed]
2021-03-12 01:16:29,711 [main:117] - GENERATED CALL = (s).set(-784933441, stub({ "lkuci"})).equals(Kla2().prope2)
2021-03-12 01:16:29,712 [main:113] - Case = [public operator fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.contains(element: T): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6295be36]]
2021-03-12 01:16:29,712 [main:149] - GENERATING call of type public operator fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.contains(element: T): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6295be36]
2021-03-12 01:16:29,880 [main:302] - generating value of type = T false depth = 0
2021-03-12 01:16:30,072 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Kla5, other: Kla5, comparator: kotlin.Comparator<Kla5>): T = TODO()
2021-03-12 01:16:30,077 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Kla5, other: Kla5, comparator: kotlin.Comparator<Kla5>): T = TODO()
2021-03-12 01:16:30,452 [main:302] - generating value of type = Kla5 false depth = 3
2021-03-12 01:16:30,456 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}
2021-03-12 01:16:30,456 [main:302] - generating value of type = Kla5 false depth = 3
2021-03-12 01:16:30,460 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}
2021-03-12 01:16:30,460 [main:302] - generating value of type = Comparator<Kla5> false depth = 3
2021-03-12 01:16:30,635 [main:43] - GENERATING CALL OF fun <T> compareByDescending(selector: (Kla5)->kotlin.Comparable<*>?): Comparator<Kla5> = TODO()
2021-03-12 01:16:30,641 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareByDescending(selector: (Kla5)->kotlin.Comparable<*>?): Comparator<Kla5> = TODO()
2021-03-12 01:16:31,030 [main:302] - generating value of type = Function1<Kla5, Comparable<*>?> false depth = 6
2021-03-12 01:16:31,034 [main:302] - generating value of type = Comparable<*> false depth = 7
2021-03-12 01:16:31,042 [main:95] - GENERATED = compareByDescending<Kla5>({a: Kla5 -> "rmorv"})
2021-03-12 01:16:31,042 [main:95] - GENERATED = maxOf<Kla5>(Kla5(), Kla5(), compareByDescending<Kla5>({a: Kla5 -> "rmorv"}))
2021-03-12 01:16:31,043 [main:117] - GENERATED CALL = (s).contains(maxOf<Kla5>(Kla5(), Kla5(), compareByDescending<Kla5>({a: Kla5 -> "rmorv"})))
2021-03-12 01:16:31,043 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]]
2021-03-12 01:16:31,043 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a]
2021-03-12 01:16:31,209 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:16:31,210 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]
2021-03-12 01:16:31,210 [main:117] - GENERATED CALL = (s).equals("ewfks").xor(Kla5().prope5)
2021-03-12 01:16:31,210 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]]
2021-03-12 01:16:31,210 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5994c02a]
2021-03-12 01:16:31,210 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]
2021-03-12 01:16:31,379 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:16:31,383 [main:117] - GENERATED CALL = (s).equals(Kla2().prope2).or(true)
2021-03-12 01:16:31,383 [main:113] - Case = [public final operator fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5fe1fe45], public abstract operator fun hasNext(): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@42d5c850]]
2021-03-12 01:16:31,384 [main:149] - GENERATING call of type public final operator fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5fe1fe45]
2021-03-12 01:16:31,384 [main:149] - GENERATING call of type public abstract operator fun hasNext(): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@42d5c850]
2021-03-12 01:16:31,384 [main:117] - GENERATED CALL = (s).iterator().hasNext()
2021-03-12 01:16:31,384 [main:114] - replacement of prope14 != prope9 of type Boolean is false
2021-03-12 01:16:31,553 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 01:16:31,553 [main:66] - Compilation checking started
2021-03-12 01:16:32,268 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = "";
    val prope9 = "0_1_9"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || prope14 != prope9) return "fail 1: $prope8 != $prope10 or $prope14 != $prope9"

    prope8 = "";
    prope14 = fu11(b = {prope8 += "1_"; prope11}(), c = {prope8 += "$prope13"; (Kla0("qhnah").component2()).takeLast(-430436899)}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != prope10 || prope14 != prope9) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return "fail 4: $prope8 != 0_1_9 or $prope14 != $prope9"

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:16:32,269 [main:107] - replacing (prope8, String)
2021-03-12 01:16:32,269 [main:50] - replacing prope8 String
2021-03-12 01:16:32,269 [main:54] - Getting value of type String
2021-03-12 01:16:32,445 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:16:32,449 [main:58] - GENERATED VALUE OF TYPE String = "toidr"
2021-03-12 01:16:32,449 [main:61] - GENERATED IS CALL =false
2021-03-12 01:16:32,457 [main:67] - randomType = Long
2021-03-12 01:16:32,623 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:32,676 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6692e134]
2021-03-12 01:16:32,904 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:32,908 [main:78] - Generated call from random type = (-685018484462552615).toString(-1277688852)
2021-03-12 01:16:32,908 [main:106] - GETTING String from String
2021-03-12 01:16:32,935 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]]
2021-03-12 01:16:32,935 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]
2021-03-12 01:16:33,105 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:16:33,276 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:16:33,281 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).replace('掮', '뢗', Kla5().prope5)
2021-03-12 01:16:33,281 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e748520]]
2021-03-12 01:16:33,281 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e748520]
2021-03-12 01:16:33,281 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).trimStart()
2021-03-12 01:16:33,281 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a471dbf]]
2021-03-12 01:16:33,281 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a471dbf]
2021-03-12 01:16:33,453 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:16:33,457 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).substringBefore('ಪ', Kla0("qhnah").o)
2021-03-12 01:16:33,457 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]]
2021-03-12 01:16:33,457 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]
2021-03-12 01:16:33,627 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:33,631 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).dropLast(1332555795)
2021-03-12 01:16:33,631 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]]
2021-03-12 01:16:33,631 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]
2021-03-12 01:16:33,631 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).plus(Kla2().prope2)
2021-03-12 01:16:33,631 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305e8885]]
2021-03-12 01:16:33,631 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:16:33,801 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:33,805 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305e8885]
2021-03-12 01:16:33,805 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).get(1678326072).lowercase()
2021-03-12 01:16:33,806 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8422c70]]
2021-03-12 01:16:33,806 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8422c70]
2021-03-12 01:16:33,806 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).capitalize()
2021-03-12 01:16:33,806 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]]
2021-03-12 01:16:33,806 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:16:33,974 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:34,145 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:34,149 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]
2021-03-12 01:16:34,320 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:34,324 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).subSequence(-862308319, -293267875).repeat(-1632003964)
2021-03-12 01:16:34,324 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]]
2021-03-12 01:16:34,325 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:16:34,501 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:34,504 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]
2021-03-12 01:16:34,505 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).get(1367307647).uppercase()
2021-03-12 01:16:34,505 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]]
2021-03-12 01:16:34,505 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:16:34,679 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:34,856 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:34,859 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]
2021-03-12 01:16:35,031 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:16:35,038 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).subSequence(96800295, 80835422).commonPrefixWith("wemhk", Kla5().prope5)
2021-03-12 01:16:35,038 [main:114] - replacement of prope8 of type String is (Kla0("qhnah").component2()).trimStart()
2021-03-12 01:16:35,208 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:16:35,209 [main:66] - Compilation checking started
2021-03-12 01:16:35,701 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = "";
    val prope9 = "0_1_9"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || prope14 != prope9) return "fail 1: $prope8 != $prope10 or $prope14 != $prope9"

    prope8 = "";
    prope14 = fu11(b = {prope8 += "1_"; prope11}(), c = {prope8 += "$prope13"; (Kla0("qhnah").component2()).takeLast(-430436899)}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != prope10 || prope14 != prope9) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {(Kla0("qhnah").component2()).trimStart() += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return "fail 4: $prope8 != 0_1_9 or $prope14 != $prope9"

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:16:35,702 [main:107] - replacing ({prope8+="0_"; prope12}, Function0<Int>)
2021-03-12 01:16:35,702 [main:50] - replacing {prope8+="0_"; prope12} Function0<Int>
2021-03-12 01:16:35,702 [main:54] - Getting value of type Function0<Int>
2021-03-12 01:16:35,871 [main:302] - generating value of type = Function0<Int> false depth = 0
2021-03-12 01:16:35,875 [main:302] - generating value of type = Int true depth = 1
2021-03-12 01:16:35,878 [main:58] - GENERATED VALUE OF TYPE Function0<Int> = { 1139225404}
2021-03-12 01:16:35,878 [main:61] - GENERATED IS CALL =false
2021-03-12 01:16:35,893 [main:67] - randomType = Kla5
2021-03-12 01:16:36,064 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 01:16:36,068 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}
2021-03-12 01:16:36,080 [main:106] - GETTING Function0<Int> from String
2021-03-12 01:16:36,107 [main:106] - GETTING Function0<Int> from Continuation<Int>
2021-03-12 01:16:36,117 [main:106] - GETTING Function0<Int> from Any?
2021-03-12 01:16:36,122 [main:106] - GETTING Function0<Int> from String
2021-03-12 01:16:36,123 [main:106] - GETTING Function0<Int> from Array<String>
2021-03-12 01:16:36,138 [main:106] - GETTING Function0<Int> from String
2021-03-12 01:16:36,139 [main:106] - GETTING Function0<Int> from List<String>
2021-03-12 01:16:36,168 [main:106] - GETTING Function0<Int> from CoroutineContext
2021-03-12 01:16:36,174 [main:106] - GETTING Function0<Int> from List<String>
2021-03-12 01:16:36,175 [main:106] - GETTING Function0<Int> from CoroutineContext
2021-03-12 01:16:36,176 [main:106] - GETTING Function0<Int> from Function0<Unit>
2021-03-12 01:16:36,188 [main:106] - GETTING Function0<Int> from CoroutineContext
2021-03-12 01:16:36,189 [main:106] - GETTING Function0<Int> from String
2021-03-12 01:16:36,190 [main:106] - GETTING Function0<Int> from Boolean
2021-03-12 01:16:36,200 [main:106] - GETTING Function0<Int> from String
2021-03-12 01:16:36,201 [main:106] - GETTING Function0<Int> from Continuation<Any?>
2021-03-12 01:16:36,210 [main:106] - GETTING Function0<Int> from String
2021-03-12 01:16:36,211 [main:106] - GETTING Function0<Int> from EmptyCoroutineContext
2021-03-12 01:16:36,228 [main:106] - GETTING Function0<Int> from String
2021-03-12 01:16:36,229 [main:106] - GETTING Function0<Int> from A
2021-03-12 01:16:36,234 [main:114] - replacement of {prope8+="0_"; prope12} of type Function0<Int> is { 1139225404}
2021-03-12 01:16:36,401 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:16:36,402 [main:66] - Compilation checking started
2021-03-12 01:16:37,115 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = "";
    val prope9 = "0_1_9"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || prope14 != prope9) return "fail 1: $prope8 != $prope10 or $prope14 != $prope9"

    prope8 = "";
    prope14 = fu11(b = {prope8 += "1_"; prope11}(), c = {prope8 += "$prope13"; (Kla0("qhnah").component2()).takeLast(-430436899)}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != prope10 || prope14 != prope9) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return "fail 4: $prope8 != 0_1_9 or $prope14 != $prope9"

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:16:37,116 [main:107] - replacing ("1_", String)
2021-03-12 01:16:37,117 [main:50] - replacing "1_" String
2021-03-12 01:16:37,117 [main:54] - Getting value of type String
2021-03-12 01:16:37,281 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:16:37,285 [main:58] - GENERATED VALUE OF TYPE String = "fesrn"
2021-03-12 01:16:37,285 [main:61] - GENERATED IS CALL =false
2021-03-12 01:16:37,503 [main:67] - randomType = Kla6
2021-03-12 01:16:37,729 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 01:16:37,733 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}
2021-03-12 01:16:37,763 [main:106] - GETTING String from List<String>
2021-03-12 01:16:37,800 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]]
2021-03-12 01:16:37,801 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b]
2021-03-12 01:16:37,968 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:37,972 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]
2021-03-12 01:16:38,139 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:16:38,143 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:16:38,147 [main:117] - GENERATED CALL = ((s.map(a::map))).get(514469521).dropLastWhile({a: Char -> true})
2021-03-12 01:16:38,147 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.max(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4537e60e]]
2021-03-12 01:16:38,147 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.max(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4537e60e]
2021-03-12 01:16:38,147 [main:117] - GENERATED CALL = ((s.map(a::map))).max()
2021-03-12 01:16:38,147 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]]
2021-03-12 01:16:38,147 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b]
2021-03-12 01:16:38,314 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:38,318 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]
2021-03-12 01:16:38,318 [main:117] - GENERATED CALL = ((s.map(a::map))).get(-761333615).trimIndent()
2021-03-12 01:16:38,318 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@65463b83]]
2021-03-12 01:16:38,318 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@65463b83]
2021-03-12 01:16:38,489 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:16:38,661 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:16:38,835 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:16:38,840 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:16:39,210 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:16:39,214 [main:95] - GENERATED = StringBuilder("szbkt")
2021-03-12 01:16:39,378 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:16:39,551 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:39,722 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:16:39,897 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 01:16:39,900 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 01:16:39,908 [main:117] - GENERATED CALL = ((s.map(a::map))).joinToString("knzyp", StringBuilder("szbkt"), StringBuilder(), -1096192433, StringBuilder(), {a: T -> "vnpip"})
2021-03-12 01:16:39,908 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component3(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@20fce003]]
2021-03-12 01:16:39,908 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component3(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@20fce003]
2021-03-12 01:16:39,908 [main:117] - GENERATED CALL = ((s.map(a::map))).component3()
2021-03-12 01:16:39,908 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.elementAt(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@249399a3]]
2021-03-12 01:16:39,908 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.elementAt(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@249399a3]
2021-03-12 01:16:40,075 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:40,080 [main:117] - GENERATED CALL = ((s.map(a::map))).elementAt(155910019)
2021-03-12 01:16:40,080 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]]
2021-03-12 01:16:40,080 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b]
2021-03-12 01:16:40,249 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:40,252 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]
2021-03-12 01:16:40,418 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:16:40,591 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:16:40,596 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:16:40,964 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 01:16:40,971 [main:95] - GENERATED = StringBuilder("mxosu")
2021-03-12 01:16:40,971 [main:117] - GENERATED CALL = ((s.map(a::map))).get(783947466).removePrefix(StringBuilder("mxosu"))
2021-03-12 01:16:40,971 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0a1b3]]
2021-03-12 01:16:40,971 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b]
2021-03-12 01:16:41,138 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:41,142 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0a1b3]
2021-03-12 01:16:41,311 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:41,481 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:16:41,485 [main:117] - GENERATED CALL = ((s.map(a::map))).get(-1587345012).padStart(1280476699, '敮')
2021-03-12 01:16:41,485 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]]
2021-03-12 01:16:41,485 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b]
2021-03-12 01:16:41,653 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:41,657 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]
2021-03-12 01:16:41,823 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:16:41,827 [main:117] - GENERATED CALL = ((s.map(a::map))).get(1405112596).substringBeforeLast('捣', var prope2 =
2021-03-12 01:16:41,828 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@454d6062]]
2021-03-12 01:16:41,828 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b]
2021-03-12 01:16:41,996 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:42,001 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@454d6062]
2021-03-12 01:16:42,002 [main:117] - GENERATED CALL = ((s.map(a::map))).get(573276857).reversed()
2021-03-12 01:16:42,002 [main:114] - replacement of "1_" of type String is ((s.map(a::map))).get(-761333615).trimIndent()
2021-03-12 01:16:42,174 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:16:42,174 [main:66] - Compilation checking started
2021-03-12 01:16:42,976 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = "";
    val prope9 = "0_1_9"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || prope14 != prope9) return "fail 1: $prope8 != $prope10 or $prope14 != $prope9"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = {prope8 += "$prope13"; (Kla0("qhnah").component2()).takeLast(-430436899)}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != prope10 || prope14 != prope9) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return "fail 4: $prope8 != 0_1_9 or $prope14 != $prope9"

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:16:42,977 [main:107] - replacing ("", String)
2021-03-12 01:16:42,978 [main:50] - replacing "" String
2021-03-12 01:16:42,978 [main:54] - Getting value of type String
2021-03-12 01:16:43,151 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:16:43,155 [main:58] - GENERATED VALUE OF TYPE String = "nkfnu"
2021-03-12 01:16:43,155 [main:61] - GENERATED IS CALL =false
2021-03-12 01:16:43,170 [main:67] - randomType = Kla4
2021-03-12 01:16:43,346 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 01:16:43,350 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 01:16:43,357 [main:106] - GETTING String from String
2021-03-12 01:16:43,384 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]]
2021-03-12 01:16:43,384 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]
2021-03-12 01:16:43,554 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:16:43,558 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:16:43,562 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).dropLastWhile({a: Char -> true})
2021-03-12 01:16:43,562 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]]
2021-03-12 01:16:43,562 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]
2021-03-12 01:16:43,732 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:43,736 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).takeLast(-959693533)
2021-03-12 01:16:43,736 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707202d1]]
2021-03-12 01:16:43,736 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707202d1]
2021-03-12 01:16:43,906 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:16:43,910 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:16:43,914 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).takeLastWhile({a: Char -> false})
2021-03-12 01:16:43,914 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cfdfc94]]
2021-03-12 01:16:43,914 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cfdfc94]
2021-03-12 01:16:44,085 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 01:16:44,265 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-12 01:16:44,270 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-12 01:16:44,456 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:16:44,461 [main:95] - GENERATED = listOfNotNull<Int>(-446320259)
2021-03-12 01:16:44,461 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).slice(listOfNotNull<Int>(-446320259))
2021-03-12 01:16:44,461 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]]
2021-03-12 01:16:44,461 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]
2021-03-12 01:16:44,634 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:16:44,635 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).plus("jrenu")
2021-03-12 01:16:44,635 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@797c3840]]
2021-03-12 01:16:44,635 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@797c3840]
2021-03-12 01:16:44,635 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).decapitalize()
2021-03-12 01:16:44,635 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]]
2021-03-12 01:16:44,635 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]
2021-03-12 01:16:44,806 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:16:44,981 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:16:45,153 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:16:45,157 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).replaceFirst('옒', '餍', true)
2021-03-12 01:16:45,157 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:16:45,157 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:16:45,329 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:16:45,333 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:16:45,503 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:45,507 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).compareTo("evese").toString(855830649)
2021-03-12 01:16:45,508 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b88a22]]
2021-03-12 01:16:45,508 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b88a22]
2021-03-12 01:16:45,680 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:45,684 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).substring(-1338547887)
2021-03-12 01:16:45,684 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]]
2021-03-12 01:16:45,684 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]
2021-03-12 01:16:45,856 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:45,861 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).repeat(-864027729)
2021-03-12 01:16:45,861 [main:114] - replacement of "" of type String is (s.map(a::map)).get(1466108888)
2021-03-12 01:16:46,031 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:16:46,032 [main:66] - Compilation checking started
2021-03-12 01:16:46,767 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "0_1_9"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || prope14 != prope9) return "fail 1: $prope8 != $prope10 or $prope14 != $prope9"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = {prope8 += "$prope13"; (Kla0("qhnah").component2()).takeLast(-430436899)}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != prope10 || prope14 != prope9) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return "fail 4: $prope8 != 0_1_9 or $prope14 != $prope9"

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:16:46,768 [main:107] - replacing (prope11, Long)
2021-03-12 01:16:46,769 [main:50] - replacing prope11 Long
2021-03-12 01:16:46,769 [main:54] - Getting value of type Long
2021-03-12 01:16:46,941 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:46,945 [main:58] - GENERATED VALUE OF TYPE Long = -5216813370312753497
2021-03-12 01:16:46,945 [main:61] - GENERATED IS CALL =false
2021-03-12 01:16:47,174 [main:67] - randomType = Function1<Int, Kla4>
2021-03-12 01:16:47,176 [main:106] - GETTING Long from CoroutineContext
2021-03-12 01:16:47,185 [main:106] - GETTING Long from String
2021-03-12 01:16:47,214 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cef48b3]]
2021-03-12 01:16:47,215 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cef48b3]
2021-03-12 01:16:47,453 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:47,457 [main:117] - GENERATED CALL = (A("jmkiq").map()).length.div(-6392720277088279152)
2021-03-12 01:16:47,458 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]]
2021-03-12 01:16:47,458 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]
2021-03-12 01:16:47,631 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:47,635 [main:117] - GENERATED CALL = (A("jmkiq").map()).length.rem(-515639054294271168)
2021-03-12 01:16:47,635 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c86ca]]
2021-03-12 01:16:47,635 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c86ca]
2021-03-12 01:16:47,809 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:47,813 [main:117] - GENERATED CALL = (A("jmkiq").map()).length.minus(8517388931315674841)
2021-03-12 01:16:47,813 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ddc5ec6]]
2021-03-12 01:16:47,813 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ddc5ec6]
2021-03-12 01:16:47,814 [main:117] - GENERATED CALL = (A("jmkiq").map()).length.toLong()
2021-03-12 01:16:47,814 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]]
2021-03-12 01:16:47,814 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:16:47,985 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:16:47,989 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]
2021-03-12 01:16:48,164 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:48,168 [main:117] - GENERATED CALL = (A("jmkiq").map()).compareTo("kabow").rem(5712900869692926110)
2021-03-12 01:16:48,168 [main:113] - Case = [public fun kotlin.String.toLong(): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12f6783a]]
2021-03-12 01:16:48,168 [main:149] - GENERATING call of type public fun kotlin.String.toLong(): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12f6783a]
2021-03-12 01:16:48,169 [main:117] - GENERATED CALL = (A("jmkiq").map()).toLong()
2021-03-12 01:16:48,169 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c86ca]]
2021-03-12 01:16:48,169 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:16:48,343 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:16:48,347 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c86ca]
2021-03-12 01:16:48,519 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:48,523 [main:117] - GENERATED CALL = (A("jmkiq").map()).compareTo("wvwbi").minus(110227956804523324)
2021-03-12 01:16:48,524 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ce8b520]]
2021-03-12 01:16:48,524 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:16:48,524 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ce8b520]
2021-03-12 01:16:48,697 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:48,701 [main:117] - GENERATED CALL = (A("jmkiq").map()).compareTo(var prope2 =.times(-2188841528340318330)
2021-03-12 01:16:48,701 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]]
2021-03-12 01:16:48,701 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:16:48,701 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]
2021-03-12 01:16:48,875 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:16:48,879 [main:117] - GENERATED CALL = (A("jmkiq").map()).compareTo(Kla0("qhnah").o).plus(4782671069811201524)
2021-03-12 01:16:48,879 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3c3b70b7]]
2021-03-12 01:16:48,879 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:16:49,053 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:49,057 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3c3b70b7]
2021-03-12 01:16:49,057 [main:117] - GENERATED CALL = (A("jmkiq").map()).get(830671933).toLong()
2021-03-12 01:16:49,058 [main:114] - replacement of prope11 of type Long is (A("jmkiq").map()).length.div(-6392720277088279152)
2021-03-12 01:16:49,230 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:16:49,230 [main:66] - Compilation checking started
2021-03-12 01:16:49,737 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "0_1_9"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || prope14 != prope9) return "fail 1: $prope8 != $prope10 or $prope14 != $prope9"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = {prope8 += "$prope13"; (Kla0("qhnah").component2()).takeLast(-430436899)}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); (A("jmkiq").map()).length.div(-6392720277088279152)}(), a = {prope8+="0_"; prope12}())
    if (prope8 != prope10 || prope14 != prope9) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return "fail 4: $prope8 != 0_1_9 or $prope14 != $prope9"

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:16:49,738 [main:107] - replacing ({prope8 += "$prope13"; (Kla0("qhnah").component2()).takeLast(-430436899)}, Function0<String>)
2021-03-12 01:16:49,739 [main:50] - replacing {prope8 += "$prope13"; (Kla0("qhnah").component2()).takeLast(-430436899)} Function0<String>
2021-03-12 01:16:49,739 [main:54] - Getting value of type Function0<String>
2021-03-12 01:16:49,916 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-12 01:16:49,920 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:16:49,924 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "jsiof"}
2021-03-12 01:16:49,924 [main:61] - GENERATED IS CALL =false
2021-03-12 01:16:50,131 [main:67] - randomType = UInt
2021-03-12 01:16:50,308 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 01:16:50,352 [main:106] - GETTING Function0<String> from CoroutineContext
2021-03-12 01:16:50,363 [main:106] - GETTING Function0<String> from CoroutineContext
2021-03-12 01:16:50,364 [main:106] - GETTING Function0<String> from Continuation<Any?>
2021-03-12 01:16:50,374 [main:106] - GETTING Function0<String> from Function0<Unit>
2021-03-12 01:16:50,388 [main:106] - GETTING Function0<String> from List<String>
2021-03-12 01:16:50,425 [main:106] - GETTING Function0<String> from String
2021-03-12 01:16:50,452 [main:106] - GETTING Function0<String> from Continuation<Int>
2021-03-12 01:16:50,462 [main:106] - GETTING Function0<String> from String
2021-03-12 01:16:50,463 [main:106] - GETTING Function0<String> from String
2021-03-12 01:16:50,465 [main:106] - GETTING Function0<String> from String
2021-03-12 01:16:50,466 [main:106] - GETTING Function0<String> from String
2021-03-12 01:16:50,467 [main:106] - GETTING Function0<String> from String
2021-03-12 01:16:50,468 [main:106] - GETTING Function0<String> from String
2021-03-12 01:16:50,469 [main:106] - GETTING Function0<String> from Boolean
2021-03-12 01:16:50,482 [main:106] - GETTING Function0<String> from List<String>
2021-03-12 01:16:50,484 [main:106] - GETTING Function0<String> from A
2021-03-12 01:16:50,492 [main:106] - GETTING Function0<String> from Array<String>
2021-03-12 01:16:50,508 [main:106] - GETTING Function0<String> from EmptyCoroutineContext
2021-03-12 01:16:50,531 [main:106] - GETTING Function0<String> from CoroutineContext
2021-03-12 01:16:50,532 [main:106] - GETTING Function0<String> from Any?
2021-03-12 01:16:50,536 [main:114] - replacement of {prope8 += "$prope13"; (Kla0("qhnah").component2()).takeLast(-430436899)} of type Function0<String> is { "jsiof"}
2021-03-12 01:16:50,715 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:16:50,715 [main:66] - Compilation checking started
2021-03-12 01:16:51,425 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "0_1_9"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || prope14 != prope9) return "fail 1: $prope8 != $prope10 or $prope14 != $prope9"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != prope10 || prope14 != prope9) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return "fail 4: $prope8 != 0_1_9 or $prope14 != $prope9"

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:16:51,426 [main:107] - replacing ("fail 4: $prope8 != 0_1_9 or $prope14 != $prope9", String)
2021-03-12 01:16:51,427 [main:50] - replacing "fail 4: $prope8 != 0_1_9 or $prope14 != $prope9" String
2021-03-12 01:16:51,427 [main:54] - Getting value of type String
2021-03-12 01:16:51,599 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:16:51,603 [main:58] - GENERATED VALUE OF TYPE String = "wsrfj"
2021-03-12 01:16:51,603 [main:61] - GENERATED IS CALL =false
2021-03-12 01:16:51,812 [main:67] - randomType = ArrayList<Kla5>
2021-03-12 01:16:51,981 [main:302] - generating value of type = ArrayList<Kla5> false depth = 0
2021-03-12 01:16:52,158 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Kla5): ArrayList<Kla5> = TODO()
2021-03-12 01:16:52,163 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Kla5): ArrayList<Kla5> = TODO()
2021-03-12 01:16:52,408 [main:302] - generating value of type = Kla5 false depth = 3
2021-03-12 01:16:52,411 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}
2021-03-12 01:16:52,412 [main:95] - GENERATED = arrayListOf<Kla5>(Kla5())
2021-03-12 01:16:52,578 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@36f6b236]
2021-03-12 01:16:52,578 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5e94494e]
2021-03-12 01:16:52,746 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:16:52,923 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:16:53,101 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:16:53,276 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:16:53,281 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:16:53,652 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 01:16:53,828 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:16:53,833 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:16:54,204 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-12 01:16:54,381 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:16:54,386 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:16:54,764 [main:302] - generating value of type = Int true depth = 9
2021-03-12 01:16:54,768 [main:95] - GENERATED = StringBuilder(460961643)
2021-03-12 01:16:54,768 [main:95] - GENERATED = StringBuilder(StringBuilder(460961643))
2021-03-12 01:16:54,768 [main:95] - GENERATED = StringBuilder(StringBuilder(StringBuilder(460961643)))
2021-03-12 01:16:54,935 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:55,107 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:16:55,282 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 01:16:55,286 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 01:16:55,293 [main:78] - Generated call from random type = (arrayListOf<Kla5>(Kla5())).toArray().joinToString("reusn", "kauic", StringBuilder(StringBuilder(StringBuilder(460961643))), 924983873, "orufa", {a: T -> "omorh"})
2021-03-12 01:16:55,294 [main:106] - GETTING String from CoroutineContext
2021-03-12 01:16:55,302 [main:106] - GETTING String from String
2021-03-12 01:16:55,328 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4997a579]]
2021-03-12 01:16:55,328 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4997a579]
2021-03-12 01:16:55,328 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).trimEnd()
2021-03-12 01:16:55,328 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]]
2021-03-12 01:16:55,328 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]
2021-03-12 01:16:55,499 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:16:55,669 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:16:55,673 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).replaceBeforeLast('値', "qxkzw", A("jmkiq").z)
2021-03-12 01:16:55,674 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0a1b3]]
2021-03-12 01:16:55,674 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0a1b3]
2021-03-12 01:16:55,842 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:56,014 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:16:56,018 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).padStart(1382295156, 'ﶌ')
2021-03-12 01:16:56,019 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]]
2021-03-12 01:16:56,019 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]
2021-03-12 01:16:56,196 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:16:56,382 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:16:56,387 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:16:56,765 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:16:56,769 [main:95] - GENERATED = StringBuilder(1095050217)
2021-03-12 01:16:56,769 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).removePrefix(StringBuilder(1095050217))
2021-03-12 01:16:56,769 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305e8885]]
2021-03-12 01:16:56,769 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:16:56,940 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:56,945 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305e8885]
2021-03-12 01:16:56,945 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).get(-1515729464).lowercase()
2021-03-12 01:16:56,945 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d3514e]]
2021-03-12 01:16:56,945 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d3514e]
2021-03-12 01:16:56,945 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).toLowerCase()
2021-03-12 01:16:56,945 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]]
2021-03-12 01:16:56,945 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:16:57,170 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:57,343 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:57,347 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]
2021-03-12 01:16:57,515 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:57,519 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)
2021-03-12 01:16:57,519 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]]
2021-03-12 01:16:57,519 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]
2021-03-12 01:16:57,686 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:16:57,860 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:16:57,864 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).replace('᤮', '', Kla5().prope5)
2021-03-12 01:16:57,864 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@809c776]]
2021-03-12 01:16:57,865 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@809c776]
2021-03-12 01:16:58,034 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 01:16:58,038 [main:302] - generating value of type = Char true depth = 1
2021-03-12 01:16:58,042 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).replaceFirstChar({a: Char -> '푭'})
2021-03-12 01:16:58,042 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ad4cc3f]]
2021-03-12 01:16:58,042 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:16:58,211 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:58,385 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:16:58,389 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ad4cc3f]
2021-03-12 01:16:58,556 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 01:16:58,733 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 01:16:58,738 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 01:16:59,317 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:16:59,321 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 01:16:59,494 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 01:16:59,499 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 01:16:59,673 [main:302] - generating value of type = RegexOption false depth = 6
2021-03-12 01:16:59,678 [main:95] - GENERATED = setOfNotNull<RegexOption>(kotlin.text.RegexOption.MULTILINE)
2021-03-12 01:16:59,678 [main:95] - GENERATED = Regex("cxheb", setOfNotNull<RegexOption>(kotlin.text.RegexOption.MULTILINE))
2021-03-12 01:16:59,847 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 01:16:59,850 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 01:16:59,857 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).subSequence(-52069813, 524751965).replace(Regex("cxheb", setOfNotNull<RegexOption>(kotlin.text.RegexOption.MULTILINE)), {a: MatchResult -> "uxppp"})
2021-03-12 01:16:59,858 [main:114] - replacement of "fail 4: $prope8 != 0_1_9 or $prope14 != $prope9" of type String is ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)
2021-03-12 01:17:00,027 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:17:00,027 [main:66] - Compilation checking started
2021-03-12 01:17:00,774 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "0_1_9"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || prope14 != prope9) return "fail 1: $prope8 != $prope10 or $prope14 != $prope9"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != prope10 || prope14 != prope9) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:17:00,775 [main:107] - replacing (prope8, String)
2021-03-12 01:17:00,776 [main:50] - replacing prope8 String
2021-03-12 01:17:00,776 [main:54] - Getting value of type String
2021-03-12 01:17:00,946 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:00,950 [main:58] - GENERATED VALUE OF TYPE String = "qplvy"
2021-03-12 01:17:00,950 [main:61] - GENERATED IS CALL =false
2021-03-12 01:17:00,965 [main:67] - randomType = Kla0
2021-03-12 01:17:01,143 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 01:17:01,147 [main:112] - generating klass Kla0 text = data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}
2021-03-12 01:17:01,324 [main:194] - Type params = []
2021-03-12 01:17:01,504 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:17:01,515 [main:149] - GENERATING call of type public final operator fun component2(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@6f1bb91f]
2021-03-12 01:17:01,515 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e632037]
2021-03-12 01:17:01,515 [main:78] - Generated call from random type = (Kla0("ovfop")).component2().uppercase()
2021-03-12 01:17:01,515 [main:106] - GETTING String from String
2021-03-12 01:17:01,542 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]]
2021-03-12 01:17:01,542 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]
2021-03-12 01:17:01,713 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:01,717 [main:117] - GENERATED CALL = (Kla0("qhnah").o).dropLast(-97933480)
2021-03-12 01:17:01,717 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8422c70]]
2021-03-12 01:17:01,717 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8422c70]
2021-03-12 01:17:01,717 [main:117] - GENERATED CALL = (Kla0("qhnah").o).capitalize()
2021-03-12 01:17:01,717 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@404181f8]]
2021-03-12 01:17:01,717 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@404181f8]
2021-03-12 01:17:01,884 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:17:02,062 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:17:02,068 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:17:02,502 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:17:02,506 [main:95] - GENERATED = StringBuilder(1948724042)
2021-03-12 01:17:02,506 [main:117] - GENERATED CALL = (Kla0("qhnah").o).removeSuffix(StringBuilder(1948724042))
2021-03-12 01:17:02,507 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]]
2021-03-12 01:17:02,507 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:17:02,674 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:02,854 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:02,857 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]
2021-03-12 01:17:03,033 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:17:03,218 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:17:03,223 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:17:03,594 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 01:17:03,601 [main:95] - GENERATED = StringBuilder("xpgxq")
2021-03-12 01:17:03,771 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:17:03,775 [main:117] - GENERATED CALL = (Kla0("qhnah").o).subSequence(-1176733285, 200822629).commonPrefixWith(StringBuilder("xpgxq"), true)
2021-03-12 01:17:03,776 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]]
2021-03-12 01:17:03,776 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]
2021-03-12 01:17:03,946 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:17:03,953 [main:117] - GENERATED CALL = (Kla0("qhnah").o).removeSurrounding("ukmfj")
2021-03-12 01:17:03,953 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]]
2021-03-12 01:17:03,953 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]
2021-03-12 01:17:04,123 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:17:04,309 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:17:04,313 [main:117] - GENERATED CALL = (Kla0("qhnah").o).replaceFirst('⪙', 'ദ', Kla5().prope5)
2021-03-12 01:17:04,313 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]]
2021-03-12 01:17:04,313 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]
2021-03-12 01:17:04,483 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:17:04,659 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:17:04,664 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:17:05,040 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:17:05,044 [main:95] - GENERATED = StringBuilder("vgaaj")
2021-03-12 01:17:05,044 [main:117] - GENERATED CALL = (Kla0("qhnah").o).removePrefix(StringBuilder("vgaaj"))
2021-03-12 01:17:05,044 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7fe90b]]
2021-03-12 01:17:05,044 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7fe90b]
2021-03-12 01:17:05,216 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:05,390 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:17:05,394 [main:117] - GENERATED CALL = (Kla0("qhnah").o).padEnd(-495578812, '蛁')
2021-03-12 01:17:05,394 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e632037]]
2021-03-12 01:17:05,394 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e632037]
2021-03-12 01:17:05,394 [main:117] - GENERATED CALL = (Kla0("qhnah").o).uppercase()
2021-03-12 01:17:05,395 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]]
2021-03-12 01:17:05,395 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]
2021-03-12 01:17:05,395 [main:117] - GENERATED CALL = (Kla0("qhnah").o).lowercase()
2021-03-12 01:17:05,395 [main:114] - replacement of prope8 of type String is (Kla0("qhnah").o).dropLast(-97933480)
2021-03-12 01:17:05,563 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:17:05,563 [main:66] - Compilation checking started
2021-03-12 01:17:06,063 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "0_1_9"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || prope14 != prope9) return "fail 1: $prope8 != $prope10 or $prope14 != $prope9"

    prope8 = "";
    prope14 = fu11(b = {(Kla0("qhnah").o).dropLast(-97933480) += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != prope10 || prope14 != prope9) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:17:06,065 [main:107] - replacing (prope8, String)
2021-03-12 01:17:06,065 [main:50] - replacing prope8 String
2021-03-12 01:17:06,065 [main:54] - Getting value of type String
2021-03-12 01:17:06,235 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:06,239 [main:58] - GENERATED VALUE OF TYPE String = "cwmoc"
2021-03-12 01:17:06,239 [main:61] - GENERATED IS CALL =false
2021-03-12 01:17:06,247 [main:67] - randomType = Long
2021-03-12 01:17:06,418 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:17:06,461 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@6f664ab3]
2021-03-12 01:17:06,461 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]
2021-03-12 01:17:06,461 [main:78] - Generated call from random type = (-2014045904125155854).toChar().titlecase()
2021-03-12 01:17:06,461 [main:106] - GETTING String from String
2021-03-12 01:17:06,479 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@573137a1]]
2021-03-12 01:17:06,479 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@573137a1]
2021-03-12 01:17:06,479 [main:117] - GENERATED CALL = (prope2).trim()
2021-03-12 01:17:06,479 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]]
2021-03-12 01:17:06,479 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:17:06,648 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:06,829 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:06,833 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]
2021-03-12 01:17:07,004 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:07,227 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:07,231 [main:117] - GENERATED CALL = (prope2).subSequence(1979981014, 1674534323).substring(-1406276276, -639462666)
2021-03-12 01:17:07,231 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]]
2021-03-12 01:17:07,231 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]
2021-03-12 01:17:07,404 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:17:07,408 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:17:07,412 [main:117] - GENERATED CALL = (prope2).dropLastWhile({a: Char -> true})
2021-03-12 01:17:07,412 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]]
2021-03-12 01:17:07,412 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]
2021-03-12 01:17:07,589 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:17:07,597 [main:117] - GENERATED CALL = (prope2).removeSurrounding(StringBuilder())
2021-03-12 01:17:07,597 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e748520]]
2021-03-12 01:17:07,598 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e748520]
2021-03-12 01:17:07,598 [main:117] - GENERATED CALL = (prope2).trimStart()
2021-03-12 01:17:07,598 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@404181f8]]
2021-03-12 01:17:07,598 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@404181f8]
2021-03-12 01:17:07,769 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:17:07,776 [main:117] - GENERATED CALL = (prope2).removeSuffix("zcxdi")
2021-03-12 01:17:07,776 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e37e3ea]]
2021-03-12 01:17:07,776 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e37e3ea]
2021-03-12 01:17:07,946 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:08,122 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:08,304 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:17:08,312 [main:117] - GENERATED CALL = (prope2).replaceRange(-663226225, -1853065112, "yrlmh")
2021-03-12 01:17:08,312 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]]
2021-03-12 01:17:08,312 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]
2021-03-12 01:17:08,483 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:08,487 [main:117] - GENERATED CALL = (prope2).drop(1829442532)
2021-03-12 01:17:08,487 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]]
2021-03-12 01:17:08,487 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]
2021-03-12 01:17:08,657 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:17:08,664 [main:117] - GENERATED CALL = (prope2).removePrefix("ocupy")
2021-03-12 01:17:08,664 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]]
2021-03-12 01:17:08,664 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]
2021-03-12 01:17:08,834 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:08,838 [main:117] - GENERATED CALL = (prope2).replaceIndentByMargin(Kla0("qhnah").component2(), "cgcec")
2021-03-12 01:17:08,839 [main:114] - replacement of prope8 of type String is (prope2).dropLastWhile({a: Char -> true})
2021-03-12 01:17:09,010 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:17:09,010 [main:66] - Compilation checking started
2021-03-12 01:17:09,678 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "0_1_9"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || prope14 != prope9) return "fail 1: $prope8 != $prope10 or $prope14 != $prope9"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {(prope2).dropLastWhile({a: Char -> true})+="0_"; prope12}())
    if (prope8 != prope10 || prope14 != prope9) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:17:09,680 [main:107] - replacing (prope10, String)
2021-03-12 01:17:09,682 [main:50] - replacing prope10 String
2021-03-12 01:17:09,682 [main:54] - Getting value of type String
2021-03-12 01:17:09,866 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:09,870 [main:58] - GENERATED VALUE OF TYPE String = "mycnp"
2021-03-12 01:17:09,870 [main:61] - GENERATED IS CALL =false
2021-03-12 01:17:10,689 [main:67] - randomType = Map<Short, Kla3<Char>>?
2021-03-12 01:17:10,689 [main:106] - GETTING String from String
2021-03-12 01:17:10,715 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b88a22]]
2021-03-12 01:17:10,715 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b88a22]
2021-03-12 01:17:10,886 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:10,890 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).substring(1829979949)
2021-03-12 01:17:10,890 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:17:10,890 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:17:10,890 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:17:11,063 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:11,067 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435)
2021-03-12 01:17:11,067 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]]
2021-03-12 01:17:11,067 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]
2021-03-12 01:17:11,243 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:17:11,250 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).removeSurrounding("bylyq")
2021-03-12 01:17:11,250 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@809c776]]
2021-03-12 01:17:11,250 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@809c776]
2021-03-12 01:17:11,430 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 01:17:11,434 [main:302] - generating value of type = Char true depth = 1
2021-03-12 01:17:11,438 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).replaceFirstChar({a: Char -> '뭓'})
2021-03-12 01:17:11,439 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]]
2021-03-12 01:17:11,439 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]
2021-03-12 01:17:11,610 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:17:11,614 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:17:11,617 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).dropWhile({a: Char -> true})
2021-03-12 01:17:11,618 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]]
2021-03-12 01:17:11,618 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]
2021-03-12 01:17:11,788 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:17:11,961 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:11,965 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).replaceAfter('ᵫ', (s.map(a::map)).get(1466108888), "yohsp")
2021-03-12 01:17:11,966 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d3514e]]
2021-03-12 01:17:11,966 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d3514e]
2021-03-12 01:17:11,966 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).toLowerCase()
2021-03-12 01:17:11,966 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4997a579]]
2021-03-12 01:17:11,966 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4997a579]
2021-03-12 01:17:11,966 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).trimEnd()
2021-03-12 01:17:11,966 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]]
2021-03-12 01:17:11,966 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]
2021-03-12 01:17:11,966 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).trimIndent()
2021-03-12 01:17:11,966 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e632037]]
2021-03-12 01:17:11,966 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e632037]
2021-03-12 01:17:11,967 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).uppercase()
2021-03-12 01:17:11,967 [main:114] - replacement of prope10 of type String is ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435)
2021-03-12 01:17:12,139 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:17:12,139 [main:66] - Compilation checking started
2021-03-12 01:17:12,927 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "0_1_9"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || prope14 != prope9) return "fail 1: $prope8 != $prope10 or $prope14 != $prope9"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != prope9) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:17:12,928 [main:107] - replacing (prope14 != prope9, Boolean)
2021-03-12 01:17:12,929 [main:50] - replacing prope14 != prope9 Boolean
2021-03-12 01:17:12,929 [main:54] - Getting value of type Boolean
2021-03-12 01:17:13,105 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:17:13,109 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 01:17:13,109 [main:61] - GENERATED IS CALL =false
2021-03-12 01:17:13,545 [main:67] - randomType = MutableMap<String?, Kla4>
2021-03-12 01:17:13,546 [main:106] - GETTING Boolean from CoroutineContext
2021-03-12 01:17:13,555 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3000151a], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3df8a0d8]]
2021-03-12 01:17:13,555 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3000151a]
2021-03-12 01:17:13,555 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3df8a0d8]
2021-03-12 01:17:13,555 [main:117] - GENERATED CALL = (Kla6.context).equals(Kla2().prope2).and(Kla5().prope5)
2021-03-12 01:17:13,555 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3000151a], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]]
2021-03-12 01:17:13,555 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3000151a]
2021-03-12 01:17:13,556 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]
2021-03-12 01:17:13,556 [main:117] - GENERATED CALL = (Kla6.context).equals(Kla2().prope2).xor(Kla5().prope5)
2021-03-12 01:17:13,556 [main:113] - Case = [public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@107f519], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext.Element[DeserializedSimpleFunctionDescriptor@1f843683]]
2021-03-12 01:17:13,556 [main:149] - GENERATING call of type public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@107f519]
2021-03-12 01:17:13,729 [main:302] - generating value of type = Key<E> false depth = 0
2021-03-12 01:17:13,913 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 01:17:13,918 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 01:17:14,520 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 01:17:14,520 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@107f519]
2021-03-12 01:17:14,520 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3e00febd], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6557ee1f]]
2021-03-12 01:17:14,520 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3e00febd]
2021-03-12 01:17:14,695 [main:302] - generating value of type = R false depth = 0
2021-03-12 01:17:15,280 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->Byte?): R = TODO()
2021-03-12 01:17:15,285 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->Byte?): R = TODO()
2021-03-12 01:17:15,868 [main:302] - generating value of type = Any false depth = 3
2021-03-12 01:17:15,868 [main:302] - generating value of type = Function0<Byte?> false depth = 3
2021-03-12 01:17:15,872 [main:302] - generating value of type = Byte true depth = 4
2021-03-12 01:17:15,876 [main:95] - GENERATED = synchronized<Byte?>("qplod", { 77})
2021-03-12 01:17:16,051 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 01:17:16,054 [main:302] - generating value of type = R false depth = 1
2021-03-12 01:17:16,433 [main:43] - GENERATING CALL OF fun <R> run(block: ()->UShort): R = TODO()
2021-03-12 01:17:16,437 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->UShort): R = TODO()
2021-03-12 01:17:16,822 [main:302] - generating value of type = Function0<UShort> false depth = 4
2021-03-12 01:17:16,826 [main:302] - generating value of type = UShort true depth = 5
2021-03-12 01:17:16,830 [main:95] - GENERATED = run<UShort>({ 32710.toUShort()})
2021-03-12 01:17:16,830 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6557ee1f]
2021-03-12 01:17:17,004 [main:302] - generating value of type = T false depth = 0
2021-03-12 01:17:17,194 [main:43] - GENERATING CALL OF fun <T> checkNotNull(value: Int): T = TODO()
2021-03-12 01:17:17,199 [main:61] - WITHOUT TYPE PARAMS = fun <T> checkNotNull(value: Int): T = TODO()
2021-03-12 01:17:17,451 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:17:17,455 [main:95] - GENERATED = checkNotNull<Int>(-393278944)
2021-03-12 01:17:17,456 [main:117] - GENERATED CALL = (Kla6.context).fold(synchronized<Byte?>("qplod", { 77}), {a: R, b: Element -> run<UShort>({ 32710.toUShort()})})?.contains(checkNotNull<Int>(-393278944))
2021-03-12 01:17:17,456 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3000151a], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14ca80b4]]
2021-03-12 01:17:17,456 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3000151a]
2021-03-12 01:17:17,456 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14ca80b4]
2021-03-12 01:17:17,456 [main:117] - GENERATED CALL = (Kla6.context).equals(Kla2().prope2).not()
2021-03-12 01:17:17,456 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3000151a]]
2021-03-12 01:17:17,456 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3000151a]
2021-03-12 01:17:17,456 [main:117] - GENERATED CALL = (Kla6.context).equals(Kla2().prope2)
2021-03-12 01:17:17,456 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3000151a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c479748]]
2021-03-12 01:17:17,456 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3000151a]
2021-03-12 01:17:17,456 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c479748]
2021-03-12 01:17:17,645 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:17:17,646 [main:117] - GENERATED CALL = (Kla6.context).equals(Kla2().prope2).equals("paidc")
2021-03-12 01:17:17,646 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3e00febd], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@373d86e]]
2021-03-12 01:17:17,646 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3e00febd]
2021-03-12 01:17:17,818 [main:302] - generating value of type = R false depth = 0
2021-03-12 01:17:18,195 [main:43] - GENERATING CALL OF fun <R> run(block: ()->Float): R = TODO()
2021-03-12 01:17:18,200 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->Float): R = TODO()
2021-03-12 01:17:18,580 [main:302] - generating value of type = Function0<Float> false depth = 3
2021-03-12 01:17:18,584 [main:302] - generating value of type = Float true depth = 4
2021-03-12 01:17:18,588 [main:95] - GENERATED = run<Float>({ 0.6817439f})
2021-03-12 01:17:18,760 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 01:17:18,764 [main:302] - generating value of type = R false depth = 1
2021-03-12 01:17:19,354 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->Function1<Kla4, ULong>): R = TODO()
2021-03-12 01:17:19,359 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->Function1<Kla4, ULong>): R = TODO()
2021-03-12 01:17:19,969 [main:302] - generating value of type = Any false depth = 4
2021-03-12 01:17:19,969 [main:302] - generating value of type = Function0<Function1<Kla4, ULong>> false depth = 4
2021-03-12 01:17:19,973 [main:302] - generating value of type = Function1<Kla4, ULong> false depth = 5
2021-03-12 01:17:19,977 [main:302] - generating value of type = ULong true depth = 6
2021-03-12 01:17:19,981 [main:95] - GENERATED = synchronized<Function1<Kla4, ULong>>("abmzc", { {a: Kla4 -> 1796209965388440139.toULong()}})
2021-03-12 01:17:19,981 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@373d86e]
2021-03-12 01:17:20,153 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:17:20,154 [main:117] - GENERATED CALL = (Kla6.context).fold(run<Float>({ 0.6817439f}), {a: R, b: Element -> synchronized<Function1<Kla4, ULong>>("abmzc", { {a: Kla4 -> 1796209965388440139.toULong()}})})?.equals("yopbo")
2021-03-12 01:17:20,154 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3000151a], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]]
2021-03-12 01:17:20,154 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3000151a]
2021-03-12 01:17:20,325 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:17:20,326 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]
2021-03-12 01:17:20,326 [main:117] - GENERATED CALL = (Kla6.context).equals("dnqrl").or(Kla5().prope5)
2021-03-12 01:17:20,326 [main:114] - replacement of prope14 != prope9 of type Boolean is true
2021-03-12 01:17:20,498 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 01:17:20,499 [main:66] - Compilation checking started
2021-03-12 01:17:21,267 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "0_1_9"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $prope9"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != prope9) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:17:21,268 [main:107] - replacing (prope9, String)
2021-03-12 01:17:21,269 [main:50] - replacing prope9 String
2021-03-12 01:17:21,269 [main:54] - Getting value of type String
2021-03-12 01:17:21,472 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:21,478 [main:58] - GENERATED VALUE OF TYPE String = "cojkh"
2021-03-12 01:17:21,478 [main:61] - GENERATED IS CALL =false
2021-03-12 01:17:21,694 [main:67] - randomType = Kla6
2021-03-12 01:17:21,866 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 01:17:21,871 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}
2021-03-12 01:17:21,898 [main:106] - GETTING String from Any?
2021-03-12 01:17:21,903 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@4e7dcf03]]
2021-03-12 01:17:21,903 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@4e7dcf03]
2021-03-12 01:17:21,903 [main:117] - GENERATED CALL = (Kla2().prope2).toString()
2021-03-12 01:17:21,903 [main:114] - replacement of prope9 of type String is "cojkh"
2021-03-12 01:17:22,076 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 01:17:22,076 [main:66] - Compilation checking started
2021-03-12 01:17:22,631 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "0_1_9"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $prope9"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $"cojkh""


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != prope9) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:17:22,632 [main:107] - replacing (prope9, String)
2021-03-12 01:17:22,633 [main:50] - replacing prope9 String
2021-03-12 01:17:22,633 [main:54] - Getting value of type String
2021-03-12 01:17:22,811 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:22,815 [main:58] - GENERATED VALUE OF TYPE String = "npuwk"
2021-03-12 01:17:22,815 [main:61] - GENERATED IS CALL =false
2021-03-12 01:17:23,012 [main:67] - randomType = UShort
2021-03-12 01:17:23,185 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 01:17:23,227 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@3e909177]
2021-03-12 01:17:23,227 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6692e134]
2021-03-12 01:17:23,398 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:23,402 [main:78] - Generated call from random type = (22811.toUShort()).toLong().toString(522279541)
2021-03-12 01:17:23,403 [main:106] - GETTING String from Function0<Unit>
2021-03-12 01:17:23,416 [main:106] - GETTING String from String
2021-03-12 01:17:23,441 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]]
2021-03-12 01:17:23,441 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:17:23,614 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:23,790 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:23,794 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]
2021-03-12 01:17:23,970 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:24,148 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:24,152 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).subSequence(833751223, -1453690970).substring(-1636705250, -565680711)
2021-03-12 01:17:24,152 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cfdfc94]]
2021-03-12 01:17:24,152 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cfdfc94]
2021-03-12 01:17:24,326 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 01:17:24,506 [main:43] - GENERATING CALL OF fun <T> MutableList(size: kotlin.Int, init: (index: kotlin.Int)->Int): Iterable<Int> = TODO()
2021-03-12 01:17:24,512 [main:61] - WITHOUT TYPE PARAMS = fun <T> MutableList(size: kotlin.Int, init: (index: kotlin.Int)->Int): Iterable<Int> = TODO()
2021-03-12 01:17:25,093 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:17:25,097 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] Int, Int> false depth = 3
2021-03-12 01:17:25,261 [main:302] - generating value of type = Int true depth = 4
2021-03-12 01:17:25,265 [main:95] - GENERATED = MutableList<Int>(1729096320, {a: Int -> 1607565652})
2021-03-12 01:17:25,265 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).slice(MutableList<Int>(1729096320, {a: Int -> 1607565652}))
2021-03-12 01:17:25,265 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@797c3840]]
2021-03-12 01:17:25,265 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@797c3840]
2021-03-12 01:17:25,265 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).decapitalize()
2021-03-12 01:17:25,266 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]]
2021-03-12 01:17:25,266 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]
2021-03-12 01:17:25,266 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).trimIndent()
2021-03-12 01:17:25,266 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]]
2021-03-12 01:17:25,266 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:17:25,441 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:25,445 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]
2021-03-12 01:17:25,445 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).get(1405361853).titlecase()
2021-03-12 01:17:25,445 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56864111]]
2021-03-12 01:17:25,445 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:17:25,617 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:25,794 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:25,798 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56864111]
2021-03-12 01:17:25,971 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 01:17:26,152 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 01:17:26,157 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 01:17:26,538 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:17:26,543 [main:95] - GENERATED = Regex("wsbaa")
2021-03-12 01:17:26,543 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).subSequence(-1339005432, 1773237731).replaceFirst(Regex("wsbaa"), (s.map(a::map)).get(1466108888))
2021-03-12 01:17:26,543 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]]
2021-03-12 01:17:26,543 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:17:26,721 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:26,903 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:26,907 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]
2021-03-12 01:17:27,081 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:17:27,261 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:17:27,266 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:17:27,644 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:17:27,648 [main:95] - GENERATED = StringBuilder("ywhgi")
2021-03-12 01:17:27,649 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).subSequence(-396950644, -37963997).commonSuffixWith(StringBuilder("ywhgi"), Kla5().prope5)
2021-03-12 01:17:27,649 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f548ae4]]
2021-03-12 01:17:27,649 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f548ae4]
2021-03-12 01:17:27,866 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 01:17:27,870 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:17:27,874 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).filterIndexed({a: Int, b: Char -> true})
2021-03-12 01:17:27,874 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]]
2021-03-12 01:17:27,874 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]
2021-03-12 01:17:28,049 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:28,053 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).take(-102728206)
2021-03-12 01:17:28,053 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]]
2021-03-12 01:17:28,053 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:17:28,233 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:28,416 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:28,421 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]
2021-03-12 01:17:28,599 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:17:28,785 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:17:28,790 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:17:29,178 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:17:29,182 [main:95] - GENERATED = StringBuilder(-152248117)
2021-03-12 01:17:29,182 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).subSequence(-995954677, 112859971).commonPrefixWith(StringBuilder(-152248117), Kla5().prope5)
2021-03-12 01:17:29,182 [main:114] - replacement of prope9 of type String is (s.map(a::map)).get(1466108888)
2021-03-12 01:17:29,360 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:17:29,361 [main:66] - Compilation checking started
2021-03-12 01:17:30,092 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "0_1_9"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != prope9) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:17:30,094 [main:107] - replacing (prope9, String)
2021-03-12 01:17:30,095 [main:50] - replacing prope9 String
2021-03-12 01:17:30,095 [main:54] - Getting value of type String
2021-03-12 01:17:30,275 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:30,279 [main:58] - GENERATED VALUE OF TYPE String = "awpgf"
2021-03-12 01:17:30,279 [main:61] - GENERATED IS CALL =false
2021-03-12 01:17:30,718 [main:67] - randomType = Triple<A, A, Byte>
2021-03-12 01:17:30,892 [main:302] - generating value of type = Triple<A, A, Byte> false depth = 0
2021-03-12 01:17:31,074 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: A, second: A, third: Byte): Triple<A, A, Byte> = TODO()
2021-03-12 01:17:31,079 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: A, second: A, third: Byte): Triple<A, A, Byte> = TODO()
2021-03-12 01:17:31,259 [main:302] - generating value of type = A false depth = 3
2021-03-12 01:17:31,262 [main:112] - generating klass A text = class A(val z: String) {
    fun map(s: String) = z + s
}
2021-03-12 01:17:31,436 [main:194] - Type params = []
2021-03-12 01:17:31,608 [main:302] - generating value of type = String true depth = 5
2021-03-12 01:17:31,612 [main:302] - generating value of type = A false depth = 3
2021-03-12 01:17:31,615 [main:112] - generating klass A text = class A(val z: String) {
    fun map(s: String) = z + s
}
2021-03-12 01:17:31,789 [main:194] - Type params = []
2021-03-12 01:17:31,961 [main:302] - generating value of type = String true depth = 5
2021-03-12 01:17:31,965 [main:302] - generating value of type = Byte true depth = 3
2021-03-12 01:17:31,969 [main:95] - GENERATED = Triple<A, A, Byte>(A("iorzm"), A("tpztt"), -73)
2021-03-12 01:17:31,984 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a82138]
2021-03-12 01:17:32,159 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:32,163 [main:78] - Generated call from random type = (Triple<A, A, Byte>(A("iorzm"), A("tpztt"), -73)).third.toString(-577391591)
2021-03-12 01:17:32,164 [main:106] - GETTING String from CoroutineContext
2021-03-12 01:17:32,173 [main:106] - GETTING String from String
2021-03-12 01:17:32,197 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d3514e]]
2021-03-12 01:17:32,197 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d3514e]
2021-03-12 01:17:32,197 [main:117] - GENERATED CALL = (prope2).toLowerCase()
2021-03-12 01:17:32,197 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]]
2021-03-12 01:17:32,197 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:17:32,370 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:32,375 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]
2021-03-12 01:17:32,375 [main:117] - GENERATED CALL = (prope2).get(-52270427).titlecase()
2021-03-12 01:17:32,375 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a16d90e]]
2021-03-12 01:17:32,375 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a16d90e]
2021-03-12 01:17:32,375 [main:117] - GENERATED CALL = (prope2).concat(A("jmkiq").z)
2021-03-12 01:17:32,375 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cfdfc94]]
2021-03-12 01:17:32,375 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cfdfc94]
2021-03-12 01:17:32,551 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 01:17:32,734 [main:43] - GENERATING CALL OF fun UIntRange(start: kotlin.UInt, endInclusive: kotlin.UInt): Iterable<Int> = TODO()
2021-03-12 01:17:32,739 [main:61] - WITHOUT TYPE PARAMS = fun UIntRange(start: kotlin.UInt, endInclusive: kotlin.UInt): Iterable<Int> = TODO()
2021-03-12 01:17:33,362 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 01:17:33,366 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 01:17:33,370 [main:95] - GENERATED = UIntRange(1758887626.toUInt(), 1002824747.toUInt())
2021-03-12 01:17:33,370 [main:117] - GENERATED CALL = (prope2).slice(UIntRange(1758887626.toUInt(), 1002824747.toUInt()))
2021-03-12 01:17:33,370 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c072050]]
2021-03-12 01:17:33,370 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c072050]
2021-03-12 01:17:33,545 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:17:33,722 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:33,726 [main:117] - GENERATED CALL = (prope2).replaceAfterLast('', Kla0("qhnah").o, "pyjtq")
2021-03-12 01:17:33,726 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]]
2021-03-12 01:17:33,726 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:17:33,900 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:34,078 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:34,082 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]
2021-03-12 01:17:34,255 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:34,432 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:34,436 [main:117] - GENERATED CALL = (prope2).subSequence(-1311730006, 1324109521).substring(1299555687, 1330011176)
2021-03-12 01:17:34,436 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]]
2021-03-12 01:17:34,436 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:17:34,609 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:34,788 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:34,792 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]
2021-03-12 01:17:34,966 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:17:34,973 [main:117] - GENERATED CALL = (prope2).subSequence(444018426, -1252050418).commonSuffixWith(StringBuilder(), Kla5().prope5)
2021-03-12 01:17:34,974 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]]
2021-03-12 01:17:34,974 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]
2021-03-12 01:17:35,155 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:17:35,159 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:17:35,163 [main:117] - GENERATED CALL = (prope2).filterNot({a: Char -> true})
2021-03-12 01:17:35,163 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@573137a1]]
2021-03-12 01:17:35,163 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@573137a1]
2021-03-12 01:17:35,163 [main:117] - GENERATED CALL = (prope2).trim()
2021-03-12 01:17:35,163 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]]
2021-03-12 01:17:35,163 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:17:35,341 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:35,345 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]
2021-03-12 01:17:35,345 [main:117] - GENERATED CALL = (prope2).get(-40461752).uppercase()
2021-03-12 01:17:35,345 [main:114] - replacement of prope9 of type String is "awpgf"
2021-03-12 01:17:35,529 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 01:17:35,529 [main:66] - Compilation checking started
2021-03-12 01:17:36,253 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "0_1_9"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != "awpgf") return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:17:36,254 [main:107] - replacing ("0_1_9", String)
2021-03-12 01:17:36,255 [main:50] - replacing "0_1_9" String
2021-03-12 01:17:36,255 [main:54] - Getting value of type String
2021-03-12 01:17:36,428 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:36,432 [main:58] - GENERATED VALUE OF TYPE String = "ukuze"
2021-03-12 01:17:36,432 [main:61] - GENERATED IS CALL =false
2021-03-12 01:17:36,440 [main:67] - randomType = Char
2021-03-12 01:17:36,614 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:17:36,645 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]
2021-03-12 01:17:36,645 [main:78] - Generated call from random type = ('≗').uppercase()
2021-03-12 01:17:36,646 [main:106] - GETTING String from Boolean
2021-03-12 01:17:36,658 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@491e892a], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:17:36,658 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@491e892a]
2021-03-12 01:17:36,834 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:17:36,838 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:17:37,014 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:37,018 [main:117] - GENERATED CALL = (Kla5().prope5).compareTo(false).toString(-135968296)
2021-03-12 01:17:37,018 [main:114] - replacement of "0_1_9" of type String is "ukuze"
2021-03-12 01:17:37,201 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 01:17:37,202 [main:66] - Compilation checking started
2021-03-12 01:17:37,966 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != "awpgf") return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:17:37,967 [main:107] - replacing ("fail 2: $prope8 != $prope10 or $prope14 != $prope9", String)
2021-03-12 01:17:37,968 [main:50] - replacing "fail 2: $prope8 != $prope10 or $prope14 != $prope9" String
2021-03-12 01:17:37,968 [main:54] - Getting value of type String
2021-03-12 01:17:38,142 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:38,146 [main:58] - GENERATED VALUE OF TYPE String = "mxxjw"
2021-03-12 01:17:38,146 [main:61] - GENERATED IS CALL =false
2021-03-12 01:17:38,379 [main:67] - randomType = Double
2021-03-12 01:17:38,550 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:17:38,598 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2c87e895]
2021-03-12 01:17:38,598 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]
2021-03-12 01:17:38,598 [main:78] - Generated call from random type = (0.7116395797922552).toChar().titlecase()
2021-03-12 01:17:38,599 [main:106] - GETTING String from A
2021-03-12 01:17:38,605 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]]
2021-03-12 01:17:38,606 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:17:38,606 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]
2021-03-12 01:17:38,789 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:38,794 [main:117] - GENERATED CALL = (a).map(Kla0("qhnah").component2()).take(1345945538)
2021-03-12 01:17:38,794 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d9973a9]]
2021-03-12 01:17:38,794 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:17:38,794 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d9973a9]
2021-03-12 01:17:38,975 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:17:38,979 [main:117] - GENERATED CALL = (a).map(stub({ "lkuci"})).substringAfter('㪠', A("jmkiq").map())
2021-03-12 01:17:38,979 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f7c18e5]]
2021-03-12 01:17:38,979 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:17:38,980 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f7c18e5]
2021-03-12 01:17:39,153 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:39,157 [main:117] - GENERATED CALL = (a).map(A("jmkiq").map()).replaceIndent("qoefx")
2021-03-12 01:17:39,157 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]]
2021-03-12 01:17:39,157 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:17:39,157 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]
2021-03-12 01:17:39,158 [main:117] - GENERATED CALL = (a).map(Kla0("qhnah").o).lowercase()
2021-03-12 01:17:39,158 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@573137a1]]
2021-03-12 01:17:39,158 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:17:39,158 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@573137a1]
2021-03-12 01:17:39,158 [main:117] - GENERATED CALL = (a).map(A("jmkiq").z).trim()
2021-03-12 01:17:39,158 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cfdfc94]]
2021-03-12 01:17:39,158 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:17:39,158 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cfdfc94]
2021-03-12 01:17:39,340 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 01:17:39,524 [main:43] - GENERATING CALL OF fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): Iterable<Int> = TODO()
2021-03-12 01:17:39,529 [main:61] - WITHOUT TYPE PARAMS = fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): Iterable<Int> = TODO()
2021-03-12 01:17:40,100 [main:302] - generating value of type = Char true depth = 3
2021-03-12 01:17:40,104 [main:302] - generating value of type = Char true depth = 3
2021-03-12 01:17:40,108 [main:95] - GENERATED = CharRange('娡', '㳿')
2021-03-12 01:17:40,109 [main:117] - GENERATED CALL = (a).map(Kla0("qhnah").o).slice(CharRange('娡', '㳿'))
2021-03-12 01:17:40,109 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]]
2021-03-12 01:17:40,109 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:17:40,109 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]
2021-03-12 01:17:40,306 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:40,311 [main:117] - GENERATED CALL = (a).map((s.map(a::map)).get(1466108888)).replaceIndentByMargin((s.map(a::map)).get(1466108888), "eikto")
2021-03-12 01:17:40,311 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52806f8a]]
2021-03-12 01:17:40,311 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:17:40,311 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52806f8a]
2021-03-12 01:17:40,312 [main:117] - GENERATED CALL = (a).map(prope2).trimMargin(A("jmkiq").map())
2021-03-12 01:17:40,312 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]]
2021-03-12 01:17:40,312 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:17:40,312 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]
2021-03-12 01:17:40,508 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:17:40,514 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:17:40,518 [main:117] - GENERATED CALL = (a).map(var prope2 =.filterNot({a: Char -> false})
2021-03-12 01:17:40,518 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]]
2021-03-12 01:17:40,518 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:17:40,518 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]
2021-03-12 01:17:40,518 [main:117] - GENERATED CALL = (a).map(A("jmkiq").map()).plus(Kla2().prope2)
2021-03-12 01:17:40,518 [main:114] - replacement of "fail 2: $prope8 != $prope10 or $prope14 != $prope9" of type String is (a).map(var prope2 =.filterNot({a: Char -> false})
2021-03-12 01:17:40,717 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(BINARY_EXPRESSION)
2021-03-12 01:17:40,717 [main:66] - Compilation checking started
2021-03-12 01:17:40,729 [main:71] - Wrong syntax or breaks conditions
2021-03-12 01:17:40,729 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return (a).map(var prope2 =.filterNot({a: Char -> false})


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != "awpgf") return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:17:40,730 [main:107] - replacing (prope8, String)
2021-03-12 01:17:40,731 [main:50] - replacing prope8 String
2021-03-12 01:17:40,731 [main:54] - Getting value of type String
2021-03-12 01:17:40,913 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:40,917 [main:58] - GENERATED VALUE OF TYPE String = "qldvu"
2021-03-12 01:17:40,917 [main:61] - GENERATED IS CALL =false
2021-03-12 01:17:41,127 [main:67] - randomType = Kla5?
2021-03-12 01:17:41,300 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 01:17:41,304 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}
2021-03-12 01:17:41,315 [main:106] - GETTING String from CoroutineContext
2021-03-12 01:17:41,323 [main:106] - GETTING String from String
2021-03-12 01:17:41,348 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]]
2021-03-12 01:17:41,348 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]
2021-03-12 01:17:41,521 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:41,525 [main:117] - GENERATED CALL = (stub({ "lkuci"})).take(735120955)
2021-03-12 01:17:41,525 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a471dbf]]
2021-03-12 01:17:41,525 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a471dbf]
2021-03-12 01:17:41,699 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:17:41,703 [main:117] - GENERATED CALL = (stub({ "lkuci"})).substringBefore('惬', (s.map(a::map)).get(1466108888))
2021-03-12 01:17:41,703 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@779dda8c]]
2021-03-12 01:17:41,704 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:17:41,878 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:41,882 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@779dda8c]
2021-03-12 01:17:42,057 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:42,061 [main:117] - GENERATED CALL = (stub({ "lkuci"})).get(-1581222679).plus("wkemw")
2021-03-12 01:17:42,061 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]]
2021-03-12 01:17:42,062 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]
2021-03-12 01:17:42,236 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:17:42,418 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:17:42,423 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:17:42,800 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:17:42,804 [main:95] - GENERATED = StringBuilder(10556388)
2021-03-12 01:17:42,976 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:17:42,980 [main:117] - GENERATED CALL = (stub({ "lkuci"})).commonPrefixWith(StringBuilder(10556388), false)
2021-03-12 01:17:42,980 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e61f45]]
2021-03-12 01:17:42,980 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e61f45]
2021-03-12 01:17:43,157 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:17:43,161 [main:117] - GENERATED CALL = (stub({ "lkuci"})).replaceBefore('ﴪ', A("jmkiq").map(), A("jmkiq").map())
2021-03-12 01:17:43,161 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c072050]]
2021-03-12 01:17:43,161 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c072050]
2021-03-12 01:17:43,335 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:17:43,512 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:43,516 [main:117] - GENERATED CALL = (stub({ "lkuci"})).replaceAfterLast('', "mqldj", (s.map(a::map)).get(1466108888))
2021-03-12 01:17:43,517 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52806f8a]]
2021-03-12 01:17:43,517 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52806f8a]
2021-03-12 01:17:43,517 [main:117] - GENERATED CALL = (stub({ "lkuci"})).trimMargin((s.map(a::map)).get(1466108888))
2021-03-12 01:17:43,517 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]]
2021-03-12 01:17:43,517 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:17:43,736 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:43,911 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:43,915 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]
2021-03-12 01:17:44,089 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:17:44,096 [main:117] - GENERATED CALL = (stub({ "lkuci"})).subSequence(-1266445531, -1641701570).commonSuffixWith(StringBuilder(), Kla5().prope5)
2021-03-12 01:17:44,096 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]]
2021-03-12 01:17:44,096 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:17:44,268 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:44,273 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]
2021-03-12 01:17:44,273 [main:117] - GENERATED CALL = (stub({ "lkuci"})).get(-670355927).uppercase()
2021-03-12 01:17:44,273 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0a1b3]]
2021-03-12 01:17:44,273 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0a1b3]
2021-03-12 01:17:44,447 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:44,623 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:17:44,628 [main:117] - GENERATED CALL = (stub({ "lkuci"})).padStart(1603396470, '댻')
2021-03-12 01:17:44,628 [main:114] - replacement of prope8 of type String is (stub({ "lkuci"})).get(-670355927).uppercase()
2021-03-12 01:17:44,800 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:17:44,801 [main:66] - Compilation checking started
2021-03-12 01:17:45,300 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    (stub({ "lkuci"})).get(-670355927).uppercase() = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != "awpgf") return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:17:45,301 [main:107] - replacing (prope8, String)
2021-03-12 01:17:45,302 [main:50] - replacing prope8 String
2021-03-12 01:17:45,302 [main:54] - Getting value of type String
2021-03-12 01:17:45,475 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:45,479 [main:58] - GENERATED VALUE OF TYPE String = "comwc"
2021-03-12 01:17:45,479 [main:61] - GENERATED IS CALL =false
2021-03-12 01:17:45,875 [main:67] - randomType = Sequence<ULong>
2021-03-12 01:17:45,876 [main:106] - GETTING String from String
2021-03-12 01:17:45,902 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0d521b]]
2021-03-12 01:17:45,902 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0d521b]
2021-03-12 01:17:45,903 [main:117] - GENERATED CALL = (A("jmkiq").z).toUpperCase()
2021-03-12 01:17:45,903 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d9973a9]]
2021-03-12 01:17:45,903 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d9973a9]
2021-03-12 01:17:46,076 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:17:46,254 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:46,258 [main:117] - GENERATED CALL = (A("jmkiq").z).substringAfter('', "ubyei")
2021-03-12 01:17:46,258 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d3514e]]
2021-03-12 01:17:46,258 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d3514e]
2021-03-12 01:17:46,258 [main:117] - GENERATED CALL = (A("jmkiq").z).toLowerCase()
2021-03-12 01:17:46,258 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]]
2021-03-12 01:17:46,259 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]
2021-03-12 01:17:46,451 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:46,457 [main:117] - GENERATED CALL = (A("jmkiq").z).take(1928489954)
2021-03-12 01:17:46,458 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ad4cc3f]]
2021-03-12 01:17:46,458 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:17:46,649 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:46,830 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:46,834 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ad4cc3f]
2021-03-12 01:17:47,007 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 01:17:47,217 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 01:17:47,222 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 01:17:47,620 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:17:47,624 [main:95] - GENERATED = Regex("vljkp")
2021-03-12 01:17:47,798 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 01:17:47,802 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 01:17:47,809 [main:117] - GENERATED CALL = (A("jmkiq").z).subSequence(-320451511, -757146587).replace(Regex("vljkp"), {a: MatchResult -> "jigfs"})
2021-03-12 01:17:47,809 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ed1eadc]]
2021-03-12 01:17:47,809 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ed1eadc]
2021-03-12 01:17:47,980 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:17:47,984 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:17:47,988 [main:117] - GENERATED CALL = (A("jmkiq").z).filter({a: Char -> false})
2021-03-12 01:17:47,988 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]]
2021-03-12 01:17:47,988 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]
2021-03-12 01:17:48,166 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:48,171 [main:117] - GENERATED CALL = (A("jmkiq").z).drop(1670202825)
2021-03-12 01:17:48,171 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]]
2021-03-12 01:17:48,171 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:17:48,347 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:48,525 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:48,529 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]
2021-03-12 01:17:48,703 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:48,707 [main:117] - GENERATED CALL = (A("jmkiq").z).subSequence(2000739955, -1477017875).repeat(-1638459677)
2021-03-12 01:17:48,707 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@404181f8]]
2021-03-12 01:17:48,707 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@404181f8]
2021-03-12 01:17:48,888 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:17:48,896 [main:117] - GENERATED CALL = (A("jmkiq").z).removeSuffix("yggox")
2021-03-12 01:17:48,896 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]]
2021-03-12 01:17:48,896 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]
2021-03-12 01:17:49,115 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:49,119 [main:117] - GENERATED CALL = (A("jmkiq").z).repeat(-828991046)
2021-03-12 01:17:49,119 [main:114] - replacement of prope8 of type String is (A("jmkiq").z).toUpperCase()
2021-03-12 01:17:49,292 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:17:49,293 [main:66] - Compilation checking started
2021-03-12 01:17:49,789 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != "awpgf") return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; "$prope13"}, b = {(A("jmkiq").z).toUpperCase() += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:17:49,791 [main:107] - replacing ("$prope13", String)
2021-03-12 01:17:49,791 [main:50] - replacing "$prope13" String
2021-03-12 01:17:49,792 [main:54] - Getting value of type String
2021-03-12 01:17:49,967 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:49,971 [main:58] - GENERATED VALUE OF TYPE String = "ajuiv"
2021-03-12 01:17:49,971 [main:61] - GENERATED IS CALL =false
2021-03-12 01:17:49,986 [main:67] - randomType = Kla2
2021-03-12 01:17:50,164 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 01:17:50,168 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 01:17:50,189 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@4e7dcf03]
2021-03-12 01:17:50,190 [main:78] - Generated call from random type = (Kla2()).prope2?.toString()!!
2021-03-12 01:17:50,191 [main:106] - GETTING String from CoroutineContext
2021-03-12 01:17:50,199 [main:106] - GETTING String from Continuation<Int>
2021-03-12 01:17:50,209 [main:106] - GETTING String from String
2021-03-12 01:17:50,233 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707202d1]]
2021-03-12 01:17:50,234 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707202d1]
2021-03-12 01:17:50,408 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:17:50,412 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:17:50,416 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).takeLastWhile({a: Char -> false})
2021-03-12 01:17:50,416 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:17:50,416 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:17:50,588 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:50,592 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).length.toString(821592593)
2021-03-12 01:17:50,592 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]]
2021-03-12 01:17:50,592 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]
2021-03-12 01:17:50,765 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:50,769 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).repeat(1898869549)
2021-03-12 01:17:50,769 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]]
2021-03-12 01:17:50,769 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]
2021-03-12 01:17:50,769 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).lowercase()
2021-03-12 01:17:50,770 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0a1b3]]
2021-03-12 01:17:50,770 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0a1b3]
2021-03-12 01:17:50,944 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:51,122 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:17:51,126 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).padStart(-1681523496, '矴')
2021-03-12 01:17:51,127 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]]
2021-03-12 01:17:51,127 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]
2021-03-12 01:17:51,299 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:17:51,303 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).substringBeforeLast('䳕', (s.map(a::map)).get(1466108888))
2021-03-12 01:17:51,303 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ad4cc3f]]
2021-03-12 01:17:51,304 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:17:51,478 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:51,654 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:51,658 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ad4cc3f]
2021-03-12 01:17:51,833 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 01:17:52,013 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 01:17:52,018 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 01:17:52,395 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:17:52,400 [main:95] - GENERATED = Regex("twuey")
2021-03-12 01:17:52,577 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 01:17:52,581 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 01:17:52,588 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).subSequence(-1619169153, 205941815).replace(Regex("twuey"), {a: MatchResult -> "nzskd"})
2021-03-12 01:17:52,589 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]]
2021-03-12 01:17:52,589 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]
2021-03-12 01:17:52,784 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:17:52,962 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:52,966 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).replaceAfter('᤼', stub({ "lkuci"}), "hrndl")
2021-03-12 01:17:52,966 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]]
2021-03-12 01:17:52,966 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:17:53,140 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:53,144 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]
2021-03-12 01:17:53,144 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).get(-1690778342).uppercase()
2021-03-12 01:17:53,144 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]]
2021-03-12 01:17:53,144 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]
2021-03-12 01:17:53,316 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:17:53,320 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:17:53,324 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).dropWhile({a: Char -> true})
2021-03-12 01:17:53,324 [main:114] - replacement of "$prope13" of type String is ((s.map(a::map)).get(1466108888)).repeat(1898869549)
2021-03-12 01:17:53,495 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:17:53,496 [main:66] - Compilation checking started
2021-03-12 01:17:54,255 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != "awpgf") return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = {prope8+="0_"; prope12}(), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:17:54,256 [main:107] - replacing ({prope8+="0_"; prope12}(), Int)
2021-03-12 01:17:54,257 [main:50] - replacing {prope8+="0_"; prope12}() Int
2021-03-12 01:17:54,257 [main:54] - Getting value of type Int
2021-03-12 01:17:54,480 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:54,484 [main:58] - GENERATED VALUE OF TYPE Int = 1393157340
2021-03-12 01:17:54,485 [main:61] - GENERATED IS CALL =false
2021-03-12 01:17:54,878 [main:67] - randomType = UInt?
2021-03-12 01:17:55,052 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 01:17:55,097 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@1d033c51]
2021-03-12 01:17:55,272 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 01:17:55,276 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@eac766c]
2021-03-12 01:17:55,451 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 01:17:55,455 [main:78] - Generated call from random type = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte())
2021-03-12 01:17:55,456 [main:106] - GETTING Int from Continuation<Any?>
2021-03-12 01:17:55,466 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3f4e991e], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@491e892a]]
2021-03-12 01:17:55,466 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3f4e991e]
2021-03-12 01:17:55,641 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:17:55,641 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@491e892a]
2021-03-12 01:17:55,642 [main:117] - GENERATED CALL = (fu2({a: Throwable -> check(false)})).equals("sqyhm").compareTo(Kla5().prope5)
2021-03-12 01:17:55,642 [main:114] - replacement of {prope8+="0_"; prope12}() of type Int is (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte())
2021-03-12 01:17:55,815 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:17:55,815 [main:66] - Compilation checking started
2021-03-12 01:17:56,626 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != prope9) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != "awpgf") return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:17:56,627 [main:107] - replacing (prope9, String)
2021-03-12 01:17:56,628 [main:50] - replacing prope9 String
2021-03-12 01:17:56,628 [main:54] - Getting value of type String
2021-03-12 01:17:56,819 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:56,823 [main:58] - GENERATED VALUE OF TYPE String = "kyadd"
2021-03-12 01:17:56,823 [main:61] - GENERATED IS CALL =false
2021-03-12 01:17:57,029 [main:67] - randomType = UInt
2021-03-12 01:17:57,210 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 01:17:57,255 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@5b5086de]
2021-03-12 01:17:57,255 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38a9d0fa]
2021-03-12 01:17:57,436 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:57,440 [main:78] - Generated call from random type = (108750482.toUInt()).toUShort().toString(1804196261)
2021-03-12 01:17:57,441 [main:106] - GETTING String from Function0<Unit>
2021-03-12 01:17:57,454 [main:106] - GETTING String from A
2021-03-12 01:17:57,460 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]]
2021-03-12 01:17:57,461 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:17:57,461 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]
2021-03-12 01:17:57,639 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:57,644 [main:117] - GENERATED CALL = (a).map((s.map(a::map)).get(1466108888)).takeLast(596470682)
2021-03-12 01:17:57,644 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]]
2021-03-12 01:17:57,644 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:17:57,819 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:57,824 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]
2021-03-12 01:17:57,824 [main:117] - GENERATED CALL = (a).map("xnexf").trimIndent()
2021-03-12 01:17:57,824 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706fa500]]
2021-03-12 01:17:57,824 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:17:57,824 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706fa500]
2021-03-12 01:17:57,999 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:17:58,003 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:17:58,007 [main:117] - GENERATED CALL = (a).map(prope2).takeWhile({a: Char -> false})
2021-03-12 01:17:58,007 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]]
2021-03-12 01:17:58,007 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:17:58,184 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:58,188 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]
2021-03-12 01:17:58,365 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:17:58,369 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:17:58,373 [main:117] - GENERATED CALL = (a).map("xuttk").filterNot({a: Char -> false})
2021-03-12 01:17:58,373 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]]
2021-03-12 01:17:58,373 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:17:58,550 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:58,554 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]
2021-03-12 01:17:58,729 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:17:58,906 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:58,911 [main:117] - GENERATED CALL = (a).map("fodjg").replaceBeforeLast('茴', "cqnva", Kla0("qhnah").component2())
2021-03-12 01:17:58,911 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]]
2021-03-12 01:17:58,911 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:17:59,090 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:17:59,094 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]
2021-03-12 01:17:59,094 [main:117] - GENERATED CALL = (a).map("bmopi").lowercase()
2021-03-12 01:17:59,094 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4997a579]]
2021-03-12 01:17:59,094 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:17:59,095 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4997a579]
2021-03-12 01:17:59,095 [main:117] - GENERATED CALL = (a).map(stub({ "lkuci"})).trimEnd()
2021-03-12 01:17:59,095 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0d521b]]
2021-03-12 01:17:59,095 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:17:59,095 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0d521b]
2021-03-12 01:17:59,095 [main:117] - GENERATED CALL = (a).map(A("jmkiq").map()).toUpperCase()
2021-03-12 01:17:59,095 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]]
2021-03-12 01:17:59,095 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:17:59,095 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]
2021-03-12 01:17:59,271 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:17:59,276 [main:117] - GENERATED CALL = (a).map(A("jmkiq").z).replaceAfter('╯', A("jmkiq").z, stub({ "lkuci"}))
2021-03-12 01:17:59,276 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b88a22]]
2021-03-12 01:17:59,276 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:17:59,276 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b88a22]
2021-03-12 01:17:59,453 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:17:59,457 [main:117] - GENERATED CALL = (a).map(A("jmkiq").map()).substring(1912007848)
2021-03-12 01:17:59,457 [main:114] - replacement of prope9 of type String is (a).map("xnexf").trimIndent()
2021-03-12 01:17:59,633 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:17:59,634 [main:66] - Compilation checking started
2021-03-12 01:18:00,470 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != (a).map("xnexf").trimIndent()) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != "awpgf") return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    return { "${a}_${b}_${c()}"} ()
}


2021-03-12 01:18:00,471 [main:107] - replacing (a, Int)
2021-03-12 01:18:00,472 [main:50] - replacing a Int
2021-03-12 01:18:00,472 [main:54] - Getting value of type Int
2021-03-12 01:18:00,648 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:00,652 [main:58] - GENERATED VALUE OF TYPE Int = 1703693971
2021-03-12 01:18:00,652 [main:61] - GENERATED IS CALL =false
2021-03-12 01:18:01,727 [main:67] - randomType = Triple<ArrayDeque<A?>?, Kla5, Short>
2021-03-12 01:18:01,903 [main:302] - generating value of type = Triple<ArrayDeque<A?>?, Kla5, Short> false depth = 0
2021-03-12 01:18:02,091 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: ArrayDeque<A?>?, second: Kla5, third: Short): Triple<ArrayDeque<A?>?, Kla5, Short> = TODO()
2021-03-12 01:18:02,096 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: ArrayDeque<A?>?, second: Kla5, third: Short): Triple<ArrayDeque<A?>?, Kla5, Short> = TODO()
2021-03-12 01:18:02,280 [main:302] - generating value of type = ArrayDeque<A?> false depth = 3
2021-03-12 01:18:02,462 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<A?> = TODO()
2021-03-12 01:18:02,467 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<A?> = TODO()
2021-03-12 01:18:02,650 [main:95] - GENERATED = ArrayDeque<A?>()
2021-03-12 01:18:02,650 [main:302] - generating value of type = Kla5 false depth = 3
2021-03-12 01:18:02,655 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}
2021-03-12 01:18:02,655 [main:302] - generating value of type = Short true depth = 3
2021-03-12 01:18:02,659 [main:95] - GENERATED = Triple<ArrayDeque<A?>?, Kla5, Short>(ArrayDeque<A?>(), Kla5(), 24855)
2021-03-12 01:18:02,684 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@328b43f6]
2021-03-12 01:18:02,684 [main:78] - Generated call from random type = (Triple<ArrayDeque<A?>?, Kla5, Short>(ArrayDeque<A?>(), Kla5(), 24855)).third.unaryPlus()
2021-03-12 01:18:02,685 [main:106] - GETTING Int from A
2021-03-12 01:18:02,690 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@15671e9a], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@491e892a]]
2021-03-12 01:18:02,691 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@15671e9a]
2021-03-12 01:18:02,691 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@491e892a]
2021-03-12 01:18:02,867 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:18:02,871 [main:117] - GENERATED CALL = (a).equals(Kla2().prope2).compareTo(true)
2021-03-12 01:18:02,871 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d9fffd8]]
2021-03-12 01:18:02,871 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:18:02,872 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d9fffd8]
2021-03-12 01:18:02,872 [main:117] - GENERATED CALL = (a).map(Kla0("qhnah").o).compareTo(stub({ "lkuci"}), Kla5().prope5)
2021-03-12 01:18:02,872 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2]]
2021-03-12 01:18:02,872 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:18:03,049 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:18:03,053 [main:117] - GENERATED CALL = (a).map("nmzlt").length
2021-03-12 01:18:03,053 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33c8ea16]]
2021-03-12 01:18:03,053 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:18:03,053 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33c8ea16]
2021-03-12 01:18:03,054 [main:117] - GENERATED CALL = (a).map(A("jmkiq").z).toInt()
2021-03-12 01:18:03,054 [main:114] - replacement of a of type Int is (a).equals(Kla2().prope2).compareTo(true)
2021-03-12 01:18:03,230 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:18:03,230 [main:66] - Compilation checking started
2021-03-12 01:18:03,998 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = 9L

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != (a).map("xnexf").trimIndent()) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != "awpgf") return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return { "${(a).equals(Kla2().prope2).compareTo(true)}_${b}_${c()}"} ()
}


2021-03-12 01:18:04,000 [main:107] - replacing (9L, Long)
2021-03-12 01:18:04,001 [main:50] - replacing 9L Long
2021-03-12 01:18:04,001 [main:54] - Getting value of type Long
2021-03-12 01:18:04,190 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:18:04,194 [main:58] - GENERATED VALUE OF TYPE Long = 1701321623990584527
2021-03-12 01:18:04,194 [main:61] - GENERATED IS CALL =false
2021-03-12 01:18:04,398 [main:67] - randomType = UShort
2021-03-12 01:18:04,576 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 01:18:04,618 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@870b1c2]
2021-03-12 01:18:04,793 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 01:18:04,798 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@56fab8bc]
2021-03-12 01:18:04,798 [main:78] - Generated call from random type = (7574.toUShort()).div(17.toUByte()).toLong()
2021-03-12 01:18:04,799 [main:106] - GETTING Long from Any?
2021-03-12 01:18:04,804 [main:106] - GETTING Long from String
2021-03-12 01:18:04,830 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]]
2021-03-12 01:18:04,830 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]
2021-03-12 01:18:05,006 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:18:05,011 [main:117] - GENERATED CALL = (prope2).length.plus(-4461395136356083943)
2021-03-12 01:18:05,011 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ddc5ec6]]
2021-03-12 01:18:05,011 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ddc5ec6]
2021-03-12 01:18:05,011 [main:117] - GENERATED CALL = (prope2).length.toLong()
2021-03-12 01:18:05,011 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cef48b3]]
2021-03-12 01:18:05,011 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cef48b3]
2021-03-12 01:18:05,188 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:18:05,192 [main:117] - GENERATED CALL = (prope2).length.div(-5119285518190613873)
2021-03-12 01:18:05,193 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ce8b520]]
2021-03-12 01:18:05,193 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ce8b520]
2021-03-12 01:18:05,371 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:18:05,375 [main:117] - GENERATED CALL = (prope2).length.times(-7326153572991716797)
2021-03-12 01:18:05,375 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c86ca]]
2021-03-12 01:18:05,376 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:18:05,599 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:18:05,603 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c86ca]
2021-03-12 01:18:05,785 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:18:05,790 [main:117] - GENERATED CALL = (prope2).compareTo("jprzd").minus(9211713474401621716)
2021-03-12 01:18:05,790 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8fcc1fc]]
2021-03-12 01:18:05,790 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8fcc1fc]
2021-03-12 01:18:05,974 [main:302] - generating value of type = Function1<Char, Long> false depth = 0
2021-03-12 01:18:05,978 [main:302] - generating value of type = Long true depth = 1
2021-03-12 01:18:05,983 [main:117] - GENERATED CALL = (prope2).sumOf({a: Char -> 5582656715465704034})
2021-03-12 01:18:05,983 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]]
2021-03-12 01:18:05,983 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:18:06,168 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:18:06,172 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]
2021-03-12 01:18:06,363 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:18:06,367 [main:117] - GENERATED CALL = (prope2).compareTo("pvlwn").plus(-8567021917008357786)
2021-03-12 01:18:06,367 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]]
2021-03-12 01:18:06,367 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]
2021-03-12 01:18:06,552 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:18:06,556 [main:117] - GENERATED CALL = (prope2).length.rem(-5449043128582712946)
2021-03-12 01:18:06,556 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3c3b70b7]]
2021-03-12 01:18:06,556 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:18:06,739 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:06,744 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3c3b70b7]
2021-03-12 01:18:06,744 [main:117] - GENERATED CALL = (prope2).get(-578620656).toLong()
2021-03-12 01:18:06,744 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]]
2021-03-12 01:18:06,744 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:18:06,925 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:18:06,930 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]
2021-03-12 01:18:07,106 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:18:07,111 [main:117] - GENERATED CALL = (prope2).compareTo("yfamv").rem(-2235580291440770350)
2021-03-12 01:18:07,111 [main:114] - replacement of 9L of type Long is (prope2).length.rem(-5449043128582712946)
2021-03-12 01:18:07,286 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:18:07,286 [main:66] - Compilation checking started
2021-03-12 01:18:08,045 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += "$prope13"; "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != (a).map("xnexf").trimIndent()) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != "awpgf") return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return { "${(a).equals(Kla2().prope2).compareTo(true)}_${b}_${c()}"} ()
}


2021-03-12 01:18:08,046 [main:107] - replacing ("$prope13", String)
2021-03-12 01:18:08,047 [main:50] - replacing "$prope13" String
2021-03-12 01:18:08,047 [main:54] - Getting value of type String
2021-03-12 01:18:08,226 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:18:08,230 [main:58] - GENERATED VALUE OF TYPE String = "cpwit"
2021-03-12 01:18:08,231 [main:61] - GENERATED IS CALL =false
2021-03-12 01:18:08,239 [main:67] - randomType = ULong
2021-03-12 01:18:08,416 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 01:18:08,458 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@286884d0]
2021-03-12 01:18:08,458 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a82138]
2021-03-12 01:18:08,637 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:08,641 [main:78] - Generated call from random type = (8295671494441666373.toULong()).toByte().toString(-2134861924)
2021-03-12 01:18:08,641 [main:106] - GETTING String from String
2021-03-12 01:18:08,668 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:18:08,668 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:18:08,849 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:08,853 [main:117] - GENERATED CALL = (stub({ "lkuci"})).length.toString(-1638533446)
2021-03-12 01:18:08,854 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d9973a9]]
2021-03-12 01:18:08,854 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d9973a9]
2021-03-12 01:18:09,039 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:18:09,043 [main:117] - GENERATED CALL = (stub({ "lkuci"})).substringAfter('?', prope2)
2021-03-12 01:18:09,044 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]]
2021-03-12 01:18:09,044 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:18:09,223 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:09,227 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]
2021-03-12 01:18:09,227 [main:117] - GENERATED CALL = (stub({ "lkuci"})).get(89371863).uppercase()
2021-03-12 01:18:09,227 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]]
2021-03-12 01:18:09,227 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]
2021-03-12 01:18:09,408 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:18:09,415 [main:117] - GENERATED CALL = (stub({ "lkuci"})).commonPrefixWith("injkt", Kla5().prope5)
2021-03-12 01:18:09,415 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]]
2021-03-12 01:18:09,415 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]
2021-03-12 01:18:09,416 [main:117] - GENERATED CALL = (stub({ "lkuci"})).trimIndent()
2021-03-12 01:18:09,416 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ed1eadc]]
2021-03-12 01:18:09,416 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ed1eadc]
2021-03-12 01:18:09,602 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:18:09,606 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:18:09,610 [main:117] - GENERATED CALL = (stub({ "lkuci"})).filter({a: Char -> true})
2021-03-12 01:18:09,611 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706fa500]]
2021-03-12 01:18:09,611 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706fa500]
2021-03-12 01:18:09,788 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:18:09,793 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:18:09,797 [main:117] - GENERATED CALL = (stub({ "lkuci"})).takeWhile({a: Char -> false})
2021-03-12 01:18:09,797 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0d521b]]
2021-03-12 01:18:09,797 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0d521b]
2021-03-12 01:18:09,797 [main:117] - GENERATED CALL = (stub({ "lkuci"})).toUpperCase()
2021-03-12 01:18:09,797 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@797c3840]]
2021-03-12 01:18:09,797 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@797c3840]
2021-03-12 01:18:09,797 [main:117] - GENERATED CALL = (stub({ "lkuci"})).decapitalize()
2021-03-12 01:18:09,798 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:18:09,798 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:18:09,798 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:18:09,975 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:09,979 [main:117] - GENERATED CALL = (stub({ "lkuci"})).compareTo(A("jmkiq").map()).toString(-167030148)
2021-03-12 01:18:09,980 [main:114] - replacement of "$prope13" of type String is (stub({ "lkuci"})).commonPrefixWith("injkt", Kla5().prope5)
2021-03-12 01:18:10,157 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:18:10,157 [main:66] - Compilation checking started
2021-03-12 01:18:10,983 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += (stub({ "lkuci"})).commonPrefixWith("injkt", Kla5().prope5); "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != (a).map("xnexf").trimIndent()) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != "awpgf") return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if (prope8 != "0_1_9" || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return { "${(a).equals(Kla2().prope2).compareTo(true)}_${b}_${c()}"} ()
}


2021-03-12 01:18:10,985 [main:107] - replacing (prope8 != "0_1_9", Boolean)
2021-03-12 01:18:10,985 [main:50] - replacing prope8 != "0_1_9" Boolean
2021-03-12 01:18:10,985 [main:54] - Getting value of type Boolean
2021-03-12 01:18:11,208 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:18:11,212 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 01:18:11,213 [main:61] - GENERATED IS CALL =false
2021-03-12 01:18:11,419 [main:67] - randomType = UShort
2021-03-12 01:18:11,599 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 01:18:11,641 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@6f574415]
2021-03-12 01:18:11,824 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 01:18:11,828 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@33321e21]
2021-03-12 01:18:11,829 [main:78] - Generated call from random type = (27077.toUShort()).rangeTo(27211.toUShort()).equals(Kla2().prope2)
2021-03-12 01:18:11,830 [main:106] - GETTING Boolean from String
2021-03-12 01:18:11,860 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e9e12a5]]
2021-03-12 01:18:11,860 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:18:12,042 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:12,228 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:12,232 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e9e12a5]
2021-03-12 01:18:12,410 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:18:12,414 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).subSequence(-1289180539, 170599973).contains('챺', Kla5().prope5)
2021-03-12 01:18:12,414 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5421c076]]
2021-03-12 01:18:12,415 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:18:12,592 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:12,776 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:12,780 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5421c076]
2021-03-12 01:18:12,960 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 01:18:13,147 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 01:18:13,152 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 01:18:13,542 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:18:13,546 [main:95] - GENERATED = Regex("vocdw")
2021-03-12 01:18:13,547 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw"))
2021-03-12 01:18:13,547 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@627aa921]]
2021-03-12 01:18:13,547 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:18:13,726 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:13,731 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@627aa921]
2021-03-12 01:18:13,731 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).get(-1055397492).isLetterOrDigit()
2021-03-12 01:18:13,731 [main:113] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16dc2b8d]]
2021-03-12 01:18:13,731 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16dc2b8d]
2021-03-12 01:18:13,731 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).isBlank()
2021-03-12 01:18:13,731 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b8f5d13]]
2021-03-12 01:18:13,732 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:18:13,912 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:14,101 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:14,105 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b8f5d13]
2021-03-12 01:18:14,105 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).subSequence(554949643, -1320890155).none()
2021-03-12 01:18:14,105 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bd4a13]]
2021-03-12 01:18:14,105 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bd4a13]
2021-03-12 01:18:14,284 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:18:14,288 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:18:14,292 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).all({a: Char -> false})
2021-03-12 01:18:14,292 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e2eab74]]
2021-03-12 01:18:14,292 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e2eab74]
2021-03-12 01:18:14,470 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:18:14,471 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).length.equals("nkrny")
2021-03-12 01:18:14,471 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b823c34]]
2021-03-12 01:18:14,471 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:18:14,650 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:14,835 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:14,839 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b823c34]
2021-03-12 01:18:14,840 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).subSequence(2006171022, -245339189).isNotEmpty()
2021-03-12 01:18:14,840 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16dc2b8d]]
2021-03-12 01:18:14,840 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:18:15,020 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:15,206 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:15,210 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16dc2b8d]
2021-03-12 01:18:15,211 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).subSequence(-1600326116, -324694215).isBlank()
2021-03-12 01:18:15,211 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@732c0a10]]
2021-03-12 01:18:15,211 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:18:15,390 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:15,394 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@732c0a10]
2021-03-12 01:18:15,395 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).get(764989400).isHighSurrogate()
2021-03-12 01:18:15,395 [main:114] - replacement of prope8 != "0_1_9" of type Boolean is (Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw"))
2021-03-12 01:18:15,573 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:18:15,574 [main:66] - Compilation checking started
2021-03-12 01:18:16,338 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += (stub({ "lkuci"})).commonPrefixWith("injkt", Kla5().prope5); "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+="0_"; prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != (a).map("xnexf").trimIndent()) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != "awpgf") return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if ((Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return { "${(a).equals(Kla2().prope2).compareTo(true)}_${b}_${c()}"} ()
}


2021-03-12 01:18:16,340 [main:107] - replacing ("0_", String)
2021-03-12 01:18:16,342 [main:50] - replacing "0_" String
2021-03-12 01:18:16,342 [main:54] - Getting value of type String
2021-03-12 01:18:16,541 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:18:16,545 [main:58] - GENERATED VALUE OF TYPE String = "klofv"
2021-03-12 01:18:16,545 [main:61] - GENERATED IS CALL =false
2021-03-12 01:18:16,800 [main:67] - randomType = UShort
2021-03-12 01:18:16,982 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 01:18:17,024 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@605ab6c5]
2021-03-12 01:18:17,210 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 01:18:17,217 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:18:17,416 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:17,421 [main:78] - Generated call from random type = (28732.toUShort()).compareTo(100.toUByte()).toString(591227360)
2021-03-12 01:18:17,421 [main:106] - GETTING String from String
2021-03-12 01:18:17,448 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0d521b]]
2021-03-12 01:18:17,448 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0d521b]
2021-03-12 01:18:17,448 [main:117] - GENERATED CALL = (stub({ "lkuci"})).toUpperCase()
2021-03-12 01:18:17,448 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]]
2021-03-12 01:18:17,448 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]
2021-03-12 01:18:17,630 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:18:17,637 [main:117] - GENERATED CALL = (stub({ "lkuci"})).commonPrefixWith("ihzuh", Kla5().prope5)
2021-03-12 01:18:17,637 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]]
2021-03-12 01:18:17,637 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]
2021-03-12 01:18:17,817 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:17,822 [main:117] - GENERATED CALL = (stub({ "lkuci"})).drop(884219827)
2021-03-12 01:18:17,822 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]]
2021-03-12 01:18:17,822 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]
2021-03-12 01:18:18,002 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:18:18,009 [main:117] - GENERATED CALL = (stub({ "lkuci"})).removeSurrounding("pukql")
2021-03-12 01:18:18,009 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]]
2021-03-12 01:18:18,009 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]
2021-03-12 01:18:18,189 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:18:18,194 [main:117] - GENERATED CALL = (stub({ "lkuci"})).prependIndent("saijo")
2021-03-12 01:18:18,194 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e632037]]
2021-03-12 01:18:18,194 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e632037]
2021-03-12 01:18:18,194 [main:117] - GENERATED CALL = (stub({ "lkuci"})).uppercase()
2021-03-12 01:18:18,194 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]]
2021-03-12 01:18:18,194 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]
2021-03-12 01:18:18,374 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:18,379 [main:117] - GENERATED CALL = (stub({ "lkuci"})).dropLast(2030217656)
2021-03-12 01:18:18,379 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@573137a1]]
2021-03-12 01:18:18,379 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@573137a1]
2021-03-12 01:18:18,379 [main:117] - GENERATED CALL = (stub({ "lkuci"})).trim()
2021-03-12 01:18:18,379 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]]
2021-03-12 01:18:18,379 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]
2021-03-12 01:18:18,562 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:18,566 [main:117] - GENERATED CALL = (stub({ "lkuci"})).take(-437554693)
2021-03-12 01:18:18,566 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f7c18e5]]
2021-03-12 01:18:18,566 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f7c18e5]
2021-03-12 01:18:18,749 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:18:18,753 [main:117] - GENERATED CALL = (stub({ "lkuci"})).replaceIndent("yqgal")
2021-03-12 01:18:18,753 [main:114] - replacement of "0_" of type String is (stub({ "lkuci"})).removeSurrounding("pukql")
2021-03-12 01:18:18,937 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:18:18,938 [main:66] - Compilation checking started
2021-03-12 01:18:19,699 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += (stub({ "lkuci"})).commonPrefixWith("injkt", Kla5().prope5); "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != (a).map("xnexf").trimIndent()) return "fail 2: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != "awpgf") return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if ((Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return { "${(a).equals(Kla2().prope2).compareTo(true)}_${b}_${c()}"} ()
}


2021-03-12 01:18:19,701 [main:107] - replacing ("fail 2: $prope8 != $prope10 or $prope14 != $prope9", String)
2021-03-12 01:18:19,702 [main:50] - replacing "fail 2: $prope8 != $prope10 or $prope14 != $prope9" String
2021-03-12 01:18:19,702 [main:54] - Getting value of type String
2021-03-12 01:18:19,885 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:18:19,889 [main:58] - GENERATED VALUE OF TYPE String = "vntis"
2021-03-12 01:18:19,889 [main:61] - GENERATED IS CALL =false
2021-03-12 01:18:20,114 [main:67] - randomType = ArrayDeque<Kla2>
2021-03-12 01:18:20,299 [main:302] - generating value of type = ArrayDeque<Kla2> false depth = 0
2021-03-12 01:18:20,486 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Kla2> = TODO()
2021-03-12 01:18:20,492 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Kla2> = TODO()
2021-03-12 01:18:20,682 [main:95] - GENERATED = ArrayDeque<Kla2>()
2021-03-12 01:18:20,845 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@2a0d3c7b]
2021-03-12 01:18:20,845 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5e94494e]
2021-03-12 01:18:21,029 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:18:21,225 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:18:21,230 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:18:21,625 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:18:21,630 [main:95] - GENERATED = StringBuilder("dytkm")
2021-03-12 01:18:21,818 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:18:22,009 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:18:22,247 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:18:22,253 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:18:22,653 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:18:22,657 [main:95] - GENERATED = StringBuilder(1749079555)
2021-03-12 01:18:22,839 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:23,025 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:18:23,214 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 01:18:23,218 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 01:18:23,226 [main:78] - Generated call from random type = (ArrayDeque<Kla2>()).toArray().joinToString(StringBuilder("dytkm"), StringBuilder(), StringBuilder(1749079555), 1115492784, "tluow", {a: T -> "rhrhm"})
2021-03-12 01:18:23,227 [main:106] - GETTING String from Continuation<Any?>
2021-03-12 01:18:23,237 [main:106] - GETTING String from Continuation<Int>
2021-03-12 01:18:23,247 [main:106] - GETTING String from String
2021-03-12 01:18:23,271 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507f736]]
2021-03-12 01:18:23,272 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507f736]
2021-03-12 01:18:23,455 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:23,642 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:23,646 [main:117] - GENERATED CALL = (Kla0("qhnah").o).removeRange(-693093313, 722275349)
2021-03-12 01:18:23,646 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ad4cc3f]]
2021-03-12 01:18:23,647 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:18:23,830 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:24,016 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:24,020 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ad4cc3f]
2021-03-12 01:18:24,201 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 01:18:24,391 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 01:18:24,396 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 01:18:25,013 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:18:25,018 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 01:18:25,207 [main:43] - GENERATING CALL OF fun <T> emptySet(): Set<RegexOption> = TODO()
2021-03-12 01:18:25,213 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptySet(): Set<RegexOption> = TODO()
2021-03-12 01:18:25,403 [main:95] - GENERATED = emptySet<RegexOption>()
2021-03-12 01:18:25,403 [main:95] - GENERATED = Regex("hsdyl", emptySet<RegexOption>())
2021-03-12 01:18:25,585 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 01:18:25,589 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 01:18:25,597 [main:117] - GENERATED CALL = (Kla0("qhnah").o).subSequence(1840193169, 2099336909).replace(Regex("hsdyl", emptySet<RegexOption>()), {a: MatchResult -> "miomi"})
2021-03-12 01:18:25,597 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]]
2021-03-12 01:18:25,597 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]
2021-03-12 01:18:25,780 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:18:25,966 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:18:25,970 [main:117] - GENERATED CALL = (Kla0("qhnah").o).replaceFirst('쓾', '♰', Kla5().prope5)
2021-03-12 01:18:25,970 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ed1eadc]]
2021-03-12 01:18:25,970 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ed1eadc]
2021-03-12 01:18:26,152 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:18:26,156 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:18:26,160 [main:117] - GENERATED CALL = (Kla0("qhnah").o).filter({a: Char -> true})
2021-03-12 01:18:26,160 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]]
2021-03-12 01:18:26,161 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:18:26,345 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:26,349 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]
2021-03-12 01:18:26,349 [main:117] - GENERATED CALL = (Kla0("qhnah").o).get(-682715668).titlecase()
2021-03-12 01:18:26,349 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]]
2021-03-12 01:18:26,349 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]
2021-03-12 01:18:26,530 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:18:26,534 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:18:26,538 [main:117] - GENERATED CALL = (Kla0("qhnah").o).dropLastWhile({a: Char -> true})
2021-03-12 01:18:26,538 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]]
2021-03-12 01:18:26,538 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]
2021-03-12 01:18:26,720 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:18:26,721 [main:117] - GENERATED CALL = (Kla0("qhnah").o).plus("zdvau")
2021-03-12 01:18:26,721 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@404181f8]]
2021-03-12 01:18:26,721 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@404181f8]
2021-03-12 01:18:26,901 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:18:26,908 [main:117] - GENERATED CALL = (Kla0("qhnah").o).removeSuffix("jdqwl")
2021-03-12 01:18:26,908 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8422c70]]
2021-03-12 01:18:26,908 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8422c70]
2021-03-12 01:18:26,908 [main:117] - GENERATED CALL = (Kla0("qhnah").o).capitalize()
2021-03-12 01:18:26,908 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c072050]]
2021-03-12 01:18:26,909 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c072050]
2021-03-12 01:18:27,088 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:18:27,275 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:18:27,280 [main:117] - GENERATED CALL = (Kla0("qhnah").o).replaceAfterLast('䌛', A("jmkiq").map(), "ysnvt")
2021-03-12 01:18:27,280 [main:114] - replacement of "fail 2: $prope8 != $prope10 or $prope14 != $prope9" of type String is (Kla0("qhnah").o).removeRange(-693093313, 722275349)
2021-03-12 01:18:27,461 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:18:27,461 [main:66] - Compilation checking started
2021-03-12 01:18:28,288 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += (stub({ "lkuci"})).commonPrefixWith("injkt", Kla5().prope5); "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != (a).map("xnexf").trimIndent()) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != "awpgf") return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if ((Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return { "${(a).equals(Kla2().prope2).compareTo(true)}_${b}_${c()}"} ()
}


2021-03-12 01:18:28,290 [main:107] - replacing (prope8, String)
2021-03-12 01:18:28,291 [main:50] - replacing prope8 String
2021-03-12 01:18:28,291 [main:54] - Getting value of type String
2021-03-12 01:18:28,472 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:18:28,476 [main:58] - GENERATED VALUE OF TYPE String = "peadq"
2021-03-12 01:18:28,476 [main:61] - GENERATED IS CALL =false
2021-03-12 01:18:28,899 [main:67] - randomType = Collection<Double>
2021-03-12 01:18:28,899 [main:106] - GETTING String from EmptyCoroutineContext
2021-03-12 01:18:28,922 [main:106] - GETTING String from String
2021-03-12 01:18:28,946 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4997a579]]
2021-03-12 01:18:28,946 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4997a579]
2021-03-12 01:18:28,947 [main:117] - GENERATED CALL = (stub({ "lkuci"})).trimEnd()
2021-03-12 01:18:28,947 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305e8885]]
2021-03-12 01:18:28,947 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:18:29,136 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:29,140 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305e8885]
2021-03-12 01:18:29,140 [main:117] - GENERATED CALL = (stub({ "lkuci"})).get(556895318).lowercase()
2021-03-12 01:18:29,141 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]]
2021-03-12 01:18:29,141 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]
2021-03-12 01:18:29,323 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:18:29,327 [main:117] - GENERATED CALL = (stub({ "lkuci"})).replaceIndentByMargin("kfvtx", Kla0("qhnah").o)
2021-03-12 01:18:29,327 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8422c70]]
2021-03-12 01:18:29,327 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8422c70]
2021-03-12 01:18:29,327 [main:117] - GENERATED CALL = (stub({ "lkuci"})).capitalize()
2021-03-12 01:18:29,328 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@404181f8]]
2021-03-12 01:18:29,328 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@404181f8]
2021-03-12 01:18:29,510 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:18:29,517 [main:117] - GENERATED CALL = (stub({ "lkuci"})).removeSuffix("odhfi")
2021-03-12 01:18:29,518 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706fa500]]
2021-03-12 01:18:29,518 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706fa500]
2021-03-12 01:18:29,699 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:18:29,703 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:18:29,708 [main:117] - GENERATED CALL = (stub({ "lkuci"})).takeWhile({a: Char -> false})
2021-03-12 01:18:29,708 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]]
2021-03-12 01:18:29,708 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]
2021-03-12 01:18:29,892 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:18:30,084 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:18:30,090 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:18:30,485 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 01:18:30,492 [main:95] - GENERATED = StringBuilder("suoul")
2021-03-12 01:18:30,493 [main:117] - GENERATED CALL = (stub({ "lkuci"})).removePrefix(StringBuilder("suoul"))
2021-03-12 01:18:30,493 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]]
2021-03-12 01:18:30,493 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]
2021-03-12 01:18:30,675 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:30,680 [main:117] - GENERATED CALL = (stub({ "lkuci"})).drop(867585992)
2021-03-12 01:18:30,680 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7fe90b]]
2021-03-12 01:18:30,680 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7fe90b]
2021-03-12 01:18:30,861 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:31,047 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:18:31,052 [main:117] - GENERATED CALL = (stub({ "lkuci"})).padEnd(1798744764, '얽')
2021-03-12 01:18:31,052 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507f736]]
2021-03-12 01:18:31,052 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507f736]
2021-03-12 01:18:31,235 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:31,425 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:31,429 [main:117] - GENERATED CALL = (stub({ "lkuci"})).removeRange(1085798595, 966386902)
2021-03-12 01:18:31,429 [main:114] - replacement of prope8 of type String is (stub({ "lkuci"})).get(556895318).lowercase()
2021-03-12 01:18:31,614 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:18:31,615 [main:66] - Compilation checking started
2021-03-12 01:18:32,158 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {(stub({ "lkuci"})).get(556895318).lowercase() += (stub({ "lkuci"})).commonPrefixWith("injkt", Kla5().prope5); "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != (a).map("xnexf").trimIndent()) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != "awpgf") return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if ((Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return { "${(a).equals(Kla2().prope2).compareTo(true)}_${b}_${c()}"} ()
}


2021-03-12 01:18:32,160 [main:107] - replacing ({ "${(a).equals(Kla2().prope2).compareTo(true)}_${b}_${c()}"}, Function0<String>)
2021-03-12 01:18:32,160 [main:50] - replacing { "${(a).equals(Kla2().prope2).compareTo(true)}_${b}_${c()}"} Function0<String>
2021-03-12 01:18:32,160 [main:54] - Getting value of type Function0<String>
2021-03-12 01:18:32,350 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-12 01:18:32,354 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:18:32,358 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "aznxi"}
2021-03-12 01:18:32,358 [main:61] - GENERATED IS CALL =false
2021-03-12 01:18:32,367 [main:67] - randomType = ULong
2021-03-12 01:18:32,550 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 01:18:32,594 [main:106] - GETTING Function0<String> from String
2021-03-12 01:18:32,620 [main:106] - GETTING Function0<String> from CoroutineContext
2021-03-12 01:18:32,629 [main:106] - GETTING Function0<String> from CoroutineContext
2021-03-12 01:18:32,630 [main:106] - GETTING Function0<String> from List<String>
2021-03-12 01:18:32,665 [main:106] - GETTING Function0<String> from String
2021-03-12 01:18:32,666 [main:106] - GETTING Function0<String> from CoroutineContext
2021-03-12 01:18:32,667 [main:106] - GETTING Function0<String> from List<String>
2021-03-12 01:18:32,668 [main:106] - GETTING Function0<String> from String
2021-03-12 01:18:32,669 [main:106] - GETTING Function0<String> from String
2021-03-12 01:18:32,670 [main:106] - GETTING Function0<String> from String
2021-03-12 01:18:32,671 [main:106] - GETTING Function0<String> from Continuation<Int>
2021-03-12 01:18:32,683 [main:106] - GETTING Function0<String> from Boolean
2021-03-12 01:18:32,695 [main:106] - GETTING Function0<String> from EmptyCoroutineContext
2021-03-12 01:18:32,718 [main:106] - GETTING Function0<String> from String
2021-03-12 01:18:32,719 [main:106] - GETTING Function0<String> from A
2021-03-12 01:18:32,726 [main:106] - GETTING Function0<String> from Any?
2021-03-12 01:18:32,731 [main:106] - GETTING Function0<String> from String
2021-03-12 01:18:32,732 [main:106] - GETTING Function0<String> from Continuation<Any?>
2021-03-12 01:18:32,742 [main:106] - GETTING Function0<String> from Array<String>
2021-03-12 01:18:32,758 [main:106] - GETTING Function0<String> from Function0<Unit>
2021-03-12 01:18:32,770 [main:114] - replacement of { "${(a).equals(Kla2().prope2).compareTo(true)}_${b}_${c()}"} of type Function0<String> is { "aznxi"}
2021-03-12 01:18:32,952 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:18:32,952 [main:66] - Compilation checking started
2021-03-12 01:18:33,772 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += (stub({ "lkuci"})).commonPrefixWith("injkt", Kla5().prope5); "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != (a).map("xnexf").trimIndent()) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != "awpgf") return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if ((Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return { "aznxi"} ()
}


2021-03-12 01:18:33,773 [main:107] - replacing ({ "aznxi"} (), String)
2021-03-12 01:18:33,773 [main:50] - replacing { "aznxi"} () String
2021-03-12 01:18:33,773 [main:54] - Getting value of type String
2021-03-12 01:18:33,966 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:18:33,970 [main:58] - GENERATED VALUE OF TYPE String = "hgxyt"
2021-03-12 01:18:33,970 [main:61] - GENERATED IS CALL =false
2021-03-12 01:18:33,986 [main:67] - randomType = Kla2
2021-03-12 01:18:34,174 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 01:18:34,178 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 01:18:34,199 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@4e7dcf03]
2021-03-12 01:18:34,200 [main:78] - Generated call from random type = (Kla2()).prope2?.toString()!!
2021-03-12 01:18:34,200 [main:106] - GETTING String from String
2021-03-12 01:18:34,227 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7fe90b]]
2021-03-12 01:18:34,227 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7fe90b]
2021-03-12 01:18:34,413 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:34,605 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:18:34,609 [main:117] - GENERATED CALL = (Kla0("qhnah").o).padEnd(-172047363, 'ﴬ')
2021-03-12 01:18:34,609 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]]
2021-03-12 01:18:34,609 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]
2021-03-12 01:18:34,609 [main:117] - GENERATED CALL = (Kla0("qhnah").o).plus(Kla2().prope2)
2021-03-12 01:18:34,609 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e37e3ea]]
2021-03-12 01:18:34,610 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e37e3ea]
2021-03-12 01:18:34,790 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:34,976 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:35,160 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:18:35,349 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:18:35,354 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:18:35,749 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:18:35,754 [main:95] - GENERATED = StringBuilder("qlqch")
2021-03-12 01:18:35,754 [main:117] - GENERATED CALL = (Kla0("qhnah").o).replaceRange(1250184984, -570762716, StringBuilder("qlqch"))
2021-03-12 01:18:35,754 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]]
2021-03-12 01:18:35,754 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]
2021-03-12 01:18:35,936 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:18:35,944 [main:117] - GENERATED CALL = (Kla0("qhnah").o).removePrefix("lpnpc")
2021-03-12 01:18:35,944 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]]
2021-03-12 01:18:35,944 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]
2021-03-12 01:18:36,125 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:18:36,129 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:18:36,134 [main:117] - GENERATED CALL = (Kla0("qhnah").o).dropWhile({a: Char -> true})
2021-03-12 01:18:36,134 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]]
2021-03-12 01:18:36,134 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]
2021-03-12 01:18:36,315 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:18:36,322 [main:117] - GENERATED CALL = (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
2021-03-12 01:18:36,322 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]]
2021-03-12 01:18:36,322 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]
2021-03-12 01:18:36,505 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:18:36,509 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:18:36,513 [main:117] - GENERATED CALL = (Kla0("qhnah").o).dropLastWhile({a: Char -> false})
2021-03-12 01:18:36,513 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8422c70]]
2021-03-12 01:18:36,513 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8422c70]
2021-03-12 01:18:36,513 [main:117] - GENERATED CALL = (Kla0("qhnah").o).capitalize()
2021-03-12 01:18:36,513 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]]
2021-03-12 01:18:36,513 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]
2021-03-12 01:18:36,695 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:18:36,882 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:18:36,888 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:18:37,290 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:18:37,294 [main:95] - GENERATED = StringBuilder("sliqu")
2021-03-12 01:18:37,295 [main:117] - GENERATED CALL = (Kla0("qhnah").o).removeSurrounding(StringBuilder("sliqu"))
2021-03-12 01:18:37,295 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e632037]]
2021-03-12 01:18:37,295 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e632037]
2021-03-12 01:18:37,295 [main:117] - GENERATED CALL = (Kla0("qhnah").o).uppercase()
2021-03-12 01:18:37,295 [main:114] - replacement of { "aznxi"} () of type String is (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
2021-03-12 01:18:37,477 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:18:37,478 [main:66] - Compilation checking started
2021-03-12 01:18:38,244 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += (stub({ "lkuci"})).commonPrefixWith("injkt", Kla5().prope5); "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != (a).map("xnexf").trimIndent()) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = {prope8 += (-101).toChar().lowercase(); prope11}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != "awpgf") return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if ((Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:18:38,246 [main:107] - replacing ({prope8 += (-101).toChar().lowercase(); prope11}, Function0<Long>)
2021-03-12 01:18:38,247 [main:50] - replacing {prope8 += (-101).toChar().lowercase(); prope11} Function0<Long>
2021-03-12 01:18:38,247 [main:54] - Getting value of type Function0<Long>
2021-03-12 01:18:38,432 [main:302] - generating value of type = Function0<Long> false depth = 0
2021-03-12 01:18:38,436 [main:302] - generating value of type = Long true depth = 1
2021-03-12 01:18:38,440 [main:58] - GENERATED VALUE OF TYPE Function0<Long> = { 2811653203240486772}
2021-03-12 01:18:38,440 [main:61] - GENERATED IS CALL =false
2021-03-12 01:18:38,662 [main:67] - randomType = LinkedHashSet<Long>
2021-03-12 01:18:38,848 [main:302] - generating value of type = LinkedHashSet<Long> false depth = 0
2021-03-12 01:18:39,079 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Long): LkedHashSet<Long> = TODO()
2021-03-12 01:18:39,085 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Long): LkedHashSet<Long> = TODO()
2021-03-12 01:18:39,275 [main:302] - generating value of type = Long true depth = 3
2021-03-12 01:18:39,279 [main:95] - GENERATED = linkedSetOf<Long>(-7331294317222024518)
2021-03-12 01:18:39,444 [main:106] - GETTING Function0<Long> from String
2021-03-12 01:18:39,470 [main:106] - GETTING Function0<Long> from Continuation<Int>
2021-03-12 01:18:39,481 [main:106] - GETTING Function0<Long> from Function0<Unit>
2021-03-12 01:18:39,493 [main:106] - GETTING Function0<Long> from CoroutineContext
2021-03-12 01:18:39,502 [main:106] - GETTING Function0<Long> from CoroutineContext
2021-03-12 01:18:39,504 [main:106] - GETTING Function0<Long> from Array<String>
2021-03-12 01:18:39,519 [main:106] - GETTING Function0<Long> from String
2021-03-12 01:18:39,520 [main:106] - GETTING Function0<Long> from Any?
2021-03-12 01:18:39,525 [main:106] - GETTING Function0<Long> from String
2021-03-12 01:18:39,527 [main:106] - GETTING Function0<Long> from List<String>
2021-03-12 01:18:39,562 [main:106] - GETTING Function0<Long> from String
2021-03-12 01:18:39,563 [main:106] - GETTING Function0<Long> from A
2021-03-12 01:18:39,571 [main:106] - GETTING Function0<Long> from Boolean
2021-03-12 01:18:39,583 [main:106] - GETTING Function0<Long> from String
2021-03-12 01:18:39,585 [main:106] - GETTING Function0<Long> from String
2021-03-12 01:18:39,586 [main:106] - GETTING Function0<Long> from List<String>
2021-03-12 01:18:39,587 [main:106] - GETTING Function0<Long> from Continuation<Any?>
2021-03-12 01:18:39,597 [main:106] - GETTING Function0<Long> from EmptyCoroutineContext
2021-03-12 01:18:39,620 [main:106] - GETTING Function0<Long> from String
2021-03-12 01:18:39,621 [main:106] - GETTING Function0<Long> from CoroutineContext
2021-03-12 01:18:39,621 [main:114] - replacement of {prope8 += (-101).toChar().lowercase(); prope11} of type Function0<Long> is { 2811653203240486772}
2021-03-12 01:18:39,802 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:18:39,803 [main:66] - Compilation checking started
2021-03-12 01:18:40,571 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += (stub({ "lkuci"})).commonPrefixWith("injkt", Kla5().prope5); "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != (a).map("xnexf").trimIndent()) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = { 2811653203240486772}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || prope14 != "awpgf") return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if ((Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:18:40,572 [main:107] - replacing (prope14 != "awpgf", Boolean)
2021-03-12 01:18:40,573 [main:50] - replacing prope14 != "awpgf" Boolean
2021-03-12 01:18:40,573 [main:54] - Getting value of type Boolean
2021-03-12 01:18:40,755 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:18:40,759 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 01:18:40,759 [main:61] - GENERATED IS CALL =false
2021-03-12 01:18:40,978 [main:67] - randomType = ArrayDeque<UInt>
2021-03-12 01:18:41,158 [main:302] - generating value of type = ArrayDeque<UInt> false depth = 0
2021-03-12 01:18:41,344 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<UInt>): ArrayDeque<UInt> = TODO()
2021-03-12 01:18:41,349 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<UInt>): ArrayDeque<UInt> = TODO()
2021-03-12 01:18:41,753 [main:302] - generating value of type = Collection<UInt> false depth = 3
2021-03-12 01:18:41,940 [main:43] - GENERATING CALL OF fun <E> HashSet(): Collection<UInt> = TODO()
2021-03-12 01:18:41,945 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(): Collection<UInt> = TODO()
2021-03-12 01:18:42,136 [main:95] - GENERATED = HashSet<UInt>()
2021-03-12 01:18:42,136 [main:95] - GENERATED = ArrayDeque<UInt>(HashSet<UInt>())
2021-03-12 01:18:42,315 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@78d9949d]
2021-03-12 01:18:42,496 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:18:42,496 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c479748]
2021-03-12 01:18:42,497 [main:78] - Generated call from random type = (ArrayDeque<UInt>(HashSet<UInt>())).equals("rmewn").equals(Kla2().prope2)
2021-03-12 01:18:42,498 [main:106] - GETTING Boolean from String
2021-03-12 01:18:42,524 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bd4a13]]
2021-03-12 01:18:42,524 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bd4a13]
2021-03-12 01:18:42,703 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:18:42,707 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:18:42,711 [main:117] - GENERATED CALL = (prope2).all({a: Char -> false})
2021-03-12 01:18:42,712 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@550cc78c]]
2021-03-12 01:18:42,712 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@550cc78c]
2021-03-12 01:18:42,891 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:18:43,075 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:18:43,080 [main:117] - GENERATED CALL = (prope2).endsWith("chhuz", false)
2021-03-12 01:18:43,080 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b823c34]]
2021-03-12 01:18:43,080 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:18:43,259 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:43,442 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:43,447 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b823c34]
2021-03-12 01:18:43,447 [main:117] - GENERATED CALL = (prope2).subSequence(1017807486, -142752522).isNotEmpty()
2021-03-12 01:18:43,447 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16dc2b8d]]
2021-03-12 01:18:43,448 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:18:43,639 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:43,826 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:43,830 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16dc2b8d]
2021-03-12 01:18:43,831 [main:117] - GENERATED CALL = (prope2).subSequence(-939953843, -233836629).isBlank()
2021-03-12 01:18:43,831 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@388bb1cd]]
2021-03-12 01:18:43,831 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@388bb1cd]
2021-03-12 01:18:43,831 [main:117] - GENERATED CALL = (prope2).toBoolean()
2021-03-12 01:18:43,831 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79c9f253]]
2021-03-12 01:18:43,831 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79c9f253]
2021-03-12 01:18:44,011 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:44,015 [main:117] - GENERATED CALL = (prope2).hasSurrogatePairAt(-173839279)
2021-03-12 01:18:44,015 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]]
2021-03-12 01:18:44,016 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]
2021-03-12 01:18:44,016 [main:117] - GENERATED CALL = (prope2).equals(Kla2().prope2)
2021-03-12 01:18:44,016 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c934bfd]]
2021-03-12 01:18:44,016 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c934bfd]
2021-03-12 01:18:44,016 [main:117] - GENERATED CALL = (prope2).isEmpty()
2021-03-12 01:18:44,016 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d24d012]]
2021-03-12 01:18:44,016 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:18:44,198 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:44,383 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:44,387 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d24d012]
2021-03-12 01:18:44,387 [main:117] - GENERATED CALL = (prope2).subSequence(-1205399257, 890218475).isNotBlank()
2021-03-12 01:18:44,387 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e9e12a5]]
2021-03-12 01:18:44,387 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e9e12a5]
2021-03-12 01:18:44,608 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:18:44,613 [main:117] - GENERATED CALL = (prope2).contains('曠', Kla5().prope5)
2021-03-12 01:18:44,613 [main:114] - replacement of prope14 != "awpgf" of type Boolean is (prope2).isEmpty()
2021-03-12 01:18:44,790 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:18:44,790 [main:66] - Compilation checking started
2021-03-12 01:18:45,603 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += (stub({ "lkuci"})).commonPrefixWith("injkt", Kla5().prope5); "$prope13"})
    if (prope8 != prope10 || true) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != (a).map("xnexf").trimIndent()) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = { 2811653203240486772}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || (prope2).isEmpty()) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if ((Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:18:45,605 [main:107] - replacing (prope8 != prope10 || true, Boolean)
2021-03-12 01:18:45,606 [main:50] - replacing prope8 != prope10 || true Boolean
2021-03-12 01:18:45,606 [main:54] - Getting value of type Boolean
2021-03-12 01:18:45,793 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:18:45,798 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 01:18:45,798 [main:61] - GENERATED IS CALL =false
2021-03-12 01:18:45,806 [main:67] - randomType = Char
2021-03-12 01:18:45,985 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:18:46,017 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@56704452]
2021-03-12 01:18:46,018 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@61223108]
2021-03-12 01:18:46,201 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:18:46,201 [main:78] - Generated call from random type = ('茱').toShort().equals("tyujy")
2021-03-12 01:18:46,202 [main:106] - GETTING Boolean from Continuation<Int>
2021-03-12 01:18:46,212 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3f4e991e]]
2021-03-12 01:18:46,212 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3f4e991e]
2021-03-12 01:18:46,212 [main:117] - GENERATED CALL = (fu1<Int>({a: Int -> require(true)})).equals(Kla2().prope2)
2021-03-12 01:18:46,212 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3f4e991e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c479748]]
2021-03-12 01:18:46,212 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3f4e991e]
2021-03-12 01:18:46,393 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:18:46,394 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c479748]
2021-03-12 01:18:46,394 [main:117] - GENERATED CALL = (fu1<Int>({a: Int -> require(true)})).equals("yarpi").equals(Kla2().prope2)
2021-03-12 01:18:46,394 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3f4e991e], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14ca80b4]]
2021-03-12 01:18:46,394 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3f4e991e]
2021-03-12 01:18:46,394 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14ca80b4]
2021-03-12 01:18:46,394 [main:117] - GENERATED CALL = (fu1<Int>({a: Int -> require(true)})).equals(Kla2().prope2).not()
2021-03-12 01:18:46,394 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3f4e991e], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]]
2021-03-12 01:18:46,394 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3f4e991e]
2021-03-12 01:18:46,394 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]
2021-03-12 01:18:46,395 [main:117] - GENERATED CALL = (fu1<Int>({a: Int -> require(true)})).equals(Kla2().prope2).xor(Kla5().prope5)
2021-03-12 01:18:46,395 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3f4e991e], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3df8a0d8]]
2021-03-12 01:18:46,395 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3f4e991e]
2021-03-12 01:18:46,395 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3df8a0d8]
2021-03-12 01:18:46,574 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:18:46,579 [main:117] - GENERATED CALL = (fu1<Int>({a: Int -> require(true)})).equals(Kla2().prope2).and(true)
2021-03-12 01:18:46,579 [main:113] - Case = [public abstract val context: kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.Continuation[DeserializedPropertyDescriptor@514eaff2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3000151a]]
2021-03-12 01:18:46,579 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3000151a]
2021-03-12 01:18:46,579 [main:117] - GENERATED CALL = (fu1<Int>({a: Int -> require(true)})).context.equals(Kla2().prope2)
2021-03-12 01:18:46,579 [main:113] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.Int>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@13667494], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@33376246]]
2021-03-12 01:18:46,580 [main:149] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.Int>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@13667494]
2021-03-12 01:18:46,759 [main:302] - generating value of type = Result<Int> false depth = 0
2021-03-12 01:18:46,948 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Int): Result<Int> = TODO()
2021-03-12 01:18:46,954 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Int): Result<Int> = TODO()
2021-03-12 01:18:47,362 [main:302] - generating value of type = Function0<Int> false depth = 3
2021-03-12 01:18:47,367 [main:302] - generating value of type = Int true depth = 4
2021-03-12 01:18:47,371 [main:95] - GENERATED = runCatching<Int>({ 408102653})
2021-03-12 01:18:47,371 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@33376246]
2021-03-12 01:18:47,371 [main:117] - GENERATED CALL = (fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)
2021-03-12 01:18:47,371 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3f4e991e], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]]
2021-03-12 01:18:47,371 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3f4e991e]
2021-03-12 01:18:47,372 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]
2021-03-12 01:18:47,372 [main:117] - GENERATED CALL = (fu1<Int>({a: Int -> require(true)})).equals(Kla2().prope2).or(Kla5().prope5)
2021-03-12 01:18:47,372 [main:114] - replacement of prope8 != prope10 || true of type Boolean is (fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)
2021-03-12 01:18:47,553 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:18:47,554 [main:66] - Compilation checking started
2021-03-12 01:18:48,406 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += (stub({ "lkuci"})).commonPrefixWith("injkt", Kla5().prope5); "$prope13"})
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != (a).map("xnexf").trimIndent()) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = { 2811653203240486772}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || (prope2).isEmpty()) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = {prope8 += "1_"; (s).size.plus(3994386378527141144)}())
    if ((Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:18:48,407 [main:107] - replacing ("1_", String)
2021-03-12 01:18:48,408 [main:50] - replacing "1_" String
2021-03-12 01:18:48,408 [main:54] - Getting value of type String
2021-03-12 01:18:48,596 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:18:48,600 [main:58] - GENERATED VALUE OF TYPE String = "sonob"
2021-03-12 01:18:48,600 [main:61] - GENERATED IS CALL =false
2021-03-12 01:18:48,609 [main:67] - randomType = Char
2021-03-12 01:18:48,792 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:18:48,822 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]
2021-03-12 01:18:48,822 [main:78] - Generated call from random type = ('좬').uppercase()
2021-03-12 01:18:48,822 [main:106] - GETTING String from String
2021-03-12 01:18:48,839 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]]
2021-03-12 01:18:48,839 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:18:49,020 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:49,209 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:49,214 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]
2021-03-12 01:18:49,396 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:18:49,586 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:18:49,591 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:18:49,982 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 01:18:49,989 [main:95] - GENERATED = StringBuilder("xewat")
2021-03-12 01:18:50,175 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:18:50,179 [main:117] - GENERATED CALL = (prope2).subSequence(68183089, 293194889).commonPrefixWith(StringBuilder("xewat"), false)
2021-03-12 01:18:50,179 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]]
2021-03-12 01:18:50,179 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]
2021-03-12 01:18:50,397 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:50,401 [main:117] - GENERATED CALL = (prope2).drop(-1721604725)
2021-03-12 01:18:50,401 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]]
2021-03-12 01:18:50,401 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]
2021-03-12 01:18:50,582 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:18:50,587 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:18:50,591 [main:117] - GENERATED CALL = (prope2).dropWhile({a: Char -> false})
2021-03-12 01:18:50,591 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]]
2021-03-12 01:18:50,591 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]
2021-03-12 01:18:50,773 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:18:50,777 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:18:50,781 [main:117] - GENERATED CALL = (prope2).filterNot({a: Char -> true})
2021-03-12 01:18:50,781 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]]
2021-03-12 01:18:50,781 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]
2021-03-12 01:18:50,962 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:18:51,148 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:18:51,153 [main:117] - GENERATED CALL = (prope2).replace('뗉', '厫', Kla5().prope5)
2021-03-12 01:18:51,153 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]]
2021-03-12 01:18:51,153 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]
2021-03-12 01:18:51,153 [main:117] - GENERATED CALL = (prope2).prependIndent((s.map(a::map)).get(1466108888))
2021-03-12 01:18:51,153 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ad4cc3f]]
2021-03-12 01:18:51,153 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:18:51,335 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:51,520 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:51,525 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ad4cc3f]
2021-03-12 01:18:51,706 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 01:18:51,896 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 01:18:51,901 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 01:18:52,507 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:18:52,512 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 01:18:52,517 [main:95] - GENERATED = Regex("khhjw", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 01:18:52,701 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 01:18:52,705 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 01:18:52,712 [main:117] - GENERATED CALL = (prope2).subSequence(-2125459284, -48681148).replace(Regex("khhjw", kotlin.text.RegexOption.IGNORE_CASE), {a: MatchResult -> "drsnd"})
2021-03-12 01:18:52,712 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e61f45]]
2021-03-12 01:18:52,712 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e61f45]
2021-03-12 01:18:52,893 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:18:53,079 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:18:53,083 [main:117] - GENERATED CALL = (prope2).replaceBefore('ᐈ', stub({ "lkuci"}), "rykhb")
2021-03-12 01:18:53,083 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:18:53,083 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:18:53,083 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:18:53,264 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:53,268 [main:117] - GENERATED CALL = (prope2).compareTo((s.map(a::map)).get(1466108888)).toString(808136861)
2021-03-12 01:18:53,268 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e632037]]
2021-03-12 01:18:53,268 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e632037]
2021-03-12 01:18:53,269 [main:117] - GENERATED CALL = (prope2).uppercase()
2021-03-12 01:18:53,269 [main:114] - replacement of "1_" of type String is "sonob"
2021-03-12 01:18:53,447 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 01:18:53,447 [main:66] - Compilation checking started
2021-03-12 01:18:54,243 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += (stub({ "lkuci"})).commonPrefixWith("injkt", Kla5().prope5); "$prope13"})
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != (a).map("xnexf").trimIndent()) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = { 2811653203240486772}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || (prope2).isEmpty()) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = {prope8 += "sonob"; (s).size.plus(3994386378527141144)}())
    if ((Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:18:54,246 [main:107] - replacing (fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += (stub({ "lkuci"})).commonPrefixWith("injkt", Kla5().prope5); "$prope13"}), String)
2021-03-12 01:18:54,247 [main:50] - replacing fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += (stub({ "lkuci"})).commonPrefixWith("injkt", Kla5().prope5); "$prope13"}) String
2021-03-12 01:18:54,247 [main:54] - Getting value of type String
2021-03-12 01:18:54,446 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:18:54,450 [main:58] - GENERATED VALUE OF TYPE String = "ezlpw"
2021-03-12 01:18:54,450 [main:61] - GENERATED IS CALL =false
2021-03-12 01:18:55,324 [main:67] - randomType = Pair<UShort, Boolean?>?
2021-03-12 01:18:55,506 [main:302] - generating value of type = Pair<UShort, Boolean?> false depth = 0
2021-03-12 01:18:55,696 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UShort, second: Boolean?): Pair<UShort, Boolean?> = TODO()
2021-03-12 01:18:55,701 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UShort, second: Boolean?): Pair<UShort, Boolean?> = TODO()
2021-03-12 01:18:55,906 [main:302] - generating value of type = UShort true depth = 3
2021-03-12 01:18:55,910 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 01:18:55,914 [main:95] - GENERATED = Pair<UShort, Boolean?>(27960.toUShort(), true)
2021-03-12 01:18:55,934 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38a9d0fa]
2021-03-12 01:18:56,159 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:56,164 [main:78] - Generated call from random type = (Pair<UShort, Boolean?>(27960.toUShort(), true))?.first.toString(-1443616706)
2021-03-12 01:18:56,164 [main:106] - GETTING String from String
2021-03-12 01:18:56,190 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]]
2021-03-12 01:18:56,191 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]
2021-03-12 01:18:56,370 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:18:56,556 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:18:56,560 [main:117] - GENERATED CALL = (prope2).replaceAfter('ඞ', "coopd", Kla0("qhnah").component2())
2021-03-12 01:18:56,560 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]]
2021-03-12 01:18:56,560 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]
2021-03-12 01:18:56,561 [main:117] - GENERATED CALL = (prope2).trimIndent()
2021-03-12 01:18:56,561 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e37e3ea]]
2021-03-12 01:18:56,561 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e37e3ea]
2021-03-12 01:18:56,744 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:56,931 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:57,122 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:18:57,129 [main:117] - GENERATED CALL = (prope2).replaceRange(779343694, 501399775, "euokq")
2021-03-12 01:18:57,129 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1573a7e0]]
2021-03-12 01:18:57,129 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1573a7e0]
2021-03-12 01:18:57,314 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:18:57,319 [main:117] - GENERATED CALL = (prope2).substringAfterLast('贍', stub({ "lkuci"}))
2021-03-12 01:18:57,319 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]]
2021-03-12 01:18:57,319 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]
2021-03-12 01:18:57,503 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:57,507 [main:117] - GENERATED CALL = (prope2).take(658229296)
2021-03-12 01:18:57,507 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]]
2021-03-12 01:18:57,507 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]
2021-03-12 01:18:57,692 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:18:57,699 [main:117] - GENERATED CALL = (prope2).removeSurrounding("apueo")
2021-03-12 01:18:57,699 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]]
2021-03-12 01:18:57,699 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:18:57,881 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:58,067 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:58,071 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]
2021-03-12 01:18:58,254 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:58,441 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:58,446 [main:117] - GENERATED CALL = (prope2).subSequence(-596289217, -58138070).substring(1692532133, 142263678)
2021-03-12 01:18:58,446 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]]
2021-03-12 01:18:58,446 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]
2021-03-12 01:18:58,627 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:18:58,631 [main:117] - GENERATED CALL = (prope2).dropLast(-2080741846)
2021-03-12 01:18:58,631 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]]
2021-03-12 01:18:58,631 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]
2021-03-12 01:18:58,812 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:18:58,816 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:18:58,820 [main:117] - GENERATED CALL = (prope2).dropWhile({a: Char -> true})
2021-03-12 01:18:58,820 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ed1eadc]]
2021-03-12 01:18:58,820 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ed1eadc]
2021-03-12 01:18:59,003 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:18:59,007 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:18:59,012 [main:117] - GENERATED CALL = (prope2).filter({a: Char -> true})
2021-03-12 01:18:59,012 [main:114] - replacement of fu11(b = (stub({ "lkuci"})).length.plus(-7672110821994018843), a = { 1139225404}(), c = {prope8 += (stub({ "lkuci"})).commonPrefixWith("injkt", Kla5().prope5); "$prope13"}) of type String is (prope2).trimIndent()
2021-03-12 01:18:59,193 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:18:59,194 [main:66] - Compilation checking started
2021-03-12 01:18:59,982 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != (a).map("xnexf").trimIndent()) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = { 2811653203240486772}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || (prope2).isEmpty()) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = {prope8 += "sonob"; (s).size.plus(3994386378527141144)}())
    if ((Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:18:59,984 [main:107] - replacing ({prope8 += "sonob"; (s).size.plus(3994386378527141144)}(), Long)
2021-03-12 01:18:59,985 [main:50] - replacing {prope8 += "sonob"; (s).size.plus(3994386378527141144)}() Long
2021-03-12 01:18:59,985 [main:54] - Getting value of type Long
2021-03-12 01:19:00,182 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:19:00,186 [main:58] - GENERATED VALUE OF TYPE Long = 2897718665695203260
2021-03-12 01:19:00,186 [main:61] - GENERATED IS CALL =false
2021-03-12 01:19:00,202 [main:67] - randomType = Kla2
2021-03-12 01:19:00,380 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 01:19:00,384 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 01:19:00,406 [main:106] - GETTING Long from EmptyCoroutineContext
2021-03-12 01:19:00,427 [main:106] - GETTING Long from String
2021-03-12 01:19:00,450 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]]
2021-03-12 01:19:00,451 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]
2021-03-12 01:19:00,627 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:19:00,632 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).length.plus(-6988374107995717554)
2021-03-12 01:19:00,632 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ddc5ec6]]
2021-03-12 01:19:00,632 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:19:00,632 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ddc5ec6]
2021-03-12 01:19:00,632 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).compareTo(A("jmkiq").map()).toLong()
2021-03-12 01:19:00,632 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]]
2021-03-12 01:19:00,632 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:19:00,808 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:00,812 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]
2021-03-12 01:19:00,989 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:19:00,993 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).compareTo("srekh").plus(-4932764505163675525)
2021-03-12 01:19:00,993 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ddc5ec6]]
2021-03-12 01:19:00,993 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ddc5ec6]
2021-03-12 01:19:00,994 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).length.toLong()
2021-03-12 01:19:00,994 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cef48b3]]
2021-03-12 01:19:00,994 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:19:01,169 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:01,174 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cef48b3]
2021-03-12 01:19:01,351 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:19:01,355 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).compareTo("hrgvb").div(1061052486101236359)
2021-03-12 01:19:01,355 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8fcc1fc]]
2021-03-12 01:19:01,355 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:19:01,532 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:01,711 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:01,715 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8fcc1fc]
2021-03-12 01:19:01,929 [main:302] - generating value of type = Function1<Char, Long> false depth = 0
2021-03-12 01:19:01,933 [main:302] - generating value of type = Long true depth = 1
2021-03-12 01:19:01,937 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).subSequence(203452636, 983628167).sumOf({a: Char -> -8031825478799820252})
2021-03-12 01:19:01,937 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3c3b70b7]]
2021-03-12 01:19:01,937 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:19:02,115 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:02,119 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3c3b70b7]
2021-03-12 01:19:02,119 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).get(-1124430176).toLong()
2021-03-12 01:19:02,119 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ce8b520]]
2021-03-12 01:19:02,119 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ce8b520]
2021-03-12 01:19:02,296 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:19:02,300 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).length.times(7560228883042372558)
2021-03-12 01:19:02,300 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]]
2021-03-12 01:19:02,300 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:19:02,300 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]
2021-03-12 01:19:02,477 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:19:02,481 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").component2()).rem(-5397257366629030700)
2021-03-12 01:19:02,482 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cef48b3]]
2021-03-12 01:19:02,482 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cef48b3]
2021-03-12 01:19:02,658 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:19:02,663 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).length.div(7029988027590868198)
2021-03-12 01:19:02,663 [main:114] - replacement of {prope8 += "sonob"; (s).size.plus(3994386378527141144)}() of type Long is ((s.map(a::map)).get(1466108888)).subSequence(203452636, 983628167).sumOf({a: Char -> -8031825478799820252})
2021-03-12 01:19:02,839 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:19:02,840 [main:66] - Compilation checking started
2021-03-12 01:19:03,640 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != (a).map("xnexf").trimIndent()) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; "$prope13"}, b = { 2811653203240486772}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || (prope2).isEmpty()) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = ((s.map(a::map)).get(1466108888)).subSequence(203452636, 983628167).sumOf({a: Char -> -8031825478799820252}))
    if ((Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:19:03,643 [main:107] - replacing ("$prope13", String)
2021-03-12 01:19:03,644 [main:50] - replacing "$prope13" String
2021-03-12 01:19:03,644 [main:54] - Getting value of type String
2021-03-12 01:19:03,831 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:03,835 [main:58] - GENERATED VALUE OF TYPE String = "hczhh"
2021-03-12 01:19:03,835 [main:61] - GENERATED IS CALL =false
2021-03-12 01:19:04,051 [main:67] - randomType = UShort
2021-03-12 01:19:04,251 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 01:19:04,293 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@78230c5c]
2021-03-12 01:19:04,293 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6692e134]
2021-03-12 01:19:04,474 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:04,478 [main:78] - Generated call from random type = (24647.toUShort()).toLong().toString(-876677159)
2021-03-12 01:19:04,479 [main:106] - GETTING String from Array<String>
2021-03-12 01:19:04,494 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d3514e]]
2021-03-12 01:19:04,494 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:19:04,676 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:04,681 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d3514e]
2021-03-12 01:19:04,681 [main:117] - GENERATED CALL = (s).get(1050618794).toLowerCase()
2021-03-12 01:19:04,681 [main:113] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3d8904f8]]
2021-03-12 01:19:04,681 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3d8904f8]
2021-03-12 01:19:04,681 [main:117] - GENERATED CALL = (s).contentToString()
2021-03-12 01:19:04,681 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]]
2021-03-12 01:19:04,681 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:19:04,863 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:04,868 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]
2021-03-12 01:19:05,052 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:19:05,239 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:19:05,244 [main:117] - GENERATED CALL = (s).get(1511088009).replaceFirst('', '', Kla5().prope5)
2021-03-12 01:19:05,244 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0a1b3]]
2021-03-12 01:19:05,244 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:19:05,427 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:05,431 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0a1b3]
2021-03-12 01:19:05,615 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:05,804 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:19:05,808 [main:117] - GENERATED CALL = (s).get(1695619123).padStart(1900306690, '挶')
2021-03-12 01:19:05,808 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]]
2021-03-12 01:19:05,808 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:19:05,991 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:05,996 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]
2021-03-12 01:19:06,176 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:19:06,361 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:19:06,366 [main:117] - GENERATED CALL = (s).get(-1035286288).replace('꼷', '顤', Kla5().prope5)
2021-03-12 01:19:06,366 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]]
2021-03-12 01:19:06,366 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:19:06,549 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:06,553 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]
2021-03-12 01:19:06,734 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:19:06,920 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:06,925 [main:117] - GENERATED CALL = (s).get(-969940751).replaceBeforeLast('镱', Kla0("qhnah").o, "bwrvg")
2021-03-12 01:19:06,925 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]]
2021-03-12 01:19:06,925 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:19:07,108 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:07,112 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]
2021-03-12 01:19:07,297 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:07,301 [main:117] - GENERATED CALL = (s).get(588797641).takeLast(1139890105)
2021-03-12 01:19:07,302 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507f736]]
2021-03-12 01:19:07,302 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:19:07,529 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:07,533 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507f736]
2021-03-12 01:19:07,713 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:07,898 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:07,903 [main:117] - GENERATED CALL = (s).get(-1059133450).removeRange(1968537976, 390481770)
2021-03-12 01:19:07,903 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]]
2021-03-12 01:19:07,903 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:19:08,085 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:08,089 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]
2021-03-12 01:19:08,271 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:19:08,275 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:19:08,279 [main:117] - GENERATED CALL = (s).get(-1376584106).dropLastWhile({a: Char -> true})
2021-03-12 01:19:08,280 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]]
2021-03-12 01:19:08,280 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:19:08,463 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:08,467 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]
2021-03-12 01:19:08,648 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:19:08,837 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:19:08,843 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:19:09,235 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 01:19:09,242 [main:95] - GENERATED = StringBuilder("ajzrv")
2021-03-12 01:19:09,242 [main:117] - GENERATED CALL = (s).get(-769771840).removeSurrounding(StringBuilder("ajzrv"))
2021-03-12 01:19:09,243 [main:114] - replacement of "$prope13" of type String is (s).get(1695619123).padStart(1900306690, '挶')
2021-03-12 01:19:09,424 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:19:09,424 [main:66] - Compilation checking started
2021-03-12 01:19:10,259 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if (prope8 != (A("jmkiq").z).trimStart() || prope14 != (a).map("xnexf").trimIndent()) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = { 2811653203240486772}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || (prope2).isEmpty()) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = ((s.map(a::map)).get(1466108888)).subSequence(203452636, 983628167).sumOf({a: Char -> -8031825478799820252}))
    if ((Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:19:10,261 [main:107] - replacing (prope8 != (A("jmkiq").z).trimStart() || prope14 != (a).map("xnexf").trimIndent(), Boolean)
2021-03-12 01:19:10,262 [main:50] - replacing prope8 != (A("jmkiq").z).trimStart() || prope14 != (a).map("xnexf").trimIndent() Boolean
2021-03-12 01:19:10,262 [main:54] - Getting value of type Boolean
2021-03-12 01:19:10,454 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:19:10,458 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 01:19:10,458 [main:61] - GENERATED IS CALL =false
2021-03-12 01:19:10,672 [main:67] - randomType = Float
2021-03-12 01:19:10,859 [main:302] - generating value of type = Float true depth = 0
2021-03-12 01:19:10,907 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@5556f4af]
2021-03-12 01:19:11,090 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:19:11,095 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e2eab74]
2021-03-12 01:19:11,095 [main:78] - Generated call from random type = (0.9394908f).compareTo(-10).equals(Kla2().prope2)
2021-03-12 01:19:11,096 [main:106] - GETTING Boolean from String
2021-03-12 01:19:11,123 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bd4a13]]
2021-03-12 01:19:11,123 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bd4a13]
2021-03-12 01:19:11,307 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:19:11,311 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:19:11,315 [main:117] - GENERATED CALL = (Kla0("qhnah").o).all({a: Char -> false})
2021-03-12 01:19:11,315 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f6ae739]]
2021-03-12 01:19:11,315 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:19:11,496 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:11,501 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f6ae739]
2021-03-12 01:19:11,501 [main:117] - GENERATED CALL = (Kla0("qhnah").o).get(-925770912).isDefined()
2021-03-12 01:19:11,501 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f26e36d]]
2021-03-12 01:19:11,501 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:19:11,684 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:11,688 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f26e36d]
2021-03-12 01:19:11,689 [main:117] - GENERATED CALL = (Kla0("qhnah").o).get(-953569360).isDigit()
2021-03-12 01:19:11,689 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a1bce3]]
2021-03-12 01:19:11,689 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a1bce3]
2021-03-12 01:19:11,689 [main:117] - GENERATED CALL = (Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)
2021-03-12 01:19:11,689 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92d847a]]
2021-03-12 01:19:11,689 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:19:11,872 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:11,877 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@92d847a]
2021-03-12 01:19:12,058 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:19:12,243 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:19:12,248 [main:117] - GENERATED CALL = (Kla0("qhnah").o).get(-1541232273).equals('抅', true)
2021-03-12 01:19:12,248 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]]
2021-03-12 01:19:12,248 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]
2021-03-12 01:19:12,248 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75d1477a]
2021-03-12 01:19:12,431 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:19:12,435 [main:117] - GENERATED CALL = (Kla0("qhnah").o).equals(Kla2().prope2).xor(false)
2021-03-12 01:19:12,435 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16dc2b8d]]
2021-03-12 01:19:12,435 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:19:12,619 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:12,805 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:12,809 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16dc2b8d]
2021-03-12 01:19:12,968 [main:117] - GENERATED CALL = (Kla0("qhnah").o).subSequence(451754667, 515752984).isBlank()
2021-03-12 01:19:12,968 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@388bb1cd]]
2021-03-12 01:19:12,968 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@388bb1cd]
2021-03-12 01:19:12,968 [main:117] - GENERATED CALL = (Kla0("qhnah").o).toBoolean()
2021-03-12 01:19:12,968 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79c9f253]]
2021-03-12 01:19:12,968 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79c9f253]
2021-03-12 01:19:13,192 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:13,198 [main:117] - GENERATED CALL = (Kla0("qhnah").o).hasSurrogatePairAt(-616773050)
2021-03-12 01:19:13,198 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6458768e]]
2021-03-12 01:19:13,198 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6458768e]
2021-03-12 01:19:13,198 [main:117] - GENERATED CALL = (Kla0("qhnah").o).any()
2021-03-12 01:19:13,198 [main:114] - replacement of prope8 != (A("jmkiq").z).trimStart() || prope14 != (a).map("xnexf").trimIndent() of type Boolean is (Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)
2021-03-12 01:19:13,383 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:19:13,384 [main:66] - Compilation checking started
2021-03-12 01:19:14,180 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = { 2811653203240486772}(), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || (prope2).isEmpty()) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = ((s.map(a::map)).get(1466108888)).subSequence(203452636, 983628167).sumOf({a: Char -> -8031825478799820252}))
    if ((Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:19:14,182 [main:107] - replacing ({ 2811653203240486772}(), Long)
2021-03-12 01:19:14,183 [main:50] - replacing { 2811653203240486772}() Long
2021-03-12 01:19:14,183 [main:54] - Getting value of type Long
2021-03-12 01:19:14,392 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:19:14,397 [main:58] - GENERATED VALUE OF TYPE Long = -1707292483971257473
2021-03-12 01:19:14,397 [main:61] - GENERATED IS CALL =false
2021-03-12 01:19:15,538 [main:67] - randomType = Function2<ArrayList<Function1<Kla1, String>>?, A, Double>
2021-03-12 01:19:15,539 [main:106] - GETTING Long from String
2021-03-12 01:19:15,567 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ce8b520]]
2021-03-12 01:19:15,567 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:19:15,567 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ce8b520]
2021-03-12 01:19:15,748 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:19:15,753 [main:117] - GENERATED CALL = (stub({ "lkuci"})).compareTo(Kla0("qhnah").component2()).times(-6522545869552561230)
2021-03-12 01:19:15,753 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]]
2021-03-12 01:19:15,753 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]
2021-03-12 01:19:15,935 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:19:15,939 [main:117] - GENERATED CALL = (stub({ "lkuci"})).length.rem(8504590649803420024)
2021-03-12 01:19:15,939 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ddc5ec6]]
2021-03-12 01:19:15,939 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ddc5ec6]
2021-03-12 01:19:15,940 [main:117] - GENERATED CALL = (stub({ "lkuci"})).length.toLong()
2021-03-12 01:19:15,940 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cef48b3]]
2021-03-12 01:19:15,940 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cef48b3]
2021-03-12 01:19:16,120 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:19:16,124 [main:117] - GENERATED CALL = (stub({ "lkuci"})).length.div(5883887356500920663)
2021-03-12 01:19:16,124 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]]
2021-03-12 01:19:16,124 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:19:16,304 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:16,308 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]
2021-03-12 01:19:16,488 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:19:16,492 [main:117] - GENERATED CALL = (stub({ "lkuci"})).compareTo("lanur").rem(4117926579430392923)
2021-03-12 01:19:16,492 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]]
2021-03-12 01:19:16,492 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:19:16,493 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]
2021-03-12 01:19:16,673 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:19:16,677 [main:117] - GENERATED CALL = (stub({ "lkuci"})).compareTo(Kla0("qhnah").component2()).plus(-3934237064666054727)
2021-03-12 01:19:16,677 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]]
2021-03-12 01:19:16,677 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]
2021-03-12 01:19:16,858 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:19:16,862 [main:117] - GENERATED CALL = (stub({ "lkuci"})).length.plus(1926676448743927900)
2021-03-12 01:19:16,863 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c86ca]]
2021-03-12 01:19:16,863 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c86ca]
2021-03-12 01:19:17,043 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:19:17,048 [main:117] - GENERATED CALL = (stub({ "lkuci"})).length.minus(1484661515584988106)
2021-03-12 01:19:17,048 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3c3b70b7]]
2021-03-12 01:19:17,048 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:19:17,231 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:17,236 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3c3b70b7]
2021-03-12 01:19:17,236 [main:117] - GENERATED CALL = (stub({ "lkuci"})).get(1911718895).toLong()
2021-03-12 01:19:17,236 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8fcc1fc]]
2021-03-12 01:19:17,236 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8fcc1fc]
2021-03-12 01:19:17,419 [main:302] - generating value of type = Function1<Char, Long> false depth = 0
2021-03-12 01:19:17,423 [main:302] - generating value of type = Long true depth = 1
2021-03-12 01:19:17,427 [main:117] - GENERATED CALL = (stub({ "lkuci"})).sumOf({a: Char -> -7486586999699647467})
2021-03-12 01:19:17,427 [main:114] - replacement of { 2811653203240486772}() of type Long is (stub({ "lkuci"})).length.div(5883887356500920663)
2021-03-12 01:19:17,607 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:19:17,608 [main:66] - Compilation checking started
2021-03-12 01:19:18,413 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || (prope2).isEmpty()) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = ((s.map(a::map)).get(1466108888)).subSequence(203452636, 983628167).sumOf({a: Char -> -8031825478799820252}))
    if ((Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:19:18,414 [main:107] - replacing (fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = ((s.map(a::map)).get(1466108888)).subSequence(203452636, 983628167).sumOf({a: Char -> -8031825478799820252})), String)
2021-03-12 01:19:18,415 [main:50] - replacing fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = ((s.map(a::map)).get(1466108888)).subSequence(203452636, 983628167).sumOf({a: Char -> -8031825478799820252})) String
2021-03-12 01:19:18,415 [main:54] - Getting value of type String
2021-03-12 01:19:18,609 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:18,614 [main:58] - GENERATED VALUE OF TYPE String = "zgnfp"
2021-03-12 01:19:18,614 [main:61] - GENERATED IS CALL =false
2021-03-12 01:19:19,989 [main:67] - randomType = Triple<Float, MutableMap<Long?, UByte>?, Kla0?>
2021-03-12 01:19:20,171 [main:302] - generating value of type = Triple<Float, MutableMap<Long?, UByte>?, Kla0?> false depth = 0
2021-03-12 01:19:20,363 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Float, second: MutableMap<Long?, UByte>?, third: Kla0?): Triple<Float, MutableMap<Long?, UByte>?, Kla0?> = TODO()
2021-03-12 01:19:20,368 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Float, second: MutableMap<Long?, UByte>?, third: Kla0?): Triple<Float, MutableMap<Long?, UByte>?, Kla0?> = TODO()
2021-03-12 01:19:20,556 [main:302] - generating value of type = Float true depth = 3
2021-03-12 01:19:20,560 [main:302] - generating value of type = MutableMap<Long?, UByte> false depth = 3
2021-03-12 01:19:20,749 [main:43] - GENERATING CALL OF fun <K, V> mutableMapOf(): MutableMap<Long?, UByte> = TODO()
2021-03-12 01:19:20,755 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mutableMapOf(): MutableMap<Long?, UByte> = TODO()
2021-03-12 01:19:20,943 [main:95] - GENERATED = mutableMapOf<Long?, UByte>()
2021-03-12 01:19:20,943 [main:302] - generating value of type = Kla0 false depth = 3
2021-03-12 01:19:20,948 [main:112] - generating klass Kla0 text = data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}
2021-03-12 01:19:21,131 [main:194] - Type params = []
2021-03-12 01:19:21,311 [main:302] - generating value of type = String true depth = 5
2021-03-12 01:19:21,315 [main:95] - GENERATED = Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))
2021-03-12 01:19:21,338 [main:149] - GENERATING call of type public final operator fun component2(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@37535280]
2021-03-12 01:19:21,338 [main:78] - Generated call from random type = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
2021-03-12 01:19:21,338 [main:114] - replacement of fu11(a = (451586323.toUInt())?.div(7067939559415916470.toULong()).compareTo(6.toUByte()), c = {prope8 += "$prope13"; ((s.map(a::map)).get(1466108888)).repeat(1898869549)}, b = ((s.map(a::map)).get(1466108888)).subSequence(203452636, 983628167).sumOf({a: Char -> -8031825478799820252})) of type String is (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
2021-03-12 01:19:21,523 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-12 01:19:21,524 [main:66] - Compilation checking started
2021-03-12 01:19:22,277 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || (prope2).isEmpty()) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:19:22,279 [main:107] - replacing (prope8, String)
2021-03-12 01:19:22,280 [main:50] - replacing prope8 String
2021-03-12 01:19:22,280 [main:54] - Getting value of type String
2021-03-12 01:19:22,488 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:22,492 [main:58] - GENERATED VALUE OF TYPE String = "pbihq"
2021-03-12 01:19:22,492 [main:61] - GENERATED IS CALL =false
2021-03-12 01:19:22,511 [main:67] - randomType = Kla1
2021-03-12 01:19:22,711 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 01:19:22,716 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-12 01:19:22,923 [main:194] - Type params = []
2021-03-12 01:19:23,129 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 01:19:23,326 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:19:23,331 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:19:23,716 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 01:19:23,900 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:19:23,905 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:19:24,492 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 01:19:24,744 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:19:24,749 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:19:25,428 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-12 01:19:25,630 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:19:25,636 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:19:26,226 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 14
2021-03-12 01:19:26,410 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:19:26,416 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:19:27,005 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 17
2021-03-12 01:19:27,005 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:19:27,005 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:19:27,005 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:19:27,006 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:19:27,006 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:19:27,025 [main:106] - GETTING String from Boolean
2021-03-12 01:19:27,037 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@491e892a], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:19:27,037 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@491e892a]
2021-03-12 01:19:27,208 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:19:27,212 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:19:27,384 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:27,388 [main:117] - GENERATED CALL = (Kla5().prope5).compareTo(true).toString(-847167637)
2021-03-12 01:19:27,388 [main:114] - replacement of prope8 of type String is (Kla5().prope5).compareTo(true).toString(-847167637)
2021-03-12 01:19:27,562 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:19:27,562 [main:66] - Compilation checking started
2021-03-12 01:19:28,089 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {(Kla5().prope5).compareTo(true).toString(-847167637)+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = "";
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || (prope2).isEmpty()) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:19:28,090 [main:107] - replacing ("", String)
2021-03-12 01:19:28,091 [main:50] - replacing "" String
2021-03-12 01:19:28,091 [main:54] - Getting value of type String
2021-03-12 01:19:28,262 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:28,266 [main:58] - GENERATED VALUE OF TYPE String = "jhxyj"
2021-03-12 01:19:28,266 [main:61] - GENERATED IS CALL =false
2021-03-12 01:19:28,460 [main:67] - randomType = Double
2021-03-12 01:19:28,630 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:19:28,669 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@61bfcf43]
2021-03-12 01:19:28,670 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a82138]
2021-03-12 01:19:28,840 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:28,845 [main:78] - Generated call from random type = (0.4020756496825748).toByte().toString(-1492157493)
2021-03-12 01:19:28,845 [main:114] - replacement of "" of type String is (0.4020756496825748).toByte().toString(-1492157493)
2021-03-12 01:19:29,014 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:19:29,015 [main:66] - Compilation checking started
2021-03-12 01:19:29,760 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || (prope2).isEmpty()) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:19:29,762 [main:107] - replacing (prope14, String)
2021-03-12 01:19:29,763 [main:50] - replacing prope14 String
2021-03-12 01:19:29,763 [main:54] - Getting value of type String
2021-03-12 01:19:29,973 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:29,977 [main:58] - GENERATED VALUE OF TYPE String = "jrrdk"
2021-03-12 01:19:29,977 [main:61] - GENERATED IS CALL =false
2021-03-12 01:19:30,175 [main:67] - randomType = Double
2021-03-12 01:19:30,352 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:19:30,439 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2c87e895]
2021-03-12 01:19:30,439 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]
2021-03-12 01:19:30,440 [main:78] - Generated call from random type = (0.7700234943510759).toChar().titlecase()
2021-03-12 01:19:30,441 [main:106] - GETTING String from A
2021-03-12 01:19:30,447 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d9973a9]]
2021-03-12 01:19:30,447 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:19:30,621 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:30,625 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d9973a9]
2021-03-12 01:19:30,800 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:19:30,805 [main:117] - GENERATED CALL = (a).map("lokdc").substringAfter('⢰', A("jmkiq").map())
2021-03-12 01:19:30,805 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]]
2021-03-12 01:19:30,806 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:19:30,985 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:30,991 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]
2021-03-12 01:19:31,162 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:19:31,166 [main:117] - GENERATED CALL = (a).map("bckca").replaceBeforeLast('艔', Kla0("qhnah").component2(), stub({ "lkuci"}))
2021-03-12 01:19:31,166 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]]
2021-03-12 01:19:31,166 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:19:31,167 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]
2021-03-12 01:19:31,339 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:31,343 [main:117] - GENERATED CALL = (a).map((s.map(a::map)).get(1466108888)).prependIndent("nwocw")
2021-03-12 01:19:31,343 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e61f45]]
2021-03-12 01:19:31,343 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:19:31,344 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e61f45]
2021-03-12 01:19:31,518 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:19:31,718 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:31,724 [main:117] - GENERATED CALL = (a).map(A("jmkiq").z).replaceBefore('젙', A("jmkiq").z, "whqbi")
2021-03-12 01:19:31,724 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]]
2021-03-12 01:19:31,724 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:19:31,724 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]
2021-03-12 01:19:31,724 [main:117] - GENERATED CALL = (a).map(var prope2 =.lowercase()
2021-03-12 01:19:31,724 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a471dbf]]
2021-03-12 01:19:31,724 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:19:31,724 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a471dbf]
2021-03-12 01:19:31,921 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:19:32,100 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:32,104 [main:117] - GENERATED CALL = (a).map(stub({ "lkuci"})).substringBefore('몶', "smdze")
2021-03-12 01:19:32,105 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706fa500]]
2021-03-12 01:19:32,105 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:19:32,105 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706fa500]
2021-03-12 01:19:32,282 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:19:32,286 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:19:32,290 [main:117] - GENERATED CALL = (a).map(stub({ "lkuci"})).takeWhile({a: Char -> false})
2021-03-12 01:19:32,290 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]]
2021-03-12 01:19:32,290 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:19:32,290 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]
2021-03-12 01:19:32,470 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:19:32,474 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:19:32,478 [main:117] - GENERATED CALL = (a).map(prope2).dropWhile({a: Char -> true})
2021-03-12 01:19:32,478 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]]
2021-03-12 01:19:32,478 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:19:32,478 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]
2021-03-12 01:19:32,657 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:19:32,665 [main:117] - GENERATED CALL = (a).map(prope2).removeSurrounding("wfwqi")
2021-03-12 01:19:32,665 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]]
2021-03-12 01:19:32,665 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:19:32,665 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]
2021-03-12 01:19:32,835 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:32,840 [main:117] - GENERATED CALL = (a).map(var prope2 =.drop(-981468556)
2021-03-12 01:19:32,840 [main:114] - replacement of prope14 of type String is (a).map(stub({ "lkuci"})).takeWhile({a: Char -> false})
2021-03-12 01:19:33,011 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:19:33,011 [main:66] - Compilation checking started
2021-03-12 01:19:33,518 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    (a).map(stub({ "lkuci"})).takeWhile({a: Char -> false}) = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || (prope2).isEmpty()) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:19:33,519 [main:107] - replacing ((Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false, Boolean)
2021-03-12 01:19:33,520 [main:50] - replacing (Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false Boolean
2021-03-12 01:19:33,520 [main:54] - Getting value of type Boolean
2021-03-12 01:19:33,693 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:19:33,697 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 01:19:33,697 [main:61] - GENERATED IS CALL =false
2021-03-12 01:19:39,807 [main:67] - randomType = Map<Long, MutableMap<Function1<ULong?, Function2<MutableMap<Long, Boolean?>, Char, HashMap<Kla0, Pair<Char, Function2<ULong, Kla3<Map<Kla3<Double?>, LinkedHashMap<Function1<Function2<Kla2?, ULong, Boolean>, Kla5>, Short>>>, Sequence<UInt?>>>?>>>, Float>>
2021-03-12 01:19:39,808 [main:106] - GETTING Boolean from String
2021-03-12 01:19:39,835 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@627aa921]]
2021-03-12 01:19:39,836 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:19:40,006 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:40,011 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@627aa921]
2021-03-12 01:19:40,011 [main:117] - GENERATED CALL = (A("jmkiq").z).get(77668943).isLetterOrDigit()
2021-03-12 01:19:40,011 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79c9f253]]
2021-03-12 01:19:40,011 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79c9f253]
2021-03-12 01:19:40,185 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:40,189 [main:117] - GENERATED CALL = (A("jmkiq").z).hasSurrogatePairAt(-1269550238)
2021-03-12 01:19:40,189 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@176a8a]]
2021-03-12 01:19:40,189 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@176a8a]
2021-03-12 01:19:40,360 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:40,536 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:19:40,715 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:19:40,720 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:19:41,095 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:19:41,099 [main:95] - GENERATED = StringBuilder(1978148260)
2021-03-12 01:19:41,271 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:41,449 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:41,453 [main:117] - GENERATED CALL = (A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)
2021-03-12 01:19:41,453 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e9e12a5]]
2021-03-12 01:19:41,454 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e9e12a5]
2021-03-12 01:19:41,625 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:19:41,629 [main:117] - GENERATED CALL = (A("jmkiq").z).contains('⧾', Kla5().prope5)
2021-03-12 01:19:41,629 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5421c076]]
2021-03-12 01:19:41,629 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:19:41,845 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:42,025 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:42,030 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5421c076]
2021-03-12 01:19:42,201 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 01:19:42,378 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 01:19:42,383 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 01:19:42,759 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:19:42,764 [main:95] - GENERATED = Regex("pgmen")
2021-03-12 01:19:42,764 [main:117] - GENERATED CALL = (A("jmkiq").z).subSequence(-1324202000, 1057294686).matches(Regex("pgmen"))
2021-03-12 01:19:42,764 [main:113] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24bfea79]]
2021-03-12 01:19:42,764 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24bfea79]
2021-03-12 01:19:42,936 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:42,940 [main:117] - GENERATED CALL = (A("jmkiq").z).matches("eeomb")
2021-03-12 01:19:42,940 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@388bb1cd]]
2021-03-12 01:19:42,940 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@388bb1cd]
2021-03-12 01:19:42,940 [main:117] - GENERATED CALL = (A("jmkiq").z).toBoolean()
2021-03-12 01:19:42,941 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]]
2021-03-12 01:19:42,941 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]
2021-03-12 01:19:42,941 [main:117] - GENERATED CALL = (A("jmkiq").z).equals(Kla2().prope2)
2021-03-12 01:19:42,941 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@550cc78c]]
2021-03-12 01:19:42,941 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@550cc78c]
2021-03-12 01:19:42,941 [main:117] - GENERATED CALL = (A("jmkiq").z).endsWith(stub({ "lkuci"}), Kla5().prope5)
2021-03-12 01:19:42,941 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bd4a13]]
2021-03-12 01:19:42,941 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72bd4a13]
2021-03-12 01:19:43,113 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:19:43,117 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:19:43,121 [main:117] - GENERATED CALL = (A("jmkiq").z).all({a: Char -> true})
2021-03-12 01:19:43,121 [main:114] - replacement of (Kla0("qhnah").component2()).subSequence(808575268, -1336420683).matches(Regex("vocdw")) || false of type Boolean is (A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)
2021-03-12 01:19:43,292 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:19:43,292 [main:66] - Compilation checking started
2021-03-12 01:19:44,052 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || (prope2).isEmpty()) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:19:44,053 [main:107] - replacing (prope8, String)
2021-03-12 01:19:44,054 [main:50] - replacing prope8 String
2021-03-12 01:19:44,054 [main:54] - Getting value of type String
2021-03-12 01:19:44,229 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:44,233 [main:58] - GENERATED VALUE OF TYPE String = "ebwds"
2021-03-12 01:19:44,234 [main:61] - GENERATED IS CALL =false
2021-03-12 01:19:44,250 [main:67] - randomType = Kla1
2021-03-12 01:19:44,427 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 01:19:44,431 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-12 01:19:44,604 [main:194] - Type params = []
2021-03-12 01:19:44,777 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 01:19:44,961 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:19:44,967 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:19:45,384 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 01:19:45,568 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:19:45,573 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:19:46,165 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 01:19:46,350 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:19:46,355 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:19:46,956 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-12 01:19:47,139 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:19:47,145 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:19:47,828 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 14
2021-03-12 01:19:48,013 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:19:48,018 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:19:48,612 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:19:48,612 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:19:48,612 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:19:48,612 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:19:48,612 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:19:48,632 [main:106] - GETTING String from CoroutineContext
2021-03-12 01:19:48,641 [main:106] - GETTING String from String
2021-03-12 01:19:48,671 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]]
2021-03-12 01:19:48,671 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]
2021-03-12 01:19:48,871 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:19:48,879 [main:117] - GENERATED CALL = (A("jmkiq").map()).removeSurrounding("hibmt")
2021-03-12 01:19:48,879 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]]
2021-03-12 01:19:48,879 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:19:49,053 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:49,057 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]
2021-03-12 01:19:49,058 [main:117] - GENERATED CALL = (A("jmkiq").map()).get(-687396224).titlecase()
2021-03-12 01:19:49,058 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]]
2021-03-12 01:19:49,058 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]
2021-03-12 01:19:49,229 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:49,234 [main:117] - GENERATED CALL = (A("jmkiq").map()).take(-1370511465)
2021-03-12 01:19:49,234 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]]
2021-03-12 01:19:49,234 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]
2021-03-12 01:19:49,407 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:19:49,582 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:49,587 [main:117] - GENERATED CALL = (A("jmkiq").map()).replaceAfter('鿟', "rdlke", A("jmkiq").z)
2021-03-12 01:19:49,587 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52806f8a]]
2021-03-12 01:19:49,587 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52806f8a]
2021-03-12 01:19:49,759 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:49,764 [main:117] - GENERATED CALL = (A("jmkiq").map()).trimMargin("llglf")
2021-03-12 01:19:49,764 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]]
2021-03-12 01:19:49,764 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]
2021-03-12 01:19:49,936 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:19:49,936 [main:117] - GENERATED CALL = (A("jmkiq").map()).plus("fvuzk")
2021-03-12 01:19:49,936 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d3514e]]
2021-03-12 01:19:49,936 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d3514e]
2021-03-12 01:19:49,936 [main:117] - GENERATED CALL = (A("jmkiq").map()).toLowerCase()
2021-03-12 01:19:49,936 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]]
2021-03-12 01:19:49,936 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:19:50,109 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:50,285 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:50,289 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]
2021-03-12 01:19:50,461 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:19:50,639 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:19:50,644 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:19:51,017 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:19:51,021 [main:95] - GENERATED = StringBuilder("qnilh")
2021-03-12 01:19:51,022 [main:117] - GENERATED CALL = (A("jmkiq").map()).subSequence(685540177, 2032488310).commonPrefixWith(StringBuilder("qnilh"), Kla5().prope5)
2021-03-12 01:19:51,022 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ed1eadc]]
2021-03-12 01:19:51,022 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ed1eadc]
2021-03-12 01:19:51,197 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:19:51,201 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:19:51,205 [main:117] - GENERATED CALL = (A("jmkiq").map()).filter({a: Char -> true})
2021-03-12 01:19:51,205 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]]
2021-03-12 01:19:51,205 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]
2021-03-12 01:19:51,379 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:19:51,383 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:19:51,387 [main:117] - GENERATED CALL = (A("jmkiq").map()).filterNot({a: Char -> true})
2021-03-12 01:19:51,387 [main:114] - replacement of prope8 of type String is (A("jmkiq").map()).removeSurrounding("hibmt")
2021-03-12 01:19:51,558 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:19:51,558 [main:66] - Compilation checking started
2021-03-12 01:19:52,078 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    (A("jmkiq").map()).removeSurrounding("hibmt") = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = {prope8+="0_"; prope12}())
    if (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || (prope2).isEmpty()) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:19:52,079 [main:107] - replacing (prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || (prope2).isEmpty(), Boolean)
2021-03-12 01:19:52,080 [main:50] - replacing prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || (prope2).isEmpty() Boolean
2021-03-12 01:19:52,080 [main:54] - Getting value of type Boolean
2021-03-12 01:19:52,252 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:19:52,256 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 01:19:52,256 [main:61] - GENERATED IS CALL =false
2021-03-12 01:19:52,459 [main:67] - randomType = Kla6
2021-03-12 01:19:52,629 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 01:19:52,633 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}
2021-03-12 01:19:52,660 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla6[DeserializedSimpleFunctionDescriptor@13af314]
2021-03-12 01:19:52,660 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c479748]
2021-03-12 01:19:52,661 [main:78] - Generated call from random type = (Kla6).equals(Kla2().prope2).equals(Kla2().prope2)
2021-03-12 01:19:52,662 [main:106] - GETTING Boolean from A
2021-03-12 01:19:52,668 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@15671e9a], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14ca80b4]]
2021-03-12 01:19:52,668 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@15671e9a]
2021-03-12 01:19:52,668 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14ca80b4]
2021-03-12 01:19:52,669 [main:117] - GENERATED CALL = (a).equals(Kla2().prope2).not()
2021-03-12 01:19:52,669 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@15671e9a]]
2021-03-12 01:19:52,669 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@15671e9a]
2021-03-12 01:19:52,669 [main:117] - GENERATED CALL = (a).equals(Kla2().prope2)
2021-03-12 01:19:52,669 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24bfea79]]
2021-03-12 01:19:52,669 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:19:52,841 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:52,846 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24bfea79]
2021-03-12 01:19:53,017 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:53,021 [main:117] - GENERATED CALL = (a).map("fagjl").matches("nnkcd")
2021-03-12 01:19:53,022 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@550cc78c]]
2021-03-12 01:19:53,022 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:19:53,022 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@550cc78c]
2021-03-12 01:19:53,197 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:53,201 [main:117] - GENERATED CALL = (a).map(stub({ "lkuci"})).endsWith("wishl", Kla5().prope5)
2021-03-12 01:19:53,202 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a1bce3]]
2021-03-12 01:19:53,202 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:19:53,202 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a1bce3]
2021-03-12 01:19:53,202 [main:117] - GENERATED CALL = (a).map(Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)
2021-03-12 01:19:53,202 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@15671e9a], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3df8a0d8]]
2021-03-12 01:19:53,202 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@15671e9a]
2021-03-12 01:19:53,374 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:19:53,374 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3df8a0d8]
2021-03-12 01:19:53,375 [main:117] - GENERATED CALL = (a).equals("khxgp").and(Kla5().prope5)
2021-03-12 01:19:53,375 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@388bb1cd]]
2021-03-12 01:19:53,375 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:19:53,375 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@388bb1cd]
2021-03-12 01:19:53,375 [main:117] - GENERATED CALL = (a).map((s.map(a::map)).get(1466108888)).toBoolean()
2021-03-12 01:19:53,375 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@15671e9a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c479748]]
2021-03-12 01:19:53,375 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@15671e9a]
2021-03-12 01:19:53,375 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c479748]
2021-03-12 01:19:53,376 [main:117] - GENERATED CALL = (a).equals(Kla2().prope2).equals(Kla2().prope2)
2021-03-12 01:19:53,376 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]]
2021-03-12 01:19:53,376 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:19:53,376 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@57358e33]
2021-03-12 01:19:53,376 [main:117] - GENERATED CALL = (a).map(A("jmkiq").map()).equals(Kla2().prope2)
2021-03-12 01:19:53,376 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@15671e9a], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]]
2021-03-12 01:19:53,376 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@15671e9a]
2021-03-12 01:19:53,376 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29a00cde]
2021-03-12 01:19:53,376 [main:117] - GENERATED CALL = (a).equals(Kla2().prope2).or(Kla5().prope5)
2021-03-12 01:19:53,376 [main:114] - replacement of prope8 != ((s.map(a::map)).get(1466108888)).compareTo(Kla0("qhnah").o).toString(447887435) || (prope2).isEmpty() of type Boolean is (a).equals(Kla2().prope2)
2021-03-12 01:19:53,590 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:19:53,590 [main:66] - Compilation checking started
2021-03-12 01:19:54,305 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = {prope8+="0_"; prope12}())
    if ((a).equals(Kla2().prope2)) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:19:54,307 [main:107] - replacing ({prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11}, Function0<Long>)
2021-03-12 01:19:54,308 [main:50] - replacing {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11} Function0<Long>
2021-03-12 01:19:54,308 [main:54] - Getting value of type Function0<Long>
2021-03-12 01:19:54,480 [main:302] - generating value of type = Function0<Long> false depth = 0
2021-03-12 01:19:54,484 [main:302] - generating value of type = Long true depth = 1
2021-03-12 01:19:54,487 [main:58] - GENERATED VALUE OF TYPE Function0<Long> = { -1378474260491898588}
2021-03-12 01:19:54,487 [main:61] - GENERATED IS CALL =false
2021-03-12 01:19:54,678 [main:67] - randomType = Short
2021-03-12 01:19:54,845 [main:302] - generating value of type = Short true depth = 0
2021-03-12 01:19:54,899 [main:106] - GETTING Function0<Long> from String
2021-03-12 01:19:54,926 [main:106] - GETTING Function0<Long> from Continuation<Any?>
2021-03-12 01:19:54,936 [main:106] - GETTING Function0<Long> from Any?
2021-03-12 01:19:54,941 [main:106] - GETTING Function0<Long> from Array<String>
2021-03-12 01:19:54,957 [main:106] - GETTING Function0<Long> from CoroutineContext
2021-03-12 01:19:54,967 [main:106] - GETTING Function0<Long> from String
2021-03-12 01:19:54,968 [main:106] - GETTING Function0<Long> from Function0<Unit>
2021-03-12 01:19:54,981 [main:106] - GETTING Function0<Long> from CoroutineContext
2021-03-12 01:19:54,982 [main:106] - GETTING Function0<Long> from String
2021-03-12 01:19:54,983 [main:106] - GETTING Function0<Long> from String
2021-03-12 01:19:54,984 [main:106] - GETTING Function0<Long> from String
2021-03-12 01:19:54,985 [main:106] - GETTING Function0<Long> from CoroutineContext
2021-03-12 01:19:54,986 [main:106] - GETTING Function0<Long> from List<String>
2021-03-12 01:19:55,027 [main:106] - GETTING Function0<Long> from Boolean
2021-03-12 01:19:55,041 [main:106] - GETTING Function0<Long> from String
2021-03-12 01:19:55,042 [main:106] - GETTING Function0<Long> from Continuation<Int>
2021-03-12 01:19:55,052 [main:106] - GETTING Function0<Long> from EmptyCoroutineContext
2021-03-12 01:19:55,075 [main:106] - GETTING Function0<Long> from List<String>
2021-03-12 01:19:55,077 [main:106] - GETTING Function0<Long> from String
2021-03-12 01:19:55,078 [main:106] - GETTING Function0<Long> from A
2021-03-12 01:19:55,083 [main:114] - replacement of {prope8 += ((s.map(a::map))).get(-761333615).trimIndent(); prope11} of type Function0<Long> is { -1378474260491898588}
2021-03-12 01:19:55,253 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:19:55,254 [main:66] - Compilation checking started
2021-03-12 01:19:55,966 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $prope14 != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = { -1378474260491898588}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = {prope8+="0_"; prope12}())
    if ((a).equals(Kla2().prope2)) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:19:55,967 [main:107] - replacing (prope14, String)
2021-03-12 01:19:55,968 [main:50] - replacing prope14 String
2021-03-12 01:19:55,968 [main:54] - Getting value of type String
2021-03-12 01:19:56,135 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:56,139 [main:58] - GENERATED VALUE OF TYPE String = "dalwz"
2021-03-12 01:19:56,139 [main:61] - GENERATED IS CALL =false
2021-03-12 01:19:56,147 [main:67] - randomType = Int
2021-03-12 01:19:56,313 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:56,367 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:19:56,530 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:56,534 [main:78] - Generated call from random type = (1953556099).toString(641522270)
2021-03-12 01:19:56,534 [main:114] - replacement of prope14 of type String is (1953556099).toString(641522270)
2021-03-12 01:19:56,697 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:19:56,698 [main:66] - Compilation checking started
2021-03-12 01:19:57,408 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $(1953556099).toString(641522270) != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = fu11(b = { -1378474260491898588}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}())
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = {prope8+="0_"; prope12}())
    if ((a).equals(Kla2().prope2)) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:19:57,409 [main:107] - replacing (fu11(b = { -1378474260491898588}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}()), String)
2021-03-12 01:19:57,410 [main:50] - replacing fu11(b = { -1378474260491898588}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}()) String
2021-03-12 01:19:57,410 [main:54] - Getting value of type String
2021-03-12 01:19:57,578 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:19:57,582 [main:58] - GENERATED VALUE OF TYPE String = "qtajw"
2021-03-12 01:19:57,582 [main:61] - GENERATED IS CALL =false
2021-03-12 01:19:57,590 [main:67] - randomType = Long
2021-03-12 01:19:57,764 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:19:57,815 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@6f664ab3]
2021-03-12 01:19:57,815 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@779dda8c]
2021-03-12 01:19:57,816 [main:78] - Generated call from random type = (-5990187861497844318).toChar().plus(var prope2 =
2021-03-12 01:19:57,816 [main:106] - GETTING String from String
2021-03-12 01:19:57,843 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]]
2021-03-12 01:19:57,843 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:19:58,016 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:58,183 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:58,187 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]
2021-03-12 01:19:58,351 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:19:58,520 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:19:58,526 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:19:58,881 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:19:58,886 [main:95] - GENERATED = StringBuilder("umhyh")
2021-03-12 01:19:59,049 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:19:59,053 [main:117] - GENERATED CALL = (stub({ "lkuci"})).subSequence(1736643200, -1176527270).commonSuffixWith(StringBuilder("umhyh"), true)
2021-03-12 01:19:59,053 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@573137a1]]
2021-03-12 01:19:59,054 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@573137a1]
2021-03-12 01:19:59,054 [main:117] - GENERATED CALL = (stub({ "lkuci"})).trim()
2021-03-12 01:19:59,054 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]]
2021-03-12 01:19:59,054 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:19:59,220 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:59,386 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:59,391 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]
2021-03-12 01:19:59,596 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:19:59,600 [main:117] - GENERATED CALL = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
2021-03-12 01:19:59,600 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d3514e]]
2021-03-12 01:19:59,600 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73d3514e]
2021-03-12 01:19:59,600 [main:117] - GENERATED CALL = (stub({ "lkuci"})).toLowerCase()
2021-03-12 01:19:59,600 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]]
2021-03-12 01:19:59,600 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7193a4d9]
2021-03-12 01:19:59,768 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:19:59,772 [main:117] - GENERATED CALL = (stub({ "lkuci"})).replaceAfter('?', (s.map(a::map)).get(1466108888), var prope2 =
2021-03-12 01:19:59,772 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]]
2021-03-12 01:19:59,772 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]
2021-03-12 01:19:59,773 [main:117] - GENERATED CALL = (stub({ "lkuci"})).trimIndent()
2021-03-12 01:19:59,773 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]]
2021-03-12 01:19:59,773 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]
2021-03-12 01:19:59,943 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:19:59,950 [main:117] - GENERATED CALL = (stub({ "lkuci"})).commonSuffixWith("rlyjc", Kla5().prope5)
2021-03-12 01:19:59,950 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]]
2021-03-12 01:19:59,950 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]
2021-03-12 01:19:59,950 [main:117] - GENERATED CALL = (stub({ "lkuci"})).lowercase()
2021-03-12 01:19:59,950 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]]
2021-03-12 01:19:59,950 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]
2021-03-12 01:20:00,120 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:00,125 [main:117] - GENERATED CALL = (stub({ "lkuci"})).repeat(-1776698919)
2021-03-12 01:20:00,125 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]]
2021-03-12 01:20:00,126 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:20:00,297 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:00,463 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:00,467 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]
2021-03-12 01:20:00,630 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:00,796 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:00,801 [main:117] - GENERATED CALL = (stub({ "lkuci"})).subSequence(-1459762204, -978092236).substring(-500072880, 1512758360)
2021-03-12 01:20:00,801 [main:114] - replacement of fu11(b = { -1378474260491898588}(), c = { "jsiof"}, a = {prope8+=(stub({ "lkuci"})).removeSurrounding("pukql"); prope12}()) of type String is (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
2021-03-12 01:20:00,971 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:20:00,972 [main:66] - Compilation checking started
2021-03-12 01:20:01,660 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $(1953556099).toString(641522270) != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = {prope8+="0_"; prope12}())
    if ((a).equals(Kla2().prope2)) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = "";
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:20:01,662 [main:107] - replacing ("", String)
2021-03-12 01:20:01,662 [main:50] - replacing "" String
2021-03-12 01:20:01,662 [main:54] - Getting value of type String
2021-03-12 01:20:01,827 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:01,831 [main:58] - GENERATED VALUE OF TYPE String = "ozrpg"
2021-03-12 01:20:01,832 [main:61] - GENERATED IS CALL =false
2021-03-12 01:20:02,589 [main:67] - randomType = Kla3<Set<UInt>>?
2021-03-12 01:20:02,749 [main:302] - generating value of type = Kla3<Set<UInt>> false depth = 0
2021-03-12 01:20:02,753 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 01:20:03,293 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-12 01:20:03,297 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}
2021-03-12 01:20:03,319 [main:106] - GETTING String from String
2021-03-12 01:20:03,344 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]]
2021-03-12 01:20:03,344 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]
2021-03-12 01:20:03,505 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:03,509 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).take(1343884221)
2021-03-12 01:20:03,510 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]]
2021-03-12 01:20:03,510 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]
2021-03-12 01:20:03,670 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:03,835 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:03,839 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).replace('ꂪ', '⺮', Kla5().prope5)
2021-03-12 01:20:03,839 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]]
2021-03-12 01:20:03,839 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]
2021-03-12 01:20:03,998 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:04,163 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:04,167 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).replaceFirst('ԟ', '?', Kla5().prope5)
2021-03-12 01:20:04,167 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507f736]]
2021-03-12 01:20:04,167 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507f736]
2021-03-12 01:20:04,327 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:04,490 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:04,494 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).removeRange(-1265107101, 570395322)
2021-03-12 01:20:04,494 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]]
2021-03-12 01:20:04,494 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]
2021-03-12 01:20:04,654 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:20:04,819 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:20:04,824 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:20:05,171 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 01:20:05,179 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-12 01:20:05,179 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).removePrefix(StringBuilder(StringBuilder()))
2021-03-12 01:20:05,180 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@404181f8]]
2021-03-12 01:20:05,180 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@404181f8]
2021-03-12 01:20:05,339 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:20:05,547 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:20:05,552 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:20:05,898 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:20:05,903 [main:95] - GENERATED = StringBuilder(-39803469)
2021-03-12 01:20:05,903 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).removeSuffix(StringBuilder(-39803469))
2021-03-12 01:20:05,903 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@797c3840]]
2021-03-12 01:20:05,903 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@797c3840]
2021-03-12 01:20:05,903 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).decapitalize()
2021-03-12 01:20:05,904 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]]
2021-03-12 01:20:05,904 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]
2021-03-12 01:20:06,064 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:06,069 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).replaceIndentByMargin("pyryq", var prope2 =
2021-03-12 01:20:06,069 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]]
2021-03-12 01:20:06,069 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]
2021-03-12 01:20:06,229 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:20:06,236 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5)
2021-03-12 01:20:06,236 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:20:06,236 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:20:06,396 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:06,400 [main:117] - GENERATED CALL = (Kla0("qhnah").component2()).length.toString(-892803246)
2021-03-12 01:20:06,400 [main:114] - replacement of "" of type String is (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5)
2021-03-12 01:20:06,560 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:20:06,561 [main:66] - Compilation checking started
2021-03-12 01:20:07,248 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $(1953556099).toString(641522270) != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = {prope8+="0_"; prope12}())
    if ((a).equals(Kla2().prope2)) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:20:07,250 [main:107] - replacing (prope14, String)
2021-03-12 01:20:07,250 [main:50] - replacing prope14 String
2021-03-12 01:20:07,250 [main:54] - Getting value of type String
2021-03-12 01:20:07,414 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:07,418 [main:58] - GENERATED VALUE OF TYPE String = "mhmsy"
2021-03-12 01:20:07,418 [main:61] - GENERATED IS CALL =false
2021-03-12 01:20:07,615 [main:67] - randomType = Set<Byte>
2021-03-12 01:20:07,615 [main:106] - GETTING String from String
2021-03-12 01:20:07,642 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@454d6062]]
2021-03-12 01:20:07,643 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@454d6062]
2021-03-12 01:20:07,643 [main:117] - GENERATED CALL = (A("jmkiq").map()).reversed()
2021-03-12 01:20:07,643 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a16d90e]]
2021-03-12 01:20:07,643 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a16d90e]
2021-03-12 01:20:07,807 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:07,812 [main:117] - GENERATED CALL = (A("jmkiq").map()).concat("wihos")
2021-03-12 01:20:07,812 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e632037]]
2021-03-12 01:20:07,812 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e632037]
2021-03-12 01:20:07,812 [main:117] - GENERATED CALL = (A("jmkiq").map()).uppercase()
2021-03-12 01:20:07,812 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]]
2021-03-12 01:20:07,812 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]
2021-03-12 01:20:07,976 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:20:07,983 [main:117] - GENERATED CALL = (A("jmkiq").map()).removeSurrounding("ttdyt")
2021-03-12 01:20:07,983 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]]
2021-03-12 01:20:07,983 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]
2021-03-12 01:20:08,142 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:08,304 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:08,467 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:20:08,472 [main:117] - GENERATED CALL = (A("jmkiq").map()).replace('꾭', '怵', false)
2021-03-12 01:20:08,472 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52806f8a]]
2021-03-12 01:20:08,472 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52806f8a]
2021-03-12 01:20:08,631 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:08,635 [main:117] - GENERATED CALL = (A("jmkiq").map()).trimMargin("rgynx")
2021-03-12 01:20:08,635 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]]
2021-03-12 01:20:08,636 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]
2021-03-12 01:20:08,797 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:20:08,801 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:20:08,805 [main:117] - GENERATED CALL = (A("jmkiq").map()).dropLastWhile({a: Char -> false})
2021-03-12 01:20:08,805 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]]
2021-03-12 01:20:08,805 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:20:08,967 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:08,971 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]
2021-03-12 01:20:08,971 [main:117] - GENERATED CALL = (A("jmkiq").map()).get(-779850121).titlecase()
2021-03-12 01:20:08,972 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507f736]]
2021-03-12 01:20:08,972 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507f736]
2021-03-12 01:20:09,131 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:09,295 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:09,299 [main:117] - GENERATED CALL = (A("jmkiq").map()).removeRange(1226034081, 1894061443)
2021-03-12 01:20:09,299 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@797c3840]]
2021-03-12 01:20:09,299 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@797c3840]
2021-03-12 01:20:09,299 [main:117] - GENERATED CALL = (A("jmkiq").map()).decapitalize()
2021-03-12 01:20:09,299 [main:114] - replacement of prope14 of type String is (A("jmkiq").map()).dropLastWhile({a: Char -> false})
2021-03-12 01:20:09,459 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:20:09,460 [main:66] - Compilation checking started
2021-03-12 01:20:09,931 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $(1953556099).toString(641522270) != $(s.map(a::map)).get(1466108888)"

    prope8 = "";
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    (A("jmkiq").map()).dropLastWhile({a: Char -> false}) = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = {prope8+="0_"; prope12}())
    if ((a).equals(Kla2().prope2)) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:20:09,933 [main:107] - replacing ("", String)
2021-03-12 01:20:09,933 [main:50] - replacing "" String
2021-03-12 01:20:09,933 [main:54] - Getting value of type String
2021-03-12 01:20:10,116 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:10,122 [main:58] - GENERATED VALUE OF TYPE String = "zzkng"
2021-03-12 01:20:10,122 [main:61] - GENERATED IS CALL =false
2021-03-12 01:20:10,140 [main:67] - randomType = Kla0
2021-03-12 01:20:10,325 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 01:20:10,330 [main:112] - generating klass Kla0 text = data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}
2021-03-12 01:20:10,517 [main:194] - Type params = []
2021-03-12 01:20:10,698 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:20:10,711 [main:149] - GENERATING call of type public final operator fun component2(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@24beb48c]
2021-03-12 01:20:10,711 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507f736]
2021-03-12 01:20:10,895 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:11,082 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:11,088 [main:78] - Generated call from random type = (Kla0("mvmxv")).component2().removeRange(1203699786, 2071169199)
2021-03-12 01:20:11,089 [main:106] - GETTING String from Function0<Unit>
2021-03-12 01:20:11,103 [main:106] - GETTING String from String
2021-03-12 01:20:11,131 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@454d6062]]
2021-03-12 01:20:11,131 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@454d6062]
2021-03-12 01:20:11,132 [main:117] - GENERATED CALL = (A("jmkiq").z).reversed()
2021-03-12 01:20:11,132 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@779dda8c]]
2021-03-12 01:20:11,132 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:20:11,316 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:11,320 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@779dda8c]
2021-03-12 01:20:11,320 [main:117] - GENERATED CALL = (A("jmkiq").z).get(-1608576763).plus(var prope2 =
2021-03-12 01:20:11,321 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]]
2021-03-12 01:20:11,321 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]
2021-03-12 01:20:11,321 [main:117] - GENERATED CALL = (A("jmkiq").z).replaceIndentByMargin(Kla0("qhnah").o, A("jmkiq").z)
2021-03-12 01:20:11,321 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]]
2021-03-12 01:20:11,321 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]
2021-03-12 01:20:11,487 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:11,693 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:11,697 [main:117] - GENERATED CALL = (A("jmkiq").z).replaceFirst('ᎎ', 'ퟘ', Kla5().prope5)
2021-03-12 01:20:11,697 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ed1eadc]]
2021-03-12 01:20:11,697 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ed1eadc]
2021-03-12 01:20:11,858 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:20:11,862 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:20:11,866 [main:117] - GENERATED CALL = (A("jmkiq").z).filter({a: Char -> false})
2021-03-12 01:20:11,866 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]]
2021-03-12 01:20:11,866 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]
2021-03-12 01:20:12,025 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:12,029 [main:117] - GENERATED CALL = (A("jmkiq").z).take(2093898932)
2021-03-12 01:20:12,029 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]]
2021-03-12 01:20:12,029 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:20:12,191 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:12,354 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:12,359 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18177d58]
2021-03-12 01:20:12,520 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:12,525 [main:117] - GENERATED CALL = (A("jmkiq").z).subSequence(1066910483, 1966443008).repeat(-1032252843)
2021-03-12 01:20:12,525 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]]
2021-03-12 01:20:12,525 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]
2021-03-12 01:20:12,688 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:12,857 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:12,861 [main:117] - GENERATED CALL = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5)
2021-03-12 01:20:12,861 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@809c776]]
2021-03-12 01:20:12,861 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@809c776]
2021-03-12 01:20:13,025 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 01:20:13,030 [main:302] - generating value of type = Char true depth = 1
2021-03-12 01:20:13,034 [main:117] - GENERATED CALL = (A("jmkiq").z).replaceFirstChar({a: Char -> '䓥'})
2021-03-12 01:20:13,034 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]]
2021-03-12 01:20:13,034 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:20:13,199 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:13,368 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:13,373 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b94ed26]
2021-03-12 01:20:13,540 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:20:13,547 [main:117] - GENERATED CALL = (A("jmkiq").z).subSequence(1047964609, 388411537).commonPrefixWith("tikto", Kla5().prope5)
2021-03-12 01:20:13,548 [main:114] - replacement of "" of type String is (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5)
2021-03-12 01:20:13,712 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:20:13,712 [main:66] - Compilation checking started
2021-03-12 01:20:14,426 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $(1953556099).toString(641522270) != $(s.map(a::map)).get(1466108888)"

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = {prope8+="0_"; prope12}())
    if ((a).equals(Kla2().prope2)) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:20:14,427 [main:107] - replacing ({prope8+="0_"; prope12}(), Int)
2021-03-12 01:20:14,428 [main:50] - replacing {prope8+="0_"; prope12}() Int
2021-03-12 01:20:14,428 [main:54] - Getting value of type Int
2021-03-12 01:20:14,587 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:14,591 [main:58] - GENERATED VALUE OF TYPE Int = 1723504560
2021-03-12 01:20:14,591 [main:61] - GENERATED IS CALL =false
2021-03-12 01:20:14,990 [main:67] - randomType = Kla3<HashSet<String?>>
2021-03-12 01:20:15,152 [main:302] - generating value of type = Kla3<HashSet<String?>> false depth = 0
2021-03-12 01:20:15,155 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 01:20:15,704 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-12 01:20:15,708 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}
2021-03-12 01:20:15,729 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@49800087]
2021-03-12 01:20:15,729 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@491e892a]
2021-03-12 01:20:15,729 [main:78] - Generated call from random type = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5)
2021-03-12 01:20:15,729 [main:114] - replacement of {prope8+="0_"; prope12}() of type Int is (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5)
2021-03-12 01:20:15,889 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:20:15,889 [main:66] - Compilation checking started
2021-03-12 01:20:16,568 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $(1953556099).toString(641522270) != $(s.map(a::map)).get(1466108888)"

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:20:16,569 [main:107] - replacing (prope8, String)
2021-03-12 01:20:16,570 [main:50] - replacing prope8 String
2021-03-12 01:20:16,570 [main:54] - Getting value of type String
2021-03-12 01:20:16,729 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:16,733 [main:58] - GENERATED VALUE OF TYPE String = "gndhx"
2021-03-12 01:20:16,733 [main:61] - GENERATED IS CALL =false
2021-03-12 01:20:16,916 [main:67] - randomType = ULong
2021-03-12 01:20:17,077 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 01:20:17,118 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@2afe7743]
2021-03-12 01:20:17,118 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a82138]
2021-03-12 01:20:17,279 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:17,284 [main:78] - Generated call from random type = (4033032365331972583.toULong()).toByte().toString(1125711903)
2021-03-12 01:20:17,285 [main:106] - GETTING String from Continuation<Any?>
2021-03-12 01:20:17,295 [main:106] - GETTING String from List<String>
2021-03-12 01:20:17,330 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]]
2021-03-12 01:20:17,330 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b]
2021-03-12 01:20:17,490 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:17,494 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]
2021-03-12 01:20:17,713 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:17,899 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:17,905 [main:117] - GENERATED CALL = ((s.map(a::map))).get(-1696671730).replaceFirst('툶', '雚', Kla5().prope5)
2021-03-12 01:20:17,906 [main:113] - Case = [@kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.maxByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@d03e31]]
2021-03-12 01:20:17,906 [main:149] - GENERATING call of type @kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.maxByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@d03e31]
2021-03-12 01:20:18,089 [main:302] - generating value of type = Function1<T, R> false depth = 0
2021-03-12 01:20:18,093 [main:302] - generating value of type = R false depth = 1
2021-03-12 01:20:18,311 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->Kla2): R = TODO()
2021-03-12 01:20:18,317 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->Kla2): R = TODO()
2021-03-12 01:20:18,940 [main:302] - generating value of type = Any false depth = 4
2021-03-12 01:20:18,941 [main:302] - generating value of type = Function0<Kla2> false depth = 4
2021-03-12 01:20:18,945 [main:302] - generating value of type = Kla2 false depth = 5
2021-03-12 01:20:18,948 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 01:20:18,949 [main:95] - GENERATED = synchronized<Kla2>("kzsaq", { Kla2()})
2021-03-12 01:20:18,949 [main:117] - GENERATED CALL = ((s.map(a::map))).maxByOrNull({a: T -> synchronized<Kla2>("kzsaq", { Kla2()})})
2021-03-12 01:20:18,949 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.getOrNull(index: kotlin.Int): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@655936bd]]
2021-03-12 01:20:18,949 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.getOrNull(index: kotlin.Int): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@655936bd]
2021-03-12 01:20:19,135 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:19,139 [main:117] - GENERATED CALL = ((s.map(a::map))).getOrNull(-1307192057)
2021-03-12 01:20:19,139 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]]
2021-03-12 01:20:19,139 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b]
2021-03-12 01:20:19,314 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:19,318 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]
2021-03-12 01:20:19,477 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:20:19,481 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:20:19,485 [main:117] - GENERATED CALL = ((s.map(a::map))).get(2099905262).dropWhile({a: Char -> false})
2021-03-12 01:20:19,485 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]]
2021-03-12 01:20:19,485 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b]
2021-03-12 01:20:19,644 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:19,649 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]
2021-03-12 01:20:19,807 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:19,971 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:19,975 [main:117] - GENERATED CALL = ((s.map(a::map))).get(-1950752065).substringBeforeLast('컳', "vkyqn")
2021-03-12 01:20:19,975 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4997a579]]
2021-03-12 01:20:19,975 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b]
2021-03-12 01:20:20,136 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:20,141 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4997a579]
2021-03-12 01:20:20,141 [main:117] - GENERATED CALL = ((s.map(a::map))).get(190681729).trimEnd()
2021-03-12 01:20:20,141 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.min(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@aa09e8d]]
2021-03-12 01:20:20,141 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.min(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@aa09e8d]
2021-03-12 01:20:20,141 [main:117] - GENERATED CALL = ((s.map(a::map))).min()
2021-03-12 01:20:20,141 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706fa500]]
2021-03-12 01:20:20,141 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b]
2021-03-12 01:20:20,303 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:20,307 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706fa500]
2021-03-12 01:20:20,468 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:20:20,472 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:20:20,477 [main:117] - GENERATED CALL = ((s.map(a::map))).get(1067666480).takeWhile({a: Char -> true})
2021-03-12 01:20:20,477 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.findLast(predicate: (T) -> kotlin.Boolean): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@46ae23ca]]
2021-03-12 01:20:20,477 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.findLast(predicate: (T) -> kotlin.Boolean): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@46ae23ca]
2021-03-12 01:20:20,636 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 01:20:20,640 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:20:20,644 [main:117] - GENERATED CALL = ((s.map(a::map))).findLast({a: T -> true})
2021-03-12 01:20:20,644 [main:113] - Case = [@kotlin.SinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.minOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@78ffb0ca]]
2021-03-12 01:20:20,644 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.minOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@78ffb0ca]
2021-03-12 01:20:20,644 [main:117] - GENERATED CALL = ((s.map(a::map))).minOrNull()
2021-03-12 01:20:20,644 [main:114] - replacement of prope8 of type String is "gndhx"
2021-03-12 01:20:20,803 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 01:20:20,804 [main:66] - Compilation checking started
2021-03-12 01:20:21,285 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = "1_0_9"
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $(1953556099).toString(641522270) != $(s.map(a::map)).get(1466108888)"

    "gndhx" = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:20:21,286 [main:107] - replacing ("1_0_9", String)
2021-03-12 01:20:21,287 [main:50] - replacing "1_0_9" String
2021-03-12 01:20:21,287 [main:54] - Getting value of type String
2021-03-12 01:20:21,448 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:21,452 [main:58] - GENERATED VALUE OF TYPE String = "lccle"
2021-03-12 01:20:21,452 [main:61] - GENERATED IS CALL =false
2021-03-12 01:20:22,026 [main:67] - randomType = Map<ArrayDeque<Byte>, ULong>
2021-03-12 01:20:22,027 [main:106] - GETTING String from Array<String>
2021-03-12 01:20:22,043 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0a1b3]]
2021-03-12 01:20:22,043 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:20:22,210 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:22,214 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0a1b3]
2021-03-12 01:20:22,381 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:22,547 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:22,551 [main:117] - GENERATED CALL = (s).get(1850491903).padStart(1777269842, 'ᗳ')
2021-03-12 01:20:22,551 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]]
2021-03-12 01:20:22,551 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:20:22,713 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:22,717 [main:117] - GENERATED CALL = (s).get(1637135172)
2021-03-12 01:20:22,717 [main:113] - Case = [public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5e94494e]]
2021-03-12 01:20:22,717 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5e94494e]
2021-03-12 01:20:22,876 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:20:23,043 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:20:23,215 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:20:23,382 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:23,544 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:20:23,761 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 01:20:23,765 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 01:20:23,937 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:20:23,942 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:20:24,306 [main:302] - generating value of type = Int true depth = 4
2021-03-12 01:20:24,310 [main:95] - GENERATED = StringBuilder(1502995346)
2021-03-12 01:20:24,311 [main:117] - GENERATED CALL = (s).joinToString("xjqxh", "hchnq", "xesgf", -353979450, "cbutn", {a: T -> StringBuilder(1502995346)})
2021-03-12 01:20:24,311 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]]
2021-03-12 01:20:24,311 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:20:24,470 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:24,474 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]
2021-03-12 01:20:24,634 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:24,799 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:24,803 [main:117] - GENERATED CALL = (s).get(-1662359428).replaceBeforeLast('슃', "ugaui", A("jmkiq").map())
2021-03-12 01:20:24,803 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]]
2021-03-12 01:20:24,803 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:20:24,964 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:24,968 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]
2021-03-12 01:20:25,129 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:20:25,136 [main:117] - GENERATED CALL = (s).get(-245134929).removeSurrounding("xmgiv")
2021-03-12 01:20:25,136 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e748520]]
2021-03-12 01:20:25,136 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:20:25,296 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:25,301 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e748520]
2021-03-12 01:20:25,301 [main:117] - GENERATED CALL = (s).get(-662295938).trimStart()
2021-03-12 01:20:25,302 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@573137a1]]
2021-03-12 01:20:25,302 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:20:25,464 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:25,468 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@573137a1]
2021-03-12 01:20:25,468 [main:117] - GENERATED CALL = (s).get(-552337994).trim()
2021-03-12 01:20:25,468 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e37e3ea]]
2021-03-12 01:20:25,468 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:20:25,630 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:25,634 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e37e3ea]
2021-03-12 01:20:25,793 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:25,960 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:26,123 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:20:26,131 [main:117] - GENERATED CALL = (s).get(1177301074).replaceRange(1217971799, -1958706314, "oilon")
2021-03-12 01:20:26,131 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@809c776]]
2021-03-12 01:20:26,131 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:20:26,290 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:26,295 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@809c776]
2021-03-12 01:20:26,468 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 01:20:26,473 [main:302] - generating value of type = Char true depth = 1
2021-03-12 01:20:26,477 [main:117] - GENERATED CALL = (s).get(657045559).replaceFirstChar({a: Char -> '?'})
2021-03-12 01:20:26,477 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]]
2021-03-12 01:20:26,477 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:20:26,642 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:26,647 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]
2021-03-12 01:20:26,647 [main:117] - GENERATED CALL = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
2021-03-12 01:20:26,647 [main:114] - replacement of "1_0_9" of type String is (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
2021-03-12 01:20:26,810 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:20:26,811 [main:66] - Compilation checking started
2021-03-12 01:20:27,486 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $(1953556099).toString(641522270) != $(s.map(a::map)).get(1466108888)"

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return "OK"
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:20:27,487 [main:107] - replacing ("OK", String)
2021-03-12 01:20:27,488 [main:50] - replacing "OK" String
2021-03-12 01:20:27,488 [main:54] - Getting value of type String
2021-03-12 01:20:27,647 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:27,651 [main:58] - GENERATED VALUE OF TYPE String = "uumbn"
2021-03-12 01:20:27,651 [main:61] - GENERATED IS CALL =false
2021-03-12 01:20:27,667 [main:67] - randomType = Kla1
2021-03-12 01:20:27,828 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 01:20:27,832 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-12 01:20:27,992 [main:194] - Type params = []
2021-03-12 01:20:28,155 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 01:20:28,325 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:20:28,330 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:20:28,695 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 01:20:28,866 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:20:28,871 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:20:29,439 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:20:29,439 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:20:29,459 [main:106] - GETTING String from Continuation<Int>
2021-03-12 01:20:29,467 [main:106] - GETTING String from String
2021-03-12 01:20:29,493 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]]
2021-03-12 01:20:29,493 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]
2021-03-12 01:20:29,494 [main:117] - GENERATED CALL = (prope2).plus(Kla2().prope2)
2021-03-12 01:20:29,494 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707202d1]]
2021-03-12 01:20:29,494 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707202d1]
2021-03-12 01:20:29,657 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:20:29,661 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:20:29,665 [main:117] - GENERATED CALL = (prope2).takeLastWhile({a: Char -> false})
2021-03-12 01:20:29,665 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c072050]]
2021-03-12 01:20:29,665 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c072050]
2021-03-12 01:20:29,875 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:30,040 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:30,045 [main:117] - GENERATED CALL = (prope2).replaceAfterLast('ﾜ', "jeqbu", prope2)
2021-03-12 01:20:30,045 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]]
2021-03-12 01:20:30,045 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]
2021-03-12 01:20:30,206 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:30,210 [main:117] - GENERATED CALL = (prope2).drop(1708812204)
2021-03-12 01:20:30,210 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:20:30,210 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:20:30,371 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:30,375 [main:117] - GENERATED CALL = (prope2).length.toString(1522866465)
2021-03-12 01:20:30,375 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]]
2021-03-12 01:20:30,375 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39715642]
2021-03-12 01:20:30,537 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:20:30,541 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:20:30,546 [main:117] - GENERATED CALL = (prope2).dropLastWhile({a: Char -> true})
2021-03-12 01:20:30,546 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]]
2021-03-12 01:20:30,546 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7919d904]
2021-03-12 01:20:30,546 [main:117] - GENERATED CALL = (prope2).prependIndent(Kla0("qhnah").o)
2021-03-12 01:20:30,546 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]]
2021-03-12 01:20:30,546 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]
2021-03-12 01:20:30,707 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:30,874 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:30,879 [main:117] - GENERATED CALL = (prope2).substringBeforeLast('⺥', "qzfsg")
2021-03-12 01:20:30,879 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706fa500]]
2021-03-12 01:20:30,879 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706fa500]
2021-03-12 01:20:31,041 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:20:31,045 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:20:31,049 [main:117] - GENERATED CALL = (prope2).takeWhile({a: Char -> true})
2021-03-12 01:20:31,049 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507f736]]
2021-03-12 01:20:31,049 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507f736]
2021-03-12 01:20:31,208 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:31,372 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:31,376 [main:117] - GENERATED CALL = (prope2).removeRange(1996263880, 1026921384)
2021-03-12 01:20:31,376 [main:114] - replacement of "OK" of type String is (prope2).plus(Kla2().prope2)
2021-03-12 01:20:31,536 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:20:31,536 [main:66] - Compilation checking started
2021-03-12 01:20:32,216 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $(1953556099).toString(641522270) != $(s.map(a::map)).get(1466108888)"

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:20:32,218 [main:107] - replacing (prope8, String)
2021-03-12 01:20:32,219 [main:50] - replacing prope8 String
2021-03-12 01:20:32,219 [main:54] - Getting value of type String
2021-03-12 01:20:32,395 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:32,399 [main:58] - GENERATED VALUE OF TYPE String = "udbzw"
2021-03-12 01:20:32,399 [main:61] - GENERATED IS CALL =false
2021-03-12 01:20:32,599 [main:67] - randomType = Kla6?
2021-03-12 01:20:32,772 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 01:20:32,776 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}
2021-03-12 01:20:32,805 [main:106] - GETTING String from Array<String>
2021-03-12 01:20:32,818 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]]
2021-03-12 01:20:32,819 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:20:32,979 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:32,983 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]
2021-03-12 01:20:33,144 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:33,148 [main:117] - GENERATED CALL = (s).get(-1200246371).replaceBeforeLast('哕', (s.map(a::map)).get(1466108888), stub({ "lkuci"}))
2021-03-12 01:20:33,148 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507f736]]
2021-03-12 01:20:33,149 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:20:33,309 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:33,313 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507f736]
2021-03-12 01:20:33,472 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:33,637 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:33,641 [main:117] - GENERATED CALL = (s).get(2140059548).removeRange(-415825134, 1053791403)
2021-03-12 01:20:33,641 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]]
2021-03-12 01:20:33,641 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:20:33,803 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:33,807 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d9e9a4]
2021-03-12 01:20:33,967 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:33,971 [main:117] - GENERATED CALL = (s).get(-616488713).replaceIndentByMargin(stub({ "lkuci"}), "lpfvv")
2021-03-12 01:20:33,971 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c072050]]
2021-03-12 01:20:33,971 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:20:34,132 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:34,137 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c072050]
2021-03-12 01:20:34,298 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:34,464 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:34,629 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:34,634 [main:117] - GENERATED CALL = (s).get(1188695438).replaceAfterLast('匄', "uwfoi", "maijo")
2021-03-12 01:20:34,634 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]]
2021-03-12 01:20:34,634 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:20:34,797 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:34,802 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71357e64]
2021-03-12 01:20:34,966 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:20:34,973 [main:117] - GENERATED CALL = (s).get(1564103407).removePrefix("akuaf")
2021-03-12 01:20:34,973 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]]
2021-03-12 01:20:34,973 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:20:35,138 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:35,142 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]
2021-03-12 01:20:35,305 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:35,309 [main:117] - GENERATED CALL = (s).get(954994257).dropLast(-1468429186)
2021-03-12 01:20:35,309 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]]
2021-03-12 01:20:35,309 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:20:35,469 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:35,473 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]
2021-03-12 01:20:35,635 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:35,639 [main:117] - GENERATED CALL = (s).get(-9293655).take(1438602546)
2021-03-12 01:20:35,639 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ed1eadc]]
2021-03-12 01:20:35,639 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:20:35,797 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:35,801 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ed1eadc]
2021-03-12 01:20:36,014 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:20:36,019 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:20:36,023 [main:117] - GENERATED CALL = (s).get(76095504).filter({a: Char -> false})
2021-03-12 01:20:36,023 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@797c3840]]
2021-03-12 01:20:36,023 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@2e96bdfe]
2021-03-12 01:20:36,185 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:36,189 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@797c3840]
2021-03-12 01:20:36,189 [main:117] - GENERATED CALL = (s).get(-1352562829).decapitalize()
2021-03-12 01:20:36,189 [main:113] - Case = [public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5e94494e]]
2021-03-12 01:20:36,189 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5e94494e]
2021-03-12 01:20:36,352 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:20:36,519 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:20:36,710 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:20:36,904 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:20:36,909 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:20:37,297 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:20:37,301 [main:95] - GENERATED = StringBuilder(-29797968)
2021-03-12 01:20:37,468 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:37,637 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:20:37,808 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:20:37,813 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:20:38,166 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:20:38,171 [main:95] - GENERATED = StringBuilder(-1333813336)
2021-03-12 01:20:38,332 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 01:20:38,336 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 01:20:38,343 [main:117] - GENERATED CALL = (s).joinToString(StringBuilder(), "rtbns", StringBuilder(-29797968), -49573173, StringBuilder(-1333813336), {a: T -> StringBuilder()})
2021-03-12 01:20:38,344 [main:114] - replacement of prope8 of type String is "udbzw"
2021-03-12 01:20:38,503 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 01:20:38,504 [main:66] - Compilation checking started
2021-03-12 01:20:38,981 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = 1L
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $"udbzw" != $prope10 or $(1953556099).toString(641522270) != $(s.map(a::map)).get(1466108888)"

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:20:38,982 [main:107] - replacing (1L, Long)
2021-03-12 01:20:38,983 [main:50] - replacing 1L Long
2021-03-12 01:20:38,983 [main:54] - Getting value of type Long
2021-03-12 01:20:39,170 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:20:39,176 [main:58] - GENERATED VALUE OF TYPE Long = -8196299484523736299
2021-03-12 01:20:39,177 [main:61] - GENERATED IS CALL =false
2021-03-12 01:20:39,195 [main:67] - randomType = Kla4
2021-03-12 01:20:39,380 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 01:20:39,385 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 01:20:39,395 [main:106] - GETTING Long from EmptyCoroutineContext
2021-03-12 01:20:39,419 [main:106] - GETTING Long from String
2021-03-12 01:20:39,446 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ddc5ec6]]
2021-03-12 01:20:39,446 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:20:39,632 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:39,636 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ddc5ec6]
2021-03-12 01:20:39,637 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).compareTo("tmayb").toLong()
2021-03-12 01:20:39,637 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8fcc1fc]]
2021-03-12 01:20:39,637 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:20:39,822 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:40,004 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:40,008 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8fcc1fc]
2021-03-12 01:20:40,169 [main:302] - generating value of type = Function1<Char, Long> false depth = 0
2021-03-12 01:20:40,173 [main:302] - generating value of type = Long true depth = 1
2021-03-12 01:20:40,177 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).subSequence(-501302481, -909988735).sumOf({a: Char -> 2644470449461753345})
2021-03-12 01:20:40,177 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]]
2021-03-12 01:20:40,177 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:20:40,178 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270bbf31]
2021-03-12 01:20:40,337 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:20:40,342 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).compareTo(var prope2 =.plus(-3831269003559708027)
2021-03-12 01:20:40,342 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cef48b3]]
2021-03-12 01:20:40,342 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:20:40,342 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cef48b3]
2021-03-12 01:20:40,503 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:20:40,508 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
2021-03-12 01:20:40,508 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]]
2021-03-12 01:20:40,508 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]
2021-03-12 01:20:40,673 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:20:40,677 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).length.rem(-6465831716743047108)
2021-03-12 01:20:40,677 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3c3b70b7]]
2021-03-12 01:20:40,677 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:20:40,837 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:40,842 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3c3b70b7]
2021-03-12 01:20:40,842 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).get(538989111).toLong()
2021-03-12 01:20:40,842 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]]
2021-03-12 01:20:40,842 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:20:40,842 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20679cbe]
2021-03-12 01:20:41,003 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:20:41,008 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).rem(-6157083217023123258)
2021-03-12 01:20:41,008 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ddc5ec6]]
2021-03-12 01:20:41,008 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ddc5ec6]
2021-03-12 01:20:41,008 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).length.toLong()
2021-03-12 01:20:41,008 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8fcc1fc]]
2021-03-12 01:20:41,008 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8fcc1fc]
2021-03-12 01:20:41,169 [main:302] - generating value of type = Function1<Char, Long> false depth = 0
2021-03-12 01:20:41,173 [main:302] - generating value of type = Long true depth = 1
2021-03-12 01:20:41,178 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).sumOf({a: Char -> 6389858747320097136})
2021-03-12 01:20:41,178 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cef48b3]]
2021-03-12 01:20:41,178 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cef48b3]
2021-03-12 01:20:41,337 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:20:41,342 [main:117] - GENERATED CALL = ((s.map(a::map)).get(1466108888)).length.div(2836679049671155879)
2021-03-12 01:20:41,342 [main:114] - replacement of 1L of type Long is ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
2021-03-12 01:20:41,502 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:20:41,502 [main:66] - Compilation checking started
2021-03-12 01:20:42,213 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $(1953556099).toString(641522270) != $(s.map(a::map)).get(1466108888)"

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:20:42,214 [main:107] - replacing (prope14, String)
2021-03-12 01:20:42,216 [main:50] - replacing prope14 String
2021-03-12 01:20:42,216 [main:54] - Getting value of type String
2021-03-12 01:20:42,422 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:42,427 [main:58] - GENERATED VALUE OF TYPE String = "jmxpb"
2021-03-12 01:20:42,427 [main:61] - GENERATED IS CALL =false
2021-03-12 01:20:42,446 [main:67] - randomType = Kla2
2021-03-12 01:20:42,636 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 01:20:42,641 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 01:20:42,706 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@4e7dcf03]
2021-03-12 01:20:42,707 [main:78] - Generated call from random type = (Kla2()).prope2?.toString()!!
2021-03-12 01:20:42,707 [main:114] - replacement of prope14 of type String is (Kla2()).prope2?.toString()!!
2021-03-12 01:20:42,898 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-12 01:20:42,898 [main:66] - Compilation checking started
2021-03-12 01:20:43,385 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $(1953556099).toString(641522270) != $(s.map(a::map)).get(1466108888)"

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    (Kla2()).prope2?.toString()!! = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $prope8 != $prope10 or $prope14 != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:20:43,387 [main:107] - replacing (prope10, String)
2021-03-12 01:20:43,388 [main:50] - replacing prope10 String
2021-03-12 01:20:43,388 [main:54] - Getting value of type String
2021-03-12 01:20:43,574 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:43,578 [main:58] - GENERATED VALUE OF TYPE String = "yioli"
2021-03-12 01:20:43,578 [main:61] - GENERATED IS CALL =false
2021-03-12 01:20:43,597 [main:67] - randomType = Kla6
2021-03-12 01:20:43,784 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 01:20:43,790 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}
2021-03-12 01:20:43,819 [main:106] - GETTING String from Continuation<Int>
2021-03-12 01:20:43,828 [main:106] - GETTING String from String
2021-03-12 01:20:43,859 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]]
2021-03-12 01:20:43,859 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]
2021-03-12 01:20:44,041 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:20:44,213 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:20:44,219 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:20:44,579 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 01:20:44,586 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-12 01:20:44,587 [main:117] - GENERATED CALL = (stub({ "lkuci"})).removeSurrounding(StringBuilder(StringBuilder()))
2021-03-12 01:20:44,587 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4997a579]]
2021-03-12 01:20:44,587 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4997a579]
2021-03-12 01:20:44,587 [main:117] - GENERATED CALL = (stub({ "lkuci"})).trimEnd()
2021-03-12 01:20:44,587 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e61f45]]
2021-03-12 01:20:44,587 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e61f45]
2021-03-12 01:20:44,751 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:44,922 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:44,926 [main:117] - GENERATED CALL = (stub({ "lkuci"})).replaceBefore('邩', "oynub", var prope2 =
2021-03-12 01:20:44,926 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707202d1]]
2021-03-12 01:20:44,926 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707202d1]
2021-03-12 01:20:45,088 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:20:45,092 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:20:45,097 [main:117] - GENERATED CALL = (stub({ "lkuci"})).takeLastWhile({a: Char -> false})
2021-03-12 01:20:45,097 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e37e3ea]]
2021-03-12 01:20:45,097 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e37e3ea]
2021-03-12 01:20:45,261 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:45,429 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:45,596 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:20:45,604 [main:117] - GENERATED CALL = (stub({ "lkuci"})).replaceRange(1796504705, 1199870814, "rjsfp")
2021-03-12 01:20:45,604 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]]
2021-03-12 01:20:45,604 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d606e9]
2021-03-12 01:20:45,770 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:45,774 [main:117] - GENERATED CALL = (stub({ "lkuci"})).drop(-336913311)
2021-03-12 01:20:45,774 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]]
2021-03-12 01:20:45,774 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]
2021-03-12 01:20:45,937 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:46,107 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:46,111 [main:117] - GENERATED CALL = (stub({ "lkuci"})).replaceBeforeLast('囒', "dtcoj", A("jmkiq").map())
2021-03-12 01:20:46,112 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@809c776]]
2021-03-12 01:20:46,112 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@809c776]
2021-03-12 01:20:46,279 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 01:20:46,283 [main:302] - generating value of type = Char true depth = 1
2021-03-12 01:20:46,287 [main:117] - GENERATED CALL = (stub({ "lkuci"})).replaceFirstChar({a: Char -> '⦆'})
2021-03-12 01:20:46,288 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:20:46,288 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:20:46,469 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:46,474 [main:117] - GENERATED CALL = (stub({ "lkuci"})).length.toString(1512745279)
2021-03-12 01:20:46,474 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a16d90e]]
2021-03-12 01:20:46,474 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a16d90e]
2021-03-12 01:20:46,474 [main:117] - GENERATED CALL = (stub({ "lkuci"})).concat((s.map(a::map)).get(1466108888))
2021-03-12 01:20:46,474 [main:114] - replacement of prope10 of type String is (stub({ "lkuci"})).replaceBeforeLast('囒', "dtcoj", A("jmkiq").map())
2021-03-12 01:20:46,661 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:20:46,662 [main:66] - Compilation checking started
2021-03-12 01:20:47,160 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $(1953556099).toString(641522270) != $(s.map(a::map)).get(1466108888)"

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $prope8 != $(stub({ "lkuci"})).replaceBeforeLast('囒', "dtcoj", A("jmkiq").map()) or $prope14 != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:20:47,161 [main:107] - replacing (prope8, String)
2021-03-12 01:20:47,162 [main:50] - replacing prope8 String
2021-03-12 01:20:47,162 [main:54] - Getting value of type String
2021-03-12 01:20:47,327 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:47,331 [main:58] - GENERATED VALUE OF TYPE String = "dmemf"
2021-03-12 01:20:47,331 [main:61] - GENERATED IS CALL =false
2021-03-12 01:20:48,792 [main:67] - randomType = List<Pair<Function2<HashSet<Kla1>, Collection<Float>, ArrayDeque<Kla6>>, Kla6>>
2021-03-12 01:20:48,793 [main:106] - GETTING String from Function0<Unit>
2021-03-12 01:20:48,807 [main:106] - GETTING String from List<String>
2021-03-12 01:20:48,841 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d9973a9]]
2021-03-12 01:20:48,841 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b]
2021-03-12 01:20:49,007 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:49,011 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d9973a9]
2021-03-12 01:20:49,176 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:49,180 [main:117] - GENERATED CALL = ((s.map(a::map))).get(96966474).substringAfter('켮', (s.map(a::map)).get(1466108888))
2021-03-12 01:20:49,180 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]]
2021-03-12 01:20:49,180 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b]
2021-03-12 01:20:49,387 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:49,392 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]
2021-03-12 01:20:49,392 [main:117] - GENERATED CALL = ((s.map(a::map))).get(1531857583).plus(Kla2().prope2)
2021-03-12 01:20:49,392 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]]
2021-03-12 01:20:49,392 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b]
2021-03-12 01:20:49,556 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:49,561 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db63c26]
2021-03-12 01:20:49,727 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:49,894 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:49,899 [main:117] - GENERATED CALL = ((s.map(a::map))).get(912612838).replace('糫', '', Kla5().prope5)
2021-03-12 01:20:49,899 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.single(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4386192f]]
2021-03-12 01:20:49,899 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.single(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4386192f]
2021-03-12 01:20:49,899 [main:117] - GENERATED CALL = ((s.map(a::map))).single()
2021-03-12 01:20:49,899 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e748520]]
2021-03-12 01:20:49,899 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b]
2021-03-12 01:20:50,062 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:50,067 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e748520]
2021-03-12 01:20:50,067 [main:117] - GENERATED CALL = ((s.map(a::map))).get(-739472464).trimStart()
2021-03-12 01:20:50,067 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@2e8cec3], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:20:50,067 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:20:50,232 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:50,236 [main:117] - GENERATED CALL = ((s.map(a::map))).size.toString(1746227769)
2021-03-12 01:20:50,237 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.elementAt(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@249399a3]]
2021-03-12 01:20:50,237 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.elementAt(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@249399a3]
2021-03-12 01:20:50,400 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:50,405 [main:117] - GENERATED CALL = ((s.map(a::map))).elementAt(662522798)
2021-03-12 01:20:50,405 [main:113] - Case = [@kotlin.SinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.maxOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@475d15e1]]
2021-03-12 01:20:50,405 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.maxOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@475d15e1]
2021-03-12 01:20:50,405 [main:117] - GENERATED CALL = ((s.map(a::map))).maxOrNull()
2021-03-12 01:20:50,405 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]]
2021-03-12 01:20:50,405 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b]
2021-03-12 01:20:50,569 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:50,573 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]
2021-03-12 01:20:50,738 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:50,742 [main:117] - GENERATED CALL = ((s.map(a::map))).get(1511384704).takeLast(1444033796)
2021-03-12 01:20:50,743 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]]
2021-03-12 01:20:50,743 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@57612f1b]
2021-03-12 01:20:50,912 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:50,916 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e1191a]
2021-03-12 01:20:51,082 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:20:51,086 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:20:51,090 [main:117] - GENERATED CALL = ((s.map(a::map))).get(1047240812).filterNot({a: Char -> false})
2021-03-12 01:20:51,090 [main:114] - replacement of prope8 of type String is ((s.map(a::map))).get(1531857583).plus(Kla2().prope2)
2021-03-12 01:20:51,253 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:20:51,253 [main:66] - Compilation checking started
2021-03-12 01:20:51,941 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $(1953556099).toString(641522270) != $(s.map(a::map)).get(1466108888)"

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $prope14 != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:20:51,942 [main:107] - replacing ({prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')}, Function0<String>)
2021-03-12 01:20:51,943 [main:50] - replacing {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')} Function0<String>
2021-03-12 01:20:51,943 [main:54] - Getting value of type Function0<String>
2021-03-12 01:20:52,111 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-12 01:20:52,115 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:20:52,119 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "fyqwr"}
2021-03-12 01:20:52,119 [main:61] - GENERATED IS CALL =false
2021-03-12 01:20:52,128 [main:67] - randomType = Float
2021-03-12 01:20:52,295 [main:302] - generating value of type = Float true depth = 0
2021-03-12 01:20:52,344 [main:106] - GETTING Function0<String> from List<String>
2021-03-12 01:20:52,378 [main:106] - GETTING Function0<String> from A
2021-03-12 01:20:52,385 [main:106] - GETTING Function0<String> from Continuation<Any?>
2021-03-12 01:20:52,396 [main:106] - GETTING Function0<String> from CoroutineContext
2021-03-12 01:20:52,405 [main:106] - GETTING Function0<String> from Any?
2021-03-12 01:20:52,410 [main:106] - GETTING Function0<String> from String
2021-03-12 01:20:52,436 [main:106] - GETTING Function0<String> from Function0<Unit>
2021-03-12 01:20:52,448 [main:106] - GETTING Function0<String> from Boolean
2021-03-12 01:20:52,461 [main:106] - GETTING Function0<String> from Continuation<Int>
2021-03-12 01:20:52,472 [main:106] - GETTING Function0<String> from String
2021-03-12 01:20:52,473 [main:106] - GETTING Function0<String> from List<String>
2021-03-12 01:20:52,474 [main:106] - GETTING Function0<String> from Array<String>
2021-03-12 01:20:52,490 [main:106] - GETTING Function0<String> from String
2021-03-12 01:20:52,491 [main:106] - GETTING Function0<String> from CoroutineContext
2021-03-12 01:20:52,492 [main:106] - GETTING Function0<String> from String
2021-03-12 01:20:52,493 [main:106] - GETTING Function0<String> from CoroutineContext
2021-03-12 01:20:52,494 [main:106] - GETTING Function0<String> from EmptyCoroutineContext
2021-03-12 01:20:52,518 [main:106] - GETTING Function0<String> from String
2021-03-12 01:20:52,519 [main:106] - GETTING Function0<String> from String
2021-03-12 01:20:52,520 [main:106] - GETTING Function0<String> from String
2021-03-12 01:20:52,520 [main:114] - replacement of {prope8 += "$prope13"; (s).get(1695619123).padStart(1900306690, '挶')} of type Function0<String> is { "fyqwr"}
2021-03-12 01:20:52,687 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:20:52,687 [main:66] - Compilation checking started
2021-03-12 01:20:53,386 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $(1953556099).toString(641522270) != $(s.map(a::map)).get(1466108888)"

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $prope14 != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:20:53,388 [main:107] - replacing (prope8, String)
2021-03-12 01:20:53,389 [main:50] - replacing prope8 String
2021-03-12 01:20:53,390 [main:54] - Getting value of type String
2021-03-12 01:20:53,593 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:53,597 [main:58] - GENERATED VALUE OF TYPE String = "ltsyx"
2021-03-12 01:20:53,598 [main:61] - GENERATED IS CALL =false
2021-03-12 01:20:53,618 [main:67] - randomType = String?
2021-03-12 01:20:53,806 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:53,845 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@696fbbdf]
2021-03-12 01:20:53,846 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]
2021-03-12 01:20:54,034 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:54,038 [main:78] - Generated call from random type = ("ouuvz")?.plus(Kla2().prope2).replaceBeforeLast('࢟', (s.map(a::map)).get(1466108888), Kla0("qhnah").o)
2021-03-12 01:20:54,038 [main:106] - GETTING String from String
2021-03-12 01:20:54,070 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]]
2021-03-12 01:20:54,070 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]
2021-03-12 01:20:54,257 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:20:54,265 [main:117] - GENERATED CALL = (A("jmkiq").z).removeSurrounding("ymeqd")
2021-03-12 01:20:54,266 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]]
2021-03-12 01:20:54,266 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:20:54,454 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:54,645 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:54,650 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3545e781]
2021-03-12 01:20:54,837 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:55,031 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:55,037 [main:117] - GENERATED CALL = (A("jmkiq").z).subSequence(619792079, -1982197873).substring(-1658742286, -857160053)
2021-03-12 01:20:55,037 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d9973a9]]
2021-03-12 01:20:55,037 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d9973a9]
2021-03-12 01:20:55,224 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:55,229 [main:117] - GENERATED CALL = (A("jmkiq").z).substringAfter('䱪', Kla0("qhnah").component2())
2021-03-12 01:20:55,229 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@573137a1]]
2021-03-12 01:20:55,229 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@573137a1]
2021-03-12 01:20:55,229 [main:117] - GENERATED CALL = (A("jmkiq").z).trim()
2021-03-12 01:20:55,229 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cfdfc94]]
2021-03-12 01:20:55,229 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cfdfc94]
2021-03-12 01:20:55,394 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 01:20:55,564 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-12 01:20:55,570 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-12 01:20:55,738 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:20:55,743 [main:95] - GENERATED = setOfNotNull<Int>(-1767301210)
2021-03-12 01:20:55,743 [main:117] - GENERATED CALL = (A("jmkiq").z).slice(setOfNotNull<Int>(-1767301210))
2021-03-12 01:20:55,743 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]]
2021-03-12 01:20:55,743 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]
2021-03-12 01:20:55,953 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:55,957 [main:117] - GENERATED CALL = (A("jmkiq").z).takeLast(-1931286530)
2021-03-12 01:20:55,958 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]]
2021-03-12 01:20:55,958 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ccf311]
2021-03-12 01:20:55,958 [main:117] - GENERATED CALL = (A("jmkiq").z).lowercase()
2021-03-12 01:20:55,958 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]]
2021-03-12 01:20:55,958 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]
2021-03-12 01:20:56,122 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:56,126 [main:117] - GENERATED CALL = (A("jmkiq").z).substringBeforeLast('洃', stub({ "lkuci"}))
2021-03-12 01:20:56,126 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]]
2021-03-12 01:20:56,126 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c0e9dc9]
2021-03-12 01:20:56,290 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:20:56,297 [main:117] - GENERATED CALL = (A("jmkiq").z).commonSuffixWith("ibdwr", Kla5().prope5)
2021-03-12 01:20:56,298 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]]
2021-03-12 01:20:56,298 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d26e367]
2021-03-12 01:20:56,462 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:56,466 [main:117] - GENERATED CALL = (A("jmkiq").z).take(341853095)
2021-03-12 01:20:56,466 [main:114] - replacement of prope8 of type String is (A("jmkiq").z).slice(setOfNotNull<Int>(-1767301210))
2021-03-12 01:20:56,631 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:20:56,632 [main:66] - Compilation checking started
2021-03-12 01:20:57,147 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $(1953556099).toString(641522270) != $(s.map(a::map)).get(1466108888)"

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    (A("jmkiq").z).slice(setOfNotNull<Int>(-1767301210)) = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $prope14 != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:20:57,149 [main:107] - replacing (prope14, String)
2021-03-12 01:20:57,149 [main:50] - replacing prope14 String
2021-03-12 01:20:57,149 [main:54] - Getting value of type String
2021-03-12 01:20:57,348 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:57,352 [main:58] - GENERATED VALUE OF TYPE String = "tzoda"
2021-03-12 01:20:57,352 [main:61] - GENERATED IS CALL =false
2021-03-12 01:20:57,381 [main:67] - randomType = Kla0?
2021-03-12 01:20:57,574 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 01:20:57,578 [main:112] - generating klass Kla0 text = data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}
2021-03-12 01:20:57,752 [main:194] - Type params = []
2021-03-12 01:20:57,916 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:20:57,929 [main:149] - GENERATING call of type public final operator fun component2(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@49df28b1]
2021-03-12 01:20:57,930 [main:78] - Generated call from random type = (Kla0("gzezm"))?.component2()
2021-03-12 01:20:57,931 [main:106] - GETTING String from A
2021-03-12 01:20:57,937 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d9973a9]]
2021-03-12 01:20:57,937 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:20:57,937 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d9973a9]
2021-03-12 01:20:58,103 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:58,107 [main:117] - GENERATED CALL = (a).map(Kla0("qhnah").o).substringAfter('?', prope2)
2021-03-12 01:20:58,108 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a471dbf]]
2021-03-12 01:20:58,108 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:20:58,108 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a471dbf]
2021-03-12 01:20:58,272 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:58,442 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:58,446 [main:117] - GENERATED CALL = (a).map(Kla0("qhnah").o).substringBefore('뙗', "cfcet")
2021-03-12 01:20:58,446 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7fe90b]]
2021-03-12 01:20:58,446 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:20:58,447 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7fe90b]
2021-03-12 01:20:58,611 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:58,780 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:58,784 [main:117] - GENERATED CALL = (a).map((s.map(a::map)).get(1466108888)).padEnd(-1182476962, '')
2021-03-12 01:20:58,784 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]]
2021-03-12 01:20:58,784 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:20:58,785 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dbb731]
2021-03-12 01:20:58,952 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:59,127 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:20:59,131 [main:117] - GENERATED CALL = (a).map(stub({ "lkuci"})).substringBeforeLast('ꓖ', "ajamb")
2021-03-12 01:20:59,132 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]]
2021-03-12 01:20:59,132 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:20:59,132 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154d8e3d]
2021-03-12 01:20:59,298 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:59,302 [main:117] - GENERATED CALL = (a).map(var prope2 =.takeLast(-756425403)
2021-03-12 01:20:59,302 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]]
2021-03-12 01:20:59,302 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:20:59,302 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53b1cf53]
2021-03-12 01:20:59,473 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:20:59,477 [main:117] - GENERATED CALL = (a).map(Kla0("qhnah").o).dropLast(1650524757)
2021-03-12 01:20:59,477 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]]
2021-03-12 01:20:59,477 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:20:59,477 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]
2021-03-12 01:20:59,477 [main:117] - GENERATED CALL = (a).map(Kla0("qhnah").o).trimIndent()
2021-03-12 01:20:59,477 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]]
2021-03-12 01:20:59,477 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:20:59,477 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@377a584b]
2021-03-12 01:20:59,643 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:59,810 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:20:59,814 [main:117] - GENERATED CALL = (a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5)
2021-03-12 01:20:59,814 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]]
2021-03-12 01:20:59,814 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:20:59,814 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeb3625]
2021-03-12 01:20:59,976 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:21:00,143 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:21:00,148 [main:117] - GENERATED CALL = (a).map(A("jmkiq").map()).replaceBeforeLast('', "uuqqx", stub({ "lkuci"}))
2021-03-12 01:21:00,148 [main:113] - Case = [public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]]
2021-03-12 01:21:00,148 [main:149] - GENERATING call of type public final fun map(s: kotlin.String): kotlin.String defined in A[SimpleFunctionDescriptorImpl@438f3d5d]
2021-03-12 01:21:00,311 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:21:00,316 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a446b37]
2021-03-12 01:21:00,481 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:21:00,488 [main:117] - GENERATED CALL = (a).map("dbodl").removeSurrounding("hhqce")
2021-03-12 01:21:00,488 [main:114] - replacement of prope14 of type String is (a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5)
2021-03-12 01:21:00,651 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 01:21:00,652 [main:66] - Compilation checking started
2021-03-12 01:21:01,368 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $(1953556099).toString(641522270) != $(s.map(a::map)).get(1466108888)"

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:01,369 [main:107] - replacing (prope14, String)
2021-03-12 01:21:01,370 [main:50] - replacing prope14 String
2021-03-12 01:21:01,370 [main:54] - Getting value of type String
2021-03-12 01:21:01,539 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:21:01,543 [main:58] - GENERATED VALUE OF TYPE String = "cvhjd"
2021-03-12 01:21:01,543 [main:61] - GENERATED IS CALL =false
2021-03-12 01:21:01,551 [main:67] - randomType = Double
2021-03-12 01:21:01,729 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:21:01,777 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@61bfcf43]
2021-03-12 01:21:01,777 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a82138]
2021-03-12 01:21:01,946 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:21:01,951 [main:78] - Generated call from random type = (0.4649029232095383).toByte().toString(588862453)
2021-03-12 01:21:01,952 [main:106] - GETTING String from CoroutineContext
2021-03-12 01:21:01,961 [main:106] - GETTING String from Any?
2021-03-12 01:21:01,965 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@4e7dcf03]]
2021-03-12 01:21:01,965 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@4e7dcf03]
2021-03-12 01:21:01,965 [main:117] - GENERATED CALL = (Kla2().prope2).toString()
2021-03-12 01:21:01,965 [main:114] - replacement of prope14 of type String is (Kla2().prope2).toString()
2021-03-12 01:21:02,140 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:21:02,140 [main:66] - Compilation checking started
2021-03-12 01:21:02,701 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return "fail 1: $prope8 != $prope10 or $(1953556099).toString(641522270) != $(s.map(a::map)).get(1466108888)"

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    (Kla2().prope2).toString() = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:02,703 [main:107] - replacing ("fail 1: $prope8 != $prope10 or $(1953556099).toString(641522270) != $(s.map(a::map)).get(1466108888)", String)
2021-03-12 01:21:02,703 [main:50] - replacing "fail 1: $prope8 != $prope10 or $(1953556099).toString(641522270) != $(s.map(a::map)).get(1466108888)" String
2021-03-12 01:21:02,703 [main:54] - Getting value of type String
2021-03-12 01:21:02,876 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:21:02,880 [main:58] - GENERATED VALUE OF TYPE String = "qiqkj"
2021-03-12 01:21:02,880 [main:61] - GENERATED IS CALL =false
2021-03-12 01:21:03,086 [main:67] - randomType = HashSet<Kla1>
2021-03-12 01:21:03,255 [main:302] - generating value of type = HashSet<Kla1> false depth = 0
2021-03-12 01:21:03,431 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<Kla1> = TODO()
2021-03-12 01:21:03,436 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<Kla1> = TODO()
2021-03-12 01:21:03,609 [main:95] - GENERATED = linkedSetOf<Kla1>()
2021-03-12 01:21:03,744 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@afe0c7b]
2021-03-12 01:21:03,744 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5e94494e]
2021-03-12 01:21:03,913 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:21:04,089 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:21:04,095 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:21:04,456 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 01:21:04,630 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:21:04,635 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:21:04,994 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-12 01:21:05,001 [main:95] - GENERATED = StringBuilder("rgpkf")
2021-03-12 01:21:05,001 [main:95] - GENERATED = StringBuilder(StringBuilder("rgpkf"))
2021-03-12 01:21:05,169 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:21:05,341 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:21:05,516 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:21:05,684 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:21:05,856 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 01:21:05,861 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 01:21:05,868 [main:78] - Generated call from random type = (linkedSetOf<Kla1>()).toArray().joinToString(StringBuilder(StringBuilder("rgpkf")), "bwsiz", "vgqqd", 914876218, "hyztg", {a: T -> StringBuilder()})
2021-03-12 01:21:05,869 [main:106] - GETTING String from Function0<Unit>
2021-03-12 01:21:05,882 [main:106] - GETTING String from Any?
2021-03-12 01:21:05,886 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@4e7dcf03]]
2021-03-12 01:21:05,886 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@4e7dcf03]
2021-03-12 01:21:05,886 [main:117] - GENERATED CALL = (Kla2().prope2).toString()
2021-03-12 01:21:05,886 [main:114] - replacement of "fail 1: $prope8 != $prope10 or $(1953556099).toString(641522270) != $(s.map(a::map)).get(1466108888)" of type String is (Kla2().prope2).toString()
2021-03-12 01:21:06,050 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:21:06,050 [main:66] - Compilation checking started
2021-03-12 01:21:06,747 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(1466108888);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:06,936 [main:141] - TRYING TO REPLACE CONSTANT 1466108888
2021-03-12 01:21:07,098 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 01:21:07,099 [main:66] - Compilation checking started
2021-03-12 01:21:07,793 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(406505318)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:07,794 [main:141] - TRYING TO REPLACE CONSTANT 406505318
2021-03-12 01:21:07,962 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 01:21:07,963 [main:66] - Compilation checking started
2021-03-12 01:21:08,669 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(-8245944, -303566351).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:08,669 [main:141] - TRYING TO REPLACE CONSTANT 8245944
2021-03-12 01:21:08,836 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 01:21:08,836 [main:66] - Compilation checking started
2021-03-12 01:21:09,592 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, -303566351).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:09,593 [main:141] - TRYING TO REPLACE CONSTANT 303566351
2021-03-12 01:21:09,768 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 01:21:09,769 [main:66] - Compilation checking started
2021-03-12 01:21:10,466 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:10,467 [main:141] - TRYING TO REPLACE CONSTANT 1466108888
2021-03-12 01:21:10,639 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 01:21:10,639 [main:66] - Compilation checking started
2021-03-12 01:21:11,123 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(-5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(compareTo((s.map(a::map)).get(1466108888)))).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:11,123 [main:141] - TRYING TO REPLACE CONSTANT 5449043128582712946
2021-03-12 01:21:11,286 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 01:21:11,286 [main:66] - Compilation checking started
2021-03-12 01:21:11,963 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 722275349)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:11,963 [main:141] - TRYING TO REPLACE CONSTANT 722275349
2021-03-12 01:21:12,125 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 01:21:12,125 [main:66] - Compilation checking started
2021-03-12 01:21:12,842 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(-693093313, 302836307)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:12,843 [main:141] - TRYING TO REPLACE CONSTANT 693093313
2021-03-12 01:21:13,006 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 01:21:13,006 [main:66] - Compilation checking started
2021-03-12 01:21:13,695 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ 408102653})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:13,695 [main:141] - TRYING TO REPLACE CONSTANT 408102653
2021-03-12 01:21:13,857 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:21:13,857 [main:66] - Compilation checking started
2021-03-12 01:21:14,538 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(5883887356500920663), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:14,539 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 01:21:14,708 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 01:21:14,709 [main:141] - TRYING TO REPLACE CONSTANT 5883887356500920663
2021-03-12 01:21:14,871 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 01:21:14,872 [main:66] - Compilation checking started
2021-03-12 01:21:15,565 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = (0.4020756496825748).toByte().toString(-1492157493);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:15,565 [main:141] - TRYING TO REPLACE CONSTANT 0.4906792f
2021-03-12 01:21:15,726 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-12 01:21:15,726 [main:66] - Compilation checking started
2021-03-12 01:21:16,492 [main:141] - TRYING TO REPLACE CONSTANT 0.4020756496825748
2021-03-12 01:21:16,664 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 01:21:16,664 [main:66] - Compilation checking started
2021-03-12 01:21:17,356 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(-1492157493);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:17,357 [main:141] - TRYING TO REPLACE CONSTANT 1492157493
2021-03-12 01:21:17,528 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 01:21:17,528 [main:66] - Compilation checking started
2021-03-12 01:21:18,205 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:18,206 [main:141] - TRYING TO REPLACE CONSTANT 682400705
2021-03-12 01:21:18,376 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 01:21:18,377 [main:66] - Compilation checking started
2021-03-12 01:21:18,850 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(prope4, StringBuilder(1978148260), -1756718943, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:18,850 [main:141] - TRYING TO REPLACE CONSTANT 1756718943
2021-03-12 01:21:19,012 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 01:21:19,013 [main:66] - Compilation checking started
2021-03-12 01:21:19,691 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:19,691 [main:141] - TRYING TO REPLACE CONSTANT 1038175747
2021-03-12 01:21:19,866 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 01:21:19,867 [main:66] - Compilation checking started
2021-03-12 01:21:20,344 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, size, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:20,345 [main:141] - TRYING TO REPLACE CONSTANT 1978148260
2021-03-12 01:21:20,519 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 01:21:20,520 [main:66] - Compilation checking started
2021-03-12 01:21:20,998 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(302836307)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(length), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:20,998 [main:141] - TRYING TO REPLACE CONSTANT 302836307
2021-03-12 01:21:21,167 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 01:21:21,167 [main:66] - Compilation checking started
2021-03-12 01:21:21,868 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(1431911252, 513347508).repeat(1756718943)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:21,868 [main:141] - TRYING TO REPLACE CONSTANT 1431911252
2021-03-12 01:21:22,035 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 01:21:22,036 [main:66] - Compilation checking started
2021-03-12 01:21:22,727 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(-682400705, 513347508).repeat(1756718943)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:22,727 [main:141] - TRYING TO REPLACE CONSTANT 513347508
2021-03-12 01:21:22,935 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 01:21:22,935 [main:66] - Compilation checking started
2021-03-12 01:21:23,628 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('⭤', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(-682400705, 408102653).repeat(1756718943)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:23,629 [main:141] - TRYING TO REPLACE CONSTANT '⭤'
2021-03-12 01:21:23,813 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 01:21:23,813 [main:66] - Compilation checking started
2021-03-12 01:21:24,505 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('ꔞ', '鑴', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(-682400705, 408102653).repeat(1756718943)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:24,506 [main:141] - TRYING TO REPLACE CONSTANT '鑴'
2021-03-12 01:21:24,689 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 01:21:24,690 [main:66] - Compilation checking started
2021-03-12 01:21:25,369 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(-1051328671).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('ꔞ', '?', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(-682400705, 408102653).repeat(1756718943)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:25,370 [main:141] - TRYING TO REPLACE CONSTANT 1051328671
2021-03-12 01:21:25,557 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 01:21:25,558 [main:66] - Compilation checking started
2021-03-12 01:21:26,232 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('ꔞ', '?', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(-682400705, 408102653).repeat(1756718943)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:26,233 [main:141] - TRYING TO REPLACE CONSTANT 2319964002604511190
2021-03-12 01:21:26,419 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:21:26,420 [main:66] - Compilation checking started
2021-03-12 01:21:26,898 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(1466108888)).compareTo((s.map(a::map)).get(1466108888)).div(div(-2319964002604511190))
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('ꔞ', '?', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(-682400705, 408102653).repeat(1756718943)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:26,899 [main:141] - TRYING TO REPLACE CONSTANT 1466108888
2021-03-12 01:21:27,067 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 01:21:27,067 [main:66] - Compilation checking started
2021-03-12 01:21:27,764 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1466108888)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('ꔞ', '?', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(-682400705, 408102653).repeat(1756718943)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:27,765 [main:141] - TRYING TO REPLACE CONSTANT 1466108888
2021-03-12 01:21:27,936 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 01:21:27,937 [main:66] - Compilation checking started
2021-03-12 01:21:28,629 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('ꔞ', '?', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(-682400705, 408102653).repeat(1756718943)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(1531857583).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:28,629 [main:141] - TRYING TO REPLACE CONSTANT 1531857583
2021-03-12 01:21:28,789 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 01:21:28,790 [main:66] - Compilation checking started
2021-03-12 01:21:29,463 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('ꔞ', '?', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(-682400705, 408102653).repeat(1756718943)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(0).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('棈', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:29,464 [main:141] - TRYING TO REPLACE CONSTANT '棈'
2021-03-12 01:21:29,625 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 01:21:29,626 [main:66] - Compilation checking started
2021-03-12 01:21:30,339 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('ꔞ', '?', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(-682400705, 408102653).repeat(1756718943)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(0).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('繂', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:30,339 [main:141] - TRYING TO REPLACE CONSTANT 'ꔞ'
2021-03-12 01:21:30,502 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:21:30,502 [main:66] - Compilation checking started
2021-03-12 01:21:31,001 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('ꔞ', '?', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(-682400705, 408102653).repeat(1756718943)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(0).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('繂', (stub({ "feqkq"})).get(-743559576), Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:31,001 [main:41] - AFTER TRY 2 res = import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('ꔞ', '?', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(-682400705, 408102653).repeat(1756718943)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(0).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('繂', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}


2021-03-12 01:21:31,334 [main:112] - generating klass A text = class A(val z: String) {
    fun map(s: String) = z + s
}
2021-03-12 01:21:31,497 [main:194] - Type params = []
2021-03-12 01:21:31,657 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:21:31,662 [main:112] - generating klass Kla0 text = data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}
2021-03-12 01:21:31,823 [main:194] - Type params = []
2021-03-12 01:21:31,984 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:21:31,989 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-12 01:21:32,153 [main:194] - Type params = []
2021-03-12 01:21:32,315 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-12 01:21:32,483 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:21:32,488 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:21:32,853 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-12 01:21:33,027 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:21:33,032 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:21:33,596 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 7
2021-03-12 01:21:33,777 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:21:33,782 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:21:34,345 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:21:34,345 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:21:34,345 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:21:34,346 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 01:21:34,346 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 01:21:35,095 [main:302] - generating value of type = Kla6 false depth = 1
2021-03-12 01:21:35,099 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}
2021-03-12 01:21:35,099 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 01:21:35,100 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}
2021-03-12 01:21:35,100 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}
2021-03-12 01:21:35,100 [main:112] - generating klass null text = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}
2021-03-12 01:21:35,100 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}
2021-03-12 01:21:35,100 [main:112] - generating klass Kla7 text = companion object Kla7 : Kla1()
2021-03-12 01:21:35,439 [main:43] - GENERATING CALL OF inline fun stub(f: () -> String): String = f()
2021-03-12 01:21:35,443 [main:61] - WITHOUT TYPE PARAMS = inline fun stub(f: () -> String): String = f()
2021-03-12 01:21:35,798 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-12 01:21:35,802 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:21:35,806 [main:95] - GENERATED = stub({ "yveue"})
2021-03-12 01:21:35,968 [main:43] - GENERATING CALL OF fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}
2021-03-12 01:21:35,972 [main:61] - WITHOUT TYPE PARAMS = fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}
2021-03-12 01:21:36,384 [main:302] - generating value of type = SuspendFunction1<Kla0, Unit> false depth = 1
2021-03-12 01:21:36,388 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 01:21:36,556 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:21:36,561 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:21:37,114 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 01:21:37,120 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-12 01:21:37,126 [main:302] - generating value of type = Any false depth = 6
2021-03-12 01:21:37,126 [main:95] - GENERATED = check(false, { "agcxq"})
2021-03-12 01:21:37,126 [main:95] - GENERATED = fu0({a: Kla0 -> check(false, { "agcxq"})})
2021-03-12 01:21:37,310 [main:43] - GENERATING CALL OF fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}
2021-03-12 01:21:37,530 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu1(Ty1: (ULong) -> Unit): Continuation<ULong> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}
2021-03-12 01:21:37,902 [main:302] - generating value of type = Function1<ULong, Unit> false depth = 1
2021-03-12 01:21:37,907 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 01:21:38,075 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:21:38,081 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:21:38,476 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 01:21:38,480 [main:95] - GENERATED = require(true)
2021-03-12 01:21:38,480 [main:95] - GENERATED = fu1<ULong>({a: ULong -> require(true)})
2021-03-12 01:21:38,663 [main:43] - GENERATING CALL OF fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}
2021-03-12 01:21:38,667 [main:61] - WITHOUT TYPE PARAMS = fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}
2021-03-12 01:21:39,024 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-12 01:21:39,028 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 01:21:39,198 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:21:39,203 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:21:39,554 [main:302] - generating value of type = Any false depth = 5
2021-03-12 01:21:39,554 [main:95] - GENERATED = print("iltjx")
2021-03-12 01:21:39,554 [main:95] - GENERATED = fu2({a: Throwable -> print("iltjx")})
2021-03-12 01:21:39,715 [main:43] - GENERATING CALL OF fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}
2021-03-12 01:21:39,719 [main:61] - WITHOUT TYPE PARAMS = fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}
2021-03-12 01:21:40,078 [main:302] - generating value of type = Int true depth = 1
2021-03-12 01:21:40,082 [main:302] - generating value of type = Long true depth = 1
2021-03-12 01:21:40,086 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-12 01:21:40,090 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:21:40,095 [main:95] - GENERATED = fu11(-285154014, 6110085272284491648, { "sacdx"})
2021-03-12 01:21:40,285 [main:43] - Try №2
2021-03-12 01:21:41,177 [main:69] - Trying to insert fun box167(): String {
  val prope15 = fu12()
  return if (prope15 == "1:2;2:3;3:4;") "OK" else "fail: $prope15"
}
2021-03-12 01:21:41,404 [main:66] - Compilation checking started
2021-03-12 01:21:42,642 [main:103] - Trying to change 28 nodes
2021-03-12 01:21:42,642 [main:107] - replacing (this + 1, Int)
2021-03-12 01:21:42,642 [main:50] - replacing this + 1 Int
2021-03-12 01:21:42,642 [main:54] - Getting value of type Int
2021-03-12 01:21:42,818 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:21:42,822 [main:58] - GENERATED VALUE OF TYPE Int = 1974985112
2021-03-12 01:21:42,822 [main:61] - GENERATED IS CALL =false
2021-03-12 01:21:43,019 [main:67] - randomType = Short
2021-03-12 01:21:43,190 [main:302] - generating value of type = Short true depth = 0
2021-03-12 01:21:43,244 [main:149] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4aa86db4]
2021-03-12 01:21:43,245 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2c2ebebe]
2021-03-12 01:21:43,245 [main:78] - Generated call from random type = (-14658).toShort().unaryMinus()
2021-03-12 01:21:43,246 [main:106] - GETTING Int from String
2021-03-12 01:21:43,269 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72731de3]]
2021-03-12 01:21:43,269 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72731de3]
2021-03-12 01:21:43,269 [main:117] - GENERATED CALL = (prope14).count()
2021-03-12 01:21:43,269 [main:113] - Case = [public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@55758fab]]
2021-03-12 01:21:43,269 [main:117] - GENERATED CALL = (prope14).lastIndex
2021-03-12 01:21:43,269 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5bf3e120]]
2021-03-12 01:21:43,269 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:21:43,270 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5bf3e120]
2021-03-12 01:21:43,270 [main:117] - GENERATED CALL = (prope14).compareTo(stub({ "yveue"})).toInt()
2021-03-12 01:21:43,270 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5b4d30c7]]
2021-03-12 01:21:43,270 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5b4d30c7]
2021-03-12 01:21:43,270 [main:117] - GENERATED CALL = (prope14).length.inc()
2021-03-12 01:21:43,270 [main:113] - Case = [public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33c8ea16]]
2021-03-12 01:21:43,270 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33c8ea16]
2021-03-12 01:21:43,270 [main:117] - GENERATED CALL = (prope14).toInt()
2021-03-12 01:21:43,270 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7aca8561]]
2021-03-12 01:21:43,270 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7aca8561]
2021-03-12 01:21:43,270 [main:117] - GENERATED CALL = (prope14).length.inv()
2021-03-12 01:21:43,270 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@67cce6e8]]
2021-03-12 01:21:43,270 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@67cce6e8]
2021-03-12 01:21:43,271 [main:117] - GENERATED CALL = (prope14).length.rotateLeft((prope2).length)
2021-03-12 01:21:43,271 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79b1b471]]
2021-03-12 01:21:43,271 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79b1b471]
2021-03-12 01:21:43,271 [main:117] - GENERATED CALL = (prope14).length.ushr(((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)))
2021-03-12 01:21:43,271 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c17bb5c]]
2021-03-12 01:21:43,271 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c17bb5c]
2021-03-12 01:21:43,440 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:21:43,444 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:21:43,448 [main:117] - GENERATED CALL = (prope14).indexOfLast({a: Char -> true})
2021-03-12 01:21:43,449 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7073e568]]
2021-03-12 01:21:43,449 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:21:43,449 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7073e568]
2021-03-12 01:21:43,618 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 01:21:43,623 [main:302] - generating value of type = Int true depth = 1
2021-03-12 01:21:43,627 [main:117] - GENERATED CALL = (prope14).subSequence((prope2).length, ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218))).sumOf({a: Char -> 885448377})
2021-03-12 01:21:43,627 [main:114] - replacement of this + 1 of type Int is (prope14).length.inc()
2021-03-12 01:21:43,800 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:21:43,800 [main:66] - Compilation checking started
2021-03-12 01:21:44,325 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('ꔞ', '?', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(-682400705, 408102653).repeat(1756718943)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(0).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('繂', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}

operator fun Int.component1() = (prope14).length.inc()

operator fun Int.component2() = this + 2

fun fu12(): String {
    var prope15 = ""
    for ((Ty3, Ty4) in 0.rangeTo(2)) {
      prope15 += {"$Ty3:$Ty4;"}()
    }
    return prope15
}

fun box167(): String {
  val prope15 = fu12()
  return if (prope15 == "1:2;2:3;3:4;") "OK" else "fail: $prope15"
}


2021-03-12 01:21:44,326 [main:107] - replacing (0.rangeTo(2), IntRange)
2021-03-12 01:21:44,329 [main:50] - replacing 0.rangeTo(2) IntRange
2021-03-12 01:21:44,329 [main:54] - Getting value of type IntRange
2021-03-12 01:21:44,513 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 01:21:44,697 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 01:21:44,703 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 01:21:45,293 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:21:45,298 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:21:45,302 [main:95] - GENERATED = IntRange(-1173087738, -470846648)
2021-03-12 01:21:45,302 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(-1173087738, -470846648)
2021-03-12 01:21:45,302 [main:61] - GENERATED IS CALL =true
2021-03-12 01:21:45,320 [main:67] - randomType = A
2021-03-12 01:21:45,494 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:21:45,498 [main:112] - generating klass A text = class A(val z: String) {
    fun map(s: String) = z + s
}
2021-03-12 01:21:45,672 [main:194] - Type params = []
2021-03-12 01:21:45,846 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:21:45,858 [main:106] - GETTING IntRange from String
2021-03-12 01:21:45,884 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@18ea1b84]]
2021-03-12 01:21:45,884 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@18ea1b84]
2021-03-12 01:21:46,060 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:21:46,065 [main:117] - GENERATED CALL = (stub({ "lkuci"})).length.until(-68)
2021-03-12 01:21:46,065 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@42707ecf]]
2021-03-12 01:21:46,066 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@42707ecf]
2021-03-12 01:21:46,066 [main:117] - GENERATED CALL = (stub({ "lkuci"})).length.rangeTo(((0.4020756496825748)).toByte())
2021-03-12 01:21:46,066 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@18ea1b84]]
2021-03-12 01:21:46,066 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:21:46,066 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@18ea1b84]
2021-03-12 01:21:46,066 [main:117] - GENERATED CALL = (stub({ "lkuci"})).compareTo(var prope2 =.until(((0.4020756496825748)).toByte())
2021-03-12 01:21:46,066 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@42707ecf]]
2021-03-12 01:21:46,067 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:21:46,067 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@42707ecf]
2021-03-12 01:21:46,242 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:21:46,247 [main:117] - GENERATED CALL = (stub({ "lkuci"})).compareTo(Kla0("qhnah").component2()).rangeTo(-35)
2021-03-12 01:21:46,247 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@7854bcf7]]
2021-03-12 01:21:46,247 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:21:46,247 [main:117] - GENERATED CALL = (stub({ "lkuci"})).subSequence((prope2).length, var prope12 =.indices
2021-03-12 01:21:46,247 [main:113] - Case = [public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@7854bcf7]]
2021-03-12 01:21:46,247 [main:117] - GENERATED CALL = (stub({ "lkuci"})).indices
2021-03-12 01:21:46,247 [main:114] - replacement of 0.rangeTo(2) of type IntRange is IntRange(-1173087738, -470846648)
2021-03-12 01:21:46,422 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:21:46,422 [main:66] - Compilation checking started
2021-03-12 01:21:47,174 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('ꔞ', '?', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(-682400705, 408102653).repeat(1756718943)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(0).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('繂', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}

operator fun Int.component1() = this + 1

operator fun Int.component2() = this + 2

fun fu12(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
var prope8 = (s.map(a::map)).get(-1956454218)
val prope9 = "ukuze"
val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190)
var prope12 = 0
val prope13 = (prope2).length.rem(5449043128582712946)
var prope14 = (prope2).trimIndent()
val prope0 = Kla4()
val prope1 = Kla5()
var prope15 = ""
    for ((Ty3, Ty4) in IntRange(-1173087738, -470846648)) {
      prope15 += {"$Ty3:$Ty4;"}()
    }
    return prope15
}

fun box167(): String {
  val prope15 = fu12()
  return if (prope15 == "1:2;2:3;3:4;") "OK" else "fail: $prope15"
}


2021-03-12 01:21:47,174 [main:107] - replacing ({"$Ty3:$Ty4;"}(), String)
2021-03-12 01:21:47,175 [main:50] - replacing {"$Ty3:$Ty4;"}() String
2021-03-12 01:21:47,175 [main:54] - Getting value of type String
2021-03-12 01:21:47,365 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:21:47,370 [main:58] - GENERATED VALUE OF TYPE String = "qgset"
2021-03-12 01:21:47,370 [main:61] - GENERATED IS CALL =false
2021-03-12 01:21:47,813 [main:67] - randomType = Array<Kla6?>
2021-03-12 01:21:47,990 [main:302] - generating value of type = Array<Kla6?> false depth = 0
2021-03-12 01:21:48,178 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<Kla6?> = TODO()
2021-03-12 01:21:48,184 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<Kla6?> = TODO()
2021-03-12 01:21:48,577 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:21:48,582 [main:95] - GENERATED = arrayOfNulls<Kla6?>(-1169704633)
2021-03-12 01:21:48,598 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5e94494e]
2021-03-12 01:21:48,773 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:21:48,955 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:21:48,961 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:21:49,428 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 01:21:49,617 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:21:49,624 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:21:50,022 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-12 01:21:50,206 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:21:50,212 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:21:50,603 [main:302] - generating value of type = Int true depth = 9
2021-03-12 01:21:50,608 [main:95] - GENERATED = StringBuilder(-457290308)
2021-03-12 01:21:50,608 [main:95] - GENERATED = StringBuilder(StringBuilder(-457290308))
2021-03-12 01:21:50,608 [main:95] - GENERATED = StringBuilder(StringBuilder(StringBuilder(-457290308)))
2021-03-12 01:21:50,785 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 01:21:50,789 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 01:21:50,797 [main:78] - Generated call from random type = (arrayOfNulls<Kla6?>(-1169704633)).joinToString(((s.map(a::map)).get(1466108888)).subSequence(0, 406505318), ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318), StringBuilder(StringBuilder(StringBuilder(-457290308))), (prope2).length, ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318), {a: T -> StringBuilder()})
2021-03-12 01:21:50,798 [main:106] - GETTING String from Continuation<Any?>
2021-03-12 01:21:50,809 [main:106] - GETTING String from Int
2021-03-12 01:21:50,855 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a485b5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@779dda8c]]
2021-03-12 01:21:50,855 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a485b5]
2021-03-12 01:21:50,855 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@779dda8c]
2021-03-12 01:21:50,856 [main:117] - GENERATED CALL = (((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218))).toChar().plus(var prope2 =
2021-03-12 01:21:50,856 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5115486d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:21:50,856 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5115486d]
2021-03-12 01:21:50,856 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:21:50,856 [main:117] - GENERATED CALL = (((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218))).compareTo((stub({ "lkuci"})).length).toString((prope2).length)
2021-03-12 01:21:50,857 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@31e4eedd], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:21:50,857 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@31e4eedd]
2021-03-12 01:21:50,857 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:21:50,857 [main:117] - GENERATED CALL = (((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218))).toInt().toString(var prope12 =
2021-03-12 01:21:50,857 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]]
2021-03-12 01:21:50,857 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d0db00a]
2021-03-12 01:21:50,857 [main:117] - GENERATED CALL = (((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218))).toString(var prope12 =
2021-03-12 01:21:50,857 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a485b5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305e8885]]
2021-03-12 01:21:50,857 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a485b5]
2021-03-12 01:21:50,857 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305e8885]
2021-03-12 01:21:50,858 [main:117] - GENERATED CALL = (((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218))).toChar().lowercase()
2021-03-12 01:21:50,858 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4aef001f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6692e134]]
2021-03-12 01:21:50,858 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4aef001f]
2021-03-12 01:21:50,858 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6692e134]
2021-03-12 01:21:50,858 [main:117] - GENERATED CALL = (((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218))).toLong().toString(var prope12 =
2021-03-12 01:21:50,858 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cef48b3], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6692e134]]
2021-03-12 01:21:50,858 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cef48b3]
2021-03-12 01:21:50,858 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6692e134]
2021-03-12 01:21:50,859 [main:117] - GENERATED CALL = (((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218))).div(var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190).toString((prope2).length)
2021-03-12 01:21:50,859 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a485b5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]]
2021-03-12 01:21:50,859 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a485b5]
2021-03-12 01:21:50,859 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d1e93a6]
2021-03-12 01:21:50,859 [main:117] - GENERATED CALL = (((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218))).toChar().titlecase()
2021-03-12 01:21:50,859 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55367c8], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38059803]]
2021-03-12 01:21:50,859 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55367c8]
2021-03-12 01:21:50,859 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38059803]
2021-03-12 01:21:50,859 [main:117] - GENERATED CALL = (((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218))).toShort().toString((prope2).length)
2021-03-12 01:21:50,859 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a485b5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]]
2021-03-12 01:21:50,859 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a485b5]
2021-03-12 01:21:50,859 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f13b21a]
2021-03-12 01:21:50,860 [main:117] - GENERATED CALL = (((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218))).toChar().uppercase()
2021-03-12 01:21:50,860 [main:114] - replacement of {"$Ty3:$Ty4;"}() of type String is (arrayOfNulls<Kla6?>(-1169704633)).joinToString(((s.map(a::map)).get(1466108888)).subSequence(0, 406505318), ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318), StringBuilder(StringBuilder(StringBuilder(-457290308))), (prope2).length, ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318), {a: T -> StringBuilder()})
2021-03-12 01:21:51,036 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:21:51,037 [main:66] - Compilation checking started
2021-03-12 01:21:51,603 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('ꔞ', '?', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(-682400705, 408102653).repeat(1756718943)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(0).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('繂', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}

operator fun Int.component1() = this + 1

operator fun Int.component2() = this + 2

fun fu12(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
var prope8 = (s.map(a::map)).get(-1956454218)
val prope9 = "ukuze"
val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190)
var prope12 = 0
val prope13 = (prope2).length.rem(5449043128582712946)
var prope14 = (prope2).trimIndent()
val prope0 = Kla4()
val prope1 = Kla5()
var prope15 = ""
    for ((Ty3, Ty4) in IntRange(-1173087738, -470846648)) {
      prope15 += (arrayOfNulls<Kla6?>(-1169704633)).joinToString(((s.map(a::map)).get(1466108888)).subSequence(0, 406505318), ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318), StringBuilder(StringBuilder(StringBuilder(-457290308))), (prope2).length, ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318), {a: T -> StringBuilder()})
    }
    return prope15
}

fun box167(): String {
  val prope15 = fu12()
  return if (prope15 == "1:2;2:3;3:4;") "OK" else "fail: $prope15"
}


2021-03-12 01:21:51,603 [main:107] - replacing (this + 2, Int)
2021-03-12 01:21:51,603 [main:50] - replacing this + 2 Int
2021-03-12 01:21:51,603 [main:54] - Getting value of type Int
2021-03-12 01:21:51,780 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:21:51,785 [main:58] - GENERATED VALUE OF TYPE Int = 1846446
2021-03-12 01:21:51,785 [main:61] - GENERATED IS CALL =false
2021-03-12 01:21:51,795 [main:67] - randomType = Char
2021-03-12 01:21:51,981 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:21:52,013 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@56704452]
2021-03-12 01:21:52,013 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@17d69211]
2021-03-12 01:21:52,014 [main:78] - Generated call from random type = ('춢').toShort().times(((0.4020756496825748)).toByte())
2021-03-12 01:21:52,014 [main:114] - replacement of this + 2 of type Int is ('춢').toShort().times(((0.4020756496825748)).toByte())
2021-03-12 01:21:52,190 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:21:52,190 [main:66] - Compilation checking started
2021-03-12 01:21:52,958 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('ꔞ', '?', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(-682400705, 408102653).repeat(1756718943)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(0).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('繂', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}

operator fun Int.component1() = this + 1

operator fun Int.component2() = ('춢').toShort().times(((0.4020756496825748)).toByte())

fun fu12(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
var prope8 = (s.map(a::map)).get(-1956454218)
val prope9 = "ukuze"
val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190)
var prope12 = 0
val prope13 = (prope2).length.rem(5449043128582712946)
var prope14 = (prope2).trimIndent()
val prope0 = Kla4()
val prope1 = Kla5()
var prope15 = ""
    for ((Ty3, Ty4) in IntRange(-1173087738, -470846648)) {
      prope15 += {"$Ty3:$Ty4;"}()
    }
    return prope15
}

fun box167(): String {
  val prope15 = fu12()
  return if (prope15 == "1:2;2:3;3:4;") "OK" else "fail: $prope15"
}


2021-03-12 01:21:52,959 [main:107] - replacing ({"$Ty3:$Ty4;"}, Function0<String>)
2021-03-12 01:21:52,959 [main:50] - replacing {"$Ty3:$Ty4;"} Function0<String>
2021-03-12 01:21:52,959 [main:54] - Getting value of type Function0<String>
2021-03-12 01:21:53,158 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-12 01:21:53,162 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:21:53,167 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "ejrex"}
2021-03-12 01:21:53,167 [main:61] - GENERATED IS CALL =false
2021-03-12 01:21:53,176 [main:67] - randomType = Boolean
2021-03-12 01:21:53,352 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:21:53,370 [main:106] - GETTING Function0<String> from Kla2
2021-03-12 01:21:53,391 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,418 [main:106] - GETTING Function0<String> from Continuation<Int>
2021-03-12 01:21:53,428 [main:106] - GETTING Function0<String> from A
2021-03-12 01:21:53,434 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,435 [main:106] - GETTING Function0<String> from EmptyCoroutineContext
2021-03-12 01:21:53,455 [main:106] - GETTING Function0<String> from CharSequence
2021-03-12 01:21:53,462 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,463 [main:106] - GETTING Function0<String> from Kla0?
2021-03-12 01:21:53,471 [main:106] - GETTING Function0<String> from Int
2021-03-12 01:21:53,504 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,505 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,506 [main:106] - GETTING Function0<String> from CoroutineContext
2021-03-12 01:21:53,513 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,514 [main:106] - GETTING Function0<String> from Array<String>
2021-03-12 01:21:53,525 [main:106] - GETTING Function0<String> from Int
2021-03-12 01:21:53,526 [main:106] - GETTING Function0<String> from Any?
2021-03-12 01:21:53,531 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,532 [main:106] - GETTING Function0<String> from Triple<Float, MutableMap<Long?, UByte>?, Kla0?>
2021-03-12 01:21:53,555 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,556 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,557 [main:106] - GETTING Function0<String> from A
2021-03-12 01:21:53,558 [main:106] - GETTING Function0<String> from List<String>
2021-03-12 01:21:53,591 [main:106] - GETTING Function0<String> from Boolean
2021-03-12 01:21:53,600 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,601 [main:106] - GETTING Function0<String> from Kla0
2021-03-12 01:21:53,607 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,608 [main:106] - GETTING Function0<String> from Array<String>
2021-03-12 01:21:53,609 [main:106] - GETTING Function0<String> from Function0<Unit>
2021-03-12 01:21:53,619 [main:106] - GETTING Function0<String> from Any?
2021-03-12 01:21:53,620 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,621 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,622 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,623 [main:106] - GETTING Function0<String> from Kla6
2021-03-12 01:21:53,642 [main:106] - GETTING Function0<String> from Int
2021-03-12 01:21:53,643 [main:106] - GETTING Function0<String> from Byte
2021-03-12 01:21:53,675 [main:106] - GETTING Function0<String> from CoroutineContext
2021-03-12 01:21:53,676 [main:106] - GETTING Function0<String> from Double
2021-03-12 01:21:53,709 [main:106] - GETTING Function0<String> from Any?
2021-03-12 01:21:53,710 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,711 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,712 [main:106] - GETTING Function0<String> from Continuation<Any?>
2021-03-12 01:21:53,722 [main:106] - GETTING Function0<String> from Double
2021-03-12 01:21:53,724 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,725 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,726 [main:106] - GETTING Function0<String> from CharSequence
2021-03-12 01:21:53,727 [main:106] - GETTING Function0<String> from List<String>
2021-03-12 01:21:53,728 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,729 [main:106] - GETTING Function0<String> from Triple<Float, MutableMap<Long?, UByte>?, Kla0?>
2021-03-12 01:21:53,730 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,731 [main:106] - GETTING Function0<String> from Continuation<Int>
2021-03-12 01:21:53,732 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,733 [main:106] - GETTING Function0<String> from Continuation<ULong>
2021-03-12 01:21:53,744 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,745 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,746 [main:106] - GETTING Function0<String> from A
2021-03-12 01:21:53,747 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,748 [main:106] - GETTING Function0<String> from List<String>
2021-03-12 01:21:53,749 [main:106] - GETTING Function0<String> from Boolean
2021-03-12 01:21:53,750 [main:106] - GETTING Function0<String> from String?
2021-03-12 01:21:53,782 [main:106] - GETTING Function0<String> from Kla6
2021-03-12 01:21:53,783 [main:106] - GETTING Function0<String> from CoroutineContext
2021-03-12 01:21:53,785 [main:106] - GETTING Function0<String> from String
2021-03-12 01:21:53,785 [main:114] - replacement of {"$Ty3:$Ty4;"} of type Function0<String> is { "ejrex"}
2021-03-12 01:21:53,967 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:21:53,968 [main:66] - Compilation checking started
2021-03-12 01:21:54,727 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('ꔞ', '?', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(-682400705, 408102653).repeat(1756718943)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(0).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('繂', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}

operator fun Int.component1() = this + 1

operator fun Int.component2() = ('춢').toShort().times(((0.4020756496825748)).toByte())

fun fu12(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
var prope8 = (s.map(a::map)).get(-1956454218)
val prope9 = "ukuze"
val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190)
var prope12 = 0
val prope13 = (prope2).length.rem(5449043128582712946)
var prope14 = (prope2).trimIndent()
val prope0 = Kla4()
val prope1 = Kla5()
var prope15 = ""
    for ((Ty3, Ty4) in IntRange(-1173087738, -470846648)) {
      prope15 += { "ejrex"}()
    }
    return prope15
}

fun box167(): String {
  val prope15 = fu12()
  return if (prope15 == "1:2;2:3;3:4;") "OK" else "fail: $prope15"
}


2021-03-12 01:21:54,728 [main:107] - replacing (prope15, String)
2021-03-12 01:21:54,728 [main:50] - replacing prope15 String
2021-03-12 01:21:54,728 [main:54] - Getting value of type String
2021-03-12 01:21:54,932 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:21:54,936 [main:58] - GENERATED VALUE OF TYPE String = "vxdih"
2021-03-12 01:21:54,936 [main:61] - GENERATED IS CALL =false
2021-03-12 01:21:55,168 [main:67] - randomType = Float?
2021-03-12 01:21:55,354 [main:302] - generating value of type = Float true depth = 0
2021-03-12 01:21:55,403 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@526d278]
2021-03-12 01:21:55,403 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38059803]
2021-03-12 01:21:55,404 [main:78] - Generated call from random type = (0.2410211f)?.toShort().toString((prope2).length)
2021-03-12 01:21:55,404 [main:114] - replacement of prope15 of type String is (0.2410211f)?.toShort().toString((prope2).length)
2021-03-12 01:21:55,580 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:21:55,580 [main:66] - Compilation checking started
2021-03-12 01:21:56,389 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('ꔞ', '?', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(-682400705, 408102653).repeat(1756718943)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(0).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('繂', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}

operator fun Int.component1() = this + 1

operator fun Int.component2() = ('춢').toShort().times(((0.4020756496825748)).toByte())

fun fu12(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
var prope8 = (s.map(a::map)).get(-1956454218)
val prope9 = "ukuze"
val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190)
var prope12 = 0
val prope13 = (prope2).length.rem(5449043128582712946)
var prope14 = (prope2).trimIndent()
val prope0 = Kla4()
val prope1 = Kla5()
var prope15 = ""
    for ((Ty3, Ty4) in IntRange(-1173087738, -470846648)) {
      prope15 += { "ejrex"}()
    }
    return (0.2410211f)?.toShort().toString((prope2).length)
}

fun box167(): String {
  val prope15 = fu12()
  return if (prope15 == "1:2;2:3;3:4;") "OK" else "fail: $prope15"
}


2021-03-12 01:21:56,389 [main:107] - replacing (this, Int)
2021-03-12 01:21:56,390 [main:50] - replacing this Int
2021-03-12 01:21:56,390 [main:54] - Getting value of type Int
2021-03-12 01:21:56,566 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:21:56,571 [main:58] - GENERATED VALUE OF TYPE Int = -668607615
2021-03-12 01:21:56,571 [main:61] - GENERATED IS CALL =false
2021-03-12 01:21:56,782 [main:67] - randomType = ULong
2021-03-12 01:21:56,960 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 01:21:57,003 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@ec09828]
2021-03-12 01:21:57,004 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UByte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6eb668b7]
2021-03-12 01:21:57,004 [main:78] - Generated call from random type = (2840590090038559377.toULong()).toUByte().countTrailingZeroBits()
2021-03-12 01:21:57,005 [main:106] - GETTING Int from String
2021-03-12 01:21:57,025 [main:113] - Case = [public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@55758fab]]
2021-03-12 01:21:57,026 [main:117] - GENERATED CALL = ((s.map(a::map)).get(0)).lastIndex
2021-03-12 01:21:57,026 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9], public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@399e1d22]]
2021-03-12 01:21:57,026 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d0b8cc9]
2021-03-12 01:21:57,202 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:21:57,207 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@399e1d22]
2021-03-12 01:21:57,384 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 01:21:57,568 [main:43] - GENERATING CALL OF fun CharArray(size: kotlin.Int, init: (kotlin.Int)->kotlin.Char): CharArray = TODO()
2021-03-12 01:21:57,574 [main:61] - WITHOUT TYPE PARAMS = fun CharArray(size: kotlin.Int, init: (kotlin.Int)->kotlin.Char): CharArray = TODO()
2021-03-12 01:21:58,188 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:21:58,193 [main:302] - generating value of type = Function1<Int, Char> false depth = 3
2021-03-12 01:21:58,198 [main:302] - generating value of type = Char true depth = 4
2021-03-12 01:21:58,202 [main:95] - GENERATED = CharArray(1817499467, {a: Int -> '㯍'})
2021-03-12 01:21:58,203 [main:117] - GENERATED CALL = ((s.map(a::map)).get(0)).subSequence((stub({ "lkuci"})).length, 1052625185).indexOfAny(CharArray(1817499467, {a: Int -> '㯍'}), var prope12 =
2021-03-12 01:21:58,203 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7aca8561]]
2021-03-12 01:21:58,203 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:21:58,203 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7aca8561]
2021-03-12 01:21:58,204 [main:117] - GENERATED CALL = ((s.map(a::map)).get(0)).compareTo(val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o).inv()
2021-03-12 01:21:58,204 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6455ad9b]]
2021-03-12 01:21:58,204 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6455ad9b]
2021-03-12 01:21:58,204 [main:117] - GENERATED CALL = ((s.map(a::map)).get(0)).length.takeHighestOneBit()
2021-03-12 01:21:58,204 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79b1b471]]
2021-03-12 01:21:58,204 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79b1b471]
2021-03-12 01:21:58,204 [main:117] - GENERATED CALL = ((s.map(a::map)).get(0)).length.ushr((stub({ "lkuci"})).length)
2021-03-12 01:21:58,204 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@629a23da]]
2021-03-12 01:21:58,204 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@629a23da]
2021-03-12 01:21:58,381 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:21:58,385 [main:117] - GENERATED CALL = ((s.map(a::map)).get(0)).length.coerceAtLeast(2007559336)
2021-03-12 01:21:58,386 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3af207fc]]
2021-03-12 01:21:58,386 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3af207fc]
2021-03-12 01:21:58,386 [main:117] - GENERATED CALL = ((s.map(a::map)).get(0)).length.takeLowestOneBit()
2021-03-12 01:21:58,386 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@c16feeb]]
2021-03-12 01:21:58,386 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@341a8ea0]
2021-03-12 01:21:58,386 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@c16feeb]
2021-03-12 01:21:58,386 [main:117] - GENERATED CALL = ((s.map(a::map)).get(0)).compareTo(stub({ "lkuci"})).dec()
2021-03-12 01:21:58,386 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@497735e1]]
2021-03-12 01:21:58,386 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4ac06826]
2021-03-12 01:21:58,563 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:21:58,568 [main:117] - GENERATED CALL = ((s.map(a::map)).get(0)).get(629862877).code
2021-03-12 01:21:58,568 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@48fceda2], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1847e32d]]
2021-03-12 01:21:58,568 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1847e32d]
2021-03-12 01:21:58,569 [main:117] - GENERATED CALL = ((s.map(a::map)).get(0)).length.coerceIn(var prope12 =
2021-03-12 01:21:58,569 [main:114] - replacement of this of type Int is (2840590090038559377.toULong()).toUByte().countTrailingZeroBits()
2021-03-12 01:21:58,750 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:21:58,750 [main:66] - Compilation checking started
2021-03-12 01:21:59,549 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('ꔞ', '?', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(-682400705, 408102653).repeat(1756718943)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(0).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('繂', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}

operator fun Int.component1() = (2840590090038559377.toULong()).toUByte().countTrailingZeroBits() + 1

operator fun Int.component2() = ('춢').toShort().times(((0.4020756496825748)).toByte())

fun fu12(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
var prope8 = (s.map(a::map)).get(-1956454218)
val prope9 = "ukuze"
val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190)
var prope12 = 0
val prope13 = (prope2).length.rem(5449043128582712946)
var prope14 = (prope2).trimIndent()
val prope0 = Kla4()
val prope1 = Kla5()
var prope15 = ""
    for ((Ty3, Ty4) in IntRange(-1173087738, -470846648)) {
      prope15 += { "ejrex"}()
    }
    return (0.2410211f)?.toShort().toString((prope2).length)
}

fun box167(): String {
  val prope15 = fu12()
  return if (prope15 == "1:2;2:3;3:4;") "OK" else "fail: $prope15"
}


2021-03-12 01:21:59,549 [main:107] - replacing (prope15 == "1:2;2:3;3:4;", Boolean)
2021-03-12 01:21:59,552 [main:50] - replacing prope15 == "1:2;2:3;3:4;" Boolean
2021-03-12 01:21:59,552 [main:54] - Getting value of type Boolean
2021-03-12 01:21:59,748 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:21:59,753 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 01:21:59,753 [main:61] - GENERATED IS CALL =false
2021-03-12 01:21:59,763 [main:67] - randomType = Int
2021-03-12 01:21:59,950 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:21:59,999 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a485b5]
2021-03-12 01:21:59,999 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@627aa921]
2021-03-12 01:21:59,999 [main:78] - Generated call from random type = (1775282850).toChar().isLetterOrDigit()
2021-03-12 01:22:00,000 [main:106] - GETTING Boolean from Int
2021-03-12 01:22:00,032 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@42707ecf], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@376de4f8]]
2021-03-12 01:22:00,032 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@42707ecf]
2021-03-12 01:22:00,033 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@376de4f8]
2021-03-12 01:22:00,033 [main:117] - GENERATED CALL = ((stub({ "lkuci"})).length).rangeTo(((0.4020756496825748)).toByte()).equals(Kla2().prope2)
2021-03-12 01:22:00,033 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a485b5], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14cf536a]]
2021-03-12 01:22:00,033 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a485b5]
2021-03-12 01:22:00,033 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14cf536a]
2021-03-12 01:22:00,033 [main:117] - GENERATED CALL = ((stub({ "lkuci"})).length).toChar().isLowSurrogate()
2021-03-12 01:22:00,033 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a485b5], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5149c4ab]]
2021-03-12 01:22:00,033 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a485b5]
2021-03-12 01:22:00,033 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5149c4ab]
2021-03-12 01:22:00,033 [main:117] - GENERATED CALL = ((stub({ "lkuci"})).length).toChar().isLowerCase()
2021-03-12 01:22:00,033 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e2eab74]]
2021-03-12 01:22:00,033 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e2eab74]
2021-03-12 01:22:00,034 [main:117] - GENERATED CALL = ((stub({ "lkuci"})).length).equals((Kla2().prope2))
2021-03-12 01:22:00,034 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a485b5], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@642a041d]]
2021-03-12 01:22:00,034 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a485b5]
2021-03-12 01:22:00,034 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@642a041d]
2021-03-12 01:22:00,034 [main:117] - GENERATED CALL = ((stub({ "lkuci"})).length).toChar().isWhitespace()
2021-03-12 01:22:00,034 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@31e4eedd], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e2eab74]]
2021-03-12 01:22:00,034 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@31e4eedd]
2021-03-12 01:22:00,034 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e2eab74]
2021-03-12 01:22:00,034 [main:117] - GENERATED CALL = ((stub({ "lkuci"})).length).toInt().equals(Kla2().prope2)
2021-03-12 01:22:00,034 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51d32a8b], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@73e1afe4]]
2021-03-12 01:22:00,034 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51d32a8b]
2021-03-12 01:22:00,034 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@73e1afe4]
2021-03-12 01:22:00,034 [main:117] - GENERATED CALL = ((stub({ "lkuci"})).length).div(((0.4020756496825748))).isNaN()
2021-03-12 01:22:00,035 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a485b5], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@732c0a10]]
2021-03-12 01:22:00,035 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a485b5]
2021-03-12 01:22:00,035 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@732c0a10]
2021-03-12 01:22:00,035 [main:117] - GENERATED CALL = ((stub({ "lkuci"})).length).toChar().isHighSurrogate()
2021-03-12 01:22:00,035 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4aef001f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@27080a5e]]
2021-03-12 01:22:00,035 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4aef001f]
2021-03-12 01:22:00,035 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@27080a5e]
2021-03-12 01:22:00,221 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:22:00,221 [main:117] - GENERATED CALL = ((stub({ "lkuci"})).length).toLong().equals("syniw")
2021-03-12 01:22:00,221 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4c198bd5], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@73e1afe4]]
2021-03-12 01:22:00,221 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4c198bd5]
2021-03-12 01:22:00,221 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@73e1afe4]
2021-03-12 01:22:00,221 [main:117] - GENERATED CALL = ((stub({ "lkuci"})).length).toDouble().isNaN()
2021-03-12 01:22:00,221 [main:114] - replacement of prope15 == "1:2;2:3;3:4;" of type Boolean is ((stub({ "lkuci"})).length).toInt().equals(Kla2().prope2)
2021-03-12 01:22:00,410 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:22:00,410 [main:66] - Compilation checking started
2021-03-12 01:22:01,202 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun stub(f: () -> String): String = f()

class A(val z: String) {
    fun map(s: String) = z + s
}


fun box(): String {
    val a = A("O")
    val s = arrayOf("K")
    return s.map(a::map).first()
}

data class Kla0(val o: String) {
    operator fun component2(): String = "K"
}

fun fu0(c: suspend (Kla0) -> Unit) {
    val a = A("O")
val s = arrayOf("K")
({a: Kla0 -> repeat(1471953850, {a: Int -> print("wgecv")})} as (suspend Kla0.() -> Unit)).startCoroutine(Kla0("O"), Kla1)
}

fun box762(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""

    fu0 {
        (Ty1, Ty2) ->
        prope2 = "dlgct"
    }

    return (s.map(a::map)).get(1466108888).replaceFirstChar({a: Char -> '揰'})
}

fun <Ty0> fu1(Ty1: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
Ty1(prope2.getOrThrow())
    }
}

fun fu2(Ty1: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
prope2.exceptionOrNull()?.let({a: Throwable -> check(equals("jomqs"), { "yxdsb"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val a = A("O")
val s = arrayOf("K")
this.prope2 = runCatching<Any?>({ "iunrc"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val a = A("O")
val s = arrayOf("K")
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu3(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu3(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { print("seajl")}

    fun fu8() {
        val a = A("O")
val s = arrayOf("K")
prope4 = 0
        prope5 = (s).isNotEmpty()
        prope6 = { check((s).equals("jomqs"))}
    }

    suspend fun fu9() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (stub({ "feqkq"})).subSequence(1471953850, numberOfSuspensions).any()) {
        val a = A("O")
val s = arrayOf("K")
for (i in 1..numberOfSuspensions) {
            if ((s).size.unaryPlus() != (Kla1()).equals("hkpzc").compareTo(true)) error((s).get(743559576).take(704260342) + (stub({ "feqkq"})).get(0).titlecase() + prope4)
            prope6()
        }
        if ((s).equals("jomqs").not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((A("lhnqj").z).toUpperCase())
        prope6()
        if (checkFinished && (stub({ "feqkq"})).get(704260342).isLetter()) error((stub({ "feqkq"})).replace('繂', '?', true))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A("O")
val s = arrayOf("K")
prope1.prope6 = { repeat(-1956454218, {a: Int -> println("gsmsa")})}
    }

    override fun fu3(exception: Throwable) {
        throw exception
    }
}

fun box147(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
var prope8 = (s.map(a::map)).get(-1956454218);
    val prope9 = "ukuze"
    val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
    var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190)
    var prope12 = 0
    val prope13 = (prope2).length.rem(5449043128582712946)

    var prope14 = (prope2).trimIndent()
    if ((fu1<Int>({a: Int -> require(true)})).resumeWith(runCatching<Int>({ (stub({ "lkuci"})).length})).equals(Kla2().prope2)) return (Kla2().prope2).toString()

    prope8 = (A("jmkiq").z).replace('ꔞ', '?', Kla5().prope5);
    prope14 = (stub({ "lkuci"})).subSequence(-682400705, 408102653).repeat(1756718943)
    if ((Kla0("qhnah").o).startsWith(prope2, Kla5().prope5)) return (Kla0("qhnah").o).removeRange(1466108888, 302836307)


    prope8 = ((0.4020756496825748)).toByte().toString(1471953850);
    prope14 = fu11(c = { "fyqwr"}, b = (stub({ "lkuci"})).length.div(-5449043128582712946), a = (Kla6).equals(Kla2().prope2).compareTo(Kla5().prope5))
    if ((a).equals(Kla2().prope2)) return "fail 3: $((s.map(a::map))).get(0).plus(Kla2().prope2) != $prope10 or $(a).map(var prope2 =.replaceFirst('繂', 'ꔞ', Kla5().prope5) != $prope9"


    prope8 = (Kla0("qhnah").component2()).commonPrefixWith("ddcpp", Kla5().prope5);
    prope14 = (Triple<Float, MutableMap<Long?, UByte>?, Kla0?>(0.4906792f, mutableMapOf<Long?, UByte>(), Kla0("zadfi"))).third?.component2()!!
    if ((A("jmkiq").z).regionMatches(-682400705, StringBuilder(1978148260), 1492157493, -1038175747, Kla5().prope5)) return ((s.map(a::map)).get(1466108888)).subSequence(0, 406505318).repeat(0)

    return (prope2).plus(Kla2().prope2)
}

fun fu11(a: Int, b: Long, c: () -> String): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
val prope0 = Kla4()
val prope1 = Kla5()
return (Kla0("qhnah").o).commonSuffixWith("pzump", Kla5().prope5)
}

operator fun Int.component1() = (2840590090038559377.toULong()).toUByte().countTrailingZeroBits() + 1

operator fun Int.component2() = ('춢').toShort().times(((0.4020756496825748)).toByte())

fun fu12(): String {
    val a = A("O")
val s = arrayOf("K")
var prope2 = ""
var prope8 = (s.map(a::map)).get(-1956454218)
val prope9 = "ukuze"
val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190)
var prope12 = 0
val prope13 = (prope2).length.rem(5449043128582712946)
var prope14 = (prope2).trimIndent()
val prope0 = Kla4()
val prope1 = Kla5()
var prope15 = ""
    for ((Ty3, Ty4) in IntRange(-1173087738, -470846648)) {
      prope15 += { "ejrex"}()
    }
    return (0.2410211f)?.toShort().toString((prope2).length)
}

fun box167(): String {
  val a = A("O")
val s = arrayOf("K")
var prope2 = ""
var prope8 = (s.map(a::map)).get(-1956454218)
val prope9 = "ukuze"
val prope10 = (s).get(1).prependIndent(Kla0("qhnah").o)
var prope11 = ((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)).div(-2319964002604511190)
var prope12 = 0
val prope13 = (prope2).length.rem(5449043128582712946)
var prope14 = (prope2).trimIndent()
val prope0 = Kla4()
val prope1 = Kla5()
val prope15 = fu12()
  return if (((stub({ "lkuci"})).length).toInt().equals(Kla2().prope2)) "OK" else "fail: $prope15"
}


2021-03-12 01:22:01,203 [main:107] - replacing ("OK", String)
2021-03-12 01:22:01,203 [main:50] - replacing "OK" String
2021-03-12 01:22:01,203 [main:54] - Getting value of type String
2021-03-12 01:22:01,392 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:22:01,397 [main:58] - GENERATED VALUE OF TYPE String = "wotat"
2021-03-12 01:22:01,398 [main:61] - GENERATED IS CALL =false
2021-03-12 01:22:01,854 [main:67] - randomType = HashSet<Collection<Float>>
2021-03-12 01:22:02,039 [main:302] - generating value of type = HashSet<Collection<Float>> false depth = 0
2021-03-12 01:22:02,236 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<Collection<Float>> = TODO()
2021-03-12 01:22:02,242 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<Collection<Float>> = TODO()
2021-03-12 01:22:02,440 [main:95] - GENERATED = linkedSetOf<Collection<Float>>()
2021-03-12 01:22:02,600 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@2a2cb174]
2021-03-12 01:22:02,600 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3d8904f8]
2021-03-12 01:22:02,600 [main:78] - Generated call from random type = (linkedSetOf<Collection<Float>>()).toArray().contentToString()
2021-03-12 01:22:02,601 [main:106] - GETTING String from List<String>
2021-03-12 01:22:02,636 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@422cb525], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f548ae4]]
2021-03-12 01:22:02,636 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@422cb525]
2021-03-12 01:22:02,636 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f548ae4]
2021-03-12 01:22:02,877 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 01:22:02,882 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:22:02,887 [main:117] - GENERATED CALL = (s.map(a::map)).get((prope2).length).filterIndexed({a: Int, b: Char -> true})
2021-03-12 01:22:02,888 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@422cb525], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1573a7e0]]
2021-03-12 01:22:02,888 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@422cb525]
2021-03-12 01:22:03,075 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:22:03,080 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1573a7e0]
2021-03-12 01:22:03,267 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:22:03,272 [main:117] - GENERATED CALL = (s.map(a::map)).get(1076355852).substringAfterLast('ա', (Kla0("qhnah").o))
2021-03-12 01:22:03,273 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@422cb525], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0a1b3]]
2021-03-12 01:22:03,273 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@422cb525]
2021-03-12 01:22:03,273 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0a1b3]
2021-03-12 01:22:03,465 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:22:03,662 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:22:03,670 [main:117] - GENERATED CALL = (s.map(a::map)).get((stub({ "lkuci"})).length).padStart(-913081658, '䣌')
2021-03-12 01:22:03,670 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@422cb525], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]]
2021-03-12 01:22:03,670 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@422cb525]
2021-03-12 01:22:03,670 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@531b5ac0]
2021-03-12 01:22:03,859 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:22:03,864 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:22:03,869 [main:117] - GENERATED CALL = (s.map(a::map)).get(((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218))).dropWhile({a: Char -> false})
2021-03-12 01:22:03,869 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@422cb525], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@573137a1]]
2021-03-12 01:22:03,870 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@422cb525]
2021-03-12 01:22:03,870 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@573137a1]
2021-03-12 01:22:03,870 [main:117] - GENERATED CALL = (s.map(a::map)).get((prope2).length).trim()
2021-03-12 01:22:03,870 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@422cb525], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e632037]]
2021-03-12 01:22:03,870 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@422cb525]
2021-03-12 01:22:03,870 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e632037]
2021-03-12 01:22:03,870 [main:117] - GENERATED CALL = (s.map(a::map)).get((prope2).length).uppercase()
2021-03-12 01:22:03,870 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.getOrNull(index: kotlin.Int): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@655936bd]]
2021-03-12 01:22:03,870 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.getOrNull(index: kotlin.Int): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@655936bd]
2021-03-12 01:22:03,871 [main:117] - GENERATED CALL = (s.map(a::map)).getOrNull(((s.map(a::map)).get(0)).compareTo((s.map(a::map)).get(1956454218)))
2021-03-12 01:22:03,871 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@422cb525], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707202d1]]
2021-03-12 01:22:03,871 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@422cb525]
2021-03-12 01:22:03,871 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707202d1]
2021-03-12 01:22:04,057 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:22:04,062 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:22:04,067 [main:117] - GENERATED CALL = (s.map(a::map)).get((prope2).length).takeLastWhile({a: Char -> false})
2021-03-12 01:22:04,068 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@422cb525], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]]
2021-03-12 01:22:04,068 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@422cb525]
2021-03-12 01:22:04,068 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8f31af]
2021-03-12 01:22:04,068 [main:117] - GENERATED CALL = (s.map(a::map)).get((stub({ "lkuci"})).length).trimIndent()
2021-03-12 01:22:04,068 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.getOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> T): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@501c3ef6]]
2021-03-12 01:22:04,068 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.getOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> T): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@501c3ef6]
2021-03-12 01:22:04,255 [main:302] - generating value of type = Function1<Int, T> false depth = 0
2021-03-12 01:22:04,260 [main:302] - generating value of type = T false depth = 1
2021-03-12 01:22:04,691 [main:43] - GENERATING CALL OF fun <T> requireNotNull(value: Collection<Kla4>, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-12 01:22:04,697 [main:61] - WITHOUT TYPE PARAMS = fun <T> requireNotNull(value: Collection<Kla4>, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-12 01:22:05,116 [main:302] - generating value of type = Collection<Kla4> false depth = 4
2021-03-12 01:22:05,308 [main:43] - GENERATING CALL OF fun <T> setOf(elements: Kla4): Collection<Kla4> = TODO()
2021-03-12 01:22:05,315 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(elements: Kla4): Collection<Kla4> = TODO()
2021-03-12 01:22:05,510 [main:302] - generating value of type = Kla4 false depth = 7
2021-03-12 01:22:05,516 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu5() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu5(c: Continuation<*>) {
        val a = A("O")
val s = arrayOf("K")
if (c !is CoroutineStackFrame) error((stub({ "feqkq"})).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu6(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { true}?.let { error("sxcrh") }
    }

    fun fu7(method: String) {
        val a = A("O")
val s = arrayOf("K")
prope3.find { it?.methodName?.startsWith((s).joinToString("zrwhg", StringBuilder("nfiqb"), "pjgmg", -279116085, StringBuilder(-1471953850), null)) == true } ?: error((stub({ "feqkq"})).get(-743559576).lowercase() +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 01:22:05,516 [main:95] - GENERATED = setOf<Kla4>(Kla4())
2021-03-12 01:22:05,516 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 01:22:05,521 [main:302] - generating value of type = Any false depth = 5
2021-03-12 01:22:05,521 [main:95] - GENERATED = requireNotNull<Collection<Kla4>>(setOf<Kla4>(Kla4()), { "mfmnp"})
