2021-03-12 04:34:22,505 [main:66] - Compilation checking started
2021-03-12 04:34:23,963 [main:112] - generating klass AbstractClass text = public abstract class AbstractClass<T> {
    public fun printSome() : T = some

    public abstract val some: T
}
2021-03-12 04:34:25,044 [main:302] - generating value of type = Class false depth = 1
2021-03-12 04:34:25,044 [main:112] - generating klass Class text = public class Class: AbstractClass<String>() {
    public override val some: String
        get() = "OK"

}
2021-03-12 04:34:25,046 [main:112] - generating klass Class text = public class Class: AbstractClass<String>() {
    public override val some: String
        get() = "OK"

}
2021-03-12 04:34:25,257 [main:45] - Trying to change 2 nodes
2021-03-12 04:34:25,258 [main:53] - replacing (Class().printSome(), String)
2021-03-12 04:34:25,258 [main:50] - replacing Class().printSome() String
2021-03-12 04:34:25,259 [main:54] - Getting value of type String
2021-03-12 04:34:25,362 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:34:25,366 [main:58] - GENERATED VALUE OF TYPE String = "ivfzh"
2021-03-12 04:34:25,367 [main:61] - GENERATED IS CALL =false
2021-03-12 04:34:25,368 [main:67] - randomType = Class
2021-03-12 04:34:25,516 [main:302] - generating value of type = Class false depth = 0
2021-03-12 04:34:25,517 [main:112] - generating klass Class text = public class Class: AbstractClass<String>() {
    public override val some: String
        get() = "OK"

}
2021-03-12 04:34:25,570 [main:149] - GENERATING call of type public final fun printSome(): kotlin.String defined in AbstractClass[SimpleFunctionDescriptorImpl@20854ebe]
2021-03-12 04:34:25,571 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@77547450]
2021-03-12 04:34:25,668 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:34:25,669 [main:78] - Generated call from random type = (Class()).printSome().plus("lkdlf")
2021-03-12 04:34:25,669 [main:61] - replacement of Class().printSome() of type String is (Class()).printSome().plus("lkdlf")
2021-03-12 04:34:25,769 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:34:25,770 [main:66] - Compilation checking started
2021-03-12 04:34:26,116 [main:53] - Result = true
Text:
fun box() = (Class()).printSome().plus("lkdlf")

public abstract class AbstractClass<T> {
    public fun printSome() : T = some

    public abstract val some: T
}

public class Class: AbstractClass<String>() {
    public override val some: String
        get() = "OK"

}
2021-03-12 04:34:26,119 [main:53] - replacing ("OK", String)
2021-03-12 04:34:26,119 [main:50] - replacing "OK" String
2021-03-12 04:34:26,119 [main:54] - Getting value of type String
2021-03-12 04:34:26,244 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:34:26,245 [main:58] - GENERATED VALUE OF TYPE String = "wezus"
2021-03-12 04:34:26,245 [main:61] - GENERATED IS CALL =false
2021-03-12 04:34:26,442 [main:67] - randomType = Short?
2021-03-12 04:34:26,519 [main:302] - generating value of type = Short true depth = 0
2021-03-12 04:34:26,643 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1d3bc1df]
2021-03-12 04:34:26,644 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b5b64a1]
2021-03-12 04:34:26,726 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:34:26,728 [main:78] - Generated call from random type = (-10382)?.toLong().toString(-1801011589)
2021-03-12 04:34:26,728 [main:61] - replacement of "OK" of type String is (-10382)?.toLong().toString(-1801011589)
2021-03-12 04:34:26,828 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:34:26,828 [main:66] - Compilation checking started
2021-03-12 04:34:27,345 [main:53] - Result = true
Text:
fun box() = (Class()).printSome().plus("lkdlf")

public abstract class AbstractClass<T> {
    public fun printSome() : T = some

    public abstract val some: T
}

public class Class: AbstractClass<String>() {
    public override val some: String
        get() = (-10382)?.toLong().toString(-1801011589)

}
2021-03-12 04:34:27,442 [main:119] - TRYING TO REPLACE CONSTANT 10382
2021-03-12 04:34:27,540 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 04:34:27,541 [main:66] - Compilation checking started
2021-03-12 04:34:27,903 [main:53] - Result = true
Text:
fun box() = (Class()).printSome().plus("lkdlf")

public abstract class AbstractClass<T> {
    public fun printSome() : T = some

    public abstract val some: T
}

public class Class: AbstractClass<String>() {
    public override val some: String
        get() = (10382)?.toLong().toString(-1801011589)

}
2021-03-12 04:34:27,903 [main:119] - TRYING TO REPLACE CONSTANT 1801011589
2021-03-12 04:34:28,019 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 04:34:28,019 [main:66] - Compilation checking started
2021-03-12 04:34:28,403 [main:53] - Result = true
Text:
fun box() = (Class()).printSome().plus("lkdlf")

public abstract class AbstractClass<T> {
    public fun printSome() : T = some

    public abstract val some: T
}

public class Class: AbstractClass<String>() {
    public override val some: String
        get() = (10382)?.toLong().toString(10382)

}
2021-03-12 04:34:28,440 [main:41] - AFTER TRY 0 res = fun box() = Class().printSome()

public abstract class AbstractClass<T> {
    public fun printSome() : T = some

    public abstract val some: T
}

public class Class: AbstractClass<String>() {
    public override val some: String
        get() = "OK"

}
2021-03-12 04:34:28,640 [main:112] - generating klass AbstractClass text = public abstract class AbstractClass<T> {
    public fun printSome() : T = some

    public abstract val some: T
}
2021-03-12 04:34:28,906 [main:302] - generating value of type = Class false depth = 1
2021-03-12 04:34:28,907 [main:112] - generating klass Class text = public class Class: AbstractClass<String>() {
    public override val some: String
        get() = "OK"

}
2021-03-12 04:34:28,909 [main:112] - generating klass Class text = public class Class: AbstractClass<String>() {
    public override val some: String
        get() = "OK"

}
2021-03-12 04:34:29,137 [main:43] - Try №0
2021-03-12 04:34:29,387 [main:41] - AFTER TRY 1 res = fun box() = Class().printSome()

public abstract class AbstractClass<T> {
    public fun printSome() : T = some

    public abstract val some: T
}

public class Class: AbstractClass<String>() {
    public override val some: String
        get() = "OK"

}
2021-03-12 04:34:29,574 [main:112] - generating klass AbstractClass text = public abstract class AbstractClass<T> {
    public fun printSome() : T = some

    public abstract val some: T
}
2021-03-12 04:34:30,754 [main:302] - generating value of type = Class false depth = 1
2021-03-12 04:34:30,754 [main:112] - generating klass Class text = public class Class: AbstractClass<String>() {
    public override val some: String
        get() = "OK"

}
2021-03-12 04:34:30,755 [main:112] - generating klass Class text = public class Class: AbstractClass<String>() {
    public override val some: String
        get() = "OK"

}
2021-03-12 04:34:30,921 [main:43] - Try №1
2021-03-12 04:34:46,187 [main:48] - Already checked
2021-03-12 04:34:46,461 [main:48] - Already checked
2021-03-12 04:34:50,885 [main:69] - Trying to insert override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
2021-03-12 04:34:51,000 [main:66] - Compilation checking started
2021-03-12 04:34:52,096 [main:103] - Trying to change 217 nodes
2021-03-12 04:34:52,097 [main:107] - replacing (fu3 {
            prope2 = it
        }, Continuation<Any?>)
2021-03-12 04:34:52,097 [main:50] - replacing fu3 {
            prope2 = it
        } Continuation<Any?>
2021-03-12 04:34:52,097 [main:54] - Getting value of type Continuation<Any?>
2021-03-12 04:34:52,256 [main:302] - generating value of type = Continuation<Any?> false depth = 0
2021-03-12 04:34:52,447 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<Any?> = TODO()
2021-03-12 04:34:52,451 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<Any?> = TODO()
2021-03-12 04:34:53,024 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 04:34:53,201 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:34:53,206 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:34:53,660 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 04:34:53,831 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:34:53,835 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:34:54,374 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 04:34:54,538 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:34:54,541 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:34:55,087 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-12 04:34:55,243 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:34:55,246 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:34:55,732 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 15
2021-03-12 04:34:55,967 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:34:55,972 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:34:56,460 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 18
2021-03-12 04:34:56,460 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:34:56,460 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:34:56,460 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:34:56,460 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:34:56,460 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:34:56,460 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<Any?> = TODO()
2021-03-12 04:34:56,460 [main:58] - GENERATED VALUE OF TYPE Continuation<Any?> = 
2021-03-12 04:34:56,767 [main:67] - randomType = Kla3<Kla6>
2021-03-12 04:34:56,953 [main:302] - generating value of type = Kla3<Kla6> false depth = 0
2021-03-12 04:34:56,955 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(prope2: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 04:34:57,417 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-12 04:34:57,419 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun resumeWithException(prope2: Throwable) {
        throw prope2
    }
}
2021-03-12 04:34:57,447 [main:106] - GETTING Continuation<Any?> from String
2021-03-12 04:34:57,477 [main:106] - GETTING Continuation<Any?> from Class
2021-03-12 04:34:57,489 [main:106] - GETTING Continuation<Any?> from String
2021-03-12 04:34:57,491 [main:106] - GETTING Continuation<Any?> from String
2021-03-12 04:34:57,491 [main:111] - Cant find and generate replacement for fu3 {
            prope2 = it
        } type Continuation<Any?>
2021-03-12 04:34:57,491 [main:107] - replacing ("OK", String)
2021-03-12 04:34:57,491 [main:50] - replacing "OK" String
2021-03-12 04:34:57,491 [main:54] - Getting value of type String
2021-03-12 04:34:57,636 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:34:57,638 [main:58] - GENERATED VALUE OF TYPE String = "wofdn"
2021-03-12 04:34:57,638 [main:61] - GENERATED IS CALL =false
2021-03-12 04:34:57,642 [main:67] - randomType = String
2021-03-12 04:34:57,790 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:34:57,823 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60fafcd9]
2021-03-12 04:34:57,956 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:34:57,959 [main:78] - Generated call from random type = ("cydbq").replaceIndentByMargin("smjxl", Class().some)
2021-03-12 04:34:57,959 [main:114] - replacement of "OK" of type String is ("cydbq").replaceIndentByMargin("smjxl", Class().some)
2021-03-12 04:34:58,146 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:34:58,147 [main:66] - Compilation checking started
2021-03-12 04:34:58,784 [main:53] - Result = true
Text:

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() = Class().printSome()

public abstract class AbstractClass<T> {
    public fun printSome() : T = some

    public abstract val some: T
}

public class Class: AbstractClass<String>() {
    public override val some: String
        get() = "OK"

}

class Kla0 {
    var prope2: Throwable? = null
    val prope3 = ArrayList<() -> Unit>()

    suspend fun fu4(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
        prope3.add {
            x.resume(v)
        }

        COROUTINE_SUSPENDED
    }

    suspend fun fu5(e: Exception): String = suspendCoroutineUninterceptedOrReturn { x ->
        prope3.add {
            x.resumeWithException(e)
        }

        COROUTINE_SUSPENDED
    }

    fun fu6(c: suspend Kla0.() -> Unit) {
        c.startCoroutine(this, fu3 {
            prope2 = it
        })
        while (prope3.isNotEmpty()) {
            prope3[0]()
            prope3.removeAt(0)
        }
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val prope4 = Kla0()
    prope4.fu6(c)

    if (prope4.prope2?.message != "OK") {
        throw RuntimeException("Unexpected result: ${prope4.prope2?.message}")
    }
}

fun fu1(t: Throwable) {
    throw t
}

fun box558(): String {
    fu0 {
        throw RuntimeException("OK")
    }

    fu0 {
        fu1(RuntimeException("OK"))
    }

    fu0 {
        fu5(RuntimeException("OK"))
    }

    fu0 {
        try {
            fu5(RuntimeException("fail 1"))
        } catch (e: RuntimeException) {
            fu5(RuntimeException("OK"))
        }
    }

    fu0 {
        try {
            fu5(Exception("OK"))
        } catch (e: RuntimeException) {
            fu5(RuntimeException("fail 3"))
            throw RuntimeException("fail 4")
        }
    }

    return ("cydbq").replaceIndentByMargin("smjxl", Class().some)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(prope2: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu10(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu12() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun resumeWithException(prope2: Throwable) {
        throw prope2
    }
}


2021-03-12 04:34:58,788 [main:107] - replacing (prope4.prope2, Throwable?)
2021-03-12 04:34:58,788 [main:50] - replacing prope4.prope2 Throwable?
2021-03-12 04:34:58,789 [main:54] - Getting value of type Throwable?
2021-03-12 04:34:58,932 [main:58] - GENERATED VALUE OF TYPE Throwable? = null
2021-03-12 04:34:58,932 [main:61] - GENERATED IS CALL =false
2021-03-12 04:34:59,782 [main:67] - randomType = Triple<HashMap<UByte, Long>, Boolean, Kla2?>
2021-03-12 04:34:59,919 [main:302] - generating value of type = Triple<HashMap<UByte, Long>, Boolean, Kla2?> false depth = 0
2021-03-12 04:35:00,068 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: HashMap<UByte, Long>, second: Boolean, third: Kla2?): Triple<HashMap<UByte, Long>, Boolean, Kla2?> = TODO()
2021-03-12 04:35:00,072 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: HashMap<UByte, Long>, second: Boolean, third: Kla2?): Triple<HashMap<UByte, Long>, Boolean, Kla2?> = TODO()
2021-03-12 04:35:00,210 [main:302] - generating value of type = HashMap<UByte, Long> false depth = 3
2021-03-12 04:35:00,346 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<UByte, Long> = TODO()
2021-03-12 04:35:00,349 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<UByte, Long> = TODO()
2021-03-12 04:35:00,484 [main:95] - GENERATED = linkedMapOf<UByte, Long>()
2021-03-12 04:35:00,484 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 04:35:00,486 [main:302] - generating value of type = Kla2 false depth = 3
2021-03-12 04:35:00,488 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}
2021-03-12 04:35:00,488 [main:95] - GENERATED = Triple<HashMap<UByte, Long>, Boolean, Kla2?>(linkedMapOf<UByte, Long>(), false, Kla2())
2021-03-12 04:35:00,519 [main:106] - GETTING Throwable? from String
2021-03-12 04:35:00,549 [main:106] - GETTING Throwable? from String
2021-03-12 04:35:00,550 [main:106] - GETTING Throwable? from String
2021-03-12 04:35:00,551 [main:106] - GETTING Throwable? from Class
2021-03-12 04:35:00,566 [main:114] - replacement of prope4.prope2 of type Throwable? is null
2021-03-12 04:35:00,711 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(NULL)
2021-03-12 04:35:00,711 [main:66] - Compilation checking started
2021-03-12 04:35:01,144 [main:49] - Result = false
Text:

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() = Class().printSome()

public abstract class AbstractClass<T> {
    public fun printSome() : T = some

    public abstract val some: T
}

public class Class: AbstractClass<String>() {
    public override val some: String
        get() = "OK"

}

class Kla0 {
    var prope2: Throwable? = null
    val prope3 = ArrayList<() -> Unit>()

    suspend fun fu4(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
        prope3.add {
            x.resume(v)
        }

        COROUTINE_SUSPENDED
    }

    suspend fun fu5(e: Exception): String = suspendCoroutineUninterceptedOrReturn { x ->
        prope3.add {
            x.resumeWithException(e)
        }

        COROUTINE_SUSPENDED
    }

    fun fu6(c: suspend Kla0.() -> Unit) {
        c.startCoroutine(this, fu3 {
            prope2 = it
        })
        while (prope3.isNotEmpty()) {
            prope3[0]()
            prope3.removeAt(0)
        }
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val prope4 = Kla0()
    prope4.fu6(c)

    if (prope4.prope2?.message != "OK") {
        throw RuntimeException("Unexpected result: ${null?.message}")
    }
}

fun fu1(t: Throwable) {
    throw t
}

fun box558(): String {
    fu0 {
        throw RuntimeException("OK")
    }

    fu0 {
        fu1(RuntimeException("OK"))
    }

    fu0 {
        fu5(RuntimeException("OK"))
    }

    fu0 {
        try {
            fu5(RuntimeException("fail 1"))
        } catch (e: RuntimeException) {
            fu5(RuntimeException("OK"))
        }
    }

    fu0 {
        try {
            fu5(Exception("OK"))
        } catch (e: RuntimeException) {
            fu5(RuntimeException("fail 3"))
            throw RuntimeException("fail 4")
        }
    }

    return ("cydbq").replaceIndentByMargin("smjxl", Class().some)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(prope2: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu10(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu12() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun resumeWithException(prope2: Throwable) {
        throw prope2
    }
}


2021-03-12 04:35:01,146 [main:107] - replacing (", got ", String)
2021-03-12 04:35:01,146 [main:50] - replacing ", got " String
2021-03-12 04:35:01,146 [main:54] - Getting value of type String
2021-03-12 04:35:01,276 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:35:01,278 [main:58] - GENERATED VALUE OF TYPE String = "zojob"
2021-03-12 04:35:01,278 [main:61] - GENERATED IS CALL =false
2021-03-12 04:35:01,428 [main:67] - randomType = Char
2021-03-12 04:35:01,565 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:35:01,601 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@294a347d]
2021-03-12 04:35:01,602 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20509001]
2021-03-12 04:35:01,732 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:35:01,734 [main:78] - Generated call from random type = ('苯').toShort().toString(-868593919)
2021-03-12 04:35:01,734 [main:106] - GETTING String from String
2021-03-12 04:35:01,754 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fb4046f]]
2021-03-12 04:35:01,754 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fb4046f]
2021-03-12 04:35:01,882 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 04:35:01,884 [main:302] - generating value of type = Char true depth = 1
2021-03-12 04:35:01,886 [main:117] - GENERATED CALL = (Class().some).replaceFirstChar({a: Char -> '霫'})
2021-03-12 04:35:01,886 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@77547450]]
2021-03-12 04:35:01,886 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@77547450]
2021-03-12 04:35:02,017 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:35:02,017 [main:117] - GENERATED CALL = (Class().some).plus("parvs")
2021-03-12 04:35:02,017 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f31a38e]]
2021-03-12 04:35:02,017 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f31a38e]
2021-03-12 04:35:02,150 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:35:02,295 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 04:35:02,299 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 04:35:02,581 [main:302] - generating value of type = String true depth = 3
2021-03-12 04:35:02,583 [main:95] - GENERATED = StringBuilder("aeuib")
2021-03-12 04:35:02,713 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:35:02,715 [main:117] - GENERATED CALL = (Class().some).commonSuffixWith(StringBuilder("aeuib"), true)
2021-03-12 04:35:02,715 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48e1080f]]
2021-03-12 04:35:02,715 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48e1080f]
2021-03-12 04:35:02,715 [main:117] - GENERATED CALL = (Class().some).trim()
2021-03-12 04:35:02,715 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fe82904]]
2021-03-12 04:35:02,716 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fe82904]
2021-03-12 04:35:02,844 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:35:02,846 [main:117] - GENERATED CALL = (Class().some).prependIndent("yraex")
2021-03-12 04:35:02,846 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55627daf]]
2021-03-12 04:35:02,847 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55627daf]
2021-03-12 04:35:02,973 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 04:35:02,975 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 04:35:02,978 [main:117] - GENERATED CALL = (Class().some).filter({a: Char -> true})
2021-03-12 04:35:02,978 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d1bc9da]]
2021-03-12 04:35:02,978 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d1bc9da]
2021-03-12 04:35:03,102 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:35:03,105 [main:117] - GENERATED CALL = (Class().some).substringAfterLast('䢪', Class().printSome())
2021-03-12 04:35:03,105 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7aaa6200], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f31a38e]]
2021-03-12 04:35:03,105 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7aaa6200]
2021-03-12 04:35:03,231 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:35:03,362 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:35:03,364 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f31a38e]
2021-03-12 04:35:03,538 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:35:03,676 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:35:03,679 [main:117] - GENERATED CALL = (Class().some).subSequence(1878724363, 1565968479).commonSuffixWith(StringBuilder(), true)
2021-03-12 04:35:03,679 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4facc160]]
2021-03-12 04:35:03,679 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4facc160]
2021-03-12 04:35:03,679 [main:117] - GENERATED CALL = (Class().some).reversed()
2021-03-12 04:35:03,679 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a702934]]
2021-03-12 04:35:03,679 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a702934]
2021-03-12 04:35:03,801 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 04:35:03,803 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 04:35:03,806 [main:117] - GENERATED CALL = (Class().some).dropWhile({a: Char -> true})
2021-03-12 04:35:03,806 [main:114] - replacement of ", got " of type String is ('苯').toShort().toString(-868593919)
2021-03-12 04:35:03,933 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:35:03,933 [main:66] - Compilation checking started
2021-03-12 04:35:04,576 [main:53] - Result = true
Text:

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() = Class().printSome()

public abstract class AbstractClass<T> {
    public fun printSome() : T = some

    public abstract val some: T
}

public class Class: AbstractClass<String>() {
    public override val some: String
        get() = "OK"

}

class Kla0 {
    var prope2: Throwable? = null
    val prope3 = ArrayList<() -> Unit>()

    suspend fun fu4(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
        prope3.add {
            x.resume(v)
        }

        COROUTINE_SUSPENDED
    }

    suspend fun fu5(e: Exception): String = suspendCoroutineUninterceptedOrReturn { x ->
        prope3.add {
            x.resumeWithException(e)
        }

        COROUTINE_SUSPENDED
    }

    fun fu6(c: suspend Kla0.() -> Unit) {
        c.startCoroutine(this, fu3 {
            prope2 = it
        })
        while (prope3.isNotEmpty()) {
            prope3[0]()
            prope3.removeAt(0)
        }
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val prope4 = Kla0()
    prope4.fu6(c)

    if (prope4.prope2?.message != "OK") {
        throw RuntimeException("Unexpected result: ${prope4.prope2?.message}")
    }
}

fun fu1(t: Throwable) {
    throw t
}

fun box558(): String {
    fu0 {
        throw RuntimeException("OK")
    }

    fu0 {
        fu1(RuntimeException("OK"))
    }

    fu0 {
        fu5(RuntimeException("OK"))
    }

    fu0 {
        try {
            fu5(RuntimeException("fail 1"))
        } catch (e: RuntimeException) {
            fu5(RuntimeException("OK"))
        }
    }

    fu0 {
        try {
            fu5(Exception("OK"))
        } catch (e: RuntimeException) {
            fu5(RuntimeException("fail 3"))
            throw RuntimeException("fail 4")
        }
    }

    return ("cydbq").replaceIndentByMargin("smjxl", Class().some)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(prope2: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu10(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu12() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ('苯').toShort().toString(-868593919) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun resumeWithException(prope2: Throwable) {
        throw prope2
    }
}


2021-03-12 04:35:04,579 [main:107] - replacing (this, Kla0)
2021-03-12 04:35:04,579 [main:50] - replacing this Kla0
2021-03-12 04:35:04,579 [main:54] - Getting value of type Kla0
2021-03-12 04:35:04,729 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 04:35:04,730 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Throwable? = null
    val prope3 = ArrayList<() -> Unit>()

    suspend fun fu4(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
        prope3.add {
            x.resume(v)
        }

        COROUTINE_SUSPENDED
    }

    suspend fun fu5(e: Exception): String = suspendCoroutineUninterceptedOrReturn { x ->
        prope3.add {
            x.resumeWithException(e)
        }

        COROUTINE_SUSPENDED
    }

    fun fu6(c: suspend Kla0.() -> Unit) {
        c.startCoroutine(this, fu3 {
            prope2 = it
        })
        while (prope3.isNotEmpty()) {
            prope3[0]()
            prope3.removeAt(0)
        }
    }
}
2021-03-12 04:35:04,731 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-12 04:35:04,731 [main:61] - GENERATED IS CALL =true
2021-03-12 04:35:04,735 [main:67] - randomType = String
2021-03-12 04:35:04,874 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:35:04,908 [main:106] - GETTING Kla0 from String
2021-03-12 04:35:04,941 [main:106] - GETTING Kla0 from String
2021-03-12 04:35:04,942 [main:106] - GETTING Kla0 from Class
2021-03-12 04:35:04,959 [main:106] - GETTING Kla0 from String
2021-03-12 04:35:04,959 [main:114] - replacement of this of type Kla0 is Kla0()
2021-03-12 04:35:05,102 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:35:05,102 [main:66] - Compilation checking started
2021-03-12 04:35:05,805 [main:53] - Result = true
Text:

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box() = Class().printSome()

public abstract class AbstractClass<T> {
    public fun printSome() : T = some

    public abstract val some: T
}

public class Class: AbstractClass<String>() {
    public override val some: String
        get() = "OK"

}

class Kla0 {
    var prope2: Throwable? = null
    val prope3 = ArrayList<() -> Unit>()

    suspend fun fu4(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
        prope3.add {
            x.resume(v)
        }

        COROUTINE_SUSPENDED
    }

    suspend fun fu5(e: Exception): String = suspendCoroutineUninterceptedOrReturn { x ->
        prope3.add {
            x.resumeWithException(e)
        }

        COROUTINE_SUSPENDED
    }

    fun fu6(c: suspend Kla0.() -> Unit) {
        c.startCoroutine(Kla0(), fu3 {
            prope2 = it
        })
        while (prope3.isNotEmpty()) {
            prope3[0]()
            prope3.removeAt(0)
        }
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val prope4 = Kla0()
    prope4.fu6(c)

    if (prope4.prope2?.message != "OK") {
        throw RuntimeException("Unexpected result: ${prope4.prope2?.message}")
    }
}

fun fu1(t: Throwable) {
    throw t
}

fun box558(): String {
    fu0 {
        throw RuntimeException("OK")
    }

    fu0 {
        fu1(RuntimeException("OK"))
    }

    fu0 {
        fu5(RuntimeException("OK"))
    }

    fu0 {
        try {
            fu5(RuntimeException("fail 1"))
        } catch (e: RuntimeException) {
            fu5(RuntimeException("OK"))
        }
    }

    fu0 {
        try {
            fu5(Exception("OK"))
        } catch (e: RuntimeException) {
            fu5(RuntimeException("fail 3"))
            throw RuntimeException("fail 4")
        }
    }

    return ("cydbq").replaceIndentByMargin("smjxl", Class().some)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(prope2: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu10(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu12() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ('苯').toShort().toString(-868593919) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun resumeWithException(prope2: Throwable) {
        throw prope2
    }
}


2021-03-12 04:35:05,809 [main:107] - replacing ("tail-call optimization hit: method " + method, String)
2021-03-12 04:35:05,810 [main:50] - replacing "tail-call optimization hit: method " + method String
2021-03-12 04:35:05,810 [main:54] - Getting value of type String
