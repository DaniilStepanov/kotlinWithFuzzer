2021-03-11 12:11:22,728 [main:66] - Compilation checking started
2021-03-11 12:11:24,383 [main:302] - generating value of type = Array<in T> false depth = 0
2021-03-11 12:11:25,056 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:11:25,076 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:11:25,259 [main:95] - GENERATED = emptyArray<T>()
2021-03-11 12:11:25,260 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 12:11:25,261 [main:66] - Compilation checking started
2021-03-11 12:11:25,683 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T> = emptyArray()) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}


2021-03-11 12:11:26,371 [main:43] - GENERATING CALL OF fun <T> bar0(vararg a: T) = test(a::get)
2021-03-11 12:11:26,552 [main:61] - WITHOUT TYPE PARAMS = fun <T> bar0(vararg a: Float) = test(a::get)
2021-03-11 12:11:26,714 [main:302] - generating value of type = Float true depth = 1
2021-03-11 12:11:26,718 [main:95] - GENERATED = bar0<Float>(0.48623055f)
2021-03-11 12:11:26,840 [main:43] - GENERATING CALL OF fun <T> bar1(vararg a: T) = test(a::set)
2021-03-11 12:11:27,389 [main:61] - WITHOUT TYPE PARAMS = fun <T> bar1(vararg a: HashSet<Boolean?>?) = test(a::set)
2021-03-11 12:11:27,509 [main:302] - generating value of type = HashSet<Boolean?> false depth = 1
2021-03-11 12:11:27,675 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Boolean?): HashSet<Boolean?> = TODO()
2021-03-11 12:11:27,679 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Boolean?): HashSet<Boolean?> = TODO()
2021-03-11 12:11:27,818 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:11:27,819 [main:95] - GENERATED = hashSetOf<Boolean?>(true)
2021-03-11 12:11:27,820 [main:95] - GENERATED = bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))
2021-03-11 12:11:27,949 [main:43] - GENERATING CALL OF fun <T> bar2(a: Array<out T>) = test(a::get)
2021-03-11 12:11:28,332 [main:61] - WITHOUT TYPE PARAMS = fun <T> bar2(a: Array<out Array<Int>>) = test(a::get)
2021-03-11 12:11:28,461 [main:302] - generating value of type = Array<out Array<Int>> false depth = 1
2021-03-11 12:11:28,576 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out Array<Int>): Array<out Array<Int>> = TODO()
2021-03-11 12:11:28,578 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out Array<Int>): Array<out Array<Int>> = TODO()
2021-03-11 12:11:28,963 [main:302] - generating value of type = Int true depth = 4
2021-03-11 12:11:28,964 [main:385] - Cant generate call of fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out Array<Int>): Array<out Array<Int>> = TODO()
2021-03-11 12:11:29,071 [main:43] - GENERATING CALL OF fun <T> bar3(a: Array<out T>) = test(a::set)
2021-03-11 12:11:29,189 [main:61] - WITHOUT TYPE PARAMS = fun <T> bar3(a: Array<out Float>) = test(a::set)
2021-03-11 12:11:29,295 [main:302] - generating value of type = Array<out Float> false depth = 1
2021-03-11 12:11:29,445 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Float): Array<Float> = TODO()
2021-03-11 12:11:29,448 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Float): Array<Float> = TODO()
2021-03-11 12:11:29,577 [main:302] - generating value of type = Float true depth = 4
2021-03-11 12:11:29,578 [main:95] - GENERATED = arrayOf<Float>(0.9432627f)
2021-03-11 12:11:29,579 [main:95] - GENERATED = bar3<Float>(arrayOf<Float>(0.9432627f))
2021-03-11 12:11:29,700 [main:43] - GENERATING CALL OF fun <T> bar4(a: Array<in T>) = test(a::get)
2021-03-11 12:11:29,831 [main:61] - WITHOUT TYPE PARAMS = fun <T> bar4(a: Array<in Double>) = test(a::get)
2021-03-11 12:11:29,945 [main:302] - generating value of type = Array<in Double> false depth = 1
2021-03-11 12:11:30,056 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->in Double): Array<in Double> = TODO()
2021-03-11 12:11:30,058 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->in Double): Array<in Double> = TODO()
2021-03-11 12:11:30,426 [main:385] - Cant generate call of fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->in Double): Array<in Double> = TODO()
2021-03-11 12:11:30,527 [main:43] - GENERATING CALL OF fun <T> bar5(a: Array<in T>) = test(a::set)
2021-03-11 12:11:31,595 [main:61] - WITHOUT TYPE PARAMS = fun <T> bar5(a: Array<in Triple<Map<Triple<UInt?, Long, Char>, Short>, Char, Byte>>) = test(a::set)
2021-03-11 12:11:31,707 [main:302] - generating value of type = Array<in Triple<Map<Triple<UInt?, Long, Char>, Short>, Char, Byte>> false depth = 1
2021-03-11 12:11:31,837 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Triple<Map<Triple<UInt?, Long, Char>, Short>, Char, Byte>): Array<Triple<Map<Triple<UInt?, Long, Char>, Short>, Char, Byte>> = TODO()
2021-03-11 12:11:31,840 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Triple<Map<Triple<UInt?, Long, Char>, Short>, Char, Byte>): Array<Triple<Map<Triple<UInt?, Long, Char>, Short>, Char, Byte>> = TODO()
2021-03-11 12:11:31,948 [main:302] - generating value of type = Triple<Map<Triple<UInt?, Long, Char>, Short>, Char, Byte> false depth = 4
2021-03-11 12:11:32,049 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Map<Triple<UInt?, Long, Char>, Short>, second: Char, third: Byte): Triple<Map<Triple<UInt?, Long, Char>, Short>, Char, Byte> = TODO()
2021-03-11 12:11:32,051 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Map<Triple<UInt?, Long, Char>, Short>, second: Char, third: Byte): Triple<Map<Triple<UInt?, Long, Char>, Short>, Char, Byte> = TODO()
2021-03-11 12:11:32,161 [main:302] - generating value of type = Map<Triple<UInt?, Long, Char>, Short> false depth = 7
2021-03-11 12:11:32,297 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Triple<UInt?, Long, Char>, Short>): Map<Triple<UInt?, Long, Char>, Short> = TODO()
2021-03-11 12:11:32,299 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Triple<UInt?, Long, Char>, Short>): Map<Triple<UInt?, Long, Char>, Short> = TODO()
2021-03-11 12:11:32,408 [main:302] - generating value of type = Pair<Triple<UInt?, Long, Char>, Short> false depth = 10
2021-03-11 12:11:32,505 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Triple<UInt?, Long, Char>, second: Short): Pair<Triple<UInt?, Long, Char>, Short> = TODO()
2021-03-11 12:11:32,506 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Triple<UInt?, Long, Char>, second: Short): Pair<Triple<UInt?, Long, Char>, Short> = TODO()
2021-03-11 12:11:32,602 [main:302] - generating value of type = Triple<UInt?, Long, Char> false depth = 13
2021-03-11 12:11:32,696 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: UInt?, second: Long, third: Char): Triple<UInt?, Long, Char> = TODO()
2021-03-11 12:11:32,698 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: UInt?, second: Long, third: Char): Triple<UInt?, Long, Char> = TODO()
2021-03-11 12:11:32,831 [main:302] - generating value of type = UInt true depth = 16
2021-03-11 12:11:32,832 [main:385] - Cant generate call of fun <A, B, C> Triple(first: UInt?, second: Long, third: Char): Triple<UInt?, Long, Char> = TODO()
2021-03-11 12:11:32,833 [main:385] - Cant generate call of fun <A, B> Pair(first: Triple<UInt?, Long, Char>, second: Short): Pair<Triple<UInt?, Long, Char>, Short> = TODO()
2021-03-11 12:11:32,833 [main:385] - Cant generate call of fun <K, V> linkedMapOf(pairs: Pair<Triple<UInt?, Long, Char>, Short>): Map<Triple<UInt?, Long, Char>, Short> = TODO()
2021-03-11 12:11:32,833 [main:385] - Cant generate call of fun <A, B, C> Triple(first: Map<Triple<UInt?, Long, Char>, Short>, second: Char, third: Byte): Triple<Map<Triple<UInt?, Long, Char>, Short>, Char, Byte> = TODO()
2021-03-11 12:11:32,833 [main:385] - Cant generate call of fun <T> arrayOf(elements: Triple<Map<Triple<UInt?, Long, Char>, Short>, Char, Byte>): Array<Triple<Map<Triple<UInt?, Long, Char>, Short>, Char, Byte>> = TODO()
2021-03-11 12:11:32,926 [main:43] - GENERATING CALL OF fun <F> test(f: F): String = f.toString()
2021-03-11 12:11:33,291 [main:61] - WITHOUT TYPE PARAMS = fun <F> test(f: Triple<String, UInt, Boolean>): String = f.toString()
2021-03-11 12:11:33,404 [main:302] - generating value of type = Triple<String, UInt, Boolean> false depth = 1
2021-03-11 12:11:33,499 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: String, second: UInt, third: Boolean): Triple<String, UInt, Boolean> = TODO()
2021-03-11 12:11:33,501 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: String, second: UInt, third: Boolean): Triple<String, UInt, Boolean> = TODO()
2021-03-11 12:11:33,608 [main:302] - generating value of type = String true depth = 4
2021-03-11 12:11:33,611 [main:302] - generating value of type = UInt true depth = 4
2021-03-11 12:11:33,611 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:11:33,612 [main:95] - GENERATED = Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false)
2021-03-11 12:11:33,612 [main:95] - GENERATED = test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))
2021-03-11 12:11:33,732 [main:52] - Trying to change 220 nodes
2021-03-11 12:11:33,732 [main:56] - replacing (arrayOf(""), Array<String>)
2021-03-11 12:11:33,733 [main:38] - replacing arrayOf("") Array<String>
2021-03-11 12:11:33,733 [main:42] - Getting value of type Array<String>
2021-03-11 12:11:33,836 [main:302] - generating value of type = Array<String> false depth = 0
2021-03-11 12:11:33,942 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: String): Array<Strg> = TODO()
2021-03-11 12:11:33,943 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: String): Array<Strg> = TODO()
2021-03-11 12:11:34,037 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:11:34,038 [main:95] - GENERATED = arrayOf<String>("nlxqn")
2021-03-11 12:11:34,038 [main:46] - GENERATED VALUE OF TYPE Array<String> = arrayOf<String>("nlxqn")
2021-03-11 12:11:34,038 [main:49] - GENERATED IS CALL =true
2021-03-11 12:11:34,132 [main:55] - randomType = Long
2021-03-11 12:11:34,222 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:11:34,351 [main:94] - GETTING Array<String> from String
2021-03-11 12:11:34,393 [main:94] - GETTING Array<String> from String
2021-03-11 12:11:34,394 [main:94] - GETTING Array<String> from String
2021-03-11 12:11:34,396 [main:94] - GETTING Array<String> from String
2021-03-11 12:11:34,396 [main:63] - replacement of arrayOf("") of type Array<String> is arrayOf<String>("nlxqn")
2021-03-11 12:11:34,512 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:11:34,512 [main:66] - Compilation checking started
2021-03-11 12:11:35,021 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}


2021-03-11 12:11:35,024 [main:56] - replacing (a::get, KFunction1<Int, Any?>)
2021-03-11 12:11:35,024 [main:38] - replacing a::get KFunction1<Int, Any?>
2021-03-11 12:11:35,024 [main:42] - Getting value of type KFunction1<Int, Any?>
2021-03-11 12:11:35,159 [main:302] - generating value of type = KFunction1<Int, Any?> false depth = 0
2021-03-11 12:11:35,274 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, Any?> = 
2021-03-11 12:11:35,595 [main:55] - randomType = Set<Int?>
2021-03-11 12:11:35,596 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:11:35,629 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:11:35,630 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:11:35,632 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:11:35,632 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, Any?>
2021-03-11 12:11:35,632 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:11:35,632 [main:38] - replacing a Array<out T>
2021-03-11 12:11:35,632 [main:42] - Getting value of type Array<out T>
2021-03-11 12:11:35,720 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:11:35,819 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-11 12:11:35,821 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-11 12:11:36,032 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:11:36,033 [main:95] - GENERATED = arrayOfNulls<T>(-2017629654)
2021-03-11 12:11:36,033 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOfNulls<T>(-2017629654)
2021-03-11 12:11:36,033 [main:49] - GENERATED IS CALL =true
2021-03-11 12:11:36,034 [main:55] - randomType = String
2021-03-11 12:11:36,131 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:36,165 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:36,200 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:36,202 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:36,204 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:36,204 [main:63] - replacement of a of type Array<out T> is arrayOfNulls<T>(-2017629654)
2021-03-11 12:11:36,297 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:11:36,298 [main:66] - Compilation checking started
2021-03-11 12:11:36,546 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(arrayOfNulls<T>(-2017629654)::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}


2021-03-11 12:11:36,549 [main:56] - replacing (a::get, KFunction1<Int, Any?>)
2021-03-11 12:11:36,549 [main:38] - replacing a::get KFunction1<Int, Any?>
2021-03-11 12:11:36,549 [main:42] - Getting value of type KFunction1<Int, Any?>
2021-03-11 12:11:36,684 [main:302] - generating value of type = KFunction1<Int, Any?> false depth = 0
2021-03-11 12:11:36,810 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, Any?> = 
2021-03-11 12:11:36,920 [main:55] - randomType = Char
2021-03-11 12:11:37,011 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:11:37,046 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:11:37,076 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:11:37,078 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:11:37,081 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:11:37,081 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, Any?>
2021-03-11 12:11:37,081 [main:56] - replacing (b5, String)
2021-03-11 12:11:37,081 [main:38] - replacing b5 String
2021-03-11 12:11:37,081 [main:42] - Getting value of type String
2021-03-11 12:11:37,168 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:37,168 [main:46] - GENERATED VALUE OF TYPE String = "cvbfg"
2021-03-11 12:11:37,169 [main:49] - GENERATED IS CALL =false
2021-03-11 12:11:37,265 [main:55] - randomType = Boolean
2021-03-11 12:11:37,356 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:11:37,371 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5174a81f]
2021-03-11 12:11:37,491 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:11:37,492 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:11:37,588 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:37,590 [main:66] - Generated call from random type = (false).compareTo(true).toString(-1091288380)
2021-03-11 12:11:37,590 [main:94] - GETTING String from String
2021-03-11 12:11:37,630 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c9b84b]]
2021-03-11 12:11:37,631 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c9b84b]
2021-03-11 12:11:37,718 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:37,808 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:37,809 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).removeRange(551251544, -1850630091)
2021-03-11 12:11:37,809 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2136d]]
2021-03-11 12:11:37,809 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2136d]
2021-03-11 12:11:37,810 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).lowercase()
2021-03-11 12:11:37,810 [main:101] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@579fd1d1]]
2021-03-11 12:11:37,810 [main:137] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@579fd1d1]
2021-03-11 12:11:37,906 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:11:38,051 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:11:38,146 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:11:38,147 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).replaceFirst('', '࠿', true)
2021-03-11 12:11:38,148 [main:101] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eec66c2]]
2021-03-11 12:11:38,148 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eec66c2]
2021-03-11 12:11:38,242 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:11:38,243 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:11:38,247 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).filter({a: Char -> true})
2021-03-11 12:11:38,247 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]]
2021-03-11 12:11:38,247 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:11:38,357 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:38,452 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:38,453 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]
2021-03-11 12:11:38,557 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:11:38,655 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:11:38,657 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:11:38,836 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:11:38,837 [main:95] - GENERATED = StringBuilder(-477361115)
2021-03-11 12:11:38,920 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:11:38,921 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).subSequence(-2111446616, -2061432254).commonSuffixWith(StringBuilder(-477361115), false)
2021-03-11 12:11:38,921 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396c7a7b]]
2021-03-11 12:11:38,922 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396c7a7b]
2021-03-11 12:11:39,018 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 12:11:39,120 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-11 12:11:39,122 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-11 12:11:39,223 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:11:39,224 [main:95] - GENERATED = listOfNotNull<Int>(-334795815)
2021-03-11 12:11:39,224 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).slice(listOfNotNull<Int>(-334795815))
2021-03-11 12:11:39,224 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]]
2021-03-11 12:11:39,225 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]
2021-03-11 12:11:39,322 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 12:11:39,323 [main:302] - generating value of type = Char true depth = 1
2021-03-11 12:11:39,325 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).replaceFirstChar({a: Char -> '銵'})
2021-03-11 12:11:39,325 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9c84af]]
2021-03-11 12:11:39,325 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9c84af]
2021-03-11 12:11:39,326 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).uppercase()
2021-03-11 12:11:39,326 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]]
2021-03-11 12:11:39,326 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]
2021-03-11 12:11:39,327 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).reversed()
2021-03-11 12:11:39,327 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]]
2021-03-11 12:11:39,327 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:11:39,420 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:39,421 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:11:39,528 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:39,529 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227)
2021-03-11 12:11:39,529 [main:63] - replacement of b5 of type String is (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227)
2021-03-11 12:11:39,626 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:11:39,626 [main:66] - Compilation checking started
2021-03-11 12:11:40,265 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return "OK"
}


2021-03-11 12:11:40,269 [main:56] - replacing (getMethod, String)
2021-03-11 12:11:40,270 [main:38] - replacing getMethod String
2021-03-11 12:11:40,270 [main:42] - Getting value of type String
2021-03-11 12:11:40,380 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:40,381 [main:46] - GENERATED VALUE OF TYPE String = "eghhz"
2021-03-11 12:11:40,381 [main:49] - GENERATED IS CALL =false
2021-03-11 12:11:40,482 [main:55] - randomType = UInt
2021-03-11 12:11:40,580 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:11:40,633 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2a1b6ca8]
2021-03-11 12:11:40,634 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d807efd]
2021-03-11 12:11:40,727 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:40,729 [main:66] - Generated call from random type = (356342665.toUInt()).toUByte().toString(1711440026)
2021-03-11 12:11:40,729 [main:94] - GETTING String from String
2021-03-11 12:11:40,762 [main:101] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cff2b98]]
2021-03-11 12:11:40,763 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cff2b98]
2021-03-11 12:11:40,858 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:11:40,951 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:41,042 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:41,044 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw")
2021-03-11 12:11:41,044 [main:101] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ff0185]]
2021-03-11 12:11:41,044 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ff0185]
2021-03-11 12:11:41,129 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:11:41,245 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:41,338 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:41,340 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceBefore('囄', "cbvjf", "dlduu")
2021-03-11 12:11:41,340 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396c7a7b]]
2021-03-11 12:11:41,341 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396c7a7b]
2021-03-11 12:11:41,431 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 12:11:41,519 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-11 12:11:41,520 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-11 12:11:41,607 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:11:41,608 [main:95] - GENERATED = setOfNotNull<Int>(768462902)
2021-03-11 12:11:41,608 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).slice(setOfNotNull<Int>(768462902))
2021-03-11 12:11:41,608 [main:101] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1384dfc4]]
2021-03-11 12:11:41,609 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1384dfc4]
2021-03-11 12:11:41,709 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:11:41,710 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:11:41,711 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).takeLastWhile({a: Char -> false})
2021-03-11 12:11:41,711 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]]
2021-03-11 12:11:41,712 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:11:41,817 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:41,818 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:11:41,906 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:41,907 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).compareTo("qzmdg").toString(889719397)
2021-03-11 12:11:41,907 [main:101] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e33706e]]
2021-03-11 12:11:41,907 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e33706e]
2021-03-11 12:11:41,995 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:41,996 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).dropLast(1813365589)
2021-03-11 12:11:41,997 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]]
2021-03-11 12:11:41,997 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:11:42,089 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:42,181 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:42,181 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]
2021-03-11 12:11:42,281 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:42,394 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:42,395 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).subSequence(1840309859, -220822523).substring(-1185028754, 598164583)
2021-03-11 12:11:42,396 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f4c98d]]
2021-03-11 12:11:42,396 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:11:42,482 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:42,483 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f4c98d]
2021-03-11 12:11:42,484 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).get(-930377487).lowercase()
2021-03-11 12:11:42,484 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]]
2021-03-11 12:11:42,484 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:11:42,567 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:42,650 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:42,651 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]
2021-03-11 12:11:42,754 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:11:42,855 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:11:42,857 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).subSequence(1834519329, -843295614).commonPrefixWith(StringBuilder(), true)
2021-03-11 12:11:42,857 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]]
2021-03-11 12:11:42,857 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:11:42,976 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:43,071 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:43,072 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]
2021-03-11 12:11:43,161 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:43,163 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).subSequence(-112047817, 579014773).repeat(-1317996270)
2021-03-11 12:11:43,163 [main:63] - replacement of getMethod of type String is (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw")
2021-03-11 12:11:43,260 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:11:43,261 [main:66] - Compilation checking started
2021-03-11 12:11:43,782 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return "OK"
}


2021-03-11 12:11:43,786 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:11:43,786 [main:38] - replacing a Array<out T>
2021-03-11 12:11:43,786 [main:42] - Getting value of type Array<out T>
2021-03-11 12:11:43,896 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:11:43,988 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:11:43,989 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:11:44,085 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:11:44,183 [main:43] - GENERATING CALL OF fun <T> checkNotNull(value: Float, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 12:11:44,184 [main:61] - WITHOUT TYPE PARAMS = fun <T> checkNotNull(value: Float, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 12:11:44,423 [main:302] - generating value of type = Float true depth = 6
2021-03-11 12:11:44,424 [main:302] - generating value of type = Function0<Any> false depth = 6
2021-03-11 12:11:44,425 [main:302] - generating value of type = Any false depth = 7
2021-03-11 12:11:44,426 [main:95] - GENERATED = checkNotNull<Float>(0.9576075f, { "cilpr"})
2021-03-11 12:11:44,427 [main:95] - GENERATED = arrayOf<T>(checkNotNull<Float>(0.9576075f, { "cilpr"}))
2021-03-11 12:11:44,427 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOf<T>(checkNotNull<Float>(0.9576075f, { "cilpr"}))
2021-03-11 12:11:44,427 [main:49] - GENERATED IS CALL =true
2021-03-11 12:11:44,533 [main:55] - randomType = Short
2021-03-11 12:11:44,616 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:11:44,678 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:44,697 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:44,698 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:44,699 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:44,699 [main:63] - replacement of a of type Array<out T> is arrayOf<T>(checkNotNull<Float>(0.9576075f, { "cilpr"}))
2021-03-11 12:11:44,787 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:11:44,787 [main:66] - Compilation checking started
2021-03-11 12:11:45,133 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(arrayOf<T>(checkNotNull<Float>(0.9576075f, { "cilpr"}))::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return "OK"
}


2021-03-11 12:11:45,137 [main:56] - replacing (setMethod, String)
2021-03-11 12:11:45,137 [main:38] - replacing setMethod String
2021-03-11 12:11:45,138 [main:42] - Getting value of type String
2021-03-11 12:11:45,266 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:45,266 [main:46] - GENERATED VALUE OF TYPE String = "chyyt"
2021-03-11 12:11:45,267 [main:49] - GENERATED IS CALL =false
2021-03-11 12:11:45,269 [main:55] - randomType = Char
2021-03-11 12:11:45,367 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:11:45,405 [main:137] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5fd51e4d]
2021-03-11 12:11:45,405 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@860e9be]
2021-03-11 12:11:45,498 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:45,499 [main:66] - Generated call from random type = ('拰').toShort().toString(-332041819)
2021-03-11 12:11:45,500 [main:94] - GETTING String from String
2021-03-11 12:11:45,532 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]]
2021-03-11 12:11:45,532 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]
2021-03-11 12:11:45,532 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed()
2021-03-11 12:11:45,533 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]]
2021-03-11 12:11:45,533 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]
2021-03-11 12:11:45,626 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:45,628 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndent("pmtyz")
2021-03-11 12:11:45,628 [main:101] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dd201a1]]
2021-03-11 12:11:45,628 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dd201a1]
2021-03-11 12:11:45,723 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 12:11:45,723 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:11:45,725 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).filterIndexed({a: Int, b: Char -> false})
2021-03-11 12:11:45,725 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]]
2021-03-11 12:11:45,725 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:11:45,817 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:45,817 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]
2021-03-11 12:11:45,818 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(1684326925).titlecase()
2021-03-11 12:11:45,818 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]]
2021-03-11 12:11:45,818 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]
2021-03-11 12:11:45,819 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).trimStart()
2021-03-11 12:11:45,819 [main:101] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f592b75]]
2021-03-11 12:11:45,819 [main:137] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f592b75]
2021-03-11 12:11:45,906 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:45,907 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).prependIndent("yqmbv")
2021-03-11 12:11:45,907 [main:101] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@700a562]]
2021-03-11 12:11:45,907 [main:137] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@700a562]
2021-03-11 12:11:46,015 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:11:46,118 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:46,119 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).substringBefore('?', "ygxol")
2021-03-11 12:11:46,120 [main:101] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4accd603]]
2021-03-11 12:11:46,120 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4accd603]
2021-03-11 12:11:46,206 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:11:46,211 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca")
2021-03-11 12:11:46,211 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]]
2021-03-11 12:11:46,211 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:11:46,295 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:46,384 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:46,385 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]
2021-03-11 12:11:46,472 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:11:46,605 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:11:46,608 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:11:46,858 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:11:46,859 [main:95] - GENERATED = StringBuilder("dhigx")
2021-03-11 12:11:46,946 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:11:46,948 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).subSequence(17183273, -270570374).commonPrefixWith(StringBuilder("dhigx"), false)
2021-03-11 12:11:46,948 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2136d]]
2021-03-11 12:11:46,948 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2136d]
2021-03-11 12:11:46,949 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).lowercase()
2021-03-11 12:11:46,949 [main:63] - replacement of setMethod of type String is (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca")
2021-03-11 12:11:47,038 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:11:47,039 [main:66] - Compilation checking started
2021-03-11 12:11:47,637 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return "OK"
}


2021-03-11 12:11:47,641 [main:56] - replacing (arrayOf(""), Array<String>)
2021-03-11 12:11:47,641 [main:38] - replacing arrayOf("") Array<String>
2021-03-11 12:11:47,641 [main:42] - Getting value of type Array<String>
2021-03-11 12:11:47,769 [main:302] - generating value of type = Array<String> false depth = 0
2021-03-11 12:11:47,906 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->String): Array<String> = TODO()
2021-03-11 12:11:47,908 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->String): Array<String> = TODO()
2021-03-11 12:11:48,192 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:11:48,192 [main:302] - generating value of type = Function1<Int, String> false depth = 3
2021-03-11 12:11:48,194 [main:302] - generating value of type = String true depth = 4
2021-03-11 12:11:48,195 [main:95] - GENERATED = Array<String>(-1046018113, {a: Int -> "jozfp"})
2021-03-11 12:11:48,195 [main:46] - GENERATED VALUE OF TYPE Array<String> = Array<String>(-1046018113, {a: Int -> "jozfp"})
2021-03-11 12:11:48,195 [main:49] - GENERATED IS CALL =true
2021-03-11 12:11:48,390 [main:55] - randomType = UShort?
2021-03-11 12:11:48,482 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:11:48,551 [main:94] - GETTING Array<String> from String
2021-03-11 12:11:48,576 [main:94] - GETTING Array<String> from String
2021-03-11 12:11:48,577 [main:94] - GETTING Array<String> from String
2021-03-11 12:11:48,579 [main:94] - GETTING Array<String> from String
2021-03-11 12:11:48,579 [main:63] - replacement of arrayOf("") of type Array<String> is Array<String>(-1046018113, {a: Int -> "jozfp"})
2021-03-11 12:11:48,681 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:11:48,682 [main:66] - Compilation checking started
2021-03-11 12:11:49,291 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return "OK"
}


2021-03-11 12:11:49,294 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:11:49,294 [main:38] - replacing a Array<out T>
2021-03-11 12:11:49,294 [main:42] - Getting value of type Array<out T>
2021-03-11 12:11:49,386 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:11:49,480 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:11:49,482 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:11:49,575 [main:95] - GENERATED = emptyArray<T>()
2021-03-11 12:11:49,575 [main:46] - GENERATED VALUE OF TYPE Array<out T> = emptyArray<T>()
2021-03-11 12:11:49,575 [main:49] - GENERATED IS CALL =true
2021-03-11 12:11:49,576 [main:55] - randomType = Float
2021-03-11 12:11:49,668 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:11:49,720 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:49,751 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:49,752 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:49,753 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:49,753 [main:63] - replacement of a of type Array<out T> is emptyArray<T>()
2021-03-11 12:11:49,856 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:11:49,856 [main:66] - Compilation checking started
2021-03-11 12:11:50,103 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(emptyArray<T>()::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return "OK"
}


2021-03-11 12:11:50,106 [main:56] - replacing ("", String)
2021-03-11 12:11:50,106 [main:38] - replacing "" String
2021-03-11 12:11:50,106 [main:42] - Getting value of type String
2021-03-11 12:11:50,227 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:50,228 [main:46] - GENERATED VALUE OF TYPE String = "slixf"
2021-03-11 12:11:50,228 [main:49] - GENERATED IS CALL =false
2021-03-11 12:11:50,230 [main:55] - randomType = Float
2021-03-11 12:11:50,322 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:11:50,377 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2e2da013]
2021-03-11 12:11:50,377 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]
2021-03-11 12:11:50,378 [main:66] - Generated call from random type = (0.22918856f).toChar().titlecase()
2021-03-11 12:11:50,378 [main:94] - GETTING String from String
2021-03-11 12:11:50,407 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]]
2021-03-11 12:11:50,407 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]
2021-03-11 12:11:50,495 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:50,496 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).replaceIndent("ugwje")
2021-03-11 12:11:50,497 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]]
2021-03-11 12:11:50,497 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:11:50,595 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:50,686 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:50,687 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]
2021-03-11 12:11:50,777 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:50,779 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).subSequence(-353712549, 1522448003).repeat(-658408048)
2021-03-11 12:11:50,779 [main:101] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2253ce57]]
2021-03-11 12:11:50,779 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2253ce57]
2021-03-11 12:11:50,891 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:11:50,891 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:11:50,893 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropLastWhile({a: Char -> false})
2021-03-11 12:11:50,893 [main:101] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21fc0bcb]]
2021-03-11 12:11:50,893 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21fc0bcb]
2021-03-11 12:11:50,985 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:11:50,986 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:11:50,987 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).filterNot({a: Char -> false})
2021-03-11 12:11:50,987 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ce8ce0]]
2021-03-11 12:11:50,987 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ce8ce0]
2021-03-11 12:11:51,074 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:51,159 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:11:51,160 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).padEnd(378743593, '')
2021-03-11 12:11:51,160 [main:101] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e33706e]]
2021-03-11 12:11:51,160 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e33706e]
2021-03-11 12:11:51,243 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:51,244 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropLast(2145575922)
2021-03-11 12:11:51,244 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f03e0c3]]
2021-03-11 12:11:51,244 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f03e0c3]
2021-03-11 12:11:51,245 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).trimEnd()
2021-03-11 12:11:51,245 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]]
2021-03-11 12:11:51,245 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]
2021-03-11 12:11:51,245 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).toLowerCase()
2021-03-11 12:11:51,245 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f7d80a8]]
2021-03-11 12:11:51,245 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f7d80a8]
2021-03-11 12:11:51,329 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:11:51,329 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:11:51,331 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})
2021-03-11 12:11:51,331 [main:101] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ef6a1a]]
2021-03-11 12:11:51,331 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ef6a1a]
2021-03-11 12:11:51,418 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:11:51,521 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:51,522 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).substringAfterLast('⡎', "wiolr")
2021-03-11 12:11:51,523 [main:63] - replacement of "" of type String is (bar3<Float>(arrayOf<Float>(0.9432627f))).dropLast(2145575922)
2021-03-11 12:11:51,618 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:11:51,620 [main:56] - replacing (setMethod, String)
2021-03-11 12:11:51,621 [main:38] - replacing setMethod String
2021-03-11 12:11:51,621 [main:42] - Getting value of type String
2021-03-11 12:11:51,708 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:51,709 [main:46] - GENERATED VALUE OF TYPE String = "tgkxk"
2021-03-11 12:11:51,709 [main:49] - GENERATED IS CALL =false
2021-03-11 12:11:51,711 [main:55] - randomType = UInt
2021-03-11 12:11:51,796 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:11:51,840 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@1884c078]
2021-03-11 12:11:51,840 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c1fe92f]
2021-03-11 12:11:51,925 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:51,926 [main:66] - Generated call from random type = (1941985094.toUInt()).toUShort().toString(-817271332)
2021-03-11 12:11:51,926 [main:94] - GETTING String from String
2021-03-11 12:11:51,946 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ce8ce0]]
2021-03-11 12:11:51,947 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ce8ce0]
2021-03-11 12:11:52,030 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:52,116 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:11:52,117 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).padEnd(-1680904922, '⃷')
2021-03-11 12:11:52,117 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]]
2021-03-11 12:11:52,117 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]
2021-03-11 12:11:52,221 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:11:52,322 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:11:52,325 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:11:52,504 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:11:52,506 [main:95] - GENERATED = StringBuilder(717669657)
2021-03-11 12:11:52,604 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:11:52,605 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith(StringBuilder(717669657), false)
2021-03-11 12:11:52,605 [main:101] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a3075e0]]
2021-03-11 12:11:52,605 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a3075e0]
2021-03-11 12:11:52,692 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:52,693 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).takeLast(-1736270822)
2021-03-11 12:11:52,694 [main:101] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a03b602]]
2021-03-11 12:11:52,694 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a03b602]
2021-03-11 12:11:52,783 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:11:52,890 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:52,984 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:52,985 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfter('싦', "yaqfv", "ltqes")
2021-03-11 12:11:52,985 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a5650d3]]
2021-03-11 12:11:52,985 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a5650d3]
2021-03-11 12:11:52,986 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim()
2021-03-11 12:11:52,986 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]]
2021-03-11 12:11:52,986 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]
2021-03-11 12:11:53,068 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:11:53,072 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).removeSuffix(StringBuilder())
2021-03-11 12:11:53,072 [main:101] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd07c1]]
2021-03-11 12:11:53,072 [main:137] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd07c1]
2021-03-11 12:11:53,155 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:11:53,238 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:53,320 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:53,321 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceBeforeLast('', "mybbw", "jxbdc")
2021-03-11 12:11:53,322 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]]
2021-03-11 12:11:53,322 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:11:53,406 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:53,511 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:53,512 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]
2021-03-11 12:11:53,602 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:53,610 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).subSequence(155159232, 207254128).repeat(401685852)
2021-03-11 12:11:53,610 [main:101] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2253ce57]]
2021-03-11 12:11:53,610 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2253ce57]
2021-03-11 12:11:53,700 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:11:53,701 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:11:53,702 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).dropLastWhile({a: Char -> true})
2021-03-11 12:11:53,702 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]]
2021-03-11 12:11:53,702 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]
2021-03-11 12:11:53,702 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trimStart()
2021-03-11 12:11:53,702 [main:63] - replacement of setMethod of type String is (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim()
2021-03-11 12:11:53,787 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:11:53,787 [main:66] - Compilation checking started
2021-03-11 12:11:54,259 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), b1)

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return "OK"
}


2021-03-11 12:11:54,263 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:11:54,263 [main:38] - replacing a Array<out T>
2021-03-11 12:11:54,263 [main:42] - Getting value of type Array<out T>
2021-03-11 12:11:54,368 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:11:54,460 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:11:54,463 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:11:54,578 [main:95] - GENERATED = emptyArray<T>()
2021-03-11 12:11:54,578 [main:46] - GENERATED VALUE OF TYPE Array<out T> = emptyArray<T>()
2021-03-11 12:11:54,578 [main:49] - GENERATED IS CALL =true
2021-03-11 12:11:54,670 [main:55] - randomType = Short
2021-03-11 12:11:54,755 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:11:54,792 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:54,811 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:54,812 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:54,813 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:54,813 [main:63] - replacement of a of type Array<out T> is emptyArray<T>()
2021-03-11 12:11:54,897 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:11:54,897 [main:66] - Compilation checking started
2021-03-11 12:11:55,124 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(emptyArray<T>()::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), b1)

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return "OK"
}


2021-03-11 12:11:55,127 [main:56] - replacing (a::set, KFunction2<Int, Nothing, Unit>)
2021-03-11 12:11:55,127 [main:38] - replacing a::set KFunction2<Int, Nothing, Unit>
2021-03-11 12:11:55,127 [main:42] - Getting value of type KFunction2<Int, Nothing, Unit>
2021-03-11 12:11:55,225 [main:302] - generating value of type = KFunction2<Int, Nothing, Unit> false depth = 0
2021-03-11 12:11:55,314 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, Nothing, Unit> = 
2021-03-11 12:11:55,411 [main:55] - randomType = Array<Float>
2021-03-11 12:11:55,508 [main:302] - generating value of type = Array<Float> false depth = 0
2021-03-11 12:11:55,596 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Float> = TODO()
2021-03-11 12:11:55,599 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Float> = TODO()
2021-03-11 12:11:55,688 [main:95] - GENERATED = emptyArray<Float>()
2021-03-11 12:11:55,706 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:11:55,740 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:11:55,741 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:11:55,743 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:11:55,743 [main:60] - Cant find and generate replacement for a::set type KFunction2<Int, Nothing, Unit>
2021-03-11 12:11:55,743 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:11:55,743 [main:38] - replacing a Array<out T>
2021-03-11 12:11:55,743 [main:42] - Getting value of type Array<out T>
2021-03-11 12:11:55,832 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:11:55,923 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:11:55,925 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:11:56,014 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:11:56,106 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Comparable<T>, other: Comparable<T>): T = TODO()
2021-03-11 12:11:56,108 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Comparable<T>, other: Comparable<T>): T = TODO()
2021-03-11 12:11:56,201 [main:302] - generating value of type = Comparable<T> false depth = 6
2021-03-11 12:11:56,206 [main:302] - generating value of type = Comparable<T> false depth = 6
2021-03-11 12:11:56,211 [main:95] - GENERATED = maxOf<Comparable<T>>("zuadm", true)
2021-03-11 12:11:56,212 [main:95] - GENERATED = arrayOf<T>(maxOf<Comparable<T>>("zuadm", true))
2021-03-11 12:11:56,212 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOf<T>(maxOf<Comparable<T>>("zuadm", true))
2021-03-11 12:11:56,212 [main:49] - GENERATED IS CALL =true
2021-03-11 12:11:56,454 [main:55] - randomType = Collection<UByte>
2021-03-11 12:11:56,455 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:56,502 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:56,503 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:56,504 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:56,505 [main:63] - replacement of a of type Array<out T> is arrayOf<T>(maxOf<Comparable<T>>("zuadm", true))
2021-03-11 12:11:56,589 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:11:56,589 [main:66] - Compilation checking started
2021-03-11 12:11:56,897 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(arrayOf<T>(maxOf<Comparable<T>>("zuadm", true))::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), b1)

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return "OK"
}


2021-03-11 12:11:56,901 [main:56] - replacing ("", String)
2021-03-11 12:11:56,902 [main:38] - replacing "" String
2021-03-11 12:11:56,902 [main:42] - Getting value of type String
2021-03-11 12:11:57,037 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:57,038 [main:46] - GENERATED VALUE OF TYPE String = "csfwe"
2021-03-11 12:11:57,039 [main:49] - GENERATED IS CALL =false
2021-03-11 12:11:57,041 [main:55] - randomType = Int
2021-03-11 12:11:57,147 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:57,207 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:11:57,300 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:57,301 [main:66] - Generated call from random type = (1062344195).toString(330727858)
2021-03-11 12:11:57,301 [main:94] - GETTING String from String
2021-03-11 12:11:57,341 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]]
2021-03-11 12:11:57,341 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]
2021-03-11 12:11:57,342 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).trimStart()
2021-03-11 12:11:57,342 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]]
2021-03-11 12:11:57,342 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]
2021-03-11 12:11:57,468 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 12:11:57,469 [main:302] - generating value of type = Char true depth = 1
2021-03-11 12:11:57,470 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).replaceFirstChar({a: Char -> '⻜'})
2021-03-11 12:11:57,471 [main:101] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f592b75]]
2021-03-11 12:11:57,471 [main:137] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f592b75]
2021-03-11 12:11:57,561 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:11:57,563 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).prependIndent("stkmr")
2021-03-11 12:11:57,564 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]]
2021-03-11 12:11:57,564 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]
2021-03-11 12:11:57,655 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:57,656 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).repeat(1569518919)
2021-03-11 12:11:57,656 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]]
2021-03-11 12:11:57,656 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]
2021-03-11 12:11:57,657 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).toLowerCase()
2021-03-11 12:11:57,657 [main:101] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21fc0bcb]]
2021-03-11 12:11:57,657 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21fc0bcb]
2021-03-11 12:11:57,748 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:11:57,749 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:11:57,750 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).filterNot({a: Char -> true})
2021-03-11 12:11:57,750 [main:101] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47361cce]]
2021-03-11 12:11:57,751 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47361cce]
2021-03-11 12:11:57,853 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:57,855 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).take(438960796)
2021-03-11 12:11:57,855 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]]
2021-03-11 12:11:57,855 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]
2021-03-11 12:11:57,855 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).trimIndent()
2021-03-11 12:11:57,856 [main:101] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d545e75]]
2021-03-11 12:11:57,856 [main:137] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d545e75]
2021-03-11 12:11:57,950 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:11:58,044 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:11:58,128 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:11:58,129 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).replace('矞', '吙', true)
2021-03-11 12:11:58,129 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7384550b]]
2021-03-11 12:11:58,129 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7384550b]
2021-03-11 12:11:58,230 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:58,327 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:11:58,414 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:11:58,504 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:11:58,506 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:11:58,678 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:11:58,679 [main:95] - GENERATED = StringBuilder("jenis")
2021-03-11 12:11:58,679 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).replaceRange(966424319, -1863104321, StringBuilder("jenis"))
2021-03-11 12:11:58,679 [main:63] - replacement of "" of type String is (bar3<Float>(arrayOf<Float>(0.9432627f))).filterNot({a: Char -> true})
2021-03-11 12:11:58,765 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:11:58,765 [main:66] - Compilation checking started
2021-03-11 12:11:59,275 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), b1)

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), b3)

    val b4 = bar4(arrayOf((bar3<Float>(arrayOf<Float>(0.9432627f))).filterNot({a: Char -> true})))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return "OK"
}


2021-03-11 12:11:59,279 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:11:59,279 [main:38] - replacing a Array<out T>
2021-03-11 12:11:59,279 [main:42] - Getting value of type Array<out T>
2021-03-11 12:11:59,374 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:11:59,485 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-11 12:11:59,487 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-11 12:11:59,695 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:11:59,696 [main:95] - GENERATED = arrayOfNulls<T>(567025397)
2021-03-11 12:11:59,696 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOfNulls<T>(567025397)
2021-03-11 12:11:59,696 [main:49] - GENERATED IS CALL =true
2021-03-11 12:11:59,790 [main:55] - randomType = ULong
2021-03-11 12:11:59,878 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:11:59,921 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:59,949 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:59,951 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:59,952 [main:94] - GETTING Array<out T> from String
2021-03-11 12:11:59,952 [main:63] - replacement of a of type Array<out T> is arrayOfNulls<T>(567025397)
2021-03-11 12:12:00,037 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:12:00,037 [main:66] - Compilation checking started
2021-03-11 12:12:00,314 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(arrayOfNulls<T>(567025397)::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), b1)

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), b3)

    val b4 = bar4(arrayOf((bar3<Float>(arrayOf<Float>(0.9432627f))).filterNot({a: Char -> true})))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return "OK"
}


2021-03-11 12:12:00,317 [main:56] - replacing (a::get, KFunction1<Int, T>)
2021-03-11 12:12:00,317 [main:38] - replacing a::get KFunction1<Int, T>
2021-03-11 12:12:00,317 [main:42] - Getting value of type KFunction1<Int, T>
2021-03-11 12:12:00,413 [main:302] - generating value of type = KFunction1<Int, T> false depth = 0
2021-03-11 12:12:00,503 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, T> = 
2021-03-11 12:12:00,602 [main:55] - randomType = Int?
2021-03-11 12:12:00,689 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:00,754 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:12:00,786 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:12:00,787 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:12:00,788 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:12:00,789 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, T>
2021-03-11 12:12:00,789 [main:56] - replacing (setMethod, String)
2021-03-11 12:12:00,789 [main:38] - replacing setMethod String
2021-03-11 12:12:00,789 [main:42] - Getting value of type String
2021-03-11 12:12:00,878 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:00,878 [main:46] - GENERATED VALUE OF TYPE String = "ebrbq"
2021-03-11 12:12:00,879 [main:49] - GENERATED IS CALL =false
2021-03-11 12:12:01,180 [main:55] - randomType = Function1<UInt, Array<UByte>>
2021-03-11 12:12:01,180 [main:94] - GETTING String from String
2021-03-11 12:12:01,208 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]]
2021-03-11 12:12:01,208 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]
2021-03-11 12:12:01,295 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:12:01,299 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).removeSuffix("krdpm")
2021-03-11 12:12:01,299 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9c84af]]
2021-03-11 12:12:01,300 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9c84af]
2021-03-11 12:12:01,300 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).uppercase()
2021-03-11 12:12:01,300 [main:101] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@287af9e3]]
2021-03-11 12:12:01,300 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@287af9e3]
2021-03-11 12:12:01,387 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:01,473 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:01,474 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).substringAfter('硍', "mqjzx")
2021-03-11 12:12:01,474 [main:101] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@700a562]]
2021-03-11 12:12:01,474 [main:137] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@700a562]
2021-03-11 12:12:01,561 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:01,647 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:01,649 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).substringBefore('갍', "xpjni")
2021-03-11 12:12:01,649 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]]
2021-03-11 12:12:01,649 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]
2021-03-11 12:12:01,737 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:01,738 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).replaceIndent("earqb")
2021-03-11 12:12:01,738 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]]
2021-03-11 12:12:01,738 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]
2021-03-11 12:12:01,739 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).trimIndent()
2021-03-11 12:12:01,739 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]]
2021-03-11 12:12:01,739 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]
2021-03-11 12:12:01,826 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:01,827 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).substring(1653116695)
2021-03-11 12:12:01,827 [main:101] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23a7e08]]
2021-03-11 12:12:01,828 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23a7e08]
2021-03-11 12:12:01,912 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:12:01,913 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:12:01,914 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).takeWhile({a: Char -> false})
2021-03-11 12:12:01,914 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]]
2021-03-11 12:12:01,914 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]
2021-03-11 12:12:01,915 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).toLowerCase()
2021-03-11 12:12:01,915 [main:101] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a3075e0]]
2021-03-11 12:12:01,915 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a3075e0]
2021-03-11 12:12:02,025 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:02,026 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).takeLast(-1479721329)
2021-03-11 12:12:02,026 [main:63] - replacement of setMethod of type String is (bar0<Float>(0.48623055f)).substring(1653116695)
2021-03-11 12:12:02,121 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:12:02,121 [main:66] - Compilation checking started
2021-03-11 12:12:02,541 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), b1)

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), b3)

    val b4 = bar4(arrayOf((bar3<Float>(arrayOf<Float>(0.9432627f))).filterNot({a: Char -> true})))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return "OK"
}


2021-03-11 12:12:02,544 [main:56] - replacing ("", String)
2021-03-11 12:12:02,544 [main:38] - replacing "" String
2021-03-11 12:12:02,544 [main:42] - Getting value of type String
2021-03-11 12:12:02,633 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:02,634 [main:46] - GENERATED VALUE OF TYPE String = "engvr"
2021-03-11 12:12:02,634 [main:49] - GENERATED IS CALL =false
2021-03-11 12:12:02,816 [main:55] - randomType = Short?
2021-03-11 12:12:02,901 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:12:02,949 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@22fda45]
2021-03-11 12:12:03,035 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:12:03,036 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:12:03,137 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:03,139 [main:66] - Generated call from random type = (-26098)?.compareTo(25).toString(2011893270)
2021-03-11 12:12:03,139 [main:94] - GETTING String from String
2021-03-11 12:12:03,167 [main:101] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a03b602]]
2021-03-11 12:12:03,167 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a03b602]
2021-03-11 12:12:03,254 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:03,341 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:03,426 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:03,428 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceAfter('쒺', "rizlo", "oimub")
2021-03-11 12:12:03,428 [main:101] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e33706e]]
2021-03-11 12:12:03,428 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e33706e]
2021-03-11 12:12:03,513 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:03,515 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).dropLast(641183481)
2021-03-11 12:12:03,515 [main:101] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4accd603]]
2021-03-11 12:12:03,515 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4accd603]
2021-03-11 12:12:03,601 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:12:03,693 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:12:03,695 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:12:03,886 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:12:03,887 [main:95] - GENERATED = StringBuilder(115927211)
2021-03-11 12:12:03,888 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding(StringBuilder(115927211))
2021-03-11 12:12:03,888 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b328c0]]
2021-03-11 12:12:03,888 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:12:04,022 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:04,023 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b328c0]
2021-03-11 12:12:04,130 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:04,131 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa")
2021-03-11 12:12:04,131 [main:101] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23a7e08]]
2021-03-11 12:12:04,132 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23a7e08]
2021-03-11 12:12:04,219 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:12:04,220 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:12:04,221 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).takeWhile({a: Char -> false})
2021-03-11 12:12:04,221 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]]
2021-03-11 12:12:04,222 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]
2021-03-11 12:12:04,222 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).toUpperCase()
2021-03-11 12:12:04,222 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]]
2021-03-11 12:12:04,222 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]
2021-03-11 12:12:04,312 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:04,314 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).substring(481282615)
2021-03-11 12:12:04,314 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]]
2021-03-11 12:12:04,314 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:12:04,400 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:04,486 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:04,487 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]
2021-03-11 12:12:04,572 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:12:04,664 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:12:04,666 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:12:04,885 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:12:04,887 [main:95] - GENERATED = StringBuilder("mwdbl")
2021-03-11 12:12:04,994 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:12:04,995 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).subSequence(1232841024, 1131895283).commonSuffixWith(StringBuilder("mwdbl"), true)
2021-03-11 12:12:04,995 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]]
2021-03-11 12:12:04,995 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]
2021-03-11 12:12:05,083 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:05,084 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).concat("njsij")
2021-03-11 12:12:05,084 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]]
2021-03-11 12:12:05,084 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]
2021-03-11 12:12:05,168 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:05,169 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndent("helsc")
2021-03-11 12:12:05,170 [main:63] - replacement of "" of type String is (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa")
2021-03-11 12:12:05,254 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:12:05,255 [main:66] - Compilation checking started
2021-03-11 12:12:05,719 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa"))

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), b1)

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), b3)

    val b4 = bar4(arrayOf((bar3<Float>(arrayOf<Float>(0.9432627f))).filterNot({a: Char -> true})))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return "OK"
}


2021-03-11 12:12:05,723 [main:56] - replacing ("OK", String)
2021-03-11 12:12:05,724 [main:38] - replacing "OK" String
2021-03-11 12:12:05,724 [main:42] - Getting value of type String
2021-03-11 12:12:05,832 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:05,833 [main:46] - GENERATED VALUE OF TYPE String = "ckjcm"
2021-03-11 12:12:05,833 [main:49] - GENERATED IS CALL =false
2021-03-11 12:12:06,050 [main:55] - randomType = Short?
2021-03-11 12:12:06,138 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:12:06,175 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@bbed7b]
2021-03-11 12:12:06,263 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:12:06,264 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e95ee6]
2021-03-11 12:12:06,351 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:06,352 [main:66] - Generated call from random type = (22559)?.div(6674517507225442320).toString(2113559151)
2021-03-11 12:12:06,352 [main:94] - GETTING String from String
2021-03-11 12:12:06,369 [main:101] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23a7e08]]
2021-03-11 12:12:06,370 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23a7e08]
2021-03-11 12:12:06,458 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:12:06,459 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:12:06,460 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeWhile({a: Char -> true})
2021-03-11 12:12:06,460 [main:101] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534bf968]]
2021-03-11 12:12:06,460 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534bf968]
2021-03-11 12:12:06,547 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:06,635 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:06,636 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
2021-03-11 12:12:06,637 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]]
2021-03-11 12:12:06,637 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]
2021-03-11 12:12:06,725 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:06,726 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).concat("cpewc")
2021-03-11 12:12:06,726 [main:101] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd07c1]]
2021-03-11 12:12:06,726 [main:137] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd07c1]
2021-03-11 12:12:06,815 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:06,903 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:07,013 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:07,014 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).replaceBeforeLast('洅', "touol", "qgshe")
2021-03-11 12:12:07,015 [main:101] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eec66c2]]
2021-03-11 12:12:07,015 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eec66c2]
2021-03-11 12:12:07,119 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:12:07,120 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:12:07,123 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).filter({a: Char -> true})
2021-03-11 12:12:07,123 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]]
2021-03-11 12:12:07,123 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]
2021-03-11 12:12:07,123 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).reversed()
2021-03-11 12:12:07,123 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]]
2021-03-11 12:12:07,123 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:12:07,216 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:07,325 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:07,326 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]
2021-03-11 12:12:07,415 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:07,504 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:07,505 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).subSequence(-914950851, 532126143).substring(1727036242, -1153987270)
2021-03-11 12:12:07,505 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]]
2021-03-11 12:12:07,505 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]
2021-03-11 12:12:07,594 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:12:07,685 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:12:07,687 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).commonSuffixWith("ogdht", false)
2021-03-11 12:12:07,687 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]]
2021-03-11 12:12:07,687 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:12:07,807 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:07,911 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:07,912 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]
2021-03-11 12:12:08,001 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:12:08,102 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:12:08,103 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).subSequence(-289110408, -1111207618).commonPrefixWith("gcsum", true)
2021-03-11 12:12:08,104 [main:101] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3170b0]]
2021-03-11 12:12:08,104 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3170b0]
2021-03-11 12:12:08,193 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:08,194 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).trimMargin("hyjqe")
2021-03-11 12:12:08,194 [main:63] - replacement of "OK" of type String is (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
2021-03-11 12:12:08,282 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:12:08,283 [main:66] - Compilation checking started
2021-03-11 12:12:08,847 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa"))

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), b1)

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), b3)

    val b4 = bar4(arrayOf((bar3<Float>(arrayOf<Float>(0.9432627f))).filterNot({a: Char -> true})))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:08,852 [main:56] - replacing ("", String)
2021-03-11 12:12:08,853 [main:38] - replacing "" String
2021-03-11 12:12:08,853 [main:42] - Getting value of type String
2021-03-11 12:12:08,954 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:08,955 [main:46] - GENERATED VALUE OF TYPE String = "mhaqw"
2021-03-11 12:12:08,956 [main:49] - GENERATED IS CALL =false
2021-03-11 12:12:08,958 [main:55] - randomType = Boolean
2021-03-11 12:12:09,079 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:12:09,089 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5174a81f]
2021-03-11 12:12:09,179 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:12:09,180 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:12:09,269 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:09,270 [main:66] - Generated call from random type = (true).compareTo(true).toString(-385699514)
2021-03-11 12:12:09,270 [main:63] - replacement of "" of type String is (true).compareTo(true).toString(-385699514)
2021-03-11 12:12:09,359 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:12:09,360 [main:66] - Compilation checking started
2021-03-11 12:12:09,818 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa"))

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), b1)

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), b3)

    val b4 = bar4(arrayOf((bar3<Float>(arrayOf<Float>(0.9432627f))).filterNot({a: Char -> true})))
    val b5 = bar5(arrayOf((true).compareTo(true).toString(-385699514)))

    assertEquals(getMethod, b4)
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:09,823 [main:56] - replacing (a::get, KFunction1<Int, T>)
2021-03-11 12:12:09,823 [main:38] - replacing a::get KFunction1<Int, T>
2021-03-11 12:12:09,823 [main:42] - Getting value of type KFunction1<Int, T>
2021-03-11 12:12:09,913 [main:302] - generating value of type = KFunction1<Int, T> false depth = 0
2021-03-11 12:12:10,012 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, T> = 
2021-03-11 12:12:10,236 [main:55] - randomType = HashSet<Byte>
2021-03-11 12:12:10,355 [main:302] - generating value of type = HashSet<Byte> false depth = 0
2021-03-11 12:12:10,452 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(elements: kotlin.collections.Collection<Byte>): HashSet<Byte> = TODO()
2021-03-11 12:12:10,454 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(elements: kotlin.collections.Collection<Byte>): HashSet<Byte> = TODO()
2021-03-11 12:12:10,648 [main:302] - generating value of type = Collection<Byte> false depth = 3
2021-03-11 12:12:10,744 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(element: Byte): Collection<Byte> = TODO()
2021-03-11 12:12:10,746 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(element: Byte): Collection<Byte> = TODO()
2021-03-11 12:12:10,840 [main:302] - generating value of type = Byte true depth = 6
2021-03-11 12:12:10,841 [main:95] - GENERATED = listOfNotNull<Byte>(80)
2021-03-11 12:12:10,841 [main:95] - GENERATED = LinkedHashSet<Byte>(listOfNotNull<Byte>(80))
2021-03-11 12:12:11,007 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:12:11,034 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:12:11,036 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:12:11,037 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:12:11,037 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, T>
2021-03-11 12:12:11,037 [main:56] - replacing (getMethod, String)
2021-03-11 12:12:11,038 [main:38] - replacing getMethod String
2021-03-11 12:12:11,038 [main:42] - Getting value of type String
2021-03-11 12:12:11,127 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:11,128 [main:46] - GENERATED VALUE OF TYPE String = "hsyyc"
2021-03-11 12:12:11,128 [main:49] - GENERATED IS CALL =false
2021-03-11 12:12:11,322 [main:55] - randomType = List<ULong>
2021-03-11 12:12:11,322 [main:94] - GETTING String from String
2021-03-11 12:12:11,341 [main:101] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd07c1]]
2021-03-11 12:12:11,341 [main:137] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd07c1]
2021-03-11 12:12:11,449 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:11,538 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:11,630 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:11,631 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceBeforeLast('䅲', "dwiko", "fhlyu")
2021-03-11 12:12:11,631 [main:101] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e33706e]]
2021-03-11 12:12:11,631 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e33706e]
2021-03-11 12:12:11,724 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:11,726 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).dropLast(1356790480)
2021-03-11 12:12:11,726 [main:101] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ef6a1a]]
2021-03-11 12:12:11,726 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ef6a1a]
2021-03-11 12:12:11,815 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:11,904 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:11,905 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).substringAfterLast('搐', "jyguo")
2021-03-11 12:12:11,905 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]]
2021-03-11 12:12:11,905 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]
2021-03-11 12:12:11,906 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed()
2021-03-11 12:12:11,906 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]]
2021-03-11 12:12:11,906 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:12:11,996 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:11,997 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).length.toString(-757022416)
2021-03-11 12:12:11,997 [main:101] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cff2b98]]
2021-03-11 12:12:11,997 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cff2b98]
2021-03-11 12:12:12,089 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:12,185 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:12,276 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:12,277 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceAfterLast('莤', "okkuc", "ctryp")
2021-03-11 12:12:12,277 [main:101] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1384dfc4]]
2021-03-11 12:12:12,277 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1384dfc4]
2021-03-11 12:12:12,366 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:12:12,366 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:12:12,368 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).takeLastWhile({a: Char -> true})
2021-03-11 12:12:12,368 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f7d80a8]]
2021-03-11 12:12:12,368 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f7d80a8]
2021-03-11 12:12:12,482 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:12:12,483 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:12:12,485 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).dropWhile({a: Char -> true})
2021-03-11 12:12:12,485 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]]
2021-03-11 12:12:12,485 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]
2021-03-11 12:12:12,600 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:12:12,695 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:12:12,697 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).commonSuffixWith("rqhzw", false)
2021-03-11 12:12:12,697 [main:101] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f592b75]]
2021-03-11 12:12:12,697 [main:137] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f592b75]
2021-03-11 12:12:12,786 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:12,787 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).prependIndent("dgkqn")
2021-03-11 12:12:12,788 [main:63] - replacement of getMethod of type String is (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed()
2021-03-11 12:12:12,878 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:12:12,878 [main:66] - Compilation checking started
2021-03-11 12:12:13,300 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa"))

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), b1)

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), b3)

    val b4 = bar4(arrayOf((bar3<Float>(arrayOf<Float>(0.9432627f))).filterNot({a: Char -> true})))
    val b5 = bar5(arrayOf((true).compareTo(true).toString(-385699514)))

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), b4)
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:13,305 [main:56] - replacing (a::set, KFunction2<Int, T, Unit>)
2021-03-11 12:12:13,305 [main:38] - replacing a::set KFunction2<Int, T, Unit>
2021-03-11 12:12:13,305 [main:42] - Getting value of type KFunction2<Int, T, Unit>
2021-03-11 12:12:13,395 [main:302] - generating value of type = KFunction2<Int, T, Unit> false depth = 0
2021-03-11 12:12:13,486 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, T, Unit> = 
2021-03-11 12:12:13,587 [main:55] - randomType = Char?
2021-03-11 12:12:13,697 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:13,719 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:12:13,742 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:12:13,743 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:12:13,744 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:12:13,745 [main:60] - Cant find and generate replacement for a::set type KFunction2<Int, T, Unit>
2021-03-11 12:12:13,745 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:12:13,745 [main:38] - replacing a Array<out T>
2021-03-11 12:12:13,745 [main:42] - Getting value of type Array<out T>
2021-03-11 12:12:13,836 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:12:13,931 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-11 12:12:13,933 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-11 12:12:14,128 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:12:14,129 [main:95] - GENERATED = arrayOfNulls<T>(1369133194)
2021-03-11 12:12:14,129 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOfNulls<T>(1369133194)
2021-03-11 12:12:14,129 [main:49] - GENERATED IS CALL =true
2021-03-11 12:12:14,227 [main:55] - randomType = UByte
2021-03-11 12:12:14,318 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:12:14,352 [main:94] - GETTING Array<out T> from String
2021-03-11 12:12:14,369 [main:94] - GETTING Array<out T> from String
2021-03-11 12:12:14,370 [main:94] - GETTING Array<out T> from String
2021-03-11 12:12:14,371 [main:94] - GETTING Array<out T> from String
2021-03-11 12:12:14,372 [main:63] - replacement of a of type Array<out T> is arrayOfNulls<T>(1369133194)
2021-03-11 12:12:14,462 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:12:14,462 [main:66] - Compilation checking started
2021-03-11 12:12:14,723 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(arrayOfNulls<T>(1369133194)::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa"))

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), b1)

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), b3)

    val b4 = bar4(arrayOf((bar3<Float>(arrayOf<Float>(0.9432627f))).filterNot({a: Char -> true})))
    val b5 = bar5(arrayOf((true).compareTo(true).toString(-385699514)))

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), b4)
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:14,726 [main:56] - replacing (arrayOf((bar3<Float>(arrayOf<Float>(0.9432627f))).filterNot({a: Char -> true})), Array<String>)
2021-03-11 12:12:14,726 [main:38] - replacing arrayOf((bar3<Float>(arrayOf<Float>(0.9432627f))).filterNot({a: Char -> true})) Array<String>
2021-03-11 12:12:14,726 [main:42] - Getting value of type Array<String>
2021-03-11 12:12:14,850 [main:302] - generating value of type = Array<String> false depth = 0
2021-03-11 12:12:14,954 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: String): Array<Strg> = TODO()
2021-03-11 12:12:14,956 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: String): Array<Strg> = TODO()
2021-03-11 12:12:15,050 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:12:15,051 [main:95] - GENERATED = arrayOf<String>("eypmu")
2021-03-11 12:12:15,051 [main:46] - GENERATED VALUE OF TYPE Array<String> = arrayOf<String>("eypmu")
2021-03-11 12:12:15,051 [main:49] - GENERATED IS CALL =true
2021-03-11 12:12:15,149 [main:55] - randomType = UShort
2021-03-11 12:12:15,240 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:12:15,269 [main:94] - GETTING Array<String> from String
2021-03-11 12:12:15,288 [main:94] - GETTING Array<String> from String
2021-03-11 12:12:15,289 [main:94] - GETTING Array<String> from String
2021-03-11 12:12:15,289 [main:94] - GETTING Array<String> from String
2021-03-11 12:12:15,290 [main:63] - replacement of arrayOf((bar3<Float>(arrayOf<Float>(0.9432627f))).filterNot({a: Char -> true})) of type Array<String> is arrayOf<String>("eypmu")
2021-03-11 12:12:15,379 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:12:15,379 [main:66] - Compilation checking started
2021-03-11 12:12:15,808 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa"))

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), b1)

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), b3)

    val b4 = bar4(arrayOf<String>("eypmu"))
    val b5 = bar5(arrayOf((true).compareTo(true).toString(-385699514)))

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), b4)
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:15,811 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:12:15,811 [main:38] - replacing a Array<out T>
2021-03-11 12:12:15,811 [main:42] - Getting value of type Array<out T>
2021-03-11 12:12:15,904 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:12:15,995 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 12:12:15,997 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 12:12:16,323 [main:385] - Cant generate call of fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 12:12:16,323 [main:46] - GENERATED VALUE OF TYPE Array<out T> = 
2021-03-11 12:12:16,627 [main:55] - randomType = LinkedHashMap<UByte, UShort>
2021-03-11 12:12:16,714 [main:302] - generating value of type = LinkedHashMap<UByte, UShort> false depth = 0
2021-03-11 12:12:16,806 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(): LinkedHashMap<UByte, UShort> = TODO()
2021-03-11 12:12:16,808 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(): LinkedHashMap<UByte, UShort> = TODO()
2021-03-11 12:12:16,898 [main:95] - GENERATED = LinkedHashMap<UByte, UShort>()
2021-03-11 12:12:17,108 [main:94] - GETTING Array<out T> from String
2021-03-11 12:12:17,142 [main:94] - GETTING Array<out T> from String
2021-03-11 12:12:17,143 [main:94] - GETTING Array<out T> from String
2021-03-11 12:12:17,144 [main:94] - GETTING Array<out T> from String
2021-03-11 12:12:17,144 [main:60] - Cant find and generate replacement for a type Array<out T>
2021-03-11 12:12:17,144 [main:56] - replacing (a, Array<in T>)
2021-03-11 12:12:17,144 [main:38] - replacing a Array<in T>
2021-03-11 12:12:17,144 [main:42] - Getting value of type Array<in T>
2021-03-11 12:12:17,245 [main:302] - generating value of type = Array<in T> false depth = 0
2021-03-11 12:12:17,346 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:12:17,348 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:12:17,475 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:12:17,574 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Short, b: Short): T = TODO()
2021-03-11 12:12:17,576 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Short, b: Short): T = TODO()
2021-03-11 12:12:17,677 [main:302] - generating value of type = Short true depth = 6
2021-03-11 12:12:17,677 [main:302] - generating value of type = Short true depth = 6
2021-03-11 12:12:17,678 [main:95] - GENERATED = maxOf<Short>(12933, -29505)
2021-03-11 12:12:17,678 [main:95] - GENERATED = arrayOf<T>(maxOf<Short>(12933, -29505))
2021-03-11 12:12:17,679 [main:46] - GENERATED VALUE OF TYPE Array<in T> = arrayOf<T>(maxOf<Short>(12933, -29505))
2021-03-11 12:12:17,679 [main:49] - GENERATED IS CALL =true
2021-03-11 12:12:18,179 [main:55] - randomType = Function2<Char, Double, MutableMap<Int, UByte>>
2021-03-11 12:12:18,180 [main:94] - GETTING Array<in T> from String
2021-03-11 12:12:18,207 [main:94] - GETTING Array<in T> from String
2021-03-11 12:12:18,208 [main:94] - GETTING Array<in T> from String
2021-03-11 12:12:18,209 [main:94] - GETTING Array<in T> from String
2021-03-11 12:12:18,210 [main:63] - replacement of a of type Array<in T> is arrayOf<T>(maxOf<Short>(12933, -29505))
2021-03-11 12:12:18,299 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:12:18,299 [main:66] - Compilation checking started
2021-03-11 12:12:18,577 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(arrayOf<T>(maxOf<Short>(12933, -29505))::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa"))

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), b1)

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), b3)

    val b4 = bar4(arrayOf<String>("eypmu"))
    val b5 = bar5(arrayOf((true).compareTo(true).toString(-385699514)))

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), b4)
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:18,580 [main:56] - replacing (a, Array<in T>)
2021-03-11 12:12:18,580 [main:38] - replacing a Array<in T>
2021-03-11 12:12:18,580 [main:42] - Getting value of type Array<in T>
2021-03-11 12:12:18,676 [main:302] - generating value of type = Array<in T> false depth = 0
2021-03-11 12:12:18,794 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:12:18,796 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:12:18,888 [main:95] - GENERATED = enumValues<T>()
2021-03-11 12:12:18,889 [main:46] - GENERATED VALUE OF TYPE Array<in T> = enumValues<T>()
2021-03-11 12:12:18,889 [main:49] - GENERATED IS CALL =true
2021-03-11 12:12:18,986 [main:55] - randomType = String?
2021-03-11 12:12:19,074 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:19,099 [main:94] - GETTING Array<in T> from String
2021-03-11 12:12:19,117 [main:94] - GETTING Array<in T> from String
2021-03-11 12:12:19,118 [main:94] - GETTING Array<in T> from String
2021-03-11 12:12:19,119 [main:94] - GETTING Array<in T> from String
2021-03-11 12:12:19,119 [main:63] - replacement of a of type Array<in T> is enumValues<T>()
2021-03-11 12:12:19,207 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:12:19,207 [main:66] - Compilation checking started
2021-03-11 12:12:19,455 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(enumValues<T>()::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa"))

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), b1)

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), b3)

    val b4 = bar4(arrayOf<String>("eypmu"))
    val b5 = bar5(arrayOf((true).compareTo(true).toString(-385699514)))

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), b4)
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:19,458 [main:56] - replacing (a::get, KFunction1<Int, Any?>)
2021-03-11 12:12:19,458 [main:38] - replacing a::get KFunction1<Int, Any?>
2021-03-11 12:12:19,458 [main:42] - Getting value of type KFunction1<Int, Any?>
2021-03-11 12:12:19,546 [main:302] - generating value of type = KFunction1<Int, Any?> false depth = 0
2021-03-11 12:12:19,639 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, Any?> = 
2021-03-11 12:12:19,934 [main:55] - randomType = LinkedHashMap<Float, Sequence<Long>>
2021-03-11 12:12:20,044 [main:302] - generating value of type = LinkedHashMap<Float, Sequence<Long>> false depth = 0
2021-03-11 12:12:20,137 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Float, Sequence<Long>> = TODO()
2021-03-11 12:12:20,138 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Float, Sequence<Long>> = TODO()
2021-03-11 12:12:20,230 [main:95] - GENERATED = linkedMapOf<Float, Sequence<Long>>()
2021-03-11 12:12:20,402 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:12:20,432 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:12:20,433 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:12:20,435 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:12:20,435 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, Any?>
2021-03-11 12:12:20,435 [main:56] - replacing (arrayOf((true).compareTo(true).toString(-385699514)), Array<String>)
2021-03-11 12:12:20,435 [main:38] - replacing arrayOf((true).compareTo(true).toString(-385699514)) Array<String>
2021-03-11 12:12:20,435 [main:42] - Getting value of type Array<String>
2021-03-11 12:12:20,531 [main:302] - generating value of type = Array<String> false depth = 0
2021-03-11 12:12:20,630 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->String): Array<String> = TODO()
2021-03-11 12:12:20,632 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->String): Array<String> = TODO()
2021-03-11 12:12:20,917 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:12:20,918 [main:302] - generating value of type = Function1<Int, String> false depth = 3
2021-03-11 12:12:20,919 [main:302] - generating value of type = String true depth = 4
2021-03-11 12:12:20,920 [main:95] - GENERATED = Array<String>(135674384, {a: Int -> "rjbrw"})
2021-03-11 12:12:20,920 [main:46] - GENERATED VALUE OF TYPE Array<String> = Array<String>(135674384, {a: Int -> "rjbrw"})
2021-03-11 12:12:20,920 [main:49] - GENERATED IS CALL =true
2021-03-11 12:12:21,425 [main:55] - randomType = LinkedHashMap<Short, Array<ULong>>?
2021-03-11 12:12:21,513 [main:302] - generating value of type = LinkedHashMap<Short, Array<ULong>> false depth = 0
2021-03-11 12:12:21,606 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashMap<Short, Array<ULong>> = TODO()
2021-03-11 12:12:21,608 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashMap<Short, Array<ULong>> = TODO()
2021-03-11 12:12:21,885 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:12:21,886 [main:302] - generating value of type = Float true depth = 3
2021-03-11 12:12:21,887 [main:95] - GENERATED = LinkedHashMap<Short, Array<ULong>>(781619964, 0.1638363f)
2021-03-11 12:12:22,046 [main:94] - GETTING Array<String> from String
2021-03-11 12:12:22,063 [main:94] - GETTING Array<String> from String
2021-03-11 12:12:22,064 [main:94] - GETTING Array<String> from String
2021-03-11 12:12:22,065 [main:94] - GETTING Array<String> from String
2021-03-11 12:12:22,065 [main:63] - replacement of arrayOf((true).compareTo(true).toString(-385699514)) of type Array<String> is Array<String>(135674384, {a: Int -> "rjbrw"})
2021-03-11 12:12:22,152 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:12:22,152 [main:66] - Compilation checking started
2021-03-11 12:12:22,517 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa"))

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), b1)

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), b3)

    val b4 = bar4(arrayOf<String>("eypmu"))
    val b5 = bar5(Array<String>(135674384, {a: Int -> "rjbrw"}))

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), b4)
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:22,522 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:12:22,523 [main:38] - replacing a Array<out T>
2021-03-11 12:12:22,523 [main:42] - Getting value of type Array<out T>
2021-03-11 12:12:22,636 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:12:22,731 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-11 12:12:22,732 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-11 12:12:22,943 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:12:22,944 [main:95] - GENERATED = arrayOfNulls<T>(-1940170404)
2021-03-11 12:12:22,944 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOfNulls<T>(-1940170404)
2021-03-11 12:12:22,944 [main:49] - GENERATED IS CALL =true
2021-03-11 12:12:23,227 [main:55] - randomType = ArrayList<Array<Long>>
2021-03-11 12:12:23,315 [main:302] - generating value of type = ArrayList<Array<Long>> false depth = 0
2021-03-11 12:12:23,407 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Array<Long>> = TODO()
2021-03-11 12:12:23,409 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Array<Long>> = TODO()
2021-03-11 12:12:23,503 [main:95] - GENERATED = arrayListOf<Array<Long>>()
2021-03-11 12:12:23,693 [main:94] - GETTING Array<out T> from String
2021-03-11 12:12:23,723 [main:94] - GETTING Array<out T> from String
2021-03-11 12:12:23,724 [main:94] - GETTING Array<out T> from String
2021-03-11 12:12:23,725 [main:94] - GETTING Array<out T> from String
2021-03-11 12:12:23,725 [main:63] - replacement of a of type Array<out T> is arrayOfNulls<T>(-1940170404)
2021-03-11 12:12:23,822 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:12:23,823 [main:66] - Compilation checking started
2021-03-11 12:12:24,055 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(arrayOfNulls<T>(-1940170404)::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa"))

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), b1)

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), b3)

    val b4 = bar4(arrayOf<String>("eypmu"))
    val b5 = bar5(Array<String>(135674384, {a: Int -> "rjbrw"}))

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), b4)
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:24,059 [main:56] - replacing (bar4(arrayOf<String>("eypmu")), String)
2021-03-11 12:12:24,059 [main:38] - replacing bar4(arrayOf<String>("eypmu")) String
2021-03-11 12:12:24,059 [main:42] - Getting value of type String
2021-03-11 12:12:24,147 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:24,148 [main:46] - GENERATED VALUE OF TYPE String = "rcfds"
2021-03-11 12:12:24,148 [main:49] - GENERATED IS CALL =false
2021-03-11 12:12:24,354 [main:55] - randomType = ArrayList<UByte>
2021-03-11 12:12:24,442 [main:302] - generating value of type = ArrayList<UByte> false depth = 0
2021-03-11 12:12:24,532 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: UByte): ArrayList<UByte> = TODO()
2021-03-11 12:12:24,534 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: UByte): ArrayList<UByte> = TODO()
2021-03-11 12:12:24,622 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 12:12:24,623 [main:95] - GENERATED = arrayListOf<UByte>(121.toUByte())
2021-03-11 12:12:24,790 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@55db0ccf]
2021-03-11 12:12:24,790 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3701ad6f]
2021-03-11 12:12:24,791 [main:66] - Generated call from random type = (arrayListOf<UByte>(121.toUByte())).toArray().contentDeepToString()
2021-03-11 12:12:24,791 [main:94] - GETTING String from String
2021-03-11 12:12:24,819 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]]
2021-03-11 12:12:24,819 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:12:24,910 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:24,911 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]
2021-03-11 12:12:24,911 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).get(855783842).titlecase()
2021-03-11 12:12:24,911 [main:101] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a03b602]]
2021-03-11 12:12:24,912 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a03b602]
2021-03-11 12:12:24,998 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:25,084 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:25,170 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:25,171 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfter('', "rdmcm", "bajhb")
2021-03-11 12:12:25,172 [main:101] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@720e46c5]]
2021-03-11 12:12:25,172 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@720e46c5]
2021-03-11 12:12:25,260 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:25,349 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:25,350 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceIndentByMargin("qdzyi", "wjrrc")
2021-03-11 12:12:25,350 [main:101] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47361cce]]
2021-03-11 12:12:25,350 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47361cce]
2021-03-11 12:12:25,437 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:25,438 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).take(1312360073)
2021-03-11 12:12:25,438 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]]
2021-03-11 12:12:25,438 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]
2021-03-11 12:12:25,528 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:25,530 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(1376417702)
2021-03-11 12:12:25,530 [main:101] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f592b75]]
2021-03-11 12:12:25,530 [main:137] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f592b75]
2021-03-11 12:12:25,652 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:25,653 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
2021-03-11 12:12:25,653 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]]
2021-03-11 12:12:25,653 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]
2021-03-11 12:12:25,739 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 12:12:25,739 [main:302] - generating value of type = Char true depth = 1
2021-03-11 12:12:25,741 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceFirstChar({a: Char -> '㹧'})
2021-03-11 12:12:25,741 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]]
2021-03-11 12:12:25,741 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:12:25,827 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:25,915 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:25,916 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]
2021-03-11 12:12:26,003 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:12:26,095 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:12:26,096 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).subSequence(1800694277, -2041099405).commonSuffixWith("uogxu", true)
2021-03-11 12:12:26,096 [main:101] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a3075e0]]
2021-03-11 12:12:26,096 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a3075e0]
2021-03-11 12:12:26,184 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:26,186 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).takeLast(-812253659)
2021-03-11 12:12:26,186 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]]
2021-03-11 12:12:26,186 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]
2021-03-11 12:12:26,273 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:12:26,365 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:12:26,367 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:12:26,549 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:12:26,550 [main:95] - GENERATED = StringBuilder("dfskk")
2021-03-11 12:12:26,551 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).removePrefix(StringBuilder("dfskk"))
2021-03-11 12:12:26,551 [main:63] - replacement of bar4(arrayOf<String>("eypmu")) of type String is (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
2021-03-11 12:12:26,639 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:12:26,639 [main:66] - Compilation checking started
2021-03-11 12:12:27,025 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa"))

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), b1)

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), b3)

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = bar5(Array<String>(135674384, {a: Int -> "rjbrw"}))

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), b4)
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:27,028 [main:56] - replacing (b1, String)
2021-03-11 12:12:27,029 [main:38] - replacing b1 String
2021-03-11 12:12:27,029 [main:42] - Getting value of type String
2021-03-11 12:12:27,141 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:27,142 [main:46] - GENERATED VALUE OF TYPE String = "svfco"
2021-03-11 12:12:27,142 [main:49] - GENERATED IS CALL =false
2021-03-11 12:12:27,144 [main:55] - randomType = Boolean
2021-03-11 12:12:27,235 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:12:27,249 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5174a81f]
2021-03-11 12:12:27,338 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:12:27,339 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:12:27,430 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:27,431 [main:66] - Generated call from random type = (false).compareTo(false).toString(515477834)
2021-03-11 12:12:27,431 [main:94] - GETTING String from String
2021-03-11 12:12:27,461 [main:101] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17845e8c]]
2021-03-11 12:12:27,461 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17845e8c]
2021-03-11 12:12:27,462 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).decapitalize()
2021-03-11 12:12:27,462 [main:101] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3170b0]]
2021-03-11 12:12:27,462 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3170b0]
2021-03-11 12:12:27,551 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:27,552 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trimMargin("ogolm")
2021-03-11 12:12:27,552 [main:101] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dd201a1]]
2021-03-11 12:12:27,552 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dd201a1]
2021-03-11 12:12:27,639 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 12:12:27,640 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:12:27,641 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).filterIndexed({a: Int, b: Char -> true})
2021-03-11 12:12:27,641 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]]
2021-03-11 12:12:27,641 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:12:27,727 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:27,815 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:27,816 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]
2021-03-11 12:12:27,904 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:27,991 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:27,992 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).subSequence(543597093, 1593729290).substring(-140800071, -2129425950)
2021-03-11 12:12:27,992 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]]
2021-03-11 12:12:27,992 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]
2021-03-11 12:12:27,992 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).reversed()
2021-03-11 12:12:27,992 [main:101] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]]
2021-03-11 12:12:27,992 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]
2021-03-11 12:12:28,078 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:12:28,169 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:12:28,170 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonPrefixWith("yewhu", true)
2021-03-11 12:12:28,170 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]]
2021-03-11 12:12:28,170 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]
2021-03-11 12:12:28,257 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:12:28,346 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:12:28,348 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:12:28,552 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:12:28,556 [main:95] - GENERATED = StringBuilder("mkjbi")
2021-03-11 12:12:28,641 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:12:28,642 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith(StringBuilder("mkjbi"), false)
2021-03-11 12:12:28,643 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a5650d3]]
2021-03-11 12:12:28,643 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a5650d3]
2021-03-11 12:12:28,643 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim()
2021-03-11 12:12:28,643 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]]
2021-03-11 12:12:28,643 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]
2021-03-11 12:12:28,643 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trimIndent()
2021-03-11 12:12:28,643 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e624d9b]]
2021-03-11 12:12:28,643 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:12:28,729 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:28,816 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:28,817 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e624d9b]
2021-03-11 12:12:28,904 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:12:28,996 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:12:28,997 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:12:29,179 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:12:29,180 [main:95] - GENERATED = Regex("lxhap")
2021-03-11 12:12:29,271 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:29,273 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).subSequence(1079985520, 2097201459).replaceFirst(Regex("lxhap"), "jabcp")
2021-03-11 12:12:29,273 [main:63] - replacement of b1 of type String is "svfco"
2021-03-11 12:12:29,360 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:12:29,360 [main:66] - Compilation checking started
2021-03-11 12:12:29,716 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa"))

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), b3)

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = bar5(Array<String>(135674384, {a: Int -> "rjbrw"}))

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), b4)
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:29,719 [main:56] - replacing (b3, String)
2021-03-11 12:12:29,720 [main:38] - replacing b3 String
2021-03-11 12:12:29,720 [main:42] - Getting value of type String
2021-03-11 12:12:29,809 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:29,810 [main:46] - GENERATED VALUE OF TYPE String = "mwoze"
2021-03-11 12:12:29,810 [main:49] - GENERATED IS CALL =false
2021-03-11 12:12:30,000 [main:55] - randomType = Short?
2021-03-11 12:12:30,108 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:12:30,143 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4caf2748]
2021-03-11 12:12:30,143 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b328c0]
2021-03-11 12:12:30,229 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:30,231 [main:66] - Generated call from random type = (13572)?.toChar().plus("wesbw")
2021-03-11 12:12:30,231 [main:94] - GETTING String from String
2021-03-11 12:12:30,248 [main:101] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a3075e0]]
2021-03-11 12:12:30,248 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a3075e0]
2021-03-11 12:12:30,333 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:30,335 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).takeLast(1897294933)
2021-03-11 12:12:30,335 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]]
2021-03-11 12:12:30,335 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]
2021-03-11 12:12:30,421 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:30,422 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).substring(-364278795)
2021-03-11 12:12:30,422 [main:101] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@720e46c5]]
2021-03-11 12:12:30,422 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@720e46c5]
2021-03-11 12:12:30,508 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:30,595 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:30,597 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("unllb", "gaxrx")
2021-03-11 12:12:30,597 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]]
2021-03-11 12:12:30,597 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:12:30,683 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:30,769 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:30,770 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]
2021-03-11 12:12:30,857 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:30,858 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).subSequence(-1541611481, -1348985260).repeat(1790804847)
2021-03-11 12:12:30,858 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]]
2021-03-11 12:12:30,858 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]
2021-03-11 12:12:30,944 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:30,946 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndent("ynckw")
2021-03-11 12:12:30,946 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]]
2021-03-11 12:12:30,946 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]
2021-03-11 12:12:31,032 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:31,033 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).repeat(-620676310)
2021-03-11 12:12:31,033 [main:101] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dd201a1]]
2021-03-11 12:12:31,033 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dd201a1]
2021-03-11 12:12:31,119 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 12:12:31,120 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:12:31,121 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).filterIndexed({a: Int, b: Char -> true})
2021-03-11 12:12:31,121 [main:101] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@287af9e3]]
2021-03-11 12:12:31,121 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@287af9e3]
2021-03-11 12:12:31,207 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:31,295 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:31,296 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).substringAfter('ㆁ', "pvzqu")
2021-03-11 12:12:31,297 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]]
2021-03-11 12:12:31,297 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]
2021-03-11 12:12:31,383 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:12:31,387 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder())
2021-03-11 12:12:31,387 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]]
2021-03-11 12:12:31,387 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:12:31,508 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:31,629 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:31,630 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]
2021-03-11 12:12:31,721 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:12:31,814 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:12:31,816 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:12:32,011 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:12:32,013 [main:95] - GENERATED = StringBuilder(599169408)
2021-03-11 12:12:32,104 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:12:32,105 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).subSequence(-1034039872, 1387918332).commonPrefixWith(StringBuilder(599169408), false)
2021-03-11 12:12:32,105 [main:63] - replacement of b3 of type String is (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder())
2021-03-11 12:12:32,195 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:12:32,195 [main:66] - Compilation checking started
2021-03-11 12:12:32,605 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa"))

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = bar5(Array<String>(135674384, {a: Int -> "rjbrw"}))

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), b4)
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:32,611 [main:56] - replacing (test(a::set), String)
2021-03-11 12:12:32,611 [main:38] - replacing test(a::set) String
2021-03-11 12:12:32,611 [main:42] - Getting value of type String
2021-03-11 12:12:32,712 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:32,713 [main:46] - GENERATED VALUE OF TYPE String = "rpktw"
2021-03-11 12:12:32,713 [main:49] - GENERATED IS CALL =false
2021-03-11 12:12:32,816 [main:55] - randomType = UByte
2021-03-11 12:12:32,930 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:12:32,982 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7c6b08dc]
2021-03-11 12:12:33,077 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:12:33,078 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:12:33,168 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:33,169 [main:66] - Generated call from random type = (23.toUByte()).compareTo(26.toUByte()).toString(-399751815)
2021-03-11 12:12:33,169 [main:94] - GETTING String from String
2021-03-11 12:12:33,187 [main:101] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47361cce]]
2021-03-11 12:12:33,187 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47361cce]
2021-03-11 12:12:33,276 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:33,277 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).take(-94814106)
2021-03-11 12:12:33,277 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396c7a7b]]
2021-03-11 12:12:33,277 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396c7a7b]
2021-03-11 12:12:33,368 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 12:12:33,462 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Int): Iterable<Int> = TODO()
2021-03-11 12:12:33,463 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Int): Iterable<Int> = TODO()
2021-03-11 12:12:33,557 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:12:33,558 [main:95] - GENERATED = arrayListOf<Int>(311252186)
2021-03-11 12:12:33,559 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).slice(arrayListOf<Int>(311252186))
2021-03-11 12:12:33,559 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60d466a]]
2021-03-11 12:12:33,559 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:12:33,650 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:33,741 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:33,742 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60d466a]
2021-03-11 12:12:33,833 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:12:33,925 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:12:33,926 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:12:34,172 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:12:34,173 [main:95] - GENERATED = Regex("lcvsj")
2021-03-11 12:12:34,263 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 12:12:34,264 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:12:34,357 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:12:34,359 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:12:34,544 [main:302] - generating value of type = String true depth = 4
2021-03-11 12:12:34,545 [main:95] - GENERATED = StringBuilder("bczrp")
2021-03-11 12:12:34,546 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).subSequence(1927006297, -1276548876).replace(Regex("lcvsj"), {a: MatchResult -> StringBuilder("bczrp")})
2021-03-11 12:12:34,546 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]]
2021-03-11 12:12:34,546 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]
2021-03-11 12:12:34,546 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).reversed()
2021-03-11 12:12:34,546 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b328c0]]
2021-03-11 12:12:34,546 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:12:34,634 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:34,635 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b328c0]
2021-03-11 12:12:34,723 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:34,724 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).get(-421323328).plus("kzkfj")
2021-03-11 12:12:34,724 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]]
2021-03-11 12:12:34,724 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]
2021-03-11 12:12:34,812 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:12:34,903 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:12:34,904 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).commonSuffixWith("xhhwx", false)
2021-03-11 12:12:34,905 [main:101] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2253ce57]]
2021-03-11 12:12:34,905 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2253ce57]
2021-03-11 12:12:34,993 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:12:34,993 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:12:34,995 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropLastWhile({a: Char -> true})
2021-03-11 12:12:34,995 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]]
2021-03-11 12:12:34,995 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]
2021-03-11 12:12:34,995 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).toUpperCase()
2021-03-11 12:12:34,995 [main:101] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17845e8c]]
2021-03-11 12:12:34,995 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17845e8c]
2021-03-11 12:12:34,995 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).decapitalize()
2021-03-11 12:12:34,995 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]]
2021-03-11 12:12:34,995 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:12:35,111 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:35,212 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:35,213 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]
2021-03-11 12:12:35,304 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:35,392 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:35,393 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).subSequence(-1463586969, 22612906).substring(-561142397, 1962252452)
2021-03-11 12:12:35,393 [main:63] - replacement of test(a::set) of type String is (bar3<Float>(arrayOf<Float>(0.9432627f))).take(-94814106)
2021-03-11 12:12:35,480 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:12:35,480 [main:66] - Compilation checking started
2021-03-11 12:12:35,762 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).take(-94814106)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa"))

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = bar5(Array<String>(135674384, {a: Int -> "rjbrw"}))

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), b4)
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:35,766 [main:56] - replacing ("", String)
2021-03-11 12:12:35,766 [main:38] - replacing "" String
2021-03-11 12:12:35,766 [main:42] - Getting value of type String
2021-03-11 12:12:35,868 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:35,869 [main:46] - GENERATED VALUE OF TYPE String = "ybvdt"
2021-03-11 12:12:35,869 [main:49] - GENERATED IS CALL =false
2021-03-11 12:12:35,871 [main:55] - randomType = UInt
2021-03-11 12:12:35,968 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:12:36,009 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3f0a5a3f]
2021-03-11 12:12:36,010 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@217473a1]
2021-03-11 12:12:36,103 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:36,105 [main:66] - Generated call from random type = (694338874.toUInt()).toByte().toString(-1078826490)
2021-03-11 12:12:36,105 [main:94] - GETTING String from String
2021-03-11 12:12:36,131 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]]
2021-03-11 12:12:36,131 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:12:36,222 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:36,223 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]
2021-03-11 12:12:36,224 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(2009919274).titlecase()
2021-03-11 12:12:36,224 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]]
2021-03-11 12:12:36,224 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]
2021-03-11 12:12:36,315 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:12:36,435 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:12:36,437 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:12:36,628 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:12:36,629 [main:95] - GENERATED = StringBuilder("upxjt")
2021-03-11 12:12:36,629 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSuffix(StringBuilder("upxjt"))
2021-03-11 12:12:36,629 [main:101] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@579fd1d1]]
2021-03-11 12:12:36,630 [main:137] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@579fd1d1]
2021-03-11 12:12:36,718 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:36,810 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:36,900 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:12:36,902 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('캍', '甘', true)
2021-03-11 12:12:36,902 [main:101] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@784c069d]]
2021-03-11 12:12:36,902 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@784c069d]
2021-03-11 12:12:36,992 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:37,084 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:37,086 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).substringBeforeLast('跻', "scwha")
2021-03-11 12:12:37,086 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e624d9b]]
2021-03-11 12:12:37,086 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:12:37,175 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:37,266 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:37,268 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e624d9b]
2021-03-11 12:12:37,358 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:12:37,450 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 12:12:37,452 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 12:12:37,820 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:12:37,821 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 12:12:37,917 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): Set<RegexOption> = TODO()
2021-03-11 12:12:37,919 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): Set<RegexOption> = TODO()
2021-03-11 12:12:38,011 [main:95] - GENERATED = LinkedHashSet<RegexOption>()
2021-03-11 12:12:38,012 [main:95] - GENERATED = Regex("oogxx", LinkedHashSet<RegexOption>())
2021-03-11 12:12:38,103 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:38,104 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).subSequence(668065866, 1190783207).replaceFirst(Regex("oogxx", LinkedHashSet<RegexOption>()), "hufpa")
2021-03-11 12:12:38,105 [main:101] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3170b0]]
2021-03-11 12:12:38,105 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3170b0]
2021-03-11 12:12:38,194 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:38,195 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).trimMargin("itajf")
2021-03-11 12:12:38,195 [main:101] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eec66c2]]
2021-03-11 12:12:38,195 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eec66c2]
2021-03-11 12:12:38,283 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:12:38,284 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:12:38,286 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).filter({a: Char -> false})
2021-03-11 12:12:38,286 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]]
2021-03-11 12:12:38,286 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:12:38,374 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:38,463 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:38,464 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]
2021-03-11 12:12:38,552 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:38,642 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:38,643 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).subSequence(1157452225, 997626140).substring(967556551, -844825012)
2021-03-11 12:12:38,643 [main:101] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cff2b98]]
2021-03-11 12:12:38,643 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cff2b98]
2021-03-11 12:12:38,758 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:38,865 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:38,958 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:38,959 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceAfterLast('', "kxsvm", "riznx")
2021-03-11 12:12:38,959 [main:101] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2502fc72]]
2021-03-11 12:12:38,959 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2502fc72]
2021-03-11 12:12:38,959 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).capitalize()
2021-03-11 12:12:38,959 [main:63] - replacement of "" of type String is (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).substringBeforeLast('跻', "scwha")
2021-03-11 12:12:39,051 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:12:39,054 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:12:39,055 [main:38] - replacing a Array<out T>
2021-03-11 12:12:39,055 [main:42] - Getting value of type Array<out T>
2021-03-11 12:12:39,145 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:12:39,237 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:12:39,239 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:12:39,329 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:12:39,423 [main:43] - GENERATING CALL OF fun <T> checkNotNull(value: Int): T = TODO()
2021-03-11 12:12:39,425 [main:61] - WITHOUT TYPE PARAMS = fun <T> checkNotNull(value: Int): T = TODO()
2021-03-11 12:12:39,515 [main:302] - generating value of type = Int true depth = 6
2021-03-11 12:12:39,516 [main:95] - GENERATED = checkNotNull<Int>(1719865557)
2021-03-11 12:12:39,516 [main:95] - GENERATED = arrayOf<T>(checkNotNull<Int>(1719865557))
2021-03-11 12:12:39,516 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOf<T>(checkNotNull<Int>(1719865557))
2021-03-11 12:12:39,517 [main:49] - GENERATED IS CALL =true
2021-03-11 12:12:39,615 [main:55] - randomType = UInt?
2021-03-11 12:12:39,704 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:12:39,734 [main:94] - GETTING Array<out T> from String
2021-03-11 12:12:39,752 [main:94] - GETTING Array<out T> from String
2021-03-11 12:12:39,753 [main:94] - GETTING Array<out T> from String
2021-03-11 12:12:39,754 [main:94] - GETTING Array<out T> from String
2021-03-11 12:12:39,754 [main:63] - replacement of a of type Array<out T> is arrayOf<T>(checkNotNull<Int>(1719865557))
2021-03-11 12:12:39,865 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:12:39,866 [main:66] - Compilation checking started
2021-03-11 12:12:40,134 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(arrayOf<T>(checkNotNull<Int>(1719865557))::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa"))

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = bar5(Array<String>(135674384, {a: Int -> "rjbrw"}))

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), b4)
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:40,137 [main:56] - replacing (b4, String)
2021-03-11 12:12:40,138 [main:38] - replacing b4 String
2021-03-11 12:12:40,138 [main:42] - Getting value of type String
2021-03-11 12:12:40,226 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:40,227 [main:46] - GENERATED VALUE OF TYPE String = "rfzov"
2021-03-11 12:12:40,227 [main:49] - GENERATED IS CALL =false
2021-03-11 12:12:40,321 [main:55] - randomType = Short
2021-03-11 12:12:40,409 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:12:40,443 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4caf2748]
2021-03-11 12:12:40,443 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]
2021-03-11 12:12:40,444 [main:66] - Generated call from random type = (-11832).toChar().uppercase()
2021-03-11 12:12:40,444 [main:94] - GETTING String from String
2021-03-11 12:12:40,459 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f4c98d]]
2021-03-11 12:12:40,459 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:12:40,548 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:40,549 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f4c98d]
2021-03-11 12:12:40,549 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).get(-169629262).lowercase()
2021-03-11 12:12:40,549 [main:101] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32174727]]
2021-03-11 12:12:40,549 [main:137] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32174727]
2021-03-11 12:12:40,640 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:40,641 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).drop(166535698)
2021-03-11 12:12:40,641 [main:101] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@784c069d]]
2021-03-11 12:12:40,641 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@784c069d]
2021-03-11 12:12:40,732 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:40,826 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:40,828 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).substringBeforeLast('힑', "ahfrm")
2021-03-11 12:12:40,828 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]]
2021-03-11 12:12:40,828 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]
2021-03-11 12:12:40,916 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:40,918 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).replaceIndent("dadpc")
2021-03-11 12:12:40,918 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9c84af]]
2021-03-11 12:12:40,918 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9c84af]
2021-03-11 12:12:40,918 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).uppercase()
2021-03-11 12:12:40,918 [main:101] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ff0185]]
2021-03-11 12:12:40,918 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ff0185]
2021-03-11 12:12:41,028 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:41,118 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:41,207 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:41,209 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).replaceBefore('㡵', "jmegy", "jqepx")
2021-03-11 12:12:41,209 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]]
2021-03-11 12:12:41,209 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]
2021-03-11 12:12:41,299 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:41,300 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).concat("tygvr")
2021-03-11 12:12:41,300 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]]
2021-03-11 12:12:41,300 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:12:41,386 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:41,475 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:41,476 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]
2021-03-11 12:12:41,563 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:12:41,655 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:12:41,656 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:12:41,838 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:12:41,842 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-11 12:12:41,929 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:12:41,930 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).subSequence(-1053492483, -960302346).commonSuffixWith(StringBuilder(StringBuilder()), false)
2021-03-11 12:12:41,930 [main:101] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@579fd1d1]]
2021-03-11 12:12:41,930 [main:137] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@579fd1d1]
2021-03-11 12:12:42,044 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:42,143 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:42,246 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:12:42,247 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).replaceFirst('', '摈', true)
2021-03-11 12:12:42,247 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]]
2021-03-11 12:12:42,247 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:12:42,336 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:42,337 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:12:42,425 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:42,427 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623)
2021-03-11 12:12:42,427 [main:63] - replacement of b4 of type String is (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623)
2021-03-11 12:12:42,514 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:12:42,515 [main:66] - Compilation checking started
2021-03-11 12:12:42,889 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa"))

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = bar5(Array<String>(135674384, {a: Int -> "rjbrw"}))

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:42,895 [main:56] - replacing (a::get, KFunction1<Int, T>)
2021-03-11 12:12:42,895 [main:38] - replacing a::get KFunction1<Int, T>
2021-03-11 12:12:42,896 [main:42] - Getting value of type KFunction1<Int, T>
2021-03-11 12:12:43,004 [main:302] - generating value of type = KFunction1<Int, T> false depth = 0
2021-03-11 12:12:43,093 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, T> = 
2021-03-11 12:12:43,806 [main:55] - randomType = Pair<UByte, Triple<String, Long?, ULong>>?
2021-03-11 12:12:43,898 [main:302] - generating value of type = Pair<UByte, Triple<String, Long?, ULong>> false depth = 0
2021-03-11 12:12:43,992 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UByte, second: Triple<String, Long?, ULong>): Pair<UByte, Triple<String, Long?, ULong>> = TODO()
2021-03-11 12:12:43,994 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UByte, second: Triple<String, Long?, ULong>): Pair<UByte, Triple<String, Long?, ULong>> = TODO()
2021-03-11 12:12:44,086 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 12:12:44,087 [main:302] - generating value of type = Triple<String, Long?, ULong> false depth = 3
2021-03-11 12:12:44,180 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: String, second: Long?, third: ULong): Triple<String, Long?, ULong> = TODO()
2021-03-11 12:12:44,182 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: String, second: Long?, third: ULong): Triple<String, Long?, ULong> = TODO()
2021-03-11 12:12:44,275 [main:302] - generating value of type = String true depth = 6
2021-03-11 12:12:44,275 [main:302] - generating value of type = Long true depth = 6
2021-03-11 12:12:44,276 [main:302] - generating value of type = ULong true depth = 6
2021-03-11 12:12:44,277 [main:95] - GENERATED = Triple<String, Long?, ULong>("jhyoq", -6245134539238876381, 7350122167526142802.toULong())
2021-03-11 12:12:44,278 [main:95] - GENERATED = Pair<UByte, Triple<String, Long?, ULong>>(86.toUByte(), Triple<String, Long?, ULong>("jhyoq", -6245134539238876381, 7350122167526142802.toULong()))
2021-03-11 12:12:44,306 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:12:44,335 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:12:44,337 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:12:44,338 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:12:44,338 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, T>
2021-03-11 12:12:44,338 [main:56] - replacing (a, Array<in T>)
2021-03-11 12:12:44,338 [main:38] - replacing a Array<in T>
2021-03-11 12:12:44,338 [main:42] - Getting value of type Array<in T>
2021-03-11 12:12:44,430 [main:302] - generating value of type = Array<in T> false depth = 0
2021-03-11 12:12:44,522 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->in T): Array<in T> = TODO()
2021-03-11 12:12:44,524 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->in T): Array<in T> = TODO()
2021-03-11 12:12:44,859 [main:385] - Cant generate call of fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->in T): Array<in T> = TODO()
2021-03-11 12:12:44,859 [main:46] - GENERATED VALUE OF TYPE Array<in T> = 
2021-03-11 12:12:44,960 [main:55] - randomType = Set<Int>
2021-03-11 12:12:44,962 [main:94] - GETTING Array<in T> from String
2021-03-11 12:12:44,994 [main:94] - GETTING Array<in T> from String
2021-03-11 12:12:44,995 [main:94] - GETTING Array<in T> from String
2021-03-11 12:12:44,996 [main:94] - GETTING Array<in T> from String
2021-03-11 12:12:44,996 [main:60] - Cant find and generate replacement for a type Array<in T>
2021-03-11 12:12:44,996 [main:56] - replacing ("fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit", String)
2021-03-11 12:12:44,997 [main:38] - replacing "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit" String
2021-03-11 12:12:44,997 [main:42] - Getting value of type String
2021-03-11 12:12:45,090 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:45,090 [main:46] - GENERATED VALUE OF TYPE String = "qgapm"
2021-03-11 12:12:45,091 [main:49] - GENERATED IS CALL =false
2021-03-11 12:12:45,287 [main:55] - randomType = MutableMap<Byte, Char>
2021-03-11 12:12:45,287 [main:94] - GETTING String from String
2021-03-11 12:12:45,313 [main:101] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1384dfc4]]
2021-03-11 12:12:45,313 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1384dfc4]
2021-03-11 12:12:45,400 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:12:45,401 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:12:45,402 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).takeLastWhile({a: Char -> false})
2021-03-11 12:12:45,402 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]]
2021-03-11 12:12:45,402 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:12:45,489 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:45,490 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:12:45,576 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:45,577 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).compareTo("hxnks").toString(1823544087)
2021-03-11 12:12:45,577 [main:101] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534bf968]]
2021-03-11 12:12:45,577 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534bf968]
2021-03-11 12:12:45,664 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:45,752 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:45,754 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).padStart(1928232616, '')
2021-03-11 12:12:45,754 [main:101] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32174727]]
2021-03-11 12:12:45,754 [main:137] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32174727]
2021-03-11 12:12:45,871 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:45,872 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).drop(-1645394787)
2021-03-11 12:12:45,872 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]]
2021-03-11 12:12:45,872 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]
2021-03-11 12:12:45,973 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:12:46,068 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:12:46,070 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)
2021-03-11 12:12:46,070 [main:101] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21fc0bcb]]
2021-03-11 12:12:46,070 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21fc0bcb]
2021-03-11 12:12:46,157 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:12:46,158 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:12:46,159 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).filterNot({a: Char -> false})
2021-03-11 12:12:46,160 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b328c0]]
2021-03-11 12:12:46,160 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:12:46,248 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:46,249 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b328c0]
2021-03-11 12:12:46,336 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:46,337 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).get(-620403963).plus("rzteb")
2021-03-11 12:12:46,338 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9c84af]]
2021-03-11 12:12:46,338 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9c84af]
2021-03-11 12:12:46,338 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).uppercase()
2021-03-11 12:12:46,338 [main:101] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e33706e]]
2021-03-11 12:12:46,338 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e33706e]
2021-03-11 12:12:46,425 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:46,427 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).dropLast(1796495533)
2021-03-11 12:12:46,427 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a5650d3]]
2021-03-11 12:12:46,427 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a5650d3]
2021-03-11 12:12:46,427 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim()
2021-03-11 12:12:46,427 [main:63] - replacement of "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit" of type String is (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)
2021-03-11 12:12:46,515 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:12:46,515 [main:66] - Compilation checking started
2021-03-11 12:12:46,883 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = bar0("")
    val b1 = bar1((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa"))

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = bar5(Array<String>(135674384, {a: Int -> "rjbrw"}))

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:46,887 [main:56] - replacing (bar1((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa")), String)
2021-03-11 12:12:46,888 [main:38] - replacing bar1((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa")) String
2021-03-11 12:12:46,888 [main:42] - Getting value of type String
2021-03-11 12:12:46,986 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:46,987 [main:46] - GENERATED VALUE OF TYPE String = "uvsmw"
2021-03-11 12:12:46,987 [main:49] - GENERATED IS CALL =false
2021-03-11 12:12:47,084 [main:55] - randomType = Char?
2021-03-11 12:12:47,173 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:47,218 [main:137] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@11b477a4]
2021-03-11 12:12:47,219 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e95ee6]
2021-03-11 12:12:47,306 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:47,307 [main:66] - Generated call from random type = ('閧')?.toLong().toString(-496123324)
2021-03-11 12:12:47,307 [main:94] - GETTING String from String
2021-03-11 12:12:47,325 [main:101] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17845e8c]]
2021-03-11 12:12:47,325 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17845e8c]
2021-03-11 12:12:47,325 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).decapitalize()
2021-03-11 12:12:47,325 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]]
2021-03-11 12:12:47,325 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:12:47,412 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:47,413 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]
2021-03-11 12:12:47,414 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).get(913269148).titlecase()
2021-03-11 12:12:47,414 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]]
2021-03-11 12:12:47,414 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:12:47,503 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:47,592 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:47,593 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]
2021-03-11 12:12:47,680 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:47,768 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:47,770 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).subSequence(1764304139, 1676707592).substring(-1289528161, -121030125)
2021-03-11 12:12:47,770 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f03e0c3]]
2021-03-11 12:12:47,770 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f03e0c3]
2021-03-11 12:12:47,770 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).trimEnd()
2021-03-11 12:12:47,770 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]]
2021-03-11 12:12:47,770 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:12:47,858 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:47,859 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]
2021-03-11 12:12:47,859 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).get(1163577199).uppercase()
2021-03-11 12:12:47,859 [main:101] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f592b75]]
2021-03-11 12:12:47,859 [main:137] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f592b75]
2021-03-11 12:12:47,946 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:47,948 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).prependIndent("epzja")
2021-03-11 12:12:47,948 [main:101] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47361cce]]
2021-03-11 12:12:47,948 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47361cce]
2021-03-11 12:12:48,035 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:48,036 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).take(1328288164)
2021-03-11 12:12:48,036 [main:101] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@287af9e3]]
2021-03-11 12:12:48,036 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@287af9e3]
2021-03-11 12:12:48,124 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:48,213 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:48,214 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).substringAfter('穆', "jyrca")
2021-03-11 12:12:48,214 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f7d80a8]]
2021-03-11 12:12:48,214 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f7d80a8]
2021-03-11 12:12:48,303 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:12:48,303 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:12:48,305 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})
2021-03-11 12:12:48,305 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]]
2021-03-11 12:12:48,305 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]
2021-03-11 12:12:48,419 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:12:48,424 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).removePrefix("mkdpn")
2021-03-11 12:12:48,424 [main:63] - replacement of bar1((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-359698660).plus("lzvpa")) of type String is (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})
2021-03-11 12:12:48,528 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:12:48,529 [main:66] - Compilation checking started
2021-03-11 12:12:48,903 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = bar0("")
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = bar5(Array<String>(135674384, {a: Int -> "rjbrw"}))

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:48,909 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:12:48,909 [main:38] - replacing a Array<out T>
2021-03-11 12:12:48,909 [main:42] - Getting value of type Array<out T>
2021-03-11 12:12:48,994 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:12:49,084 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:12:49,086 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:12:49,174 [main:95] - GENERATED = enumValues<T>()
2021-03-11 12:12:49,174 [main:46] - GENERATED VALUE OF TYPE Array<out T> = enumValues<T>()
2021-03-11 12:12:49,174 [main:49] - GENERATED IS CALL =true
2021-03-11 12:12:49,454 [main:55] - randomType = Function1<ULong, UByte>
2021-03-11 12:12:49,455 [main:94] - GETTING Array<out T> from String
2021-03-11 12:12:49,474 [main:94] - GETTING Array<out T> from String
2021-03-11 12:12:49,475 [main:94] - GETTING Array<out T> from String
2021-03-11 12:12:49,476 [main:94] - GETTING Array<out T> from String
2021-03-11 12:12:49,476 [main:63] - replacement of a of type Array<out T> is enumValues<T>()
2021-03-11 12:12:49,561 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:12:49,562 [main:66] - Compilation checking started
2021-03-11 12:12:49,788 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(enumValues<T>()::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = bar0("")
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals(getMethod, b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = bar5(Array<String>(135674384, {a: Int -> "rjbrw"}))

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:49,792 [main:56] - replacing (a::get, KFunction1<Int, Any?>)
2021-03-11 12:12:49,792 [main:38] - replacing a::get KFunction1<Int, Any?>
2021-03-11 12:12:49,792 [main:42] - Getting value of type KFunction1<Int, Any?>
2021-03-11 12:12:49,901 [main:302] - generating value of type = KFunction1<Int, Any?> false depth = 0
2021-03-11 12:12:49,987 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, Any?> = 
2021-03-11 12:12:50,175 [main:55] - randomType = Sequence<UInt>
2021-03-11 12:12:50,177 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:12:50,195 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:12:50,196 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:12:50,197 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:12:50,197 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, Any?>
2021-03-11 12:12:50,197 [main:56] - replacing (a::set, KFunction2<Int, Nothing, Unit>)
2021-03-11 12:12:50,197 [main:38] - replacing a::set KFunction2<Int, Nothing, Unit>
2021-03-11 12:12:50,197 [main:42] - Getting value of type KFunction2<Int, Nothing, Unit>
2021-03-11 12:12:50,282 [main:302] - generating value of type = KFunction2<Int, Nothing, Unit> false depth = 0
2021-03-11 12:12:50,368 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, Nothing, Unit> = 
2021-03-11 12:12:50,462 [main:55] - randomType = Short
2021-03-11 12:12:50,547 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:12:50,579 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:12:50,596 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:12:50,597 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:12:50,599 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:12:50,599 [main:60] - Cant find and generate replacement for a::set type KFunction2<Int, Nothing, Unit>
2021-03-11 12:12:50,599 [main:56] - replacing (getMethod, String)
2021-03-11 12:12:50,599 [main:38] - replacing getMethod String
2021-03-11 12:12:50,599 [main:42] - Getting value of type String
2021-03-11 12:12:50,685 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:50,686 [main:46] - GENERATED VALUE OF TYPE String = "mirgk"
2021-03-11 12:12:50,686 [main:49] - GENERATED IS CALL =false
2021-03-11 12:12:50,778 [main:55] - randomType = Short
2021-03-11 12:12:50,867 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:12:50,907 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4caf2748]
2021-03-11 12:12:50,908 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]
2021-03-11 12:12:50,908 [main:66] - Generated call from random type = (17475).toChar().uppercase()
2021-03-11 12:12:50,908 [main:63] - replacement of getMethod of type String is (17475).toChar().uppercase()
2021-03-11 12:12:50,997 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:12:50,998 [main:66] - Compilation checking started
2021-03-11 12:12:51,415 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = bar0("")
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals((17475).toChar().uppercase(), b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = bar5(Array<String>(135674384, {a: Int -> "rjbrw"}))

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:51,422 [main:56] - replacing (a::set, KFunction2<Int, Nothing, Unit>)
2021-03-11 12:12:51,422 [main:38] - replacing a::set KFunction2<Int, Nothing, Unit>
2021-03-11 12:12:51,422 [main:42] - Getting value of type KFunction2<Int, Nothing, Unit>
2021-03-11 12:12:51,531 [main:302] - generating value of type = KFunction2<Int, Nothing, Unit> false depth = 0
2021-03-11 12:12:51,617 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, Nothing, Unit> = 
2021-03-11 12:12:51,718 [main:55] - randomType = Double
2021-03-11 12:12:51,803 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:12:51,834 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:12:51,852 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:12:51,853 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:12:51,854 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:12:51,854 [main:60] - Cant find and generate replacement for a::set type KFunction2<Int, Nothing, Unit>
2021-03-11 12:12:51,854 [main:56] - replacing (a, Array<in T>)
2021-03-11 12:12:51,854 [main:38] - replacing a Array<in T>
2021-03-11 12:12:51,854 [main:42] - Getting value of type Array<in T>
2021-03-11 12:12:51,941 [main:302] - generating value of type = Array<in T> false depth = 0
2021-03-11 12:12:52,031 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:12:52,033 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:12:52,122 [main:95] - GENERATED = emptyArray<T>()
2021-03-11 12:12:52,122 [main:46] - GENERATED VALUE OF TYPE Array<in T> = emptyArray<T>()
2021-03-11 12:12:52,122 [main:49] - GENERATED IS CALL =true
2021-03-11 12:12:52,217 [main:55] - randomType = Short
2021-03-11 12:12:52,321 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:12:52,361 [main:94] - GETTING Array<in T> from String
2021-03-11 12:12:52,378 [main:94] - GETTING Array<in T> from String
2021-03-11 12:12:52,379 [main:94] - GETTING Array<in T> from String
2021-03-11 12:12:52,380 [main:94] - GETTING Array<in T> from String
2021-03-11 12:12:52,380 [main:63] - replacement of a of type Array<in T> is emptyArray<T>()
2021-03-11 12:12:52,466 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:12:52,466 [main:66] - Compilation checking started
2021-03-11 12:12:52,706 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(emptyArray<T>()::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = bar0("")
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals((17475).toChar().uppercase(), b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = bar5(Array<String>(135674384, {a: Int -> "rjbrw"}))

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:52,709 [main:56] - replacing (bar5(Array<String>(135674384, {a: Int -> "rjbrw"})), String)
2021-03-11 12:12:52,710 [main:38] - replacing bar5(Array<String>(135674384, {a: Int -> "rjbrw"})) String
2021-03-11 12:12:52,710 [main:42] - Getting value of type String
2021-03-11 12:12:52,801 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:52,802 [main:46] - GENERATED VALUE OF TYPE String = "esygd"
2021-03-11 12:12:52,802 [main:49] - GENERATED IS CALL =false
2021-03-11 12:12:52,917 [main:55] - randomType = ULong
2021-03-11 12:12:53,015 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:12:53,053 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@27f6078c]
2021-03-11 12:12:53,053 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@860e9be]
2021-03-11 12:12:53,139 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:53,141 [main:66] - Generated call from random type = (6004136627933232612.toULong()).toShort().toString(-456251403)
2021-03-11 12:12:53,141 [main:94] - GETTING String from String
2021-03-11 12:12:53,158 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]]
2021-03-11 12:12:53,158 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]
2021-03-11 12:12:53,244 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:53,246 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).concat("wqfke")
2021-03-11 12:12:53,246 [main:101] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f592b75]]
2021-03-11 12:12:53,246 [main:137] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f592b75]
2021-03-11 12:12:53,332 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:53,333 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("snjud")
2021-03-11 12:12:53,333 [main:101] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3ed116f9]]
2021-03-11 12:12:53,333 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3ed116f9]
2021-03-11 12:12:53,418 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:12:53,418 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).plus("zqczu")
2021-03-11 12:12:53,418 [main:101] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1384dfc4]]
2021-03-11 12:12:53,418 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1384dfc4]
2021-03-11 12:12:53,505 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:12:53,506 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:12:53,507 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).takeLastWhile({a: Char -> true})
2021-03-11 12:12:53,507 [main:101] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d545e75]]
2021-03-11 12:12:53,507 [main:137] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d545e75]
2021-03-11 12:12:53,594 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:53,681 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:53,768 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:12:53,769 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)
2021-03-11 12:12:53,769 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]]
2021-03-11 12:12:53,769 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]
2021-03-11 12:12:53,770 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).toLowerCase()
2021-03-11 12:12:53,770 [main:101] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eec66c2]]
2021-03-11 12:12:53,770 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eec66c2]
2021-03-11 12:12:53,857 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:12:53,858 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:12:53,859 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).filter({a: Char -> false})
2021-03-11 12:12:53,859 [main:101] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a3075e0]]
2021-03-11 12:12:53,859 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a3075e0]
2021-03-11 12:12:53,946 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:53,947 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).takeLast(1987192333)
2021-03-11 12:12:53,947 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9c84af]]
2021-03-11 12:12:53,948 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9c84af]
2021-03-11 12:12:53,948 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).uppercase()
2021-03-11 12:12:53,948 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]]
2021-03-11 12:12:53,948 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]
2021-03-11 12:12:54,035 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:12:54,039 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).removeSuffix("humyn")
2021-03-11 12:12:54,039 [main:63] - replacement of bar5(Array<String>(135674384, {a: Int -> "rjbrw"})) of type String is (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)
2021-03-11 12:12:54,124 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:12:54,125 [main:66] - Compilation checking started
2021-03-11 12:12:54,525 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = bar0("")
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals((17475).toChar().uppercase(), b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:54,529 [main:56] - replacing (bar0(""), String)
2021-03-11 12:12:54,530 [main:38] - replacing bar0("") String
2021-03-11 12:12:54,530 [main:42] - Getting value of type String
2021-03-11 12:12:54,620 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:54,621 [main:46] - GENERATED VALUE OF TYPE String = "sryqw"
2021-03-11 12:12:54,621 [main:49] - GENERATED IS CALL =false
2021-03-11 12:12:54,714 [main:55] - randomType = Byte
2021-03-11 12:12:54,800 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:12:54,831 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2389b145]
2021-03-11 12:12:54,917 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:12:54,918 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:12:55,003 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:55,005 [main:66] - Generated call from random type = (-6).compareTo(64).toString(908295879)
2021-03-11 12:12:55,005 [main:94] - GETTING String from String
2021-03-11 12:12:55,022 [main:101] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@784c069d]]
2021-03-11 12:12:55,022 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@784c069d]
2021-03-11 12:12:55,109 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:55,199 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:55,201 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).substringBeforeLast('ળ', "ienyz")
2021-03-11 12:12:55,201 [main:101] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1384dfc4]]
2021-03-11 12:12:55,201 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1384dfc4]
2021-03-11 12:12:55,291 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:12:55,292 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:12:55,294 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
2021-03-11 12:12:55,294 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7384550b]]
2021-03-11 12:12:55,294 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7384550b]
2021-03-11 12:12:55,380 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:55,468 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:55,555 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:12:55,646 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:12:55,648 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:12:55,834 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:12:55,835 [main:95] - GENERATED = StringBuilder(1530046231)
2021-03-11 12:12:55,835 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).replaceRange(78689461, 1257249848, StringBuilder(1530046231))
2021-03-11 12:12:55,835 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]]
2021-03-11 12:12:55,835 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:12:55,947 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:56,071 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:56,073 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]
2021-03-11 12:12:56,161 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:56,248 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:56,249 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).subSequence(-624093, 1454036663).substring(2018881539, 718334946)
2021-03-11 12:12:56,249 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]]
2021-03-11 12:12:56,249 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]
2021-03-11 12:12:56,335 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:12:56,425 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:12:56,427 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:12:56,608 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:12:56,698 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:12:56,700 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:12:56,880 [main:302] - generating value of type = Int true depth = 6
2021-03-11 12:12:56,881 [main:95] - GENERATED = StringBuilder(349472010)
2021-03-11 12:12:56,881 [main:95] - GENERATED = StringBuilder(StringBuilder(349472010))
2021-03-11 12:12:56,882 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).removePrefix(StringBuilder(StringBuilder(349472010)))
2021-03-11 12:12:56,882 [main:101] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@287af9e3]]
2021-03-11 12:12:56,882 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@287af9e3]
2021-03-11 12:12:56,970 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:12:57,087 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:57,089 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).substringAfter('佩', "wppyz")
2021-03-11 12:12:57,089 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]]
2021-03-11 12:12:57,089 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]
2021-03-11 12:12:57,192 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:12:57,285 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:12:57,286 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:12:57,469 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:12:57,470 [main:95] - GENERATED = StringBuilder(1531946659)
2021-03-11 12:12:57,471 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).removeSuffix(StringBuilder(1531946659))
2021-03-11 12:12:57,471 [main:101] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32174727]]
2021-03-11 12:12:57,471 [main:137] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32174727]
2021-03-11 12:12:57,565 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:57,567 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).drop(1211374280)
2021-03-11 12:12:57,567 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]]
2021-03-11 12:12:57,567 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:12:57,653 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:12:57,654 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]
2021-03-11 12:12:57,654 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).get(217844329).uppercase()
2021-03-11 12:12:57,655 [main:101] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3170b0]]
2021-03-11 12:12:57,655 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3170b0]
2021-03-11 12:12:57,741 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:57,743 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).trimMargin("osmcy")
2021-03-11 12:12:57,743 [main:63] - replacement of bar0("") of type String is (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
2021-03-11 12:12:57,830 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:12:57,830 [main:66] - Compilation checking started
2021-03-11 12:12:58,243 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = bar3(arrayOf<String>("nlxqn"))

    assertEquals((17475).toChar().uppercase(), b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:58,247 [main:56] - replacing (bar3(arrayOf<String>("nlxqn")), String)
2021-03-11 12:12:58,248 [main:38] - replacing bar3(arrayOf<String>("nlxqn")) String
2021-03-11 12:12:58,248 [main:42] - Getting value of type String
2021-03-11 12:12:58,339 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:58,340 [main:46] - GENERATED VALUE OF TYPE String = "aryyh"
2021-03-11 12:12:58,340 [main:49] - GENERATED IS CALL =false
2021-03-11 12:12:58,437 [main:55] - randomType = Short
2021-03-11 12:12:58,553 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:12:58,594 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4caf2748]
2021-03-11 12:12:58,595 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]
2021-03-11 12:12:58,595 [main:66] - Generated call from random type = (19442).toChar().uppercase()
2021-03-11 12:12:58,595 [main:63] - replacement of bar3(arrayOf<String>("nlxqn")) of type String is (19442).toChar().uppercase()
2021-03-11 12:12:58,696 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:12:58,697 [main:66] - Compilation checking started
2021-03-11 12:12:59,104 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), b2)
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:12:59,108 [main:56] - replacing (b2, String)
2021-03-11 12:12:59,108 [main:38] - replacing b2 String
2021-03-11 12:12:59,108 [main:42] - Getting value of type String
2021-03-11 12:12:59,196 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:12:59,197 [main:46] - GENERATED VALUE OF TYPE String = "uufdh"
2021-03-11 12:12:59,197 [main:49] - GENERATED IS CALL =false
2021-03-11 12:12:59,581 [main:55] - randomType = Array<Collection<ULong>>
2021-03-11 12:12:59,669 [main:302] - generating value of type = Array<Collection<ULong>> false depth = 0
2021-03-11 12:12:59,762 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Collection<ULong>> = TODO()
2021-03-11 12:12:59,763 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Collection<ULong>> = TODO()
2021-03-11 12:12:59,856 [main:95] - GENERATED = emptyArray<Collection<ULong>>()
2021-03-11 12:12:59,874 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5dde2d12]
2021-03-11 12:12:59,874 [main:66] - Generated call from random type = (emptyArray<Collection<ULong>>()).contentToString()
2021-03-11 12:12:59,875 [main:94] - GETTING String from String
2021-03-11 12:12:59,893 [main:101] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2502fc72]]
2021-03-11 12:12:59,893 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2502fc72]
2021-03-11 12:12:59,893 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).capitalize()
2021-03-11 12:12:59,893 [main:101] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17845e8c]]
2021-03-11 12:12:59,893 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17845e8c]
2021-03-11 12:12:59,893 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).decapitalize()
2021-03-11 12:12:59,893 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]]
2021-03-11 12:12:59,893 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]
2021-03-11 12:12:59,980 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:13:00,095 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:13:00,097 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:13:00,282 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:13:00,286 [main:95] - GENERATED = StringBuilder("xwiso")
2021-03-11 12:13:00,286 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).removePrefix(StringBuilder("xwiso"))
2021-03-11 12:13:00,286 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]]
2021-03-11 12:13:00,286 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]
2021-03-11 12:13:00,374 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:13:00,468 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:13:00,470 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:13:00,662 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:13:00,663 [main:95] - GENERATED = StringBuilder(-994122934)
2021-03-11 12:13:00,663 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).removeSuffix(StringBuilder(-994122934))
2021-03-11 12:13:00,664 [main:101] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21fc0bcb]]
2021-03-11 12:13:00,664 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21fc0bcb]
2021-03-11 12:13:00,753 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:13:00,754 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:13:00,755 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).filterNot({a: Char -> false})
2021-03-11 12:13:00,755 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]]
2021-03-11 12:13:00,755 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]
2021-03-11 12:13:00,845 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:00,847 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).repeat(-540945312)
2021-03-11 12:13:00,847 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]]
2021-03-11 12:13:00,847 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]
2021-03-11 12:13:00,847 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trimStart()
2021-03-11 12:13:00,847 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]]
2021-03-11 12:13:00,847 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]
2021-03-11 12:13:00,936 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 12:13:00,937 [main:302] - generating value of type = Char true depth = 1
2021-03-11 12:13:00,938 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceFirstChar({a: Char -> '厇'})
2021-03-11 12:13:00,938 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f4c98d]]
2021-03-11 12:13:00,938 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:13:01,026 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:01,027 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f4c98d]
2021-03-11 12:13:01,027 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).get(-398500517).lowercase()
2021-03-11 12:13:01,028 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]]
2021-03-11 12:13:01,028 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]
2021-03-11 12:13:01,116 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:01,118 [main:105] - GENERATED CALL = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255)
2021-03-11 12:13:01,118 [main:63] - replacement of b2 of type String is (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255)
2021-03-11 12:13:01,205 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:13:01,205 [main:66] - Compilation checking started
2021-03-11 12:13:01,611 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:01,615 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:13:01,615 [main:38] - replacing a Array<out T>
2021-03-11 12:13:01,615 [main:42] - Getting value of type Array<out T>
2021-03-11 12:13:01,708 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:13:01,803 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:13:01,804 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:13:01,896 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:13:01,990 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Double, other: Double): T = TODO()
2021-03-11 12:13:01,991 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Double, other: Double): T = TODO()
2021-03-11 12:13:02,092 [main:302] - generating value of type = Double true depth = 6
2021-03-11 12:13:02,093 [main:302] - generating value of type = Double true depth = 6
2021-03-11 12:13:02,094 [main:95] - GENERATED = maxOf<Double>(0.06793454668364207, 0.35554303594394476)
2021-03-11 12:13:02,094 [main:95] - GENERATED = arrayOf<T>(maxOf<Double>(0.06793454668364207, 0.35554303594394476))
2021-03-11 12:13:02,094 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOf<T>(maxOf<Double>(0.06793454668364207, 0.35554303594394476))
2021-03-11 12:13:02,094 [main:49] - GENERATED IS CALL =true
2021-03-11 12:13:02,188 [main:55] - randomType = Short
2021-03-11 12:13:02,276 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:13:02,309 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:02,325 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:02,326 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:02,327 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:02,328 [main:63] - replacement of a of type Array<out T> is arrayOf<T>(maxOf<Double>(0.06793454668364207, 0.35554303594394476))
2021-03-11 12:13:02,415 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:13:02,415 [main:66] - Compilation checking started
2021-03-11 12:13:02,678 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(arrayOf<T>(maxOf<Double>(0.06793454668364207, 0.35554303594394476))::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:02,683 [main:56] - replacing (a::set, KFunction2<Int, T, Unit>)
2021-03-11 12:13:02,683 [main:38] - replacing a::set KFunction2<Int, T, Unit>
2021-03-11 12:13:02,683 [main:42] - Getting value of type KFunction2<Int, T, Unit>
2021-03-11 12:13:02,775 [main:302] - generating value of type = KFunction2<Int, T, Unit> false depth = 0
2021-03-11 12:13:02,866 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, T, Unit> = 
2021-03-11 12:13:02,961 [main:55] - randomType = Long
2021-03-11 12:13:03,050 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:13:03,082 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:13:03,124 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:13:03,126 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:13:03,127 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:13:03,127 [main:60] - Cant find and generate replacement for a::set type KFunction2<Int, T, Unit>
2021-03-11 12:13:03,127 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:13:03,127 [main:38] - replacing a Array<out T>
2021-03-11 12:13:03,127 [main:42] - Getting value of type Array<out T>
2021-03-11 12:13:03,216 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:13:03,310 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:13:03,312 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:13:03,403 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:13:04,175 [main:43] - GENERATING CALL OF fun <T> minOf(a: Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>, b: Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>, c: Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>, comparator: kotlin.Comparator<Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>>): T = TODO()
2021-03-11 12:13:04,177 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>, b: Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>, c: Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>, comparator: kotlin.Comparator<Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>>): T = TODO()
2021-03-11 12:13:04,381 [main:302] - generating value of type = Function1<LinkedHashSet<Double?>, Map<UShort?, Char>> false depth = 6
2021-03-11 12:13:04,382 [main:302] - generating value of type = Map<UShort?, Char> false depth = 7
2021-03-11 12:13:04,480 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): Map<UShort?, Char> = TODO()
2021-03-11 12:13:04,482 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): Map<UShort?, Char> = TODO()
2021-03-11 12:13:04,724 [main:302] - generating value of type = Int true depth = 10
2021-03-11 12:13:04,725 [main:95] - GENERATED = LinkedHashMap<UShort?, Char>(86019658)
2021-03-11 12:13:04,725 [main:302] - generating value of type = Function1<LinkedHashSet<Double?>, Map<UShort?, Char>> false depth = 6
2021-03-11 12:13:04,726 [main:302] - generating value of type = Map<UShort?, Char> false depth = 7
2021-03-11 12:13:04,833 [main:43] - GENERATING CALL OF fun <K, V> HashMap(initialCapacity: kotlin.Int): Map<UShort?, Char> = TODO()
2021-03-11 12:13:04,834 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(initialCapacity: kotlin.Int): Map<UShort?, Char> = TODO()
2021-03-11 12:13:05,022 [main:302] - generating value of type = Int true depth = 10
2021-03-11 12:13:05,023 [main:95] - GENERATED = HashMap<UShort?, Char>(-266994561)
2021-03-11 12:13:05,023 [main:302] - generating value of type = Function1<LinkedHashSet<Double?>, Map<UShort?, Char>> false depth = 6
2021-03-11 12:13:05,024 [main:302] - generating value of type = Map<UShort?, Char> false depth = 7
2021-03-11 12:13:05,116 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Map<UShort?, Char> = TODO()
2021-03-11 12:13:05,118 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Map<UShort?, Char> = TODO()
2021-03-11 12:13:05,396 [main:302] - generating value of type = Int true depth = 10
2021-03-11 12:13:05,397 [main:302] - generating value of type = Float true depth = 10
2021-03-11 12:13:05,398 [main:95] - GENERATED = LinkedHashMap<UShort?, Char>(1471019086, 0.4118812f)
2021-03-11 12:13:05,398 [main:302] - generating value of type = Comparator<Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>> false depth = 6
2021-03-11 12:13:05,493 [main:43] - GENERATING CALL OF fun <T> compareByDescending(selector: (Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>)->kotlin.Comparable<*>?): Comparator<Function1<LkedHashSet<Double?>, Map<UShort?, Char>>> = TODO()
2021-03-11 12:13:05,495 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareByDescending(selector: (Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>)->kotlin.Comparable<*>?): Comparator<Function1<LkedHashSet<Double?>, Map<UShort?, Char>>> = TODO()
2021-03-11 12:13:05,695 [main:302] - generating value of type = Function1<Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>, Comparable<*>?> false depth = 9
2021-03-11 12:13:05,696 [main:302] - generating value of type = Comparable<*> false depth = 10
2021-03-11 12:13:05,789 [main:43] - GENERATING CALL OF fun KotlinVersion(major: kotlin.Int, minor: kotlin.Int): Comparable<*> = TODO()
2021-03-11 12:13:05,791 [main:61] - WITHOUT TYPE PARAMS = fun KotlinVersion(major: kotlin.Int, minor: kotlin.Int): Comparable<*> = TODO()
2021-03-11 12:13:06,152 [main:302] - generating value of type = Int true depth = 13
2021-03-11 12:13:06,153 [main:302] - generating value of type = Int true depth = 13
2021-03-11 12:13:06,154 [main:95] - GENERATED = KotlinVersion(525675752, -1692632536)
2021-03-11 12:13:06,154 [main:95] - GENERATED = compareByDescending<Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>>({a: Function1<LinkedHashSet<Double?>, Map<UShort?, Char>> -> KotlinVersion(525675752, -1692632536)})
2021-03-11 12:13:06,155 [main:95] - GENERATED = minOf<Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>>({a: LinkedHashSet<Double?> -> LinkedHashMap<UShort?, Char>(86019658)}, {a: LinkedHashSet<Double?> -> HashMap<UShort?, Char>(-266994561)}, {a: LinkedHashSet<Double?> -> LinkedHashMap<UShort?, Char>(1471019086, 0.4118812f)}, compareByDescending<Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>>({a: Function1<LinkedHashSet<Double?>, Map<UShort?, Char>> -> KotlinVersion(525675752, -1692632536)}))
2021-03-11 12:13:06,155 [main:95] - GENERATED = arrayOf<T>(minOf<Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>>({a: LinkedHashSet<Double?> -> LinkedHashMap<UShort?, Char>(86019658)}, {a: LinkedHashSet<Double?> -> HashMap<UShort?, Char>(-266994561)}, {a: LinkedHashSet<Double?> -> LinkedHashMap<UShort?, Char>(1471019086, 0.4118812f)}, compareByDescending<Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>>({a: Function1<LinkedHashSet<Double?>, Map<UShort?, Char>> -> KotlinVersion(525675752, -1692632536)})))
2021-03-11 12:13:06,155 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOf<T>(minOf<Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>>({a: LinkedHashSet<Double?> -> LinkedHashMap<UShort?, Char>(86019658)}, {a: LinkedHashSet<Double?> -> HashMap<UShort?, Char>(-266994561)}, {a: LinkedHashSet<Double?> -> LinkedHashMap<UShort?, Char>(1471019086, 0.4118812f)}, compareByDescending<Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>>({a: Function1<LinkedHashSet<Double?>, Map<UShort?, Char>> -> KotlinVersion(525675752, -1692632536)})))
2021-03-11 12:13:06,156 [main:49] - GENERATED IS CALL =true
2021-03-11 12:13:06,361 [main:55] - randomType = LinkedHashSet<String?>
2021-03-11 12:13:06,449 [main:302] - generating value of type = LinkedHashSet<String?> false depth = 0
2021-03-11 12:13:06,540 [main:43] - GENERATING CALL OF fun linkedStringSetOf(elements: String): LkedHashSet<Strg?> = TODO()
2021-03-11 12:13:06,542 [main:61] - WITHOUT TYPE PARAMS = fun linkedStringSetOf(elements: String): LkedHashSet<Strg?> = TODO()
2021-03-11 12:13:06,633 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:13:06,634 [main:95] - GENERATED = linkedStringSetOf("vxeot")
2021-03-11 12:13:06,754 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:06,771 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:06,772 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:06,773 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:06,773 [main:63] - replacement of a of type Array<out T> is arrayOf<T>(minOf<Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>>({a: LinkedHashSet<Double?> -> LinkedHashMap<UShort?, Char>(86019658)}, {a: LinkedHashSet<Double?> -> HashMap<UShort?, Char>(-266994561)}, {a: LinkedHashSet<Double?> -> LinkedHashMap<UShort?, Char>(1471019086, 0.4118812f)}, compareByDescending<Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>>({a: Function1<LinkedHashSet<Double?>, Map<UShort?, Char>> -> KotlinVersion(525675752, -1692632536)})))
2021-03-11 12:13:06,861 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:13:06,862 [main:66] - Compilation checking started
2021-03-11 12:13:07,285 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(arrayOf<T>(minOf<Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>>({a: LinkedHashSet<Double?> -> LinkedHashMap<UShort?, Char>(86019658)}, {a: LinkedHashSet<Double?> -> HashMap<UShort?, Char>(-266994561)}, {a: LinkedHashSet<Double?> -> LinkedHashMap<UShort?, Char>(1471019086, 0.4118812f)}, compareByDescending<Function1<LinkedHashSet<Double?>, Map<UShort?, Char>>>({a: Function1<LinkedHashSet<Double?>, Map<UShort?, Char>> -> KotlinVersion(525675752, -1692632536)})))::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:07,289 [main:56] - replacing ("", String)
2021-03-11 12:13:07,289 [main:38] - replacing "" String
2021-03-11 12:13:07,289 [main:42] - Getting value of type String
2021-03-11 12:13:07,389 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:07,390 [main:46] - GENERATED VALUE OF TYPE String = "ovjzh"
2021-03-11 12:13:07,390 [main:49] - GENERATED IS CALL =false
2021-03-11 12:13:07,497 [main:55] - randomType = String?
2021-03-11 12:13:07,592 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:07,626 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:13:07,718 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:07,719 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]
2021-03-11 12:13:07,720 [main:66] - Generated call from random type = ("gitoq")?.get(-31383696).uppercase()
2021-03-11 12:13:07,720 [main:94] - GETTING String from String
2021-03-11 12:13:07,765 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]]
2021-03-11 12:13:07,765 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]
2021-03-11 12:13:07,766 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).toLowerCase()
2021-03-11 12:13:07,766 [main:101] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e33706e]]
2021-03-11 12:13:07,766 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e33706e]
2021-03-11 12:13:07,859 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:07,860 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropLast(-719690569)
2021-03-11 12:13:07,860 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]]
2021-03-11 12:13:07,860 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]
2021-03-11 12:13:07,861 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).trimIndent()
2021-03-11 12:13:07,861 [main:101] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2502fc72]]
2021-03-11 12:13:07,861 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2502fc72]
2021-03-11 12:13:07,861 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).capitalize()
2021-03-11 12:13:07,861 [main:101] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ef6a1a]]
2021-03-11 12:13:07,861 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ef6a1a]
2021-03-11 12:13:07,958 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:13:08,057 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:08,058 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).substringAfterLast('農', "kfuef")
2021-03-11 12:13:08,058 [main:101] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17845e8c]]
2021-03-11 12:13:08,058 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17845e8c]
2021-03-11 12:13:08,058 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).decapitalize()
2021-03-11 12:13:08,059 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]]
2021-03-11 12:13:08,059 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]
2021-03-11 12:13:08,059 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).toUpperCase()
2021-03-11 12:13:08,059 [main:101] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@287af9e3]]
2021-03-11 12:13:08,059 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@287af9e3]
2021-03-11 12:13:08,157 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:13:08,254 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:08,256 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).substringAfter('꒔', "znhul")
2021-03-11 12:13:08,256 [main:101] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47361cce]]
2021-03-11 12:13:08,256 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47361cce]
2021-03-11 12:13:08,351 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:08,352 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).take(-973333158)
2021-03-11 12:13:08,352 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e624d9b]]
2021-03-11 12:13:08,352 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:13:08,444 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:08,544 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:08,545 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e624d9b]
2021-03-11 12:13:08,641 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:13:08,736 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 12:13:08,738 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 12:13:09,035 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:13:09,036 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-11 12:13:09,040 [main:95] - GENERATED = Regex("biezy", kotlin.text.RegexOption.MULTILINE)
2021-03-11 12:13:09,140 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:09,142 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).subSequence(-1051503098, -508342042).replaceFirst(Regex("biezy", kotlin.text.RegexOption.MULTILINE), "elxhk")
2021-03-11 12:13:09,142 [main:63] - replacement of "" of type String is (bar3<Float>(arrayOf<Float>(0.9432627f))).toLowerCase()
2021-03-11 12:13:09,255 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:13:09,259 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:13:09,259 [main:38] - replacing a Array<out T>
2021-03-11 12:13:09,259 [main:42] - Getting value of type Array<out T>
2021-03-11 12:13:09,357 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:13:09,478 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:13:09,479 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:13:09,577 [main:95] - GENERATED = enumValues<T>()
2021-03-11 12:13:09,577 [main:46] - GENERATED VALUE OF TYPE Array<out T> = enumValues<T>()
2021-03-11 12:13:09,577 [main:49] - GENERATED IS CALL =true
2021-03-11 12:13:09,674 [main:55] - randomType = Long
2021-03-11 12:13:09,766 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:13:09,800 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:09,818 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:09,819 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:09,820 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:09,820 [main:63] - replacement of a of type Array<out T> is enumValues<T>()
2021-03-11 12:13:09,910 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:13:09,910 [main:66] - Compilation checking started
2021-03-11 12:13:10,151 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(enumValues<T>()::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), b0)
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:10,158 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:13:10,158 [main:38] - replacing a Array<out T>
2021-03-11 12:13:10,158 [main:42] - Getting value of type Array<out T>
2021-03-11 12:13:10,257 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:13:10,351 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 12:13:10,353 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 12:13:10,639 [main:385] - Cant generate call of fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 12:13:10,639 [main:46] - GENERATED VALUE OF TYPE Array<out T> = 
2021-03-11 12:13:10,868 [main:55] - randomType = Collection<Double>
2021-03-11 12:13:10,870 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:10,900 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:10,901 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:10,902 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:10,902 [main:60] - Cant find and generate replacement for a type Array<out T>
2021-03-11 12:13:10,902 [main:56] - replacing (b0, String)
2021-03-11 12:13:10,903 [main:38] - replacing b0 String
2021-03-11 12:13:10,903 [main:42] - Getting value of type String
2021-03-11 12:13:11,001 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:11,002 [main:46] - GENERATED VALUE OF TYPE String = "fkvav"
2021-03-11 12:13:11,003 [main:49] - GENERATED IS CALL =false
2021-03-11 12:13:11,005 [main:55] - randomType = Int
2021-03-11 12:13:11,108 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:11,161 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@324c44c6]
2021-03-11 12:13:11,253 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:11,254 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:13:11,343 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:11,345 [main:66] - Generated call from random type = (-1055878985).compareTo(-677708415).toString(-1450829812)
2021-03-11 12:13:11,345 [main:94] - GETTING String from String
2021-03-11 12:13:11,362 [main:101] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ff0185]]
2021-03-11 12:13:11,362 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ff0185]
2021-03-11 12:13:11,451 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:13:11,541 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:11,632 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:11,634 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).replaceBefore('笈', "arxry", "wbymz")
2021-03-11 12:13:11,634 [main:101] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a3075e0]]
2021-03-11 12:13:11,634 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a3075e0]
2021-03-11 12:13:11,724 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:11,725 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLast(1335731185)
2021-03-11 12:13:11,725 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]]
2021-03-11 12:13:11,725 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]
2021-03-11 12:13:11,725 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).toUpperCase()
2021-03-11 12:13:11,726 [main:101] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47361cce]]
2021-03-11 12:13:11,726 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47361cce]
2021-03-11 12:13:11,816 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:11,817 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).take(1439644825)
2021-03-11 12:13:11,817 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]]
2021-03-11 12:13:11,817 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]
2021-03-11 12:13:11,908 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:11,909 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).substring(954057847)
2021-03-11 12:13:11,909 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f4c98d]]
2021-03-11 12:13:11,909 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:13:11,999 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:12,000 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f4c98d]
2021-03-11 12:13:12,000 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).get(2094410942).lowercase()
2021-03-11 12:13:12,001 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7384550b]]
2021-03-11 12:13:12,001 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7384550b]
2021-03-11 12:13:12,091 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:12,182 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:12,295 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:13:12,299 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).replaceRange(-240655177, -981940269, "mgiff")
2021-03-11 12:13:12,299 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]]
2021-03-11 12:13:12,299 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:13:12,395 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:12,396 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]
2021-03-11 12:13:12,396 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).get(-930185017).uppercase()
2021-03-11 12:13:12,396 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f03e0c3]]
2021-03-11 12:13:12,396 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f03e0c3]
2021-03-11 12:13:12,397 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).trimEnd()
2021-03-11 12:13:12,397 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]]
2021-03-11 12:13:12,397 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]
2021-03-11 12:13:12,498 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 12:13:12,499 [main:302] - generating value of type = Char true depth = 1
2021-03-11 12:13:12,501 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).replaceFirstChar({a: Char -> '絊'})
2021-03-11 12:13:12,501 [main:63] - replacement of b0 of type String is "fkvav"
2021-03-11 12:13:12,594 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:13:12,594 [main:66] - Compilation checking started
2021-03-11 12:13:12,970 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:12,976 [main:56] - replacing (a, Array<in T>)
2021-03-11 12:13:12,976 [main:38] - replacing a Array<in T>
2021-03-11 12:13:12,976 [main:42] - Getting value of type Array<in T>
2021-03-11 12:13:13,076 [main:302] - generating value of type = Array<in T> false depth = 0
2021-03-11 12:13:13,169 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:13:13,171 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:13:13,263 [main:95] - GENERATED = enumValues<T>()
2021-03-11 12:13:13,263 [main:46] - GENERATED VALUE OF TYPE Array<in T> = enumValues<T>()
2021-03-11 12:13:13,263 [main:49] - GENERATED IS CALL =true
2021-03-11 12:13:13,361 [main:55] - randomType = Int?
2021-03-11 12:13:13,449 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:13,485 [main:94] - GETTING Array<in T> from String
2021-03-11 12:13:13,502 [main:94] - GETTING Array<in T> from String
2021-03-11 12:13:13,503 [main:94] - GETTING Array<in T> from String
2021-03-11 12:13:13,504 [main:94] - GETTING Array<in T> from String
2021-03-11 12:13:13,504 [main:63] - replacement of a of type Array<in T> is enumValues<T>()
2021-03-11 12:13:13,592 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:13:13,593 [main:66] - Compilation checking started
2021-03-11 12:13:13,864 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(enumValues<T>()::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:13,869 [main:56] - replacing ("fun kotlin.Array<T>.get(kotlin.Int): T", String)
2021-03-11 12:13:13,870 [main:38] - replacing "fun kotlin.Array<T>.get(kotlin.Int): T" String
2021-03-11 12:13:13,870 [main:42] - Getting value of type String
2021-03-11 12:13:13,964 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:13,965 [main:46] - GENERATED VALUE OF TYPE String = "rqenj"
2021-03-11 12:13:13,966 [main:49] - GENERATED IS CALL =false
2021-03-11 12:13:13,969 [main:55] - randomType = Boolean?
2021-03-11 12:13:14,085 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:13:14,101 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5174a81f]
2021-03-11 12:13:14,189 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:13:14,190 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:13:14,278 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:14,280 [main:66] - Generated call from random type = (false)?.compareTo(false).toString(-1353015985)
2021-03-11 12:13:14,280 [main:94] - GETTING String from String
2021-03-11 12:13:14,303 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]]
2021-03-11 12:13:14,303 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]
2021-03-11 12:13:14,391 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:14,392 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).concat("csesq")
2021-03-11 12:13:14,392 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]]
2021-03-11 12:13:14,392 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]
2021-03-11 12:13:14,392 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).toLowerCase()
2021-03-11 12:13:14,392 [main:101] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3170b0]]
2021-03-11 12:13:14,393 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3170b0]
2021-03-11 12:13:14,480 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:14,482 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).trimMargin("ywxbg")
2021-03-11 12:13:14,482 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]]
2021-03-11 12:13:14,482 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:13:14,569 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:14,659 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:14,660 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]
2021-03-11 12:13:14,748 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:13:14,842 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:13:14,844 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:13:15,031 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:13:15,036 [main:95] - GENERATED = StringBuilder("hvsnl")
2021-03-11 12:13:15,125 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:13:15,126 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).subSequence(-1583123486, -1682553929).commonSuffixWith(StringBuilder("hvsnl"), true)
2021-03-11 12:13:15,126 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ce8ce0]]
2021-03-11 12:13:15,126 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ce8ce0]
2021-03-11 12:13:15,215 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:15,305 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:13:15,306 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).padEnd(53941936, '比')
2021-03-11 12:13:15,306 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c9b84b]]
2021-03-11 12:13:15,306 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c9b84b]
2021-03-11 12:13:15,395 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:15,508 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:15,509 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).removeRange(648472948, 835131342)
2021-03-11 12:13:15,509 [main:101] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a03b602]]
2021-03-11 12:13:15,509 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a03b602]
2021-03-11 12:13:15,605 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:13:15,709 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:15,801 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:15,803 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).replaceAfter('侏', "pdcmj", "fpzed")
2021-03-11 12:13:15,803 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]]
2021-03-11 12:13:15,803 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]
2021-03-11 12:13:15,893 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:15,895 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).repeat(-182821243)
2021-03-11 12:13:15,895 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]]
2021-03-11 12:13:15,895 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]
2021-03-11 12:13:15,895 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).trimIndent()
2021-03-11 12:13:15,895 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]]
2021-03-11 12:13:15,895 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:13:15,987 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:16,086 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:16,088 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]
2021-03-11 12:13:16,174 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:16,263 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:16,264 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).subSequence(1324728490, -1974895649).substring(-805497349, -115331069)
2021-03-11 12:13:16,264 [main:63] - replacement of "fun kotlin.Array<T>.get(kotlin.Int): T" of type String is (bar0<Float>(0.48623055f)).toLowerCase()
2021-03-11 12:13:16,352 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:13:16,352 [main:66] - Compilation checking started
2021-03-11 12:13:16,712 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:16,717 [main:56] - replacing (a::set, KFunction2<Int, Nothing, Unit>)
2021-03-11 12:13:16,717 [main:38] - replacing a::set KFunction2<Int, Nothing, Unit>
2021-03-11 12:13:16,717 [main:42] - Getting value of type KFunction2<Int, Nothing, Unit>
2021-03-11 12:13:16,806 [main:302] - generating value of type = KFunction2<Int, Nothing, Unit> false depth = 0
2021-03-11 12:13:16,896 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, Nothing, Unit> = 
2021-03-11 12:13:16,898 [main:55] - randomType = Boolean
2021-03-11 12:13:16,987 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:13:17,000 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:13:17,025 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:13:17,026 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:13:17,028 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:13:17,028 [main:60] - Cant find and generate replacement for a::set type KFunction2<Int, Nothing, Unit>
2021-03-11 12:13:17,028 [main:56] - replacing (a::get, KFunction1<Int, Any?>)
2021-03-11 12:13:17,028 [main:38] - replacing a::get KFunction1<Int, Any?>
2021-03-11 12:13:17,028 [main:42] - Getting value of type KFunction1<Int, Any?>
2021-03-11 12:13:17,140 [main:302] - generating value of type = KFunction1<Int, Any?> false depth = 0
2021-03-11 12:13:17,229 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, Any?> = 
2021-03-11 12:13:17,232 [main:55] - randomType = Char
2021-03-11 12:13:17,328 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:13:17,354 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:13:17,371 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:13:17,373 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:13:17,374 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:13:17,374 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, Any?>
2021-03-11 12:13:17,374 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:13:17,374 [main:38] - replacing a Array<out T>
2021-03-11 12:13:17,374 [main:42] - Getting value of type Array<out T>
2021-03-11 12:13:17,461 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:13:17,553 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 12:13:17,555 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 12:13:17,836 [main:385] - Cant generate call of fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 12:13:17,837 [main:46] - GENERATED VALUE OF TYPE Array<out T> = 
2021-03-11 12:13:17,838 [main:55] - randomType = Float
2021-03-11 12:13:17,926 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:13:17,967 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:17,989 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:17,990 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:17,991 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:17,991 [main:60] - Cant find and generate replacement for a type Array<out T>
2021-03-11 12:13:17,991 [main:56] - replacing (a::get, KFunction1<Int, Any?>)
2021-03-11 12:13:17,991 [main:38] - replacing a::get KFunction1<Int, Any?>
2021-03-11 12:13:17,991 [main:42] - Getting value of type KFunction1<Int, Any?>
2021-03-11 12:13:18,080 [main:302] - generating value of type = KFunction1<Int, Any?> false depth = 0
2021-03-11 12:13:18,169 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, Any?> = 
2021-03-11 12:13:18,362 [main:55] - randomType = LinkedHashSet<Double>
2021-03-11 12:13:18,451 [main:302] - generating value of type = LinkedHashSet<Double> false depth = 0
2021-03-11 12:13:18,544 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Double> = TODO()
2021-03-11 12:13:18,546 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Double> = TODO()
2021-03-11 12:13:18,683 [main:95] - GENERATED = linkedSetOf<Double>()
2021-03-11 12:13:18,882 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:13:18,913 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:13:18,914 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:13:18,915 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:13:18,915 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, Any?>
2021-03-11 12:13:18,915 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:13:18,916 [main:38] - replacing a Array<out T>
2021-03-11 12:13:18,916 [main:42] - Getting value of type Array<out T>
2021-03-11 12:13:19,007 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:13:19,099 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 12:13:19,101 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 12:13:19,385 [main:385] - Cant generate call of fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 12:13:19,387 [main:46] - GENERATED VALUE OF TYPE Array<out T> = 
2021-03-11 12:13:19,577 [main:55] - randomType = Short?
2021-03-11 12:13:19,666 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:13:19,700 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:19,717 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:19,718 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:19,719 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:19,719 [main:60] - Cant find and generate replacement for a type Array<out T>
2021-03-11 12:13:19,719 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:13:19,719 [main:38] - replacing a Array<out T>
2021-03-11 12:13:19,719 [main:42] - Getting value of type Array<out T>
2021-03-11 12:13:19,807 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:13:19,900 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:13:19,901 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:13:19,991 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:13:20,298 [main:43] - GENERATING CALL OF fun <T> suspendCoroutine(block: (kotlin.coroutines.Continuation<ULong?>)->kotlin.Unit): T = TODO()
2021-03-11 12:13:20,300 [main:61] - WITHOUT TYPE PARAMS = fun <T> suspendCoroutine(block: (kotlin.coroutines.Continuation<ULong?>)->kotlin.Unit): T = TODO()
2021-03-11 12:13:20,501 [main:302] - generating value of type = Function1<Continuation<ULong?>, Unit> false depth = 6
2021-03-11 12:13:20,502 [main:302] - generating value of type = Unit false depth = 7
2021-03-11 12:13:20,595 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:13:20,597 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:13:20,783 [main:302] - generating value of type = Boolean true depth = 10
2021-03-11 12:13:20,784 [main:95] - GENERATED = require(true)
2021-03-11 12:13:20,784 [main:95] - GENERATED = suspendCoroutine<ULong?>({a: Continuation<ULong?> -> require(true)})
2021-03-11 12:13:20,784 [main:95] - GENERATED = arrayOf<T>(suspendCoroutine<ULong?>({a: Continuation<ULong?> -> require(true)}))
2021-03-11 12:13:20,784 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOf<T>(suspendCoroutine<ULong?>({a: Continuation<ULong?> -> require(true)}))
2021-03-11 12:13:20,785 [main:49] - GENERATED IS CALL =true
2021-03-11 12:13:21,077 [main:55] - randomType = Pair<UShort?, Float>
2021-03-11 12:13:21,166 [main:302] - generating value of type = Pair<UShort?, Float> false depth = 0
2021-03-11 12:13:21,288 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UShort?, second: Float): Pair<UShort?, Float> = TODO()
2021-03-11 12:13:21,290 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UShort?, second: Float): Pair<UShort?, Float> = TODO()
2021-03-11 12:13:21,388 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 12:13:21,389 [main:302] - generating value of type = Float true depth = 3
2021-03-11 12:13:21,390 [main:95] - GENERATED = Pair<UShort?, Float>(10338.toUShort(), 0.2806499f)
2021-03-11 12:13:21,406 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:21,442 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:21,443 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:21,444 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:21,444 [main:63] - replacement of a of type Array<out T> is arrayOf<T>(suspendCoroutine<ULong?>({a: Continuation<ULong?> -> require(true)}))
2021-03-11 12:13:21,535 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:13:21,535 [main:66] - Compilation checking started
2021-03-11 12:13:21,792 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(arrayOf<T>(suspendCoroutine<ULong?>({a: Continuation<ULong?> -> require(true)}))::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:21,796 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:13:21,796 [main:38] - replacing a Array<out T>
2021-03-11 12:13:21,796 [main:42] - Getting value of type Array<out T>
2021-03-11 12:13:21,893 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:13:21,996 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:13:21,998 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:13:22,095 [main:95] - GENERATED = emptyArray<T>()
2021-03-11 12:13:22,096 [main:46] - GENERATED VALUE OF TYPE Array<out T> = emptyArray<T>()
2021-03-11 12:13:22,096 [main:49] - GENERATED IS CALL =true
2021-03-11 12:13:22,199 [main:55] - randomType = Sequence<Int>
2021-03-11 12:13:22,200 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:22,218 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:22,219 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:22,220 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:22,220 [main:63] - replacement of a of type Array<out T> is emptyArray<T>()
2021-03-11 12:13:22,308 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:13:22,308 [main:66] - Compilation checking started
2021-03-11 12:13:22,554 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(emptyArray<T>()::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:22,558 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:13:22,558 [main:38] - replacing a Array<out T>
2021-03-11 12:13:22,558 [main:42] - Getting value of type Array<out T>
2021-03-11 12:13:22,653 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:13:22,749 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:13:22,750 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:13:22,881 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:13:22,976 [main:43] - GENERATING CALL OF fun <T> minOf(a: UByte, b: UByte): T = TODO()
2021-03-11 12:13:22,978 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: UByte, b: UByte): T = TODO()
2021-03-11 12:13:23,068 [main:302] - generating value of type = UByte true depth = 6
2021-03-11 12:13:23,069 [main:302] - generating value of type = UByte true depth = 6
2021-03-11 12:13:23,070 [main:95] - GENERATED = minOf<UByte>(30.toUByte(), 122.toUByte())
2021-03-11 12:13:23,070 [main:95] - GENERATED = arrayOf<T>(minOf<UByte>(30.toUByte(), 122.toUByte()))
2021-03-11 12:13:23,070 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOf<T>(minOf<UByte>(30.toUByte(), 122.toUByte()))
2021-03-11 12:13:23,070 [main:49] - GENERATED IS CALL =true
2021-03-11 12:13:23,166 [main:55] - randomType = Float?
2021-03-11 12:13:23,255 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:13:23,297 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:23,325 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:23,326 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:23,327 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:23,327 [main:63] - replacement of a of type Array<out T> is arrayOf<T>(minOf<UByte>(30.toUByte(), 122.toUByte()))
2021-03-11 12:13:23,416 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:13:23,416 [main:66] - Compilation checking started
2021-03-11 12:13:23,670 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(arrayOf<T>(minOf<UByte>(30.toUByte(), 122.toUByte()))::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:23,674 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:13:23,674 [main:38] - replacing a Array<out T>
2021-03-11 12:13:23,674 [main:42] - Getting value of type Array<out T>
2021-03-11 12:13:23,762 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:13:23,855 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:13:23,857 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:13:23,947 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:13:24,133 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Short, b: Short, comparator: kotlin.Comparator<Short>): T = TODO()
2021-03-11 12:13:24,135 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Short, b: Short, comparator: kotlin.Comparator<Short>): T = TODO()
2021-03-11 12:13:24,379 [main:302] - generating value of type = Short true depth = 6
2021-03-11 12:13:24,381 [main:302] - generating value of type = Short true depth = 6
2021-03-11 12:13:24,381 [main:302] - generating value of type = Comparator<Short> false depth = 6
2021-03-11 12:13:24,475 [main:43] - GENERATING CALL OF fun <T> nullsLast(): Comparator<Short> = TODO()
2021-03-11 12:13:24,477 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsLast(): Comparator<Short> = TODO()
2021-03-11 12:13:24,574 [main:95] - GENERATED = nullsLast<Short>()
2021-03-11 12:13:24,574 [main:95] - GENERATED = maxOf<Short>(-15366, 12559, nullsLast<Short>())
2021-03-11 12:13:24,574 [main:95] - GENERATED = arrayOf<T>(maxOf<Short>(-15366, 12559, nullsLast<Short>()))
2021-03-11 12:13:24,575 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOf<T>(maxOf<Short>(-15366, 12559, nullsLast<Short>()))
2021-03-11 12:13:24,575 [main:49] - GENERATED IS CALL =true
2021-03-11 12:13:24,682 [main:55] - randomType = Int?
2021-03-11 12:13:24,776 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:24,830 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:24,848 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:24,849 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:24,850 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:24,850 [main:63] - replacement of a of type Array<out T> is arrayOf<T>(maxOf<Short>(-15366, 12559, nullsLast<Short>()))
2021-03-11 12:13:24,939 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:13:24,939 [main:66] - Compilation checking started
2021-03-11 12:13:25,199 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(arrayOf<T>(maxOf<Short>(-15366, 12559, nullsLast<Short>()))::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:25,205 [main:56] - replacing (a::get, KFunction1<Int, Any?>)
2021-03-11 12:13:25,206 [main:38] - replacing a::get KFunction1<Int, Any?>
2021-03-11 12:13:25,206 [main:42] - Getting value of type KFunction1<Int, Any?>
2021-03-11 12:13:25,303 [main:302] - generating value of type = KFunction1<Int, Any?> false depth = 0
2021-03-11 12:13:25,392 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, Any?> = 
2021-03-11 12:13:25,489 [main:55] - randomType = Short
2021-03-11 12:13:25,577 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:13:25,613 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:13:25,630 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:13:25,631 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:13:25,632 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:13:25,632 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, Any?>
2021-03-11 12:13:25,632 [main:56] - replacing (test(a::set), String)
2021-03-11 12:13:25,632 [main:38] - replacing test(a::set) String
2021-03-11 12:13:25,632 [main:42] - Getting value of type String
2021-03-11 12:13:25,719 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:25,720 [main:46] - GENERATED VALUE OF TYPE String = "scqzn"
2021-03-11 12:13:25,720 [main:49] - GENERATED IS CALL =false
2021-03-11 12:13:25,814 [main:55] - randomType = Short
2021-03-11 12:13:25,901 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:13:25,933 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4caf2748]
2021-03-11 12:13:25,933 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b328c0]
2021-03-11 12:13:26,045 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:26,047 [main:66] - Generated call from random type = (-21964).toChar().plus("ezlcn")
2021-03-11 12:13:26,047 [main:63] - replacement of test(a::set) of type String is (-21964).toChar().plus("ezlcn")
2021-03-11 12:13:26,135 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:13:26,136 [main:66] - Compilation checking started
2021-03-11 12:13:26,545 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:26,549 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:13:26,549 [main:38] - replacing a Array<out T>
2021-03-11 12:13:26,549 [main:42] - Getting value of type Array<out T>
2021-03-11 12:13:26,645 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:13:26,749 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:13:26,751 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:13:26,851 [main:95] - GENERATED = emptyArray<T>()
2021-03-11 12:13:26,851 [main:46] - GENERATED VALUE OF TYPE Array<out T> = emptyArray<T>()
2021-03-11 12:13:26,851 [main:49] - GENERATED IS CALL =true
2021-03-11 12:13:26,854 [main:55] - randomType = Int
2021-03-11 12:13:26,946 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:26,978 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:26,995 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:26,996 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:26,998 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:26,998 [main:63] - replacement of a of type Array<out T> is emptyArray<T>()
2021-03-11 12:13:27,089 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:13:27,089 [main:66] - Compilation checking started
2021-03-11 12:13:27,332 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(emptyArray<T>()::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:27,336 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:13:27,336 [main:38] - replacing a Array<out T>
2021-03-11 12:13:27,336 [main:42] - Getting value of type Array<out T>
2021-03-11 12:13:27,431 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:13:27,529 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:13:27,530 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:13:27,625 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:13:28,048 [main:43] - GENERATING CALL OF fun <T> checkNotNull(value: HashMap<ULong, Long>): T = TODO()
2021-03-11 12:13:28,050 [main:61] - WITHOUT TYPE PARAMS = fun <T> checkNotNull(value: HashMap<ULong, Long>): T = TODO()
2021-03-11 12:13:28,146 [main:302] - generating value of type = HashMap<ULong, Long> false depth = 6
2021-03-11 12:13:28,242 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<ULong, Long>): HashMap<ULong, Long> = TODO()
2021-03-11 12:13:28,244 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<ULong, Long>): HashMap<ULong, Long> = TODO()
2021-03-11 12:13:28,338 [main:302] - generating value of type = Pair<ULong, Long> false depth = 9
2021-03-11 12:13:28,433 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ULong, second: Long): Pair<ULong, Long> = TODO()
2021-03-11 12:13:28,435 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ULong, second: Long): Pair<ULong, Long> = TODO()
2021-03-11 12:13:28,529 [main:302] - generating value of type = ULong true depth = 12
2021-03-11 12:13:28,530 [main:302] - generating value of type = Long true depth = 12
2021-03-11 12:13:28,531 [main:95] - GENERATED = Pair<ULong, Long>(6558986002238460829.toULong(), -8317159764464892508)
2021-03-11 12:13:28,531 [main:95] - GENERATED = linkedMapOf<ULong, Long>(Pair<ULong, Long>(6558986002238460829.toULong(), -8317159764464892508))
2021-03-11 12:13:28,531 [main:95] - GENERATED = checkNotNull<HashMap<ULong, Long>>(linkedMapOf<ULong, Long>(Pair<ULong, Long>(6558986002238460829.toULong(), -8317159764464892508)))
2021-03-11 12:13:28,532 [main:95] - GENERATED = arrayOf<T>(checkNotNull<HashMap<ULong, Long>>(linkedMapOf<ULong, Long>(Pair<ULong, Long>(6558986002238460829.toULong(), -8317159764464892508))))
2021-03-11 12:13:28,532 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOf<T>(checkNotNull<HashMap<ULong, Long>>(linkedMapOf<ULong, Long>(Pair<ULong, Long>(6558986002238460829.toULong(), -8317159764464892508))))
2021-03-11 12:13:28,532 [main:49] - GENERATED IS CALL =true
2021-03-11 12:13:28,534 [main:55] - randomType = String
2021-03-11 12:13:28,625 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:28,644 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:28,662 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:28,663 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:28,664 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:28,664 [main:63] - replacement of a of type Array<out T> is arrayOf<T>(checkNotNull<HashMap<ULong, Long>>(linkedMapOf<ULong, Long>(Pair<ULong, Long>(6558986002238460829.toULong(), -8317159764464892508))))
2021-03-11 12:13:28,754 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:13:28,758 [main:56] - replacing (a::get, KFunction1<Int, T>)
2021-03-11 12:13:28,758 [main:38] - replacing a::get KFunction1<Int, T>
2021-03-11 12:13:28,759 [main:42] - Getting value of type KFunction1<Int, T>
2021-03-11 12:13:28,851 [main:302] - generating value of type = KFunction1<Int, T> false depth = 0
2021-03-11 12:13:28,946 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, T> = 
2021-03-11 12:13:29,044 [main:55] - randomType = ULong
2021-03-11 12:13:29,135 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:13:29,163 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:29,181 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:29,182 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:29,183 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:29,183 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, T>
2021-03-11 12:13:29,183 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:13:29,183 [main:38] - replacing a Array<out T>
2021-03-11 12:13:29,183 [main:42] - Getting value of type Array<out T>
2021-03-11 12:13:29,276 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:13:29,371 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:13:29,372 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:13:29,467 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:13:29,612 [main:43] - GENERATING CALL OF fun <T> minOf(a: Comparable<T>, b: Comparable<T>): T = TODO()
2021-03-11 12:13:29,614 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Comparable<T>, b: Comparable<T>): T = TODO()
2021-03-11 12:13:29,716 [main:302] - generating value of type = Comparable<T> false depth = 6
2021-03-11 12:13:29,721 [main:302] - generating value of type = Comparable<T> false depth = 6
2021-03-11 12:13:29,726 [main:95] - GENERATED = minOf<Comparable<T>>('벲', 598552300.toUInt())
2021-03-11 12:13:29,726 [main:95] - GENERATED = arrayOf<T>(minOf<Comparable<T>>('벲', 598552300.toUInt()))
2021-03-11 12:13:29,726 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOf<T>(minOf<Comparable<T>>('벲', 598552300.toUInt()))
2021-03-11 12:13:29,726 [main:49] - GENERATED IS CALL =true
2021-03-11 12:13:29,730 [main:55] - randomType = Int
2021-03-11 12:13:29,838 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:29,890 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:29,909 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:29,910 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:29,911 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:29,911 [main:63] - replacement of a of type Array<out T> is arrayOf<T>(minOf<Comparable<T>>('벲', 598552300.toUInt()))
2021-03-11 12:13:30,001 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:13:30,001 [main:66] - Compilation checking started
2021-03-11 12:13:30,270 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(arrayOf<T>(minOf<Comparable<T>>('벲', 598552300.toUInt()))::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:30,274 [main:56] - replacing (a::get, KFunction1<Int, T>)
2021-03-11 12:13:30,274 [main:38] - replacing a::get KFunction1<Int, T>
2021-03-11 12:13:30,274 [main:42] - Getting value of type KFunction1<Int, T>
2021-03-11 12:13:30,365 [main:302] - generating value of type = KFunction1<Int, T> false depth = 0
2021-03-11 12:13:30,459 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, T> = 
2021-03-11 12:13:30,766 [main:55] - randomType = Set<HashSet<Char>>?
2021-03-11 12:13:30,767 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:30,785 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:30,787 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:30,788 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:30,788 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, T>
2021-03-11 12:13:30,788 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:13:30,788 [main:38] - replacing a Array<out T>
2021-03-11 12:13:30,788 [main:42] - Getting value of type Array<out T>
2021-03-11 12:13:30,878 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:13:30,976 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:13:30,978 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:13:31,075 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:13:31,173 [main:43] - GENERATING CALL OF fun <T> enumValueOf(name: kotlin.String): T = TODO()
2021-03-11 12:13:31,175 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValueOf(name: kotlin.String): T = TODO()
2021-03-11 12:13:31,398 [main:302] - generating value of type = String true depth = 6
2021-03-11 12:13:31,400 [main:95] - GENERATED = enumValueOf<Enum<T>>("fzbay")
2021-03-11 12:13:31,400 [main:95] - GENERATED = arrayOf<T>(enumValueOf<Enum<T>>("fzbay"))
2021-03-11 12:13:31,400 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOf<T>(enumValueOf<Enum<T>>("fzbay"))
2021-03-11 12:13:31,400 [main:49] - GENERATED IS CALL =true
2021-03-11 12:13:31,500 [main:55] - randomType = Char?
2021-03-11 12:13:31,592 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:13:31,613 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:31,632 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:31,633 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:31,634 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:31,634 [main:63] - replacement of a of type Array<out T> is arrayOf<T>(enumValueOf<Enum<T>>("fzbay"))
2021-03-11 12:13:31,727 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:13:31,727 [main:66] - Compilation checking started
2021-03-11 12:13:31,965 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(arrayOf<T>(enumValueOf<Enum<T>>("fzbay"))::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:31,969 [main:56] - replacing (test(a::set), String)
2021-03-11 12:13:31,969 [main:38] - replacing test(a::set) String
2021-03-11 12:13:31,969 [main:42] - Getting value of type String
2021-03-11 12:13:32,060 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:32,061 [main:46] - GENERATED VALUE OF TYPE String = "oeftj"
2021-03-11 12:13:32,061 [main:49] - GENERATED IS CALL =false
2021-03-11 12:13:32,469 [main:55] - randomType = Collection<MutableMap<Double, UByte>>
2021-03-11 12:13:32,469 [main:94] - GETTING String from String
2021-03-11 12:13:32,492 [main:101] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@700a562]]
2021-03-11 12:13:32,492 [main:137] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@700a562]
2021-03-11 12:13:32,583 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:13:32,675 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:32,676 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).substringBefore('툩', "wbzht")
2021-03-11 12:13:32,676 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b328c0]]
2021-03-11 12:13:32,676 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:13:32,767 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:32,768 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b328c0]
2021-03-11 12:13:32,858 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:32,859 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-1056678418).plus("spkcq")
2021-03-11 12:13:32,860 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]]
2021-03-11 12:13:32,860 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]
2021-03-11 12:13:32,977 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:32,979 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).repeat(1317954513)
2021-03-11 12:13:32,979 [main:101] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ef6a1a]]
2021-03-11 12:13:32,979 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ef6a1a]
2021-03-11 12:13:33,069 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:13:33,161 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:33,162 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).substringAfterLast('ĸ', "jmufq")
2021-03-11 12:13:33,163 [main:101] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534bf968]]
2021-03-11 12:13:33,163 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534bf968]
2021-03-11 12:13:33,253 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:33,347 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:13:33,349 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).padStart(-510283029, 'ᴟ')
2021-03-11 12:13:33,349 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]]
2021-03-11 12:13:33,349 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]
2021-03-11 12:13:33,349 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).toUpperCase()
2021-03-11 12:13:33,349 [main:101] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2502fc72]]
2021-03-11 12:13:33,349 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2502fc72]
2021-03-11 12:13:33,349 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).capitalize()
2021-03-11 12:13:33,350 [main:101] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@720e46c5]]
2021-03-11 12:13:33,350 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@720e46c5]
2021-03-11 12:13:33,441 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:33,532 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:33,533 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")
2021-03-11 12:13:33,534 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]]
2021-03-11 12:13:33,534 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:13:33,624 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:33,716 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:33,717 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]
2021-03-11 12:13:33,808 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:33,899 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:33,900 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).subSequence(-1305940584, 802024022).substring(-2031157246, -330252535)
2021-03-11 12:13:33,901 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]]
2021-03-11 12:13:33,901 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]
2021-03-11 12:13:33,991 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:33,993 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndent("ckpzh")
2021-03-11 12:13:33,993 [main:63] - replacement of test(a::set) of type String is (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")
2021-03-11 12:13:34,084 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:13:34,085 [main:66] - Compilation checking started
2021-03-11 12:13:34,444 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:34,449 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:13:34,449 [main:38] - replacing a Array<out T>
2021-03-11 12:13:34,449 [main:42] - Getting value of type Array<out T>
2021-03-11 12:13:34,546 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:13:34,645 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:13:34,647 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:13:34,744 [main:95] - GENERATED = emptyArray<T>()
2021-03-11 12:13:34,744 [main:46] - GENERATED VALUE OF TYPE Array<out T> = emptyArray<T>()
2021-03-11 12:13:34,744 [main:49] - GENERATED IS CALL =true
2021-03-11 12:13:34,874 [main:55] - randomType = Byte
2021-03-11 12:13:34,965 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:13:34,997 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:35,015 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:35,016 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:35,017 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:35,017 [main:63] - replacement of a of type Array<out T> is emptyArray<T>()
2021-03-11 12:13:35,107 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:13:35,107 [main:66] - Compilation checking started
2021-03-11 12:13:35,346 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(emptyArray<T>()::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:35,350 [main:56] - replacing (a, Array<in T>)
2021-03-11 12:13:35,350 [main:38] - replacing a Array<in T>
2021-03-11 12:13:35,350 [main:42] - Getting value of type Array<in T>
2021-03-11 12:13:35,443 [main:302] - generating value of type = Array<in T> false depth = 0
2021-03-11 12:13:35,542 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:13:35,545 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:13:35,644 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:13:36,040 [main:43] - GENERATING CALL OF fun <T> checkNotNull(value: Pair<Double?, String>): T = TODO()
2021-03-11 12:13:36,042 [main:61] - WITHOUT TYPE PARAMS = fun <T> checkNotNull(value: Pair<Double?, String>): T = TODO()
2021-03-11 12:13:36,136 [main:302] - generating value of type = Pair<Double?, String> false depth = 6
2021-03-11 12:13:36,233 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Double?, second: String): Pair<Double?, String> = TODO()
2021-03-11 12:13:36,235 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Double?, second: String): Pair<Double?, String> = TODO()
2021-03-11 12:13:36,329 [main:302] - generating value of type = Double true depth = 9
2021-03-11 12:13:36,330 [main:302] - generating value of type = String true depth = 9
2021-03-11 12:13:36,331 [main:95] - GENERATED = Pair<Double?, String>(0.9772974410456468, "daosp")
2021-03-11 12:13:36,332 [main:95] - GENERATED = checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp"))
2021-03-11 12:13:36,332 [main:95] - GENERATED = arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))
2021-03-11 12:13:36,332 [main:46] - GENERATED VALUE OF TYPE Array<in T> = arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))
2021-03-11 12:13:36,332 [main:49] - GENERATED IS CALL =true
2021-03-11 12:13:36,334 [main:55] - randomType = Char
2021-03-11 12:13:36,425 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:13:36,444 [main:94] - GETTING Array<in T> from String
2021-03-11 12:13:36,462 [main:94] - GETTING Array<in T> from String
2021-03-11 12:13:36,463 [main:94] - GETTING Array<in T> from String
2021-03-11 12:13:36,464 [main:94] - GETTING Array<in T> from String
2021-03-11 12:13:36,464 [main:63] - replacement of a of type Array<in T> is arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))
2021-03-11 12:13:36,554 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:13:36,558 [main:56] - replacing (f.toString(), String)
2021-03-11 12:13:36,558 [main:38] - replacing f.toString() String
2021-03-11 12:13:36,558 [main:42] - Getting value of type String
2021-03-11 12:13:36,649 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:36,650 [main:46] - GENERATED VALUE OF TYPE String = "kpvmj"
2021-03-11 12:13:36,650 [main:49] - GENERATED IS CALL =false
2021-03-11 12:13:37,602 [main:55] - randomType = LinkedHashMap<Map<Function2<Long, Int?, LinkedHashSet<Float>>, Long>, UShort>?
2021-03-11 12:13:37,693 [main:302] - generating value of type = LinkedHashMap<Map<Function2<Long, Int?, LinkedHashSet<Float>>, Long>, UShort> false depth = 0
2021-03-11 12:13:37,791 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Map<Function2<Long, Int?, LinkedHashSet<Float>>, Long>, UShort>): LkedHashMap<Map<Function2<Long, Int?, LkedHashSet<Float>>, Long>, UShort> = TODO()
2021-03-11 12:13:37,793 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Map<Function2<Long, Int?, LinkedHashSet<Float>>, Long>, UShort>): LkedHashMap<Map<Function2<Long, Int?, LkedHashSet<Float>>, Long>, UShort> = TODO()
2021-03-11 12:13:37,887 [main:302] - generating value of type = Pair<Map<Function2<Long, Int?, LinkedHashSet<Float>>, Long>, UShort> false depth = 3
2021-03-11 12:13:37,986 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Map<Function2<Long, Int?, LinkedHashSet<Float>>, Long>, second: UShort): Pair<Map<Function2<Long, Int?, LinkedHashSet<Float>>, Long>, UShort> = TODO()
2021-03-11 12:13:37,988 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Map<Function2<Long, Int?, LinkedHashSet<Float>>, Long>, second: UShort): Pair<Map<Function2<Long, Int?, LinkedHashSet<Float>>, Long>, UShort> = TODO()
2021-03-11 12:13:38,082 [main:302] - generating value of type = Map<Function2<Long, Int?, LinkedHashSet<Float>>, Long> false depth = 6
2021-03-11 12:13:38,181 [main:43] - GENERATING CALL OF fun <K, V> mapOf(): Map<Function2<Long, Int?, LkedHashSet<Float>>, Long> = TODO()
2021-03-11 12:13:38,183 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mapOf(): Map<Function2<Long, Int?, LkedHashSet<Float>>, Long> = TODO()
2021-03-11 12:13:38,277 [main:95] - GENERATED = mapOf<Function2<Long, Int?, LinkedHashSet<Float>>, Long>()
2021-03-11 12:13:38,277 [main:302] - generating value of type = UShort true depth = 6
2021-03-11 12:13:38,278 [main:95] - GENERATED = Pair<Map<Function2<Long, Int?, LinkedHashSet<Float>>, Long>, UShort>(mapOf<Function2<Long, Int?, LinkedHashSet<Float>>, Long>(), 3586.toUShort())
2021-03-11 12:13:38,279 [main:95] - GENERATED = linkedMapOf<Map<Function2<Long, Int?, LinkedHashSet<Float>>, Long>, UShort>(Pair<Map<Function2<Long, Int?, LinkedHashSet<Float>>, Long>, UShort>(mapOf<Function2<Long, Int?, LinkedHashSet<Float>>, Long>(), 3586.toUShort()))
2021-03-11 12:13:38,487 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:13:38,609 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:38,611 [main:66] - Generated call from random type = (linkedMapOf<Map<Function2<Long, Int?, LinkedHashSet<Float>>, Long>, UShort>(Pair<Map<Function2<Long, Int?, LinkedHashSet<Float>>, Long>, UShort>(mapOf<Function2<Long, Int?, LinkedHashSet<Float>>, Long>(), 3586.toUShort())))?.size.toString(-1959597587)
2021-03-11 12:13:38,611 [main:94] - GETTING String from String
2021-03-11 12:13:38,628 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]]
2021-03-11 12:13:38,629 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]
2021-03-11 12:13:38,629 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).trimStart()
2021-03-11 12:13:38,629 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b328c0]]
2021-03-11 12:13:38,629 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:13:38,720 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:38,721 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b328c0]
2021-03-11 12:13:38,812 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:38,813 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(691069556).plus("udyxa")
2021-03-11 12:13:38,813 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]]
2021-03-11 12:13:38,813 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:13:38,904 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:38,905 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]
2021-03-11 12:13:38,905 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(-1223097187).uppercase()
2021-03-11 12:13:38,905 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]]
2021-03-11 12:13:38,905 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]
2021-03-11 12:13:38,996 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:38,997 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndent("jxvqk")
2021-03-11 12:13:38,997 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]]
2021-03-11 12:13:38,997 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]
2021-03-11 12:13:39,087 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:13:39,182 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:13:39,183 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).commonSuffixWith("cicsd", false)
2021-03-11 12:13:39,183 [main:101] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21fc0bcb]]
2021-03-11 12:13:39,183 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21fc0bcb]
2021-03-11 12:13:39,274 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:13:39,275 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:13:39,276 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).filterNot({a: Char -> true})
2021-03-11 12:13:39,276 [main:101] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ef6a1a]]
2021-03-11 12:13:39,276 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ef6a1a]
2021-03-11 12:13:39,368 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:13:39,459 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:39,461 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).substringAfterLast('⊩', "ntnuo")
2021-03-11 12:13:39,461 [main:101] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@579fd1d1]]
2021-03-11 12:13:39,461 [main:137] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@579fd1d1]
2021-03-11 12:13:39,552 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:13:39,643 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:13:39,736 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:13:39,737 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)
2021-03-11 12:13:39,737 [main:101] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@287af9e3]]
2021-03-11 12:13:39,737 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@287af9e3]
2021-03-11 12:13:39,828 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:13:39,920 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:39,922 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).substringAfter('', "dyxft")
2021-03-11 12:13:39,922 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]]
2021-03-11 12:13:39,922 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]
2021-03-11 12:13:39,922 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).trimIndent()
2021-03-11 12:13:39,922 [main:63] - replacement of f.toString() of type String is (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)
2021-03-11 12:13:40,013 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:13:40,013 [main:66] - Compilation checking started
2021-03-11 12:13:40,408 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:40,415 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:13:40,415 [main:38] - replacing a Array<out T>
2021-03-11 12:13:40,415 [main:42] - Getting value of type Array<out T>
2021-03-11 12:13:40,514 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:13:40,638 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:13:40,640 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:13:40,736 [main:95] - GENERATED = emptyArray<T>()
2021-03-11 12:13:40,736 [main:46] - GENERATED VALUE OF TYPE Array<out T> = emptyArray<T>()
2021-03-11 12:13:40,736 [main:49] - GENERATED IS CALL =true
2021-03-11 12:13:41,869 [main:55] - randomType = LinkedHashSet<Function2<UShort, ULong, HashMap<Double, List<Double>>?>>?
2021-03-11 12:13:41,961 [main:302] - generating value of type = LinkedHashSet<Function2<UShort, ULong, HashMap<Double, List<Double>>?>> false depth = 0
2021-03-11 12:13:42,061 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Function2<UShort, ULong, HashMap<Double, List<Double>>?>): LkedHashSet<Function2<UShort, ULong, HashMap<Double, List<Double>>?>> = TODO()
2021-03-11 12:13:42,063 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Function2<UShort, ULong, HashMap<Double, List<Double>>?>): LkedHashSet<Function2<UShort, ULong, HashMap<Double, List<Double>>?>> = TODO()
2021-03-11 12:13:42,159 [main:302] - generating value of type = Function2<UShort, ULong, HashMap<Double, List<Double>>?> false depth = 3
2021-03-11 12:13:42,160 [main:302] - generating value of type = HashMap<Double, List<Double>> false depth = 4
2021-03-11 12:13:42,258 [main:43] - GENERATING CALL OF fun <K, V> HashMap(original: kotlin.collections.Map<Double, List<Double>>): HashMap<Double, List<Double>> = TODO()
2021-03-11 12:13:42,260 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(original: kotlin.collections.Map<Double, List<Double>>): HashMap<Double, List<Double>> = TODO()
2021-03-11 12:13:42,464 [main:302] - generating value of type = Map<Double, List<Double>> false depth = 7
2021-03-11 12:13:42,565 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Double, List<Double>>): Map<Double, List<Double>> = TODO()
2021-03-11 12:13:42,567 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Double, List<Double>>): Map<Double, List<Double>> = TODO()
2021-03-11 12:13:42,715 [main:302] - generating value of type = Pair<Double, List<Double>> false depth = 10
2021-03-11 12:13:42,813 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Double, second: List<Double>): Pair<Double, List<Double>> = TODO()
2021-03-11 12:13:42,815 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Double, second: List<Double>): Pair<Double, List<Double>> = TODO()
2021-03-11 12:13:42,912 [main:302] - generating value of type = Double true depth = 13
2021-03-11 12:13:42,913 [main:302] - generating value of type = List<Double> false depth = 13
2021-03-11 12:13:43,010 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(element: Double): List<Double> = TODO()
2021-03-11 12:13:43,012 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(element: Double): List<Double> = TODO()
2021-03-11 12:13:43,106 [main:302] - generating value of type = Double true depth = 16
2021-03-11 12:13:43,106 [main:385] - Cant generate call of fun <T> listOfNotNull(element: Double): List<Double> = TODO()
2021-03-11 12:13:43,106 [main:385] - Cant generate call of fun <A, B> Pair(first: Double, second: List<Double>): Pair<Double, List<Double>> = TODO()
2021-03-11 12:13:43,106 [main:385] - Cant generate call of fun <K, V> linkedMapOf(pairs: Pair<Double, List<Double>>): Map<Double, List<Double>> = TODO()
2021-03-11 12:13:43,106 [main:385] - Cant generate call of fun <K, V> HashMap(original: kotlin.collections.Map<Double, List<Double>>): HashMap<Double, List<Double>> = TODO()
2021-03-11 12:13:43,106 [main:95] - GENERATED = linkedSetOf<Function2<UShort, ULong, HashMap<Double, List<Double>>?>>({a: UShort, b: ULong -> })
2021-03-11 12:13:43,331 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:43,348 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:43,349 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:43,350 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:43,350 [main:63] - replacement of a of type Array<out T> is emptyArray<T>()
2021-03-11 12:13:43,441 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:13:43,442 [main:66] - Compilation checking started
2021-03-11 12:13:43,686 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(emptyArray<T>()::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:43,693 [main:56] - replacing (a::get, KFunction1<Int, T>)
2021-03-11 12:13:43,693 [main:38] - replacing a::get KFunction1<Int, T>
2021-03-11 12:13:43,693 [main:42] - Getting value of type KFunction1<Int, T>
2021-03-11 12:13:43,795 [main:302] - generating value of type = KFunction1<Int, T> false depth = 0
2021-03-11 12:13:43,888 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, T> = 
2021-03-11 12:13:43,891 [main:55] - randomType = Int
2021-03-11 12:13:43,982 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:44,014 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:44,031 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:44,032 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:44,034 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:44,034 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, T>
2021-03-11 12:13:44,034 [main:56] - replacing (arrayOf<T>(checkNotNull<HashMap<ULong, Long>>(linkedMapOf<ULong, Long>(Pair<ULong, Long>(6558986002238460829.toULong(), -8317159764464892508))))::set, KFunction2<Int, Nothing, Unit>)
2021-03-11 12:13:44,034 [main:38] - replacing arrayOf<T>(checkNotNull<HashMap<ULong, Long>>(linkedMapOf<ULong, Long>(Pair<ULong, Long>(6558986002238460829.toULong(), -8317159764464892508))))::set KFunction2<Int, Nothing, Unit>
2021-03-11 12:13:44,034 [main:42] - Getting value of type KFunction2<Int, Nothing, Unit>
2021-03-11 12:13:44,125 [main:302] - generating value of type = KFunction2<Int, Nothing, Unit> false depth = 0
2021-03-11 12:13:44,219 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, Nothing, Unit> = 
2021-03-11 12:13:44,321 [main:55] - randomType = Double
2021-03-11 12:13:44,414 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:13:44,447 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:13:44,464 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:13:44,465 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:13:44,467 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:13:44,467 [main:60] - Cant find and generate replacement for arrayOf<T>(checkNotNull<HashMap<ULong, Long>>(linkedMapOf<ULong, Long>(Pair<ULong, Long>(6558986002238460829.toULong(), -8317159764464892508))))::set type KFunction2<Int, Nothing, Unit>
2021-03-11 12:13:44,467 [main:56] - replacing (a::get, KFunction1<Int, T>)
2021-03-11 12:13:44,467 [main:38] - replacing a::get KFunction1<Int, T>
2021-03-11 12:13:44,467 [main:42] - Getting value of type KFunction1<Int, T>
2021-03-11 12:13:44,560 [main:302] - generating value of type = KFunction1<Int, T> false depth = 0
2021-03-11 12:13:44,653 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, T> = 
2021-03-11 12:13:44,655 [main:55] - randomType = Int
2021-03-11 12:13:44,777 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:44,814 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:44,831 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:44,832 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:44,833 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:44,833 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, T>
2021-03-11 12:13:44,833 [main:56] - replacing (a, Array<in T>)
2021-03-11 12:13:44,833 [main:38] - replacing a Array<in T>
2021-03-11 12:13:44,834 [main:42] - Getting value of type Array<in T>
2021-03-11 12:13:44,927 [main:302] - generating value of type = Array<in T> false depth = 0
2021-03-11 12:13:45,024 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:13:45,026 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:13:45,121 [main:95] - GENERATED = emptyArray<T>()
2021-03-11 12:13:45,121 [main:46] - GENERATED VALUE OF TYPE Array<in T> = emptyArray<T>()
2021-03-11 12:13:45,121 [main:49] - GENERATED IS CALL =true
2021-03-11 12:13:45,124 [main:55] - randomType = Boolean
2021-03-11 12:13:45,217 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:13:45,228 [main:94] - GETTING Array<in T> from String
2021-03-11 12:13:45,246 [main:94] - GETTING Array<in T> from String
2021-03-11 12:13:45,247 [main:94] - GETTING Array<in T> from String
2021-03-11 12:13:45,248 [main:94] - GETTING Array<in T> from String
2021-03-11 12:13:45,248 [main:63] - replacement of a of type Array<in T> is emptyArray<T>()
2021-03-11 12:13:45,341 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:13:45,342 [main:66] - Compilation checking started
2021-03-11 12:13:45,584 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(emptyArray<T>()::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = bar2(Array<String>(-1046018113, {a: Int -> "jozfp"}))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:45,588 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:13:45,588 [main:38] - replacing a Array<out T>
2021-03-11 12:13:45,588 [main:42] - Getting value of type Array<out T>
2021-03-11 12:13:45,680 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:13:45,778 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 12:13:45,780 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 12:13:46,080 [main:385] - Cant generate call of fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 12:13:46,080 [main:46] - GENERATED VALUE OF TYPE Array<out T> = 
2021-03-11 12:13:46,287 [main:55] - randomType = Map<Char, UByte>
2021-03-11 12:13:46,288 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:46,307 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:46,308 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:46,309 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:46,309 [main:60] - Cant find and generate replacement for a type Array<out T>
2021-03-11 12:13:46,309 [main:56] - replacing (a::set, KFunction2<Int, Nothing, Unit>)
2021-03-11 12:13:46,309 [main:38] - replacing a::set KFunction2<Int, Nothing, Unit>
2021-03-11 12:13:46,309 [main:42] - Getting value of type KFunction2<Int, Nothing, Unit>
2021-03-11 12:13:46,406 [main:302] - generating value of type = KFunction2<Int, Nothing, Unit> false depth = 0
2021-03-11 12:13:46,500 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, Nothing, Unit> = 
2021-03-11 12:13:46,600 [main:55] - randomType = Long
2021-03-11 12:13:46,692 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:13:46,724 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:13:46,746 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:13:46,747 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:13:46,748 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:13:46,748 [main:60] - Cant find and generate replacement for a::set type KFunction2<Int, Nothing, Unit>
2021-03-11 12:13:46,748 [main:56] - replacing (bar2(Array<String>(-1046018113, {a: Int -> "jozfp"})), String)
2021-03-11 12:13:46,749 [main:38] - replacing bar2(Array<String>(-1046018113, {a: Int -> "jozfp"})) String
2021-03-11 12:13:46,749 [main:42] - Getting value of type String
2021-03-11 12:13:46,844 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:46,845 [main:46] - GENERATED VALUE OF TYPE String = "wkgyf"
2021-03-11 12:13:46,845 [main:49] - GENERATED IS CALL =false
2021-03-11 12:13:46,847 [main:55] - randomType = Boolean
2021-03-11 12:13:46,971 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:13:46,981 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5174a81f]
2021-03-11 12:13:47,074 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:13:47,076 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:13:47,167 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:47,169 [main:66] - Generated call from random type = (true).compareTo(true).toString(606286890)
2021-03-11 12:13:47,169 [main:94] - GETTING String from String
2021-03-11 12:13:47,186 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9c84af]]
2021-03-11 12:13:47,186 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9c84af]
2021-03-11 12:13:47,187 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).uppercase()
2021-03-11 12:13:47,187 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]]
2021-03-11 12:13:47,187 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]
2021-03-11 12:13:47,279 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:13:47,283 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).removePrefix("ffutk")
2021-03-11 12:13:47,283 [main:101] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a03b602]]
2021-03-11 12:13:47,283 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a03b602]
2021-03-11 12:13:47,375 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:13:47,467 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:47,561 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:47,562 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).replaceAfter('ʾ', "tjbyk", "eltqy")
2021-03-11 12:13:47,562 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]]
2021-03-11 12:13:47,562 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:13:47,655 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:47,656 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]
2021-03-11 12:13:47,656 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).get(384026662).uppercase()
2021-03-11 12:13:47,657 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]]
2021-03-11 12:13:47,657 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]
2021-03-11 12:13:47,750 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:47,751 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).replaceIndent("maiqy")
2021-03-11 12:13:47,751 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]]
2021-03-11 12:13:47,751 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]
2021-03-11 12:13:47,751 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).trimIndent()
2021-03-11 12:13:47,751 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]]
2021-03-11 12:13:47,751 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:13:47,844 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:13:47,846 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).length.toString(-388556979)
2021-03-11 12:13:47,846 [main:101] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4accd603]]
2021-03-11 12:13:47,846 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4accd603]
2021-03-11 12:13:47,938 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:13:48,035 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:13:48,037 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:13:48,233 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:13:48,234 [main:95] - GENERATED = StringBuilder(-729717076)
2021-03-11 12:13:48,235 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
2021-03-11 12:13:48,235 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f7d80a8]]
2021-03-11 12:13:48,235 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f7d80a8]
2021-03-11 12:13:48,327 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:13:48,328 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:13:48,330 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).dropWhile({a: Char -> true})
2021-03-11 12:13:48,330 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]]
2021-03-11 12:13:48,330 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]
2021-03-11 12:13:48,423 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:13:48,523 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:13:48,524 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).commonSuffixWith("ngvld", false)
2021-03-11 12:13:48,524 [main:63] - replacement of bar2(Array<String>(-1046018113, {a: Int -> "jozfp"})) of type String is (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
2021-03-11 12:13:48,617 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:13:48,617 [main:66] - Compilation checking started
2021-03-11 12:13:48,973 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:48,979 [main:56] - replacing (arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set, KFunction2<Int, T, Unit>)
2021-03-11 12:13:48,979 [main:38] - replacing arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set KFunction2<Int, T, Unit>
2021-03-11 12:13:48,980 [main:42] - Getting value of type KFunction2<Int, T, Unit>
2021-03-11 12:13:49,095 [main:302] - generating value of type = KFunction2<Int, T, Unit> false depth = 0
2021-03-11 12:13:49,188 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, T, Unit> = 
2021-03-11 12:13:49,414 [main:55] - randomType = UShort?
2021-03-11 12:13:49,507 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:13:49,538 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:13:49,557 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:13:49,558 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:13:49,559 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:13:49,560 [main:60] - Cant find and generate replacement for arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set type KFunction2<Int, T, Unit>
2021-03-11 12:13:49,560 [main:56] - replacing (a::get, KFunction1<Int, T>)
2021-03-11 12:13:49,560 [main:38] - replacing a::get KFunction1<Int, T>
2021-03-11 12:13:49,560 [main:42] - Getting value of type KFunction1<Int, T>
2021-03-11 12:13:49,652 [main:302] - generating value of type = KFunction1<Int, T> false depth = 0
2021-03-11 12:13:49,746 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, T> = 
2021-03-11 12:13:49,954 [main:55] - randomType = ArrayList<Float>
2021-03-11 12:13:50,054 [main:302] - generating value of type = ArrayList<Float> false depth = 0
2021-03-11 12:13:50,150 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Float): ArrayList<Float> = TODO()
2021-03-11 12:13:50,152 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Float): ArrayList<Float> = TODO()
2021-03-11 12:13:50,246 [main:302] - generating value of type = Float true depth = 3
2021-03-11 12:13:50,247 [main:95] - GENERATED = arrayListOf<Float>(0.38513798f)
2021-03-11 12:13:50,365 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:50,382 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:50,383 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:50,384 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:50,384 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, T>
2021-03-11 12:13:50,384 [main:56] - replacing (a, Array<in T>)
2021-03-11 12:13:50,384 [main:38] - replacing a Array<in T>
2021-03-11 12:13:50,384 [main:42] - Getting value of type Array<in T>
2021-03-11 12:13:50,476 [main:302] - generating value of type = Array<in T> false depth = 0
2021-03-11 12:13:50,572 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:13:50,574 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:13:50,684 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:13:50,784 [main:43] - GENERATING CALL OF fun <T> maxOf(a: UInt, other: UInt, comparator: kotlin.Comparator<UInt>): T = TODO()
2021-03-11 12:13:50,786 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: UInt, other: UInt, comparator: kotlin.Comparator<UInt>): T = TODO()
2021-03-11 12:13:50,983 [main:302] - generating value of type = UInt true depth = 6
2021-03-11 12:13:50,984 [main:302] - generating value of type = UInt true depth = 6
2021-03-11 12:13:50,985 [main:302] - generating value of type = Comparator<UInt> false depth = 6
2021-03-11 12:13:51,082 [main:43] - GENERATING CALL OF fun <T> naturalOrder(): Comparator<UInt> = TODO()
2021-03-11 12:13:51,084 [main:61] - WITHOUT TYPE PARAMS = fun <T> naturalOrder(): Comparator<UInt> = TODO()
2021-03-11 12:13:51,180 [main:95] - GENERATED = naturalOrder<UInt>()
2021-03-11 12:13:51,180 [main:95] - GENERATED = maxOf<UInt>(717418747.toUInt(), 2135442925.toUInt(), naturalOrder<UInt>())
2021-03-11 12:13:51,180 [main:95] - GENERATED = arrayOf<T>(maxOf<UInt>(717418747.toUInt(), 2135442925.toUInt(), naturalOrder<UInt>()))
2021-03-11 12:13:51,180 [main:46] - GENERATED VALUE OF TYPE Array<in T> = arrayOf<T>(maxOf<UInt>(717418747.toUInt(), 2135442925.toUInt(), naturalOrder<UInt>()))
2021-03-11 12:13:51,181 [main:49] - GENERATED IS CALL =true
2021-03-11 12:13:51,281 [main:55] - randomType = ULong
2021-03-11 12:13:51,374 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:13:51,407 [main:94] - GETTING Array<in T> from String
2021-03-11 12:13:51,436 [main:94] - GETTING Array<in T> from String
2021-03-11 12:13:51,438 [main:94] - GETTING Array<in T> from String
2021-03-11 12:13:51,439 [main:94] - GETTING Array<in T> from String
2021-03-11 12:13:51,439 [main:63] - replacement of a of type Array<in T> is arrayOf<T>(maxOf<UInt>(717418747.toUInt(), 2135442925.toUInt(), naturalOrder<UInt>()))
2021-03-11 12:13:51,564 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:13:51,564 [main:66] - Compilation checking started
2021-03-11 12:13:51,824 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(arrayOf<T>(maxOf<UInt>(717418747.toUInt(), 2135442925.toUInt(), naturalOrder<UInt>()))::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:51,831 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:13:51,831 [main:38] - replacing a Array<out T>
2021-03-11 12:13:51,831 [main:42] - Getting value of type Array<out T>
2021-03-11 12:13:51,923 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:13:52,019 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:13:52,020 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:13:52,115 [main:95] - GENERATED = enumValues<T>()
2021-03-11 12:13:52,115 [main:46] - GENERATED VALUE OF TYPE Array<out T> = enumValues<T>()
2021-03-11 12:13:52,115 [main:49] - GENERATED IS CALL =true
2021-03-11 12:13:52,117 [main:55] - randomType = String
2021-03-11 12:13:52,209 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:13:52,228 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:52,246 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:52,247 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:52,248 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:52,248 [main:63] - replacement of a of type Array<out T> is enumValues<T>()
2021-03-11 12:13:52,340 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:13:52,340 [main:66] - Compilation checking started
2021-03-11 12:13:52,580 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(enumValues<T>()::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:52,584 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:13:52,584 [main:38] - replacing a Array<out T>
2021-03-11 12:13:52,584 [main:42] - Getting value of type Array<out T>
2021-03-11 12:13:52,676 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:13:52,772 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:13:52,774 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:13:52,869 [main:95] - GENERATED = enumValues<T>()
2021-03-11 12:13:52,869 [main:46] - GENERATED VALUE OF TYPE Array<out T> = enumValues<T>()
2021-03-11 12:13:52,869 [main:49] - GENERATED IS CALL =true
2021-03-11 12:13:53,805 [main:55] - randomType = ArrayList<Function2<Byte, Function1<Boolean, Function2<ULong, Int, Byte?>>, Long>>
2021-03-11 12:13:53,896 [main:302] - generating value of type = ArrayList<Function2<Byte, Function1<Boolean, Function2<ULong, Int, Byte?>>, Long>> false depth = 0
2021-03-11 12:13:54,028 [main:43] - GENERATING CALL OF fun <E> ArrayList(elements: kotlin.collections.Collection<Function2<Byte, Function1<Boolean, Function2<ULong, Int, Byte?>>, Long>>): ArrayList<Function2<Byte, Function1<Boolean, Function2<ULong, Int, Byte?>>, Long>> = TODO()
2021-03-11 12:13:54,030 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(elements: kotlin.collections.Collection<Function2<Byte, Function1<Boolean, Function2<ULong, Int, Byte?>>, Long>>): ArrayList<Function2<Byte, Function1<Boolean, Function2<ULong, Int, Byte?>>, Long>> = TODO()
2021-03-11 12:13:54,232 [main:302] - generating value of type = Collection<Function2<Byte, Function1<Boolean, Function2<ULong, Int, Byte?>>, Long>> false depth = 3
2021-03-11 12:13:54,332 [main:43] - GENERATING CALL OF fun <T> mutableListOf(): Collection<Function2<Byte, Function1<Boolean, Function2<ULong, Int, Byte?>>, Long>> = TODO()
2021-03-11 12:13:54,334 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(): Collection<Function2<Byte, Function1<Boolean, Function2<ULong, Int, Byte?>>, Long>> = TODO()
2021-03-11 12:13:54,429 [main:95] - GENERATED = mutableListOf<Function2<Byte, Function1<Boolean, Function2<ULong, Int, Byte?>>, Long>>()
2021-03-11 12:13:54,429 [main:95] - GENERATED = ArrayList<Function2<Byte, Function1<Boolean, Function2<ULong, Int, Byte?>>, Long>>(mutableListOf<Function2<Byte, Function1<Boolean, Function2<ULong, Int, Byte?>>, Long>>())
2021-03-11 12:13:54,760 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:54,791 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:54,792 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:54,793 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:54,793 [main:63] - replacement of a of type Array<out T> is enumValues<T>()
2021-03-11 12:13:54,891 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:13:54,891 [main:66] - Compilation checking started
2021-03-11 12:13:55,130 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(enumValues<T>()::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:55,135 [main:56] - replacing (a::get, KFunction1<Int, T>)
2021-03-11 12:13:55,135 [main:38] - replacing a::get KFunction1<Int, T>
2021-03-11 12:13:55,135 [main:42] - Getting value of type KFunction1<Int, T>
2021-03-11 12:13:55,228 [main:302] - generating value of type = KFunction1<Int, T> false depth = 0
2021-03-11 12:13:55,323 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, T> = 
2021-03-11 12:13:55,435 [main:55] - randomType = Set<Boolean?>
2021-03-11 12:13:55,436 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:55,458 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:55,460 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:55,461 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:55,461 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, T>
2021-03-11 12:13:55,461 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:13:55,461 [main:38] - replacing a Array<out T>
2021-03-11 12:13:55,461 [main:42] - Getting value of type Array<out T>
2021-03-11 12:13:55,554 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:13:55,653 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:13:55,655 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:13:55,750 [main:95] - GENERATED = emptyArray<T>()
2021-03-11 12:13:55,750 [main:46] - GENERATED VALUE OF TYPE Array<out T> = emptyArray<T>()
2021-03-11 12:13:55,750 [main:49] - GENERATED IS CALL =true
2021-03-11 12:13:56,161 [main:55] - randomType = ArrayDeque<Function2<Int, UByte, UInt?>>
2021-03-11 12:13:56,253 [main:302] - generating value of type = ArrayDeque<Function2<Int, UByte, UInt?>> false depth = 0
2021-03-11 12:13:56,350 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Function2<Int, UByte, UInt?>> = TODO()
2021-03-11 12:13:56,352 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Function2<Int, UByte, UInt?>> = TODO()
2021-03-11 12:13:56,480 [main:95] - GENERATED = ArrayDeque<Function2<Int, UByte, UInt?>>()
2021-03-11 12:13:56,682 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:56,699 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:56,700 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:56,701 [main:94] - GETTING Array<out T> from String
2021-03-11 12:13:56,701 [main:63] - replacement of a of type Array<out T> is emptyArray<T>()
2021-03-11 12:13:56,793 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:13:56,793 [main:66] - Compilation checking started
2021-03-11 12:13:57,038 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(emptyArray<T>()::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:13:57,043 [main:56] - replacing (a::get, KFunction1<Int, T>)
2021-03-11 12:13:57,043 [main:38] - replacing a::get KFunction1<Int, T>
2021-03-11 12:13:57,043 [main:42] - Getting value of type KFunction1<Int, T>
2021-03-11 12:13:57,135 [main:302] - generating value of type = KFunction1<Int, T> false depth = 0
2021-03-11 12:13:57,228 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, T> = 
2021-03-11 12:13:57,326 [main:55] - randomType = UByte
2021-03-11 12:13:57,418 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:13:57,447 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:57,464 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:57,465 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:57,467 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:13:57,467 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, T>
2021-03-11 12:13:57,467 [main:56] - replacing (arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set, KFunction2<Int, T, Unit>)
2021-03-11 12:13:57,467 [main:38] - replacing arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set KFunction2<Int, T, Unit>
2021-03-11 12:13:57,467 [main:42] - Getting value of type KFunction2<Int, T, Unit>
2021-03-11 12:13:57,559 [main:302] - generating value of type = KFunction2<Int, T, Unit> false depth = 0
2021-03-11 12:13:57,654 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, T, Unit> = 
2021-03-11 12:13:57,755 [main:55] - randomType = Double
2021-03-11 12:13:57,849 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:13:57,879 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:13:57,896 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:13:57,898 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:13:57,899 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:13:57,899 [main:60] - Cant find and generate replacement for arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set type KFunction2<Int, T, Unit>
2021-03-11 12:13:57,899 [main:56] - replacing (a, Array<in T>)
2021-03-11 12:13:57,899 [main:38] - replacing a Array<in T>
2021-03-11 12:13:57,899 [main:42] - Getting value of type Array<in T>
2021-03-11 12:13:57,990 [main:302] - generating value of type = Array<in T> false depth = 0
2021-03-11 12:13:58,087 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:13:58,089 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:13:58,184 [main:95] - GENERATED = enumValues<T>()
2021-03-11 12:13:58,184 [main:46] - GENERATED VALUE OF TYPE Array<in T> = enumValues<T>()
2021-03-11 12:13:58,184 [main:49] - GENERATED IS CALL =true
2021-03-11 12:13:59,903 [main:55] - randomType = LinkedHashMap<Byte, Triple<Int, Boolean, Function2<ULong, Triple<String, Boolean, Function2<LinkedHashMap<ULong, List<Long>>?, UByte?, Int?>>, UInt>>?>
2021-03-11 12:13:59,995 [main:302] - generating value of type = LinkedHashMap<Byte, Triple<Int, Boolean, Function2<ULong, Triple<String, Boolean, Function2<LinkedHashMap<ULong, List<Long>>?, UByte?, Int?>>, UInt>>?> false depth = 0
2021-03-11 12:14:00,170 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Byte, Triple<Int, Boolean, Function2<ULong, Triple<Strg, Boolean, Function2<LkedHashMap<ULong, List<Long>>?, UByte?, Int?>>, UInt>>?> = TODO()
2021-03-11 12:14:00,172 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Byte, Triple<Int, Boolean, Function2<ULong, Triple<Strg, Boolean, Function2<LkedHashMap<ULong, List<Long>>?, UByte?, Int?>>, UInt>>?> = TODO()
2021-03-11 12:14:00,268 [main:95] - GENERATED = linkedMapOf<Byte, Triple<Int, Boolean, Function2<ULong, Triple<String, Boolean, Function2<LinkedHashMap<ULong, List<Long>>?, UByte?, Int?>>, UInt>>?>()
2021-03-11 12:14:00,680 [main:94] - GETTING Array<in T> from String
2021-03-11 12:14:00,698 [main:94] - GETTING Array<in T> from String
2021-03-11 12:14:00,699 [main:94] - GETTING Array<in T> from String
2021-03-11 12:14:00,700 [main:94] - GETTING Array<in T> from String
2021-03-11 12:14:00,700 [main:63] - replacement of a of type Array<in T> is enumValues<T>()
2021-03-11 12:14:00,791 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:00,791 [main:66] - Compilation checking started
2021-03-11 12:14:01,030 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(enumValues<T>()::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:01,034 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:14:01,034 [main:38] - replacing a Array<out T>
2021-03-11 12:14:01,034 [main:42] - Getting value of type Array<out T>
2021-03-11 12:14:01,126 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:14:01,250 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 12:14:01,252 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 12:14:01,544 [main:385] - Cant generate call of fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 12:14:01,544 [main:46] - GENERATED VALUE OF TYPE Array<out T> = 
2021-03-11 12:14:01,647 [main:55] - randomType = Sequence<Float>
2021-03-11 12:14:01,648 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:01,666 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:01,667 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:01,668 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:01,668 [main:60] - Cant find and generate replacement for a type Array<out T>
2021-03-11 12:14:01,668 [main:56] - replacing (a::get, KFunction1<Int, T>)
2021-03-11 12:14:01,668 [main:38] - replacing a::get KFunction1<Int, T>
2021-03-11 12:14:01,668 [main:42] - Getting value of type KFunction1<Int, T>
2021-03-11 12:14:01,761 [main:302] - generating value of type = KFunction1<Int, T> false depth = 0
2021-03-11 12:14:01,855 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, T> = 
2021-03-11 12:14:01,957 [main:55] - randomType = String?
2021-03-11 12:14:02,049 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:02,070 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:02,088 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:02,089 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:02,090 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:02,090 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, T>
2021-03-11 12:14:02,091 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:14:02,091 [main:38] - replacing a Array<out T>
2021-03-11 12:14:02,091 [main:42] - Getting value of type Array<out T>
2021-03-11 12:14:02,182 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:14:02,279 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:14:02,281 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:14:02,376 [main:95] - GENERATED = emptyArray<T>()
2021-03-11 12:14:02,376 [main:46] - GENERATED VALUE OF TYPE Array<out T> = emptyArray<T>()
2021-03-11 12:14:02,376 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:02,575 [main:55] - randomType = Sequence<Byte>
2021-03-11 12:14:02,576 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:02,594 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:02,595 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:02,596 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:02,596 [main:63] - replacement of a of type Array<out T> is emptyArray<T>()
2021-03-11 12:14:02,689 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:02,690 [main:66] - Compilation checking started
2021-03-11 12:14:02,929 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(emptyArray<T>()::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:02,936 [main:56] - replacing (a::get, KFunction1<Int, T>)
2021-03-11 12:14:02,936 [main:38] - replacing a::get KFunction1<Int, T>
2021-03-11 12:14:02,937 [main:42] - Getting value of type KFunction1<Int, T>
2021-03-11 12:14:03,047 [main:302] - generating value of type = KFunction1<Int, T> false depth = 0
2021-03-11 12:14:03,141 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, T> = 
2021-03-11 12:14:03,341 [main:55] - randomType = ArrayList<Long>
2021-03-11 12:14:03,433 [main:302] - generating value of type = ArrayList<Long> false depth = 0
2021-03-11 12:14:03,529 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Long): ArrayList<Long> = TODO()
2021-03-11 12:14:03,531 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Long): ArrayList<Long> = TODO()
2021-03-11 12:14:03,626 [main:302] - generating value of type = Long true depth = 3
2021-03-11 12:14:03,628 [main:95] - GENERATED = arrayListOf<Long>(2558525199572479984)
2021-03-11 12:14:03,788 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:03,805 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:03,806 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:03,807 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:03,807 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, T>
2021-03-11 12:14:03,807 [main:56] - replacing (arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set, KFunction2<Int, T, Unit>)
2021-03-11 12:14:03,807 [main:38] - replacing arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set KFunction2<Int, T, Unit>
2021-03-11 12:14:03,807 [main:42] - Getting value of type KFunction2<Int, T, Unit>
2021-03-11 12:14:03,899 [main:302] - generating value of type = KFunction2<Int, T, Unit> false depth = 0
2021-03-11 12:14:03,992 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, T, Unit> = 
2021-03-11 12:14:04,092 [main:55] - randomType = Byte
2021-03-11 12:14:04,184 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:14:04,218 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:04,236 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:04,237 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:04,238 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:04,238 [main:60] - Cant find and generate replacement for arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set type KFunction2<Int, T, Unit>
2021-03-11 12:14:04,238 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:14:04,238 [main:38] - replacing a Array<out T>
2021-03-11 12:14:04,238 [main:42] - Getting value of type Array<out T>
2021-03-11 12:14:04,329 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:14:04,426 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:14:04,428 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:14:04,522 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:14:04,621 [main:43] - GENERATING CALL OF fun <T> requireNotNull(value: Float): T = TODO()
2021-03-11 12:14:04,622 [main:61] - WITHOUT TYPE PARAMS = fun <T> requireNotNull(value: Float): T = TODO()
2021-03-11 12:14:04,716 [main:302] - generating value of type = Float true depth = 6
2021-03-11 12:14:04,718 [main:95] - GENERATED = requireNotNull<Float>(0.8085051f)
2021-03-11 12:14:04,718 [main:95] - GENERATED = arrayOf<T>(requireNotNull<Float>(0.8085051f))
2021-03-11 12:14:04,718 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOf<T>(requireNotNull<Float>(0.8085051f))
2021-03-11 12:14:04,718 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:04,720 [main:55] - randomType = UInt
2021-03-11 12:14:04,812 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:14:04,840 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:04,858 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:04,859 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:04,860 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:04,860 [main:63] - replacement of a of type Array<out T> is arrayOf<T>(requireNotNull<Float>(0.8085051f))
2021-03-11 12:14:04,951 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:04,951 [main:66] - Compilation checking started
2021-03-11 12:14:05,203 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(arrayOf<T>(requireNotNull<Float>(0.8085051f))::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:05,207 [main:56] - replacing (a, Array<in T>)
2021-03-11 12:14:05,207 [main:38] - replacing a Array<in T>
2021-03-11 12:14:05,207 [main:42] - Getting value of type Array<in T>
2021-03-11 12:14:05,300 [main:302] - generating value of type = Array<in T> false depth = 0
2021-03-11 12:14:05,397 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->in T): Array<in T> = TODO()
2021-03-11 12:14:05,399 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->in T): Array<in T> = TODO()
2021-03-11 12:14:05,694 [main:385] - Cant generate call of fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->in T): Array<in T> = TODO()
2021-03-11 12:14:05,694 [main:46] - GENERATED VALUE OF TYPE Array<in T> = 
2021-03-11 12:14:05,802 [main:55] - randomType = HashMap<Char, String>
2021-03-11 12:14:05,894 [main:302] - generating value of type = HashMap<Char, String> false depth = 0
2021-03-11 12:14:05,991 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Char, Strg> = TODO()
2021-03-11 12:14:05,993 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Char, Strg> = TODO()
2021-03-11 12:14:06,089 [main:95] - GENERATED = linkedMapOf<Char, String>()
2021-03-11 12:14:06,209 [main:94] - GETTING Array<in T> from String
2021-03-11 12:14:06,228 [main:94] - GETTING Array<in T> from String
2021-03-11 12:14:06,229 [main:94] - GETTING Array<in T> from String
2021-03-11 12:14:06,230 [main:94] - GETTING Array<in T> from String
2021-03-11 12:14:06,230 [main:60] - Cant find and generate replacement for a type Array<in T>
2021-03-11 12:14:06,230 [main:56] - replacing (a::get, KFunction1<Int, T>)
2021-03-11 12:14:06,230 [main:38] - replacing a::get KFunction1<Int, T>
2021-03-11 12:14:06,230 [main:42] - Getting value of type KFunction1<Int, T>
2021-03-11 12:14:06,322 [main:302] - generating value of type = KFunction1<Int, T> false depth = 0
2021-03-11 12:14:06,452 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, T> = 
2021-03-11 12:14:06,552 [main:55] - randomType = UByte
2021-03-11 12:14:06,648 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:14:06,690 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:06,716 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:06,717 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:06,719 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:06,719 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, T>
2021-03-11 12:14:06,719 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:14:06,719 [main:38] - replacing a Array<out T>
2021-03-11 12:14:06,719 [main:42] - Getting value of type Array<out T>
2021-03-11 12:14:06,810 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:14:06,907 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:14:06,909 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:14:07,003 [main:95] - GENERATED = emptyArray<T>()
2021-03-11 12:14:07,003 [main:46] - GENERATED VALUE OF TYPE Array<out T> = emptyArray<T>()
2021-03-11 12:14:07,003 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:07,202 [main:55] - randomType = Short?
2021-03-11 12:14:07,296 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:14:07,337 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:07,353 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:07,355 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:07,356 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:07,356 [main:63] - replacement of a of type Array<out T> is emptyArray<T>()
2021-03-11 12:14:07,449 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:07,449 [main:66] - Compilation checking started
2021-03-11 12:14:07,690 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(emptyArray<T>()::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:07,695 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:14:07,695 [main:38] - replacing a Array<out T>
2021-03-11 12:14:07,695 [main:42] - Getting value of type Array<out T>
2021-03-11 12:14:07,788 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:14:07,883 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:14:07,885 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:14:07,979 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:14:08,814 [main:43] - GENERATING CALL OF fun <T> suspendCoroutine(block: (kotlin.coroutines.Continuation<MutableMap<Int, Triple<UShort, Char, Function2<Double, UByte, ArrayDeque<String>>>>>)->kotlin.Unit): T = TODO()
2021-03-11 12:14:08,816 [main:61] - WITHOUT TYPE PARAMS = fun <T> suspendCoroutine(block: (kotlin.coroutines.Continuation<MutableMap<Int, Triple<UShort, Char, Function2<Double, UByte, ArrayDeque<String>>>>>)->kotlin.Unit): T = TODO()
2021-03-11 12:14:09,072 [main:302] - generating value of type = Function1<Continuation<MutableMap<Int, Triple<UShort, Char, Function2<Double, UByte, ArrayDeque<String>>>>>, Unit> false depth = 6
2021-03-11 12:14:09,074 [main:302] - generating value of type = Unit false depth = 7
2021-03-11 12:14:09,170 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:14:09,172 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:14:09,366 [main:302] - generating value of type = Boolean true depth = 10
2021-03-11 12:14:09,367 [main:95] - GENERATED = require(false)
2021-03-11 12:14:09,368 [main:95] - GENERATED = suspendCoroutine<MutableMap<Int, Triple<UShort, Char, Function2<Double, UByte, ArrayDeque<String>>>>>({a: Continuation<MutableMap<Int, Triple<UShort, Char, Function2<Double, UByte, ArrayDeque<String>>>>> -> require(false)})
2021-03-11 12:14:09,368 [main:95] - GENERATED = arrayOf<T>(suspendCoroutine<MutableMap<Int, Triple<UShort, Char, Function2<Double, UByte, ArrayDeque<String>>>>>({a: Continuation<MutableMap<Int, Triple<UShort, Char, Function2<Double, UByte, ArrayDeque<String>>>>> -> require(false)}))
2021-03-11 12:14:09,368 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOf<T>(suspendCoroutine<MutableMap<Int, Triple<UShort, Char, Function2<Double, UByte, ArrayDeque<String>>>>>({a: Continuation<MutableMap<Int, Triple<UShort, Char, Function2<Double, UByte, ArrayDeque<String>>>>> -> require(false)}))
2021-03-11 12:14:09,368 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:09,675 [main:55] - randomType = HashSet<ULong>
2021-03-11 12:14:09,767 [main:302] - generating value of type = HashSet<ULong> false depth = 0
2021-03-11 12:14:09,863 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<ULong> = TODO()
2021-03-11 12:14:09,864 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<ULong> = TODO()
2021-03-11 12:14:09,958 [main:95] - GENERATED = hashSetOf<ULong>()
2021-03-11 12:14:10,055 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:10,072 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:10,073 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:10,074 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:10,074 [main:63] - replacement of a of type Array<out T> is arrayOf<T>(suspendCoroutine<MutableMap<Int, Triple<UShort, Char, Function2<Double, UByte, ArrayDeque<String>>>>>({a: Continuation<MutableMap<Int, Triple<UShort, Char, Function2<Double, UByte, ArrayDeque<String>>>>> -> require(false)}))
2021-03-11 12:14:10,166 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:10,166 [main:66] - Compilation checking started
2021-03-11 12:14:10,423 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(arrayOf<T>(suspendCoroutine<MutableMap<Int, Triple<UShort, Char, Function2<Double, UByte, ArrayDeque<String>>>>>({a: Continuation<MutableMap<Int, Triple<UShort, Char, Function2<Double, UByte, ArrayDeque<String>>>>> -> require(false)}))::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:10,427 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:14:10,427 [main:38] - replacing a Array<out T>
2021-03-11 12:14:10,427 [main:42] - Getting value of type Array<out T>
2021-03-11 12:14:10,521 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:14:10,618 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:14:10,620 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:14:10,714 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:14:10,910 [main:43] - GENERATING CALL OF fun <T> requireNotNull(value: Byte, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 12:14:10,912 [main:61] - WITHOUT TYPE PARAMS = fun <T> requireNotNull(value: Byte, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 12:14:11,107 [main:302] - generating value of type = Byte true depth = 6
2021-03-11 12:14:11,108 [main:302] - generating value of type = Function0<Any> false depth = 6
2021-03-11 12:14:11,109 [main:302] - generating value of type = Any false depth = 7
2021-03-11 12:14:11,109 [main:95] - GENERATED = requireNotNull<Byte>(-118, { "qkocd"})
2021-03-11 12:14:11,109 [main:95] - GENERATED = arrayOf<T>(requireNotNull<Byte>(-118, { "qkocd"}))
2021-03-11 12:14:11,109 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOf<T>(requireNotNull<Byte>(-118, { "qkocd"}))
2021-03-11 12:14:11,110 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:11,309 [main:55] - randomType = Long?
2021-03-11 12:14:11,402 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:14:11,436 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:11,452 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:11,453 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:11,454 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:11,454 [main:63] - replacement of a of type Array<out T> is arrayOf<T>(requireNotNull<Byte>(-118, { "qkocd"}))
2021-03-11 12:14:11,548 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:11,548 [main:66] - Compilation checking started
2021-03-11 12:14:11,833 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(arrayOf<T>(requireNotNull<Byte>(-118, { "qkocd"}))::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:11,837 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:14:11,837 [main:38] - replacing a Array<out T>
2021-03-11 12:14:11,838 [main:42] - Getting value of type Array<out T>
2021-03-11 12:14:11,931 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:14:12,028 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:14:12,030 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:14:12,125 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:14:12,224 [main:43] - GENERATING CALL OF fun <T> minOf(a: UShort, b: UShort, c: UShort): T = TODO()
2021-03-11 12:14:12,226 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: UShort, b: UShort, c: UShort): T = TODO()
2021-03-11 12:14:12,320 [main:302] - generating value of type = UShort true depth = 6
2021-03-11 12:14:12,322 [main:302] - generating value of type = UShort true depth = 6
2021-03-11 12:14:12,323 [main:302] - generating value of type = UShort true depth = 6
2021-03-11 12:14:12,324 [main:95] - GENERATED = minOf<UShort>(4006.toUShort(), 24441.toUShort(), 97.toUShort())
2021-03-11 12:14:12,324 [main:95] - GENERATED = arrayOf<T>(minOf<UShort>(4006.toUShort(), 24441.toUShort(), 97.toUShort()))
2021-03-11 12:14:12,324 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOf<T>(minOf<UShort>(4006.toUShort(), 24441.toUShort(), 97.toUShort()))
2021-03-11 12:14:12,324 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:12,727 [main:55] - randomType = ArrayDeque<UByte?>?
2021-03-11 12:14:12,819 [main:302] - generating value of type = ArrayDeque<UByte?> false depth = 0
2021-03-11 12:14:12,916 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<UByte?>): ArrayDeque<UByte?> = TODO()
2021-03-11 12:14:12,917 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<UByte?>): ArrayDeque<UByte?> = TODO()
2021-03-11 12:14:13,114 [main:302] - generating value of type = Collection<UByte?> false depth = 3
2021-03-11 12:14:13,211 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(elements: UByte?): Collection<UByte?> = TODO()
2021-03-11 12:14:13,213 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(elements: UByte?): Collection<UByte?> = TODO()
2021-03-11 12:14:13,307 [main:302] - generating value of type = UByte true depth = 6
2021-03-11 12:14:13,308 [main:95] - GENERATED = listOfNotNull<UByte?>(122.toUByte())
2021-03-11 12:14:13,308 [main:95] - GENERATED = ArrayDeque<UByte?>(listOfNotNull<UByte?>(122.toUByte()))
2021-03-11 12:14:13,438 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:13,459 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:13,460 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:13,461 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:13,461 [main:63] - replacement of a of type Array<out T> is arrayOf<T>(minOf<UShort>(4006.toUShort(), 24441.toUShort(), 97.toUShort()))
2021-03-11 12:14:13,557 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:13,558 [main:66] - Compilation checking started
2021-03-11 12:14:13,823 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(arrayOf<T>(minOf<UShort>(4006.toUShort(), 24441.toUShort(), 97.toUShort()))::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:13,827 [main:56] - replacing (a::get, KFunction1<Int, T>)
2021-03-11 12:14:13,827 [main:38] - replacing a::get KFunction1<Int, T>
2021-03-11 12:14:13,827 [main:42] - Getting value of type KFunction1<Int, T>
2021-03-11 12:14:13,921 [main:302] - generating value of type = KFunction1<Int, T> false depth = 0
2021-03-11 12:14:14,013 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, T> = 
2021-03-11 12:14:14,113 [main:55] - randomType = ULong
2021-03-11 12:14:14,205 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:14:14,234 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:14,252 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:14,253 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:14,254 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:14,254 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, T>
2021-03-11 12:14:14,254 [main:56] - replacing (arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set, KFunction2<Int, T, Unit>)
2021-03-11 12:14:14,254 [main:38] - replacing arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set KFunction2<Int, T, Unit>
2021-03-11 12:14:14,254 [main:42] - Getting value of type KFunction2<Int, T, Unit>
2021-03-11 12:14:14,347 [main:302] - generating value of type = KFunction2<Int, T, Unit> false depth = 0
2021-03-11 12:14:14,441 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, T, Unit> = 
2021-03-11 12:14:14,541 [main:55] - randomType = ULong
2021-03-11 12:14:14,672 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:14:14,709 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:14,736 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:14,737 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:14,738 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:14,738 [main:60] - Cant find and generate replacement for arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set type KFunction2<Int, T, Unit>
2021-03-11 12:14:14,738 [main:56] - replacing (a::set, KFunction2<Int, Nothing, Unit>)
2021-03-11 12:14:14,738 [main:38] - replacing a::set KFunction2<Int, Nothing, Unit>
2021-03-11 12:14:14,738 [main:42] - Getting value of type KFunction2<Int, Nothing, Unit>
2021-03-11 12:14:14,830 [main:302] - generating value of type = KFunction2<Int, Nothing, Unit> false depth = 0
2021-03-11 12:14:14,923 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, Nothing, Unit> = 
2021-03-11 12:14:15,023 [main:55] - randomType = Byte
2021-03-11 12:14:15,117 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:14:15,151 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:14:15,168 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:14:15,169 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:14:15,171 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:14:15,171 [main:60] - Cant find and generate replacement for a::set type KFunction2<Int, Nothing, Unit>
2021-03-11 12:14:15,171 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:14:15,171 [main:38] - replacing a Array<out T>
2021-03-11 12:14:15,171 [main:42] - Getting value of type Array<out T>
2021-03-11 12:14:15,263 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:14:15,359 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:14:15,361 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:14:15,456 [main:95] - GENERATED = enumValues<T>()
2021-03-11 12:14:15,456 [main:46] - GENERATED VALUE OF TYPE Array<out T> = enumValues<T>()
2021-03-11 12:14:15,456 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:15,759 [main:55] - randomType = Set<HashSet<Byte>>
2021-03-11 12:14:15,760 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:15,778 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:15,779 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:15,780 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:15,780 [main:63] - replacement of a of type Array<out T> is enumValues<T>()
2021-03-11 12:14:15,872 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:15,872 [main:66] - Compilation checking started
2021-03-11 12:14:16,117 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(enumValues<T>()::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:16,122 [main:56] - replacing (arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set, KFunction2<Int, T, Unit>)
2021-03-11 12:14:16,122 [main:38] - replacing arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set KFunction2<Int, T, Unit>
2021-03-11 12:14:16,122 [main:42] - Getting value of type KFunction2<Int, T, Unit>
2021-03-11 12:14:16,214 [main:302] - generating value of type = KFunction2<Int, T, Unit> false depth = 0
2021-03-11 12:14:16,307 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, T, Unit> = 
2021-03-11 12:14:16,505 [main:55] - randomType = Short?
2021-03-11 12:14:16,598 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:14:16,642 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:16,660 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:16,661 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:16,662 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:16,662 [main:60] - Cant find and generate replacement for arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set type KFunction2<Int, T, Unit>
2021-03-11 12:14:16,662 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:14:16,662 [main:38] - replacing a Array<out T>
2021-03-11 12:14:16,662 [main:42] - Getting value of type Array<out T>
2021-03-11 12:14:16,754 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:14:16,850 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:14:16,852 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:14:16,946 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:14:17,144 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Array<UInt>, b: Array<UInt>, comparator: kotlin.Comparator<Array<UInt>>): T = TODO()
2021-03-11 12:14:17,145 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Array<UInt>, b: Array<UInt>, comparator: kotlin.Comparator<Array<UInt>>): T = TODO()
2021-03-11 12:14:17,342 [main:302] - generating value of type = Array<UInt> false depth = 6
2021-03-11 12:14:17,482 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<UInt> = TODO()
2021-03-11 12:14:17,484 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<UInt> = TODO()
2021-03-11 12:14:17,578 [main:95] - GENERATED = enumValues<UInt>()
2021-03-11 12:14:17,579 [main:302] - generating value of type = Array<UInt> false depth = 6
2021-03-11 12:14:17,676 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: UInt): Array<UInt> = TODO()
2021-03-11 12:14:17,677 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: UInt): Array<UInt> = TODO()
2021-03-11 12:14:17,774 [main:302] - generating value of type = UInt true depth = 9
2021-03-11 12:14:17,775 [main:95] - GENERATED = arrayOf<UInt>(1367793148.toUInt())
2021-03-11 12:14:17,775 [main:302] - generating value of type = Comparator<Array<UInt>> false depth = 6
2021-03-11 12:14:18,285 [main:43] - GENERATING CALL OF fun <T, K> compareByDescending(comparator: kotlin.Comparator<LinkedHashMap<Short?, Float>?>, selector: (Array<UInt>)->LinkedHashMap<Short?, Float>?): Comparator<Array<UInt>> = TODO()
2021-03-11 12:14:18,287 [main:61] - WITHOUT TYPE PARAMS = fun <T, K> compareByDescending(comparator: kotlin.Comparator<LinkedHashMap<Short?, Float>?>, selector: (Array<UInt>)->LinkedHashMap<Short?, Float>?): Comparator<Array<UInt>> = TODO()
2021-03-11 12:14:18,585 [main:302] - generating value of type = Comparator<LinkedHashMap<Short?, Float>?> false depth = 9
2021-03-11 12:14:18,682 [main:43] - GENERATING CALL OF fun <T> nullsLast(comparator: kotlin.Comparator<LinkedHashMap<Short?, Float>?>): Comparator<LkedHashMap<Short?, Float>?> = TODO()
2021-03-11 12:14:18,684 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsLast(comparator: kotlin.Comparator<LinkedHashMap<Short?, Float>?>): Comparator<LkedHashMap<Short?, Float>?> = TODO()
2021-03-11 12:14:18,879 [main:302] - generating value of type = Comparator<LinkedHashMap<Short?, Float>?> false depth = 12
2021-03-11 12:14:18,976 [main:43] - GENERATING CALL OF fun <T> naturalOrder(): Comparator<LkedHashMap<Short?, Float>?> = TODO()
2021-03-11 12:14:18,977 [main:61] - WITHOUT TYPE PARAMS = fun <T> naturalOrder(): Comparator<LkedHashMap<Short?, Float>?> = TODO()
2021-03-11 12:14:19,072 [main:95] - GENERATED = naturalOrder<LinkedHashMap<Short?, Float>?>()
2021-03-11 12:14:19,072 [main:95] - GENERATED = nullsLast<LinkedHashMap<Short?, Float>?>(naturalOrder<LinkedHashMap<Short?, Float>?>())
2021-03-11 12:14:19,072 [main:302] - generating value of type = Function1<Array<UInt>, LinkedHashMap<Short?, Float>?> false depth = 9
2021-03-11 12:14:19,073 [main:302] - generating value of type = LinkedHashMap<Short?, Float> false depth = 10
2021-03-11 12:14:19,169 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Short?, Float> = TODO()
2021-03-11 12:14:19,171 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Short?, Float> = TODO()
2021-03-11 12:14:19,265 [main:95] - GENERATED = linkedMapOf<Short?, Float>()
2021-03-11 12:14:19,266 [main:95] - GENERATED = compareByDescending<Array<UInt>, LinkedHashMap<Short?, Float>?>(nullsLast<LinkedHashMap<Short?, Float>?>(naturalOrder<LinkedHashMap<Short?, Float>?>()), {a: Array<UInt> -> linkedMapOf<Short?, Float>()})
2021-03-11 12:14:19,266 [main:95] - GENERATED = maxOf<Array<UInt>>(enumValues<UInt>(), arrayOf<UInt>(1367793148.toUInt()), compareByDescending<Array<UInt>, LinkedHashMap<Short?, Float>?>(nullsLast<LinkedHashMap<Short?, Float>?>(naturalOrder<LinkedHashMap<Short?, Float>?>()), {a: Array<UInt> -> linkedMapOf<Short?, Float>()}))
2021-03-11 12:14:19,266 [main:95] - GENERATED = arrayOf<T>(maxOf<Array<UInt>>(enumValues<UInt>(), arrayOf<UInt>(1367793148.toUInt()), compareByDescending<Array<UInt>, LinkedHashMap<Short?, Float>?>(nullsLast<LinkedHashMap<Short?, Float>?>(naturalOrder<LinkedHashMap<Short?, Float>?>()), {a: Array<UInt> -> linkedMapOf<Short?, Float>()})))
2021-03-11 12:14:19,266 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOf<T>(maxOf<Array<UInt>>(enumValues<UInt>(), arrayOf<UInt>(1367793148.toUInt()), compareByDescending<Array<UInt>, LinkedHashMap<Short?, Float>?>(nullsLast<LinkedHashMap<Short?, Float>?>(naturalOrder<LinkedHashMap<Short?, Float>?>()), {a: Array<UInt> -> linkedMapOf<Short?, Float>()})))
2021-03-11 12:14:19,267 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:20,194 [main:55] - randomType = Set<Function2<UShort, MutableMap<Int, Byte?>?, Long>>?
2021-03-11 12:14:20,196 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:20,218 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:20,219 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:20,220 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:20,220 [main:63] - replacement of a of type Array<out T> is arrayOf<T>(maxOf<Array<UInt>>(enumValues<UInt>(), arrayOf<UInt>(1367793148.toUInt()), compareByDescending<Array<UInt>, LinkedHashMap<Short?, Float>?>(nullsLast<LinkedHashMap<Short?, Float>?>(naturalOrder<LinkedHashMap<Short?, Float>?>()), {a: Array<UInt> -> linkedMapOf<Short?, Float>()})))
2021-03-11 12:14:20,351 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:20,351 [main:66] - Compilation checking started
2021-03-11 12:14:20,631 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(arrayOf<T>(maxOf<Array<UInt>>(enumValues<UInt>(), arrayOf<UInt>(1367793148.toUInt()), compareByDescending<Array<UInt>, LinkedHashMap<Short?, Float>?>(nullsLast<LinkedHashMap<Short?, Float>?>(naturalOrder<LinkedHashMap<Short?, Float>?>()), {a: Array<UInt> -> linkedMapOf<Short?, Float>()})))::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:20,636 [main:56] - replacing (arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set, KFunction2<Int, T, Unit>)
2021-03-11 12:14:20,636 [main:38] - replacing arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set KFunction2<Int, T, Unit>
2021-03-11 12:14:20,636 [main:42] - Getting value of type KFunction2<Int, T, Unit>
2021-03-11 12:14:20,730 [main:302] - generating value of type = KFunction2<Int, T, Unit> false depth = 0
2021-03-11 12:14:20,823 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, T, Unit> = 
2021-03-11 12:14:20,929 [main:55] - randomType = ArrayDeque<String>
2021-03-11 12:14:21,022 [main:302] - generating value of type = ArrayDeque<String> false depth = 0
2021-03-11 12:14:21,119 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<String> = TODO()
2021-03-11 12:14:21,120 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<String> = TODO()
2021-03-11 12:14:21,316 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:14:21,317 [main:95] - GENERATED = ArrayDeque<String>(-1684742219)
2021-03-11 12:14:21,452 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:21,469 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:21,471 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:21,472 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:21,472 [main:60] - Cant find and generate replacement for arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set type KFunction2<Int, T, Unit>
2021-03-11 12:14:21,472 [main:56] - replacing (a::set, KFunction2<Int, Nothing, Unit>)
2021-03-11 12:14:21,472 [main:38] - replacing a::set KFunction2<Int, Nothing, Unit>
2021-03-11 12:14:21,472 [main:42] - Getting value of type KFunction2<Int, Nothing, Unit>
2021-03-11 12:14:21,563 [main:302] - generating value of type = KFunction2<Int, Nothing, Unit> false depth = 0
2021-03-11 12:14:21,656 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, Nothing, Unit> = 
2021-03-11 12:14:21,853 [main:55] - randomType = ULong?
2021-03-11 12:14:21,945 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:14:21,975 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:14:21,992 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:14:21,994 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:14:21,995 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:14:21,995 [main:60] - Cant find and generate replacement for a::set type KFunction2<Int, Nothing, Unit>
2021-03-11 12:14:21,995 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:14:21,995 [main:38] - replacing a Array<out T>
2021-03-11 12:14:21,995 [main:42] - Getting value of type Array<out T>
2021-03-11 12:14:22,087 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:14:22,183 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:14:22,185 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:14:22,279 [main:95] - GENERATED = enumValues<T>()
2021-03-11 12:14:22,279 [main:46] - GENERATED VALUE OF TYPE Array<out T> = enumValues<T>()
2021-03-11 12:14:22,279 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:22,786 [main:55] - randomType = Triple<Char, Double?, Byte>?
2021-03-11 12:14:22,879 [main:302] - generating value of type = Triple<Char, Double?, Byte> false depth = 0
2021-03-11 12:14:22,977 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Char, second: Double?, third: Byte): Triple<Char, Double?, Byte> = TODO()
2021-03-11 12:14:22,979 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Char, second: Double?, third: Byte): Triple<Char, Double?, Byte> = TODO()
2021-03-11 12:14:23,074 [main:302] - generating value of type = Char true depth = 3
2021-03-11 12:14:23,075 [main:302] - generating value of type = Double true depth = 3
2021-03-11 12:14:23,076 [main:302] - generating value of type = Byte true depth = 3
2021-03-11 12:14:23,077 [main:95] - GENERATED = Triple<Char, Double?, Byte>('ឋ', 0.2382415997313042, 9)
2021-03-11 12:14:23,095 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:23,116 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:23,117 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:23,118 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:23,118 [main:63] - replacement of a of type Array<out T> is enumValues<T>()
2021-03-11 12:14:23,213 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:23,213 [main:66] - Compilation checking started
2021-03-11 12:14:23,489 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(enumValues<T>()::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:23,494 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:14:23,494 [main:38] - replacing a Array<out T>
2021-03-11 12:14:23,494 [main:42] - Getting value of type Array<out T>
2021-03-11 12:14:23,590 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:14:23,689 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:14:23,691 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:14:23,786 [main:95] - GENERATED = emptyArray<T>()
2021-03-11 12:14:23,786 [main:46] - GENERATED VALUE OF TYPE Array<out T> = emptyArray<T>()
2021-03-11 12:14:23,786 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:23,788 [main:55] - randomType = String
2021-03-11 12:14:23,881 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:23,900 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:23,921 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:23,922 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:23,923 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:23,923 [main:63] - replacement of a of type Array<out T> is emptyArray<T>()
2021-03-11 12:14:24,018 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:24,018 [main:66] - Compilation checking started
2021-03-11 12:14:24,261 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(emptyArray<T>()::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:24,266 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:14:24,266 [main:38] - replacing a Array<out T>
2021-03-11 12:14:24,266 [main:42] - Getting value of type Array<out T>
2021-03-11 12:14:24,364 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:14:24,464 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-11 12:14:24,466 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-11 12:14:24,660 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:14:24,661 [main:95] - GENERATED = arrayOfNulls<T>(-1909851022)
2021-03-11 12:14:24,661 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOfNulls<T>(-1909851022)
2021-03-11 12:14:24,661 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:24,861 [main:55] - randomType = LinkedHashSet<UShort>
2021-03-11 12:14:24,953 [main:302] - generating value of type = LinkedHashSet<UShort> false depth = 0
2021-03-11 12:14:25,049 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: UShort): LkedHashSet<UShort> = TODO()
2021-03-11 12:14:25,051 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: UShort): LkedHashSet<UShort> = TODO()
2021-03-11 12:14:25,145 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 12:14:25,146 [main:95] - GENERATED = linkedSetOf<UShort>(5490.toUShort())
2021-03-11 12:14:25,268 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:25,285 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:25,286 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:25,287 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:25,287 [main:63] - replacement of a of type Array<out T> is arrayOfNulls<T>(-1909851022)
2021-03-11 12:14:25,378 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:25,378 [main:66] - Compilation checking started
2021-03-11 12:14:25,620 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(arrayOfNulls<T>(-1909851022)::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:25,624 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:14:25,624 [main:38] - replacing a Array<out T>
2021-03-11 12:14:25,624 [main:42] - Getting value of type Array<out T>
2021-03-11 12:14:25,719 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:14:25,817 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:14:25,819 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:14:25,912 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:14:26,009 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Comparable<T>, b: Comparable<T>, c: Comparable<T>): T = TODO()
2021-03-11 12:14:26,011 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Comparable<T>, b: Comparable<T>, c: Comparable<T>): T = TODO()
2021-03-11 12:14:26,107 [main:302] - generating value of type = Comparable<T> false depth = 6
2021-03-11 12:14:26,203 [main:43] - GENERATING CALL OF fun KotlinVersion(major: kotlin.Int, minor: kotlin.Int, patch: kotlin.Int): Comparable<T> = TODO()
2021-03-11 12:14:26,205 [main:61] - WITHOUT TYPE PARAMS = fun KotlinVersion(major: kotlin.Int, minor: kotlin.Int, patch: kotlin.Int): Comparable<T> = TODO()
2021-03-11 12:14:26,640 [main:302] - generating value of type = Int true depth = 9
2021-03-11 12:14:26,641 [main:302] - generating value of type = Int true depth = 9
2021-03-11 12:14:26,642 [main:302] - generating value of type = Int true depth = 9
2021-03-11 12:14:26,643 [main:95] - GENERATED = KotlinVersion(-1160539291, -929966608, 1831027293)
2021-03-11 12:14:26,644 [main:302] - generating value of type = Comparable<T> false depth = 6
2021-03-11 12:14:26,648 [main:302] - generating value of type = Comparable<T> false depth = 6
2021-03-11 12:14:26,653 [main:95] - GENERATED = maxOf<Comparable<T>>(KotlinVersion(-1160539291, -929966608, 1831027293), 7257936226786851394.toULong(), true)
2021-03-11 12:14:26,653 [main:95] - GENERATED = arrayOf<T>(maxOf<Comparable<T>>(KotlinVersion(-1160539291, -929966608, 1831027293), 7257936226786851394.toULong(), true))
2021-03-11 12:14:26,653 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOf<T>(maxOf<Comparable<T>>(KotlinVersion(-1160539291, -929966608, 1831027293), 7257936226786851394.toULong(), true))
2021-03-11 12:14:26,654 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:26,656 [main:55] - randomType = String
2021-03-11 12:14:26,749 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:26,771 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:26,789 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:26,790 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:26,791 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:26,791 [main:63] - replacement of a of type Array<out T> is arrayOf<T>(maxOf<Comparable<T>>(KotlinVersion(-1160539291, -929966608, 1831027293), 7257936226786851394.toULong(), true))
2021-03-11 12:14:26,884 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:26,884 [main:66] - Compilation checking started
2021-03-11 12:14:27,182 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(arrayOf<T>(maxOf<Comparable<T>>(KotlinVersion(-1160539291, -929966608, 1831027293), 7257936226786851394.toULong(), true))::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:27,187 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:14:27,187 [main:38] - replacing a Array<out T>
2021-03-11 12:14:27,187 [main:42] - Getting value of type Array<out T>
2021-03-11 12:14:27,284 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:14:27,384 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:14:27,386 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:14:27,481 [main:95] - GENERATED = emptyArray<T>()
2021-03-11 12:14:27,481 [main:46] - GENERATED VALUE OF TYPE Array<out T> = emptyArray<T>()
2021-03-11 12:14:27,481 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:27,483 [main:55] - randomType = Char
2021-03-11 12:14:27,576 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:14:27,595 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:27,613 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:27,614 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:27,614 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:27,615 [main:63] - replacement of a of type Array<out T> is emptyArray<T>()
2021-03-11 12:14:27,706 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:27,706 [main:66] - Compilation checking started
2021-03-11 12:14:27,964 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(emptyArray<T>()::get)
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:27,968 [main:56] - replacing (test(a::get), String)
2021-03-11 12:14:27,968 [main:38] - replacing test(a::get) String
2021-03-11 12:14:27,968 [main:42] - Getting value of type String
2021-03-11 12:14:28,063 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:28,064 [main:46] - GENERATED VALUE OF TYPE String = "eiqvt"
2021-03-11 12:14:28,064 [main:49] - GENERATED IS CALL =false
2021-03-11 12:14:28,263 [main:55] - randomType = ULong?
2021-03-11 12:14:28,356 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:14:28,388 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@294a5590]
2021-03-11 12:14:28,388 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bd78bd6]
2021-03-11 12:14:28,482 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:14:28,483 [main:66] - Generated call from random type = (324220896928515185.toULong())?.toUInt().toString(-325114965)
2021-03-11 12:14:28,483 [main:94] - GETTING String from String
2021-03-11 12:14:28,500 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f03e0c3]]
2021-03-11 12:14:28,500 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f03e0c3]
2021-03-11 12:14:28,501 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).trimEnd()
2021-03-11 12:14:28,501 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]]
2021-03-11 12:14:28,501 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:14:28,594 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:14:28,686 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:14:28,688 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]
2021-03-11 12:14:28,780 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:14:28,875 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:14:28,876 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).subSequence(-1707276549, -451168820).commonSuffixWith("qhuxa", true)
2021-03-11 12:14:28,877 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f7d80a8]]
2021-03-11 12:14:28,877 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f7d80a8]
2021-03-11 12:14:28,970 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:14:28,971 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:14:28,972 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).dropWhile({a: Char -> true})
2021-03-11 12:14:28,972 [main:101] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@720e46c5]]
2021-03-11 12:14:28,972 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@720e46c5]
2021-03-11 12:14:29,065 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:29,158 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:29,159 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("qkxpj", "qozgh")
2021-03-11 12:14:29,160 [main:101] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17845e8c]]
2021-03-11 12:14:29,160 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17845e8c]
2021-03-11 12:14:29,160 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).decapitalize()
2021-03-11 12:14:29,160 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2136d]]
2021-03-11 12:14:29,160 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2136d]
2021-03-11 12:14:29,160 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).lowercase()
2021-03-11 12:14:29,160 [main:101] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@287af9e3]]
2021-03-11 12:14:29,160 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@287af9e3]
2021-03-11 12:14:29,252 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:14:29,344 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:29,346 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).substringAfter('ଌ', "wenhy")
2021-03-11 12:14:29,346 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]]
2021-03-11 12:14:29,346 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:14:29,437 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:14:29,439 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]
2021-03-11 12:14:29,439 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).get(1455934979).titlecase()
2021-03-11 12:14:29,439 [main:101] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32174727]]
2021-03-11 12:14:29,439 [main:137] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32174727]
2021-03-11 12:14:29,531 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:14:29,532 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).drop(1092134716)
2021-03-11 12:14:29,532 [main:101] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3ed116f9]]
2021-03-11 12:14:29,532 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3ed116f9]
2021-03-11 12:14:29,663 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:14:29,663 [main:105] - GENERATED CALL = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).plus("ukarf")
2021-03-11 12:14:29,664 [main:63] - replacement of test(a::get) of type String is "eiqvt"
2021-03-11 12:14:29,756 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:14:29,756 [main:66] - Compilation checking started
2021-03-11 12:14:30,123 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:30,128 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:14:30,128 [main:38] - replacing a Array<out T>
2021-03-11 12:14:30,128 [main:42] - Getting value of type Array<out T>
2021-03-11 12:14:30,221 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:14:30,325 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:14:30,327 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:14:30,420 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:14:30,617 [main:43] - GENERATING CALL OF fun <T> maxOf(a: UShort, b: UShort, comparator: kotlin.Comparator<UShort>): T = TODO()
2021-03-11 12:14:30,619 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: UShort, b: UShort, comparator: kotlin.Comparator<UShort>): T = TODO()
2021-03-11 12:14:30,815 [main:302] - generating value of type = UShort true depth = 6
2021-03-11 12:14:30,816 [main:302] - generating value of type = UShort true depth = 6
2021-03-11 12:14:30,817 [main:302] - generating value of type = Comparator<UShort> false depth = 6
2021-03-11 12:14:30,915 [main:43] - GENERATING CALL OF fun <T> compareByDescending(selector: (UShort)->kotlin.Comparable<*>?): Comparator<UShort> = TODO()
2021-03-11 12:14:30,917 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareByDescending(selector: (UShort)->kotlin.Comparable<*>?): Comparator<UShort> = TODO()
2021-03-11 12:14:31,115 [main:302] - generating value of type = Function1<UShort, Comparable<*>?> false depth = 9
2021-03-11 12:14:31,116 [main:302] - generating value of type = Comparable<*> false depth = 10
2021-03-11 12:14:31,120 [main:95] - GENERATED = compareByDescending<UShort>({a: UShort -> "fzvgn"})
2021-03-11 12:14:31,121 [main:95] - GENERATED = maxOf<UShort>(27181.toUShort(), 20405.toUShort(), compareByDescending<UShort>({a: UShort -> "fzvgn"}))
2021-03-11 12:14:31,121 [main:95] - GENERATED = arrayOf<T>(maxOf<UShort>(27181.toUShort(), 20405.toUShort(), compareByDescending<UShort>({a: UShort -> "fzvgn"})))
2021-03-11 12:14:31,121 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOf<T>(maxOf<UShort>(27181.toUShort(), 20405.toUShort(), compareByDescending<UShort>({a: UShort -> "fzvgn"})))
2021-03-11 12:14:31,121 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:31,222 [main:55] - randomType = Double
2021-03-11 12:14:31,314 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:14:31,345 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:31,362 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:31,363 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:31,364 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:31,364 [main:63] - replacement of a of type Array<out T> is arrayOf<T>(maxOf<UShort>(27181.toUShort(), 20405.toUShort(), compareByDescending<UShort>({a: UShort -> "fzvgn"})))
2021-03-11 12:14:31,456 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:31,461 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:14:31,461 [main:38] - replacing a Array<out T>
2021-03-11 12:14:31,461 [main:42] - Getting value of type Array<out T>
2021-03-11 12:14:31,554 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:14:31,656 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-11 12:14:31,658 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-11 12:14:31,857 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:14:31,858 [main:95] - GENERATED = arrayOfNulls<T>(669888389)
2021-03-11 12:14:31,858 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOfNulls<T>(669888389)
2021-03-11 12:14:31,858 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:31,962 [main:55] - randomType = LinkedHashSet<String>
2021-03-11 12:14:32,054 [main:302] - generating value of type = LinkedHashSet<String> false depth = 0
2021-03-11 12:14:32,150 [main:43] - GENERATING CALL OF fun linkedStringSetOf(elements: String): LkedHashSet<Strg> = TODO()
2021-03-11 12:14:32,152 [main:61] - WITHOUT TYPE PARAMS = fun linkedStringSetOf(elements: String): LkedHashSet<Strg> = TODO()
2021-03-11 12:14:32,248 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:14:32,249 [main:95] - GENERATED = linkedStringSetOf("tasfs")
2021-03-11 12:14:32,373 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:32,390 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:32,391 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:32,392 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:32,392 [main:63] - replacement of a of type Array<out T> is arrayOfNulls<T>(669888389)
2021-03-11 12:14:32,484 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:32,485 [main:66] - Compilation checking started
2021-03-11 12:14:32,721 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(arrayOfNulls<T>(669888389)::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:32,726 [main:56] - replacing (a::get, KFunction1<Int, Any?>)
2021-03-11 12:14:32,726 [main:38] - replacing a::get KFunction1<Int, Any?>
2021-03-11 12:14:32,726 [main:42] - Getting value of type KFunction1<Int, Any?>
2021-03-11 12:14:32,818 [main:302] - generating value of type = KFunction1<Int, Any?> false depth = 0
2021-03-11 12:14:32,949 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, Any?> = 
2021-03-11 12:14:32,951 [main:55] - randomType = String
2021-03-11 12:14:33,045 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:33,075 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:33,094 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:33,095 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:33,096 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:33,096 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, Any?>
2021-03-11 12:14:33,096 [main:56] - replacing (a, Array<in T>)
2021-03-11 12:14:33,096 [main:38] - replacing a Array<in T>
2021-03-11 12:14:33,096 [main:42] - Getting value of type Array<in T>
2021-03-11 12:14:33,189 [main:302] - generating value of type = Array<in T> false depth = 0
2021-03-11 12:14:33,286 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:14:33,289 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:14:33,384 [main:95] - GENERATED = emptyArray<T>()
2021-03-11 12:14:33,385 [main:46] - GENERATED VALUE OF TYPE Array<in T> = emptyArray<T>()
2021-03-11 12:14:33,385 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:33,388 [main:55] - randomType = String
2021-03-11 12:14:33,481 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:33,509 [main:94] - GETTING Array<in T> from String
2021-03-11 12:14:33,529 [main:94] - GETTING Array<in T> from String
2021-03-11 12:14:33,530 [main:94] - GETTING Array<in T> from String
2021-03-11 12:14:33,531 [main:94] - GETTING Array<in T> from String
2021-03-11 12:14:33,531 [main:63] - replacement of a of type Array<in T> is emptyArray<T>()
2021-03-11 12:14:33,623 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:33,623 [main:66] - Compilation checking started
2021-03-11 12:14:33,860 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(emptyArray<T>()::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:33,865 [main:56] - replacing (a::get, KFunction1<Int, T>)
2021-03-11 12:14:33,865 [main:38] - replacing a::get KFunction1<Int, T>
2021-03-11 12:14:33,865 [main:42] - Getting value of type KFunction1<Int, T>
2021-03-11 12:14:33,958 [main:302] - generating value of type = KFunction1<Int, T> false depth = 0
2021-03-11 12:14:34,051 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, T> = 
2021-03-11 12:14:34,150 [main:55] - randomType = Long
2021-03-11 12:14:34,241 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:14:34,272 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:34,289 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:34,290 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:34,291 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:34,292 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, T>
2021-03-11 12:14:34,292 [main:56] - replacing (a, Array<in T>)
2021-03-11 12:14:34,292 [main:38] - replacing a Array<in T>
2021-03-11 12:14:34,292 [main:42] - Getting value of type Array<in T>
2021-03-11 12:14:34,383 [main:302] - generating value of type = Array<in T> false depth = 0
2021-03-11 12:14:34,479 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:14:34,481 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:14:34,582 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:14:34,775 [main:43] - GENERATING CALL OF fun <T> minOf(a: UByte, b: UByte, c: UByte, comparator: kotlin.Comparator<UByte>): T = TODO()
2021-03-11 12:14:34,777 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: UByte, b: UByte, c: UByte, comparator: kotlin.Comparator<UByte>): T = TODO()
2021-03-11 12:14:34,971 [main:302] - generating value of type = UByte true depth = 6
2021-03-11 12:14:34,972 [main:302] - generating value of type = UByte true depth = 6
2021-03-11 12:14:34,973 [main:302] - generating value of type = UByte true depth = 6
2021-03-11 12:14:34,974 [main:302] - generating value of type = Comparator<UByte> false depth = 6
2021-03-11 12:14:35,073 [main:43] - GENERATING CALL OF fun <T, K> compareByDescending(comparator: kotlin.Comparator<Float>, selector: (UByte)->Float): Comparator<UByte> = TODO()
2021-03-11 12:14:35,074 [main:61] - WITHOUT TYPE PARAMS = fun <T, K> compareByDescending(comparator: kotlin.Comparator<Float>, selector: (UByte)->Float): Comparator<UByte> = TODO()
2021-03-11 12:14:35,368 [main:302] - generating value of type = Comparator<Float> false depth = 9
2021-03-11 12:14:35,464 [main:43] - GENERATING CALL OF fun <T> compareBy(selector: (Float)->kotlin.Comparable<*>?): Comparator<Float> = TODO()
2021-03-11 12:14:35,465 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selector: (Float)->kotlin.Comparable<*>?): Comparator<Float> = TODO()
2021-03-11 12:14:35,660 [main:302] - generating value of type = Function1<Float, Comparable<*>?> false depth = 12
2021-03-11 12:14:35,661 [main:302] - generating value of type = Comparable<*> false depth = 13
2021-03-11 12:14:35,666 [main:95] - GENERATED = compareBy<Float>({a: Float -> 74})
2021-03-11 12:14:35,666 [main:302] - generating value of type = Function1<UByte, Float> false depth = 9
2021-03-11 12:14:35,667 [main:302] - generating value of type = Float true depth = 10
2021-03-11 12:14:35,668 [main:95] - GENERATED = compareByDescending<UByte, Float>(compareBy<Float>({a: Float -> 74}), {a: UByte -> 0.088371634f})
2021-03-11 12:14:35,668 [main:95] - GENERATED = minOf<UByte>(30.toUByte(), 8.toUByte(), 85.toUByte(), compareByDescending<UByte, Float>(compareBy<Float>({a: Float -> 74}), {a: UByte -> 0.088371634f}))
2021-03-11 12:14:35,668 [main:95] - GENERATED = arrayOf<T>(minOf<UByte>(30.toUByte(), 8.toUByte(), 85.toUByte(), compareByDescending<UByte, Float>(compareBy<Float>({a: Float -> 74}), {a: UByte -> 0.088371634f})))
2021-03-11 12:14:35,668 [main:46] - GENERATED VALUE OF TYPE Array<in T> = arrayOf<T>(minOf<UByte>(30.toUByte(), 8.toUByte(), 85.toUByte(), compareByDescending<UByte, Float>(compareBy<Float>({a: Float -> 74}), {a: UByte -> 0.088371634f})))
2021-03-11 12:14:35,669 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:35,773 [main:55] - randomType = Set<Boolean>
2021-03-11 12:14:35,774 [main:94] - GETTING Array<in T> from String
2021-03-11 12:14:35,792 [main:94] - GETTING Array<in T> from String
2021-03-11 12:14:35,793 [main:94] - GETTING Array<in T> from String
2021-03-11 12:14:35,794 [main:94] - GETTING Array<in T> from String
2021-03-11 12:14:35,794 [main:63] - replacement of a of type Array<in T> is arrayOf<T>(minOf<UByte>(30.toUByte(), 8.toUByte(), 85.toUByte(), compareByDescending<UByte, Float>(compareBy<Float>({a: Float -> 74}), {a: UByte -> 0.088371634f})))
2021-03-11 12:14:35,889 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:35,889 [main:66] - Compilation checking started
2021-03-11 12:14:36,193 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(arrayOf<T>(minOf<UByte>(30.toUByte(), 8.toUByte(), 85.toUByte(), compareByDescending<UByte, Float>(compareBy<Float>({a: Float -> 74}), {a: UByte -> 0.088371634f})))::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:36,198 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:14:36,198 [main:38] - replacing a Array<out T>
2021-03-11 12:14:36,198 [main:42] - Getting value of type Array<out T>
2021-03-11 12:14:36,291 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:14:36,387 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:14:36,389 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:14:36,484 [main:95] - GENERATED = enumValues<T>()
2021-03-11 12:14:36,484 [main:46] - GENERATED VALUE OF TYPE Array<out T> = enumValues<T>()
2021-03-11 12:14:36,484 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:36,589 [main:55] - randomType = HashSet<String>
2021-03-11 12:14:36,682 [main:302] - generating value of type = HashSet<String> false depth = 0
2021-03-11 12:14:36,778 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<Strg> = TODO()
2021-03-11 12:14:36,779 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<Strg> = TODO()
2021-03-11 12:14:36,874 [main:95] - GENERATED = hashSetOf<String>()
2021-03-11 12:14:36,980 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:36,997 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:36,998 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:36,999 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:36,999 [main:63] - replacement of a of type Array<out T> is enumValues<T>()
2021-03-11 12:14:37,092 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:37,092 [main:66] - Compilation checking started
2021-03-11 12:14:37,324 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(enumValues<T>()::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:37,329 [main:56] - replacing (test(a::set), String)
2021-03-11 12:14:37,329 [main:38] - replacing test(a::set) String
2021-03-11 12:14:37,329 [main:42] - Getting value of type String
2021-03-11 12:14:37,422 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:37,423 [main:46] - GENERATED VALUE OF TYPE String = "fwbed"
2021-03-11 12:14:37,423 [main:49] - GENERATED IS CALL =false
2021-03-11 12:14:37,733 [main:55] - randomType = HashMap<ULong, UInt>
2021-03-11 12:14:37,825 [main:302] - generating value of type = HashMap<ULong, UInt> false depth = 0
2021-03-11 12:14:37,921 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<ULong, UInt> = TODO()
2021-03-11 12:14:37,923 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<ULong, UInt> = TODO()
2021-03-11 12:14:38,018 [main:95] - GENERATED = linkedMapOf<ULong, UInt>()
2021-03-11 12:14:38,120 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:14:38,212 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:14:38,213 [main:66] - Generated call from random type = (linkedMapOf<ULong, UInt>()).size.toString(1317525151)
2021-03-11 12:14:38,213 [main:94] - GETTING String from String
2021-03-11 12:14:38,230 [main:101] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cff2b98]]
2021-03-11 12:14:38,230 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cff2b98]
2021-03-11 12:14:38,322 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:14:38,414 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:38,507 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:38,509 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).replaceAfterLast('뛗', "fdaui", "xehcm")
2021-03-11 12:14:38,509 [main:101] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]]
2021-03-11 12:14:38,509 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]
2021-03-11 12:14:38,601 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:14:38,696 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:14:38,698 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).commonPrefixWith("ffqjm", true)
2021-03-11 12:14:38,698 [main:101] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a03b602]]
2021-03-11 12:14:38,698 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a03b602]
2021-03-11 12:14:38,790 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:14:38,884 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:38,982 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:38,984 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).replaceAfter('鷃', "fvddg", "ougjs")
2021-03-11 12:14:38,984 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ce8ce0]]
2021-03-11 12:14:38,984 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ce8ce0]
2021-03-11 12:14:39,078 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:14:39,175 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:14:39,177 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).padEnd(1314693517, '孓')
2021-03-11 12:14:39,177 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]]
2021-03-11 12:14:39,177 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]
2021-03-11 12:14:39,269 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:14:39,406 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:14:39,408 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:14:39,601 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:14:39,605 [main:95] - GENERATED = StringBuilder("esgqi")
2021-03-11 12:14:39,605 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).removePrefix(StringBuilder("esgqi"))
2021-03-11 12:14:39,605 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]]
2021-03-11 12:14:39,605 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]
2021-03-11 12:14:39,697 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:39,699 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).concat("ljjvj")
2021-03-11 12:14:39,699 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]]
2021-03-11 12:14:39,699 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:14:39,795 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:14:39,796 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]
2021-03-11 12:14:39,796 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).get(1994611010).titlecase()
2021-03-11 12:14:39,796 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]]
2021-03-11 12:14:39,796 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]
2021-03-11 12:14:39,889 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:14:39,893 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).removeSuffix("uqfxh")
2021-03-11 12:14:39,893 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]]
2021-03-11 12:14:39,893 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:14:39,985 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:14:39,987 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).length.toString(-998293553)
2021-03-11 12:14:39,987 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f7d80a8]]
2021-03-11 12:14:39,987 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f7d80a8]
2021-03-11 12:14:40,079 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:14:40,080 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:14:40,081 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).dropWhile({a: Char -> true})
2021-03-11 12:14:40,081 [main:63] - replacement of test(a::set) of type String is (bar0<Float>(0.48623055f)).length.toString(-998293553)
2021-03-11 12:14:40,173 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:14:40,173 [main:66] - Compilation checking started
2021-03-11 12:14:40,547 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:40,552 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:14:40,552 [main:38] - replacing a Array<out T>
2021-03-11 12:14:40,552 [main:42] - Getting value of type Array<out T>
2021-03-11 12:14:40,653 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:14:40,755 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:14:40,757 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<T> = TODO()
2021-03-11 12:14:40,867 [main:95] - GENERATED = enumValues<T>()
2021-03-11 12:14:40,867 [main:46] - GENERATED VALUE OF TYPE Array<out T> = enumValues<T>()
2021-03-11 12:14:40,867 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:41,498 [main:55] - randomType = MutableMap<Function1<Long, Int>, HashSet<Short?>>
2021-03-11 12:14:41,499 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:41,517 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:41,518 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:41,519 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:41,519 [main:63] - replacement of a of type Array<out T> is enumValues<T>()
2021-03-11 12:14:41,613 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:41,613 [main:66] - Compilation checking started
2021-03-11 12:14:41,853 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = test(enumValues<T>()::get)
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:41,857 [main:56] - replacing (test(a::get), String)
2021-03-11 12:14:41,857 [main:38] - replacing test(a::get) String
2021-03-11 12:14:41,857 [main:42] - Getting value of type String
2021-03-11 12:14:41,951 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:41,952 [main:46] - GENERATED VALUE OF TYPE String = "ytmss"
2021-03-11 12:14:41,953 [main:49] - GENERATED IS CALL =false
2021-03-11 12:14:42,057 [main:55] - randomType = String?
2021-03-11 12:14:42,154 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:42,187 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3ed116f9]
2021-03-11 12:14:42,280 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:14:42,281 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]
2021-03-11 12:14:42,281 [main:66] - Generated call from random type = ("sivmo")?.plus("zpikb").reversed()
2021-03-11 12:14:42,281 [main:94] - GETTING String from String
2021-03-11 12:14:42,298 [main:101] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cff2b98]]
2021-03-11 12:14:42,298 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cff2b98]
2021-03-11 12:14:42,391 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:14:42,486 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:42,578 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:42,580 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).replaceAfterLast('⽀', "vnsrx", "caitr")
2021-03-11 12:14:42,580 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]]
2021-03-11 12:14:42,580 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]
2021-03-11 12:14:42,580 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).reversed()
2021-03-11 12:14:42,580 [main:101] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534bf968]]
2021-03-11 12:14:42,580 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534bf968]
2021-03-11 12:14:42,673 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:14:42,766 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:14:42,767 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-1595986074, '䷒')
2021-03-11 12:14:42,767 [main:101] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eec66c2]]
2021-03-11 12:14:42,767 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eec66c2]
2021-03-11 12:14:42,860 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:14:42,861 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:14:42,862 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).filter({a: Char -> true})
2021-03-11 12:14:42,862 [main:101] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17845e8c]]
2021-03-11 12:14:42,862 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17845e8c]
2021-03-11 12:14:42,863 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).decapitalize()
2021-03-11 12:14:42,863 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a5650d3]]
2021-03-11 12:14:42,863 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a5650d3]
2021-03-11 12:14:42,863 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
2021-03-11 12:14:42,863 [main:101] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd07c1]]
2021-03-11 12:14:42,863 [main:137] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd07c1]
2021-03-11 12:14:42,996 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:14:43,091 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:43,185 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:43,187 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).replaceBeforeLast('Ṯ', "vywqk", "jxxmg")
2021-03-11 12:14:43,187 [main:101] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]]
2021-03-11 12:14:43,187 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]
2021-03-11 12:14:43,278 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:14:43,375 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:14:43,376 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).commonPrefixWith(StringBuilder(), false)
2021-03-11 12:14:43,376 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]]
2021-03-11 12:14:43,376 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:14:43,467 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:14:43,469 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]
2021-03-11 12:14:43,469 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).get(734121807).titlecase()
2021-03-11 12:14:43,469 [main:101] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@784c069d]]
2021-03-11 12:14:43,469 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@784c069d]
2021-03-11 12:14:43,560 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:14:43,653 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:43,654 [main:105] - GENERATED CALL = (bar3<Float>(arrayOf<Float>(0.9432627f))).substringBeforeLast('푮', "ytcsx")
2021-03-11 12:14:43,654 [main:63] - replacement of test(a::get) of type String is (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
2021-03-11 12:14:43,748 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:14:43,748 [main:66] - Compilation checking started
2021-03-11 12:14:44,090 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:44,095 [main:56] - replacing (arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set, KFunction2<Int, T, Unit>)
2021-03-11 12:14:44,095 [main:38] - replacing arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set KFunction2<Int, T, Unit>
2021-03-11 12:14:44,095 [main:42] - Getting value of type KFunction2<Int, T, Unit>
2021-03-11 12:14:44,189 [main:302] - generating value of type = KFunction2<Int, T, Unit> false depth = 0
2021-03-11 12:14:44,282 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, T, Unit> = 
2021-03-11 12:14:44,381 [main:55] - randomType = Long
2021-03-11 12:14:44,473 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:14:44,504 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:44,522 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:44,523 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:44,525 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:44,525 [main:60] - Cant find and generate replacement for arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set type KFunction2<Int, T, Unit>
2021-03-11 12:14:44,525 [main:56] - replacing (a::get, KFunction1<Int, Any?>)
2021-03-11 12:14:44,525 [main:38] - replacing a::get KFunction1<Int, Any?>
2021-03-11 12:14:44,525 [main:42] - Getting value of type KFunction1<Int, Any?>
2021-03-11 12:14:44,617 [main:302] - generating value of type = KFunction1<Int, Any?> false depth = 0
2021-03-11 12:14:44,710 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, Any?> = 
2021-03-11 12:14:45,012 [main:55] - randomType = Sequence<UByte>
2021-03-11 12:14:45,013 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:45,031 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:45,032 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:45,033 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:45,033 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, Any?>
2021-03-11 12:14:45,033 [main:56] - replacing (a::get, KFunction1<Int, Any?>)
2021-03-11 12:14:45,033 [main:38] - replacing a::get KFunction1<Int, Any?>
2021-03-11 12:14:45,033 [main:42] - Getting value of type KFunction1<Int, Any?>
2021-03-11 12:14:45,125 [main:302] - generating value of type = KFunction1<Int, Any?> false depth = 0
2021-03-11 12:14:45,219 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, Any?> = 
2021-03-11 12:14:45,319 [main:55] - randomType = Byte
2021-03-11 12:14:45,411 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:14:45,443 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:45,460 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:45,461 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:45,463 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:45,463 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, Any?>
2021-03-11 12:14:45,463 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:14:45,463 [main:38] - replacing a Array<out T>
2021-03-11 12:14:45,463 [main:42] - Getting value of type Array<out T>
2021-03-11 12:14:45,555 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:14:45,652 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:14:45,654 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:14:45,749 [main:95] - GENERATED = emptyArray<T>()
2021-03-11 12:14:45,749 [main:46] - GENERATED VALUE OF TYPE Array<out T> = emptyArray<T>()
2021-03-11 12:14:45,749 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:46,151 [main:55] - randomType = Pair<Sequence<Byte>, Long>
2021-03-11 12:14:46,244 [main:302] - generating value of type = Pair<Sequence<Byte>, Long> false depth = 0
2021-03-11 12:14:46,390 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Sequence<Byte>, second: Long): Pair<Sequence<Byte>, Long> = TODO()
2021-03-11 12:14:46,392 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Sequence<Byte>, second: Long): Pair<Sequence<Byte>, Long> = TODO()
2021-03-11 12:14:46,486 [main:302] - generating value of type = Sequence<Byte> false depth = 3
2021-03-11 12:14:46,583 [main:43] - GENERATING CALL OF fun <T> sequenceOf(elements: Byte): Sequence<Byte> = TODO()
2021-03-11 12:14:46,585 [main:61] - WITHOUT TYPE PARAMS = fun <T> sequenceOf(elements: Byte): Sequence<Byte> = TODO()
2021-03-11 12:14:46,679 [main:302] - generating value of type = Byte true depth = 6
2021-03-11 12:14:46,680 [main:95] - GENERATED = sequenceOf<Byte>(16)
2021-03-11 12:14:46,680 [main:302] - generating value of type = Long true depth = 3
2021-03-11 12:14:46,681 [main:95] - GENERATED = Pair<Sequence<Byte>, Long>(sequenceOf<Byte>(16), 6228057524188988825)
2021-03-11 12:14:46,696 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:46,717 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:46,718 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:46,719 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:46,719 [main:63] - replacement of a of type Array<out T> is emptyArray<T>()
2021-03-11 12:14:46,813 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:46,818 [main:56] - replacing (a::get, KFunction1<Int, Any?>)
2021-03-11 12:14:46,818 [main:38] - replacing a::get KFunction1<Int, Any?>
2021-03-11 12:14:46,818 [main:42] - Getting value of type KFunction1<Int, Any?>
2021-03-11 12:14:46,910 [main:302] - generating value of type = KFunction1<Int, Any?> false depth = 0
2021-03-11 12:14:47,004 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, Any?> = 
2021-03-11 12:14:47,308 [main:55] - randomType = ArrayList<UByte?>
2021-03-11 12:14:47,401 [main:302] - generating value of type = ArrayList<UByte?> false depth = 0
2021-03-11 12:14:47,499 [main:43] - GENERATING CALL OF fun <E> ArrayList(elements: kotlin.collections.Collection<UByte?>): ArrayList<UByte?> = TODO()
2021-03-11 12:14:47,500 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(elements: kotlin.collections.Collection<UByte?>): ArrayList<UByte?> = TODO()
2021-03-11 12:14:47,698 [main:302] - generating value of type = Collection<UByte?> false depth = 3
2021-03-11 12:14:47,797 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: UByte?): Collection<UByte?> = TODO()
2021-03-11 12:14:47,798 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: UByte?): Collection<UByte?> = TODO()
2021-03-11 12:14:47,894 [main:302] - generating value of type = UByte true depth = 6
2021-03-11 12:14:47,895 [main:95] - GENERATED = hashSetOf<UByte?>(79.toUByte())
2021-03-11 12:14:47,895 [main:95] - GENERATED = ArrayList<UByte?>(hashSetOf<UByte?>(79.toUByte()))
2021-03-11 12:14:48,018 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:48,035 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:48,036 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:48,037 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:48,037 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, Any?>
2021-03-11 12:14:48,038 [main:56] - replacing (arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set, KFunction2<Int, T, Unit>)
2021-03-11 12:14:48,038 [main:38] - replacing arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set KFunction2<Int, T, Unit>
2021-03-11 12:14:48,038 [main:42] - Getting value of type KFunction2<Int, T, Unit>
2021-03-11 12:14:48,130 [main:302] - generating value of type = KFunction2<Int, T, Unit> false depth = 0
2021-03-11 12:14:48,225 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, T, Unit> = 
2021-03-11 12:14:48,528 [main:55] - randomType = ArrayDeque<UByte?>
2021-03-11 12:14:48,622 [main:302] - generating value of type = ArrayDeque<UByte?> false depth = 0
2021-03-11 12:14:48,721 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<UByte?> = TODO()
2021-03-11 12:14:48,722 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<UByte?> = TODO()
2021-03-11 12:14:48,918 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:14:48,919 [main:95] - GENERATED = ArrayDeque<UByte?>(-527061039)
2021-03-11 12:14:49,094 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:49,116 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:49,117 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:49,119 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:49,119 [main:60] - Cant find and generate replacement for arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set type KFunction2<Int, T, Unit>
2021-03-11 12:14:49,119 [main:56] - replacing (test(a::get), String)
2021-03-11 12:14:49,119 [main:38] - replacing test(a::get) String
2021-03-11 12:14:49,119 [main:42] - Getting value of type String
2021-03-11 12:14:49,212 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:49,213 [main:46] - GENERATED VALUE OF TYPE String = "isuoa"
2021-03-11 12:14:49,213 [main:49] - GENERATED IS CALL =false
2021-03-11 12:14:49,626 [main:55] - randomType = MutableMap<Long, String?>?
2021-03-11 12:14:49,626 [main:94] - GETTING String from String
2021-03-11 12:14:49,643 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a5650d3]]
2021-03-11 12:14:49,643 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a5650d3]
2021-03-11 12:14:49,644 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).trim()
2021-03-11 12:14:49,644 [main:101] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e33706e]]
2021-03-11 12:14:49,644 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e33706e]
2021-03-11 12:14:49,736 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:14:49,737 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).dropLast(911458847)
2021-03-11 12:14:49,737 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]]
2021-03-11 12:14:49,737 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:14:49,876 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:49,878 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:14:49,970 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:14:49,971 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).compareTo("futmz").toString(641921749)
2021-03-11 12:14:49,971 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f4c98d]]
2021-03-11 12:14:49,971 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:14:50,063 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:14:50,065 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f4c98d]
2021-03-11 12:14:50,065 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).get(-1183624851).lowercase()
2021-03-11 12:14:50,065 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]]
2021-03-11 12:14:50,065 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]
2021-03-11 12:14:50,157 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:50,159 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
2021-03-11 12:14:50,159 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]]
2021-03-11 12:14:50,159 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]
2021-03-11 12:14:50,252 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:50,253 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).concat("fpbmj")
2021-03-11 12:14:50,253 [main:101] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a3075e0]]
2021-03-11 12:14:50,253 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a3075e0]
2021-03-11 12:14:50,346 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:14:50,347 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).takeLast(-1088266959)
2021-03-11 12:14:50,347 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]]
2021-03-11 12:14:50,347 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]
2021-03-11 12:14:50,347 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).trimIndent()
2021-03-11 12:14:50,347 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9c84af]]
2021-03-11 12:14:50,347 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9c84af]
2021-03-11 12:14:50,347 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).uppercase()
2021-03-11 12:14:50,347 [main:101] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3170b0]]
2021-03-11 12:14:50,347 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3170b0]
2021-03-11 12:14:50,441 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:50,442 [main:105] - GENERATED CALL = (bar0<Float>(0.48623055f)).trimMargin("gnaav")
2021-03-11 12:14:50,442 [main:63] - replacement of test(a::get) of type String is (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
2021-03-11 12:14:50,535 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:14:50,536 [main:66] - Compilation checking started
2021-03-11 12:14:50,846 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-1122388227))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:14:50,850 [main:56] - replacing (arrayOf<T>(maxOf<UShort>(27181.toUShort(), 20405.toUShort(), compareByDescending<UShort>({a: UShort -> "fzvgn"})))::get, KFunction1<Int, T>)
2021-03-11 12:14:50,851 [main:38] - replacing arrayOf<T>(maxOf<UShort>(27181.toUShort(), 20405.toUShort(), compareByDescending<UShort>({a: UShort -> "fzvgn"})))::get KFunction1<Int, T>
2021-03-11 12:14:50,851 [main:42] - Getting value of type KFunction1<Int, T>
2021-03-11 12:14:50,944 [main:302] - generating value of type = KFunction1<Int, T> false depth = 0
2021-03-11 12:14:51,038 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, T> = 
2021-03-11 12:14:51,141 [main:55] - randomType = UInt?
2021-03-11 12:14:51,233 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:14:51,267 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:51,285 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:51,286 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:51,287 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:51,287 [main:60] - Cant find and generate replacement for arrayOf<T>(maxOf<UShort>(27181.toUShort(), 20405.toUShort(), compareByDescending<UShort>({a: UShort -> "fzvgn"})))::get type KFunction1<Int, T>
2021-03-11 12:14:51,287 [main:56] - replacing (a::get, KFunction1<Int, T>)
2021-03-11 12:14:51,287 [main:38] - replacing a::get KFunction1<Int, T>
2021-03-11 12:14:51,287 [main:42] - Getting value of type KFunction1<Int, T>
2021-03-11 12:14:51,381 [main:302] - generating value of type = KFunction1<Int, T> false depth = 0
2021-03-11 12:14:51,475 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, T> = 
2021-03-11 12:14:51,478 [main:55] - randomType = String
2021-03-11 12:14:51,571 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:14:51,592 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:51,609 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:51,610 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:51,611 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:51,612 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, T>
2021-03-11 12:14:51,612 [main:56] - replacing (a::get, KFunction1<Int, T>)
2021-03-11 12:14:51,612 [main:38] - replacing a::get KFunction1<Int, T>
2021-03-11 12:14:51,612 [main:42] - Getting value of type KFunction1<Int, T>
2021-03-11 12:14:51,704 [main:302] - generating value of type = KFunction1<Int, T> false depth = 0
2021-03-11 12:14:51,798 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, T> = 
2021-03-11 12:14:51,898 [main:55] - randomType = Byte
2021-03-11 12:14:51,989 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:14:52,021 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:52,039 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:52,040 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:52,041 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:52,041 [main:60] - Cant find and generate replacement for a::get type KFunction1<Int, T>
2021-03-11 12:14:52,041 [main:56] - replacing (arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set, KFunction2<Int, T, Unit>)
2021-03-11 12:14:52,041 [main:38] - replacing arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set KFunction2<Int, T, Unit>
2021-03-11 12:14:52,041 [main:42] - Getting value of type KFunction2<Int, T, Unit>
2021-03-11 12:14:52,134 [main:302] - generating value of type = KFunction2<Int, T, Unit> false depth = 0
2021-03-11 12:14:52,226 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, T, Unit> = 
2021-03-11 12:14:52,332 [main:55] - randomType = LinkedHashSet<UInt>
2021-03-11 12:14:52,424 [main:302] - generating value of type = LinkedHashSet<UInt> false depth = 0
2021-03-11 12:14:52,521 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<UInt> = TODO()
2021-03-11 12:14:52,522 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<UInt> = TODO()
2021-03-11 12:14:52,617 [main:95] - GENERATED = linkedSetOf<UInt>()
2021-03-11 12:14:52,761 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:52,778 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:52,780 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:52,781 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:14:52,781 [main:60] - Cant find and generate replacement for arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set type KFunction2<Int, T, Unit>
2021-03-11 12:14:52,781 [main:56] - replacing (arrayOf<T>(checkNotNull<HashMap<ULong, Long>>(linkedMapOf<ULong, Long>(Pair<ULong, Long>(6558986002238460829.toULong(), -8317159764464892508))))::set, KFunction2<Int, Nothing, Unit>)
2021-03-11 12:14:52,781 [main:38] - replacing arrayOf<T>(checkNotNull<HashMap<ULong, Long>>(linkedMapOf<ULong, Long>(Pair<ULong, Long>(6558986002238460829.toULong(), -8317159764464892508))))::set KFunction2<Int, Nothing, Unit>
2021-03-11 12:14:52,781 [main:42] - Getting value of type KFunction2<Int, Nothing, Unit>
2021-03-11 12:14:52,875 [main:302] - generating value of type = KFunction2<Int, Nothing, Unit> false depth = 0
2021-03-11 12:14:52,968 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, Nothing, Unit> = 
2021-03-11 12:14:53,293 [main:55] - randomType = Triple<Int, ULong, LinkedHashSet<Boolean>>
2021-03-11 12:14:53,385 [main:302] - generating value of type = Triple<Int, ULong, LinkedHashSet<Boolean>> false depth = 0
2021-03-11 12:14:53,534 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Int, second: ULong, third: LinkedHashSet<Boolean>): Triple<Int, ULong, LinkedHashSet<Boolean>> = TODO()
2021-03-11 12:14:53,536 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Int, second: ULong, third: LinkedHashSet<Boolean>): Triple<Int, ULong, LinkedHashSet<Boolean>> = TODO()
2021-03-11 12:14:53,632 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:14:53,633 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 12:14:53,634 [main:302] - generating value of type = LinkedHashSet<Boolean> false depth = 3
2021-03-11 12:14:53,731 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Boolean): LkedHashSet<Boolean> = TODO()
2021-03-11 12:14:53,733 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Boolean): LkedHashSet<Boolean> = TODO()
2021-03-11 12:14:53,828 [main:302] - generating value of type = Boolean true depth = 6
2021-03-11 12:14:53,829 [main:95] - GENERATED = linkedSetOf<Boolean>(false)
2021-03-11 12:14:53,829 [main:95] - GENERATED = Triple<Int, ULong, LinkedHashSet<Boolean>>(782007958, 7024489376988565599.toULong(), linkedSetOf<Boolean>(false))
2021-03-11 12:14:53,851 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:14:53,869 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:14:53,871 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:14:53,872 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:14:53,872 [main:60] - Cant find and generate replacement for arrayOf<T>(checkNotNull<HashMap<ULong, Long>>(linkedMapOf<ULong, Long>(Pair<ULong, Long>(6558986002238460829.toULong(), -8317159764464892508))))::set type KFunction2<Int, Nothing, Unit>
2021-03-11 12:14:53,872 [main:56] - replacing (a, Array<out T>)
2021-03-11 12:14:53,872 [main:38] - replacing a Array<out T>
2021-03-11 12:14:53,872 [main:42] - Getting value of type Array<out T>
2021-03-11 12:14:53,964 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:14:54,060 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:14:54,062 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:14:54,156 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:14:54,355 [main:43] - GENERATING CALL OF fun <T> requireNotNull(value: Byte, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 12:14:54,357 [main:61] - WITHOUT TYPE PARAMS = fun <T> requireNotNull(value: Byte, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 12:14:54,562 [main:302] - generating value of type = Byte true depth = 6
2021-03-11 12:14:54,563 [main:302] - generating value of type = Function0<Any> false depth = 6
2021-03-11 12:14:54,564 [main:302] - generating value of type = Any false depth = 7
2021-03-11 12:14:54,565 [main:95] - GENERATED = requireNotNull<Byte>(34, { "epimv"})
2021-03-11 12:14:54,565 [main:95] - GENERATED = arrayOf<T>(requireNotNull<Byte>(34, { "epimv"}))
2021-03-11 12:14:54,565 [main:46] - GENERATED VALUE OF TYPE Array<out T> = arrayOf<T>(requireNotNull<Byte>(34, { "epimv"}))
2021-03-11 12:14:54,565 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:54,775 [main:55] - randomType = Map<UShort, Float>
2021-03-11 12:14:54,776 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:54,804 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:54,805 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:54,806 [main:94] - GETTING Array<out T> from String
2021-03-11 12:14:54,806 [main:63] - replacement of a of type Array<out T> is arrayOf<T>(requireNotNull<Byte>(34, { "epimv"}))
2021-03-11 12:14:54,899 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:54,904 [main:56] - replacing (emptyArray<T>()::set, KFunction2<Int, Nothing, Unit>)
2021-03-11 12:14:54,904 [main:38] - replacing emptyArray<T>()::set KFunction2<Int, Nothing, Unit>
2021-03-11 12:14:54,904 [main:42] - Getting value of type KFunction2<Int, Nothing, Unit>
2021-03-11 12:14:54,997 [main:302] - generating value of type = KFunction2<Int, Nothing, Unit> false depth = 0
2021-03-11 12:14:55,090 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, Nothing, Unit> = 
2021-03-11 12:14:55,288 [main:55] - randomType = UByte?
2021-03-11 12:14:55,380 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:14:55,411 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:14:55,428 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:14:55,430 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:14:55,431 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:14:55,431 [main:60] - Cant find and generate replacement for emptyArray<T>()::set type KFunction2<Int, Nothing, Unit>
2021-03-11 12:14:55,431 [main:56] - replacing (arrayOf<T>(checkNotNull<HashMap<ULong, Long>>(linkedMapOf<ULong, Long>(Pair<ULong, Long>(6558986002238460829.toULong(), -8317159764464892508))))::set, KFunction2<Int, Nothing, Unit>)
2021-03-11 12:14:55,431 [main:38] - replacing arrayOf<T>(checkNotNull<HashMap<ULong, Long>>(linkedMapOf<ULong, Long>(Pair<ULong, Long>(6558986002238460829.toULong(), -8317159764464892508))))::set KFunction2<Int, Nothing, Unit>
2021-03-11 12:14:55,431 [main:42] - Getting value of type KFunction2<Int, Nothing, Unit>
2021-03-11 12:14:55,523 [main:302] - generating value of type = KFunction2<Int, Nothing, Unit> false depth = 0
2021-03-11 12:14:55,616 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, Nothing, Unit> = 
2021-03-11 12:14:55,715 [main:55] - randomType = UShort
2021-03-11 12:14:55,806 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:14:55,838 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:14:55,857 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:14:55,859 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:14:55,860 [main:94] - GETTING KFunction2<Int, Nothing, Unit> from String
2021-03-11 12:14:55,860 [main:60] - Cant find and generate replacement for arrayOf<T>(checkNotNull<HashMap<ULong, Long>>(linkedMapOf<ULong, Long>(Pair<ULong, Long>(6558986002238460829.toULong(), -8317159764464892508))))::set type KFunction2<Int, Nothing, Unit>
2021-03-11 12:14:55,860 [main:56] - replacing (a, Array<in T>)
2021-03-11 12:14:55,860 [main:38] - replacing a Array<in T>
2021-03-11 12:14:55,860 [main:42] - Getting value of type Array<in T>
2021-03-11 12:14:55,951 [main:302] - generating value of type = Array<in T> false depth = 0
2021-03-11 12:14:56,047 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:14:56,049 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:14:56,142 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:14:56,240 [main:43] - GENERATING CALL OF fun <T> minOf(a: Byte, b: Byte): T = TODO()
2021-03-11 12:14:56,242 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Byte, b: Byte): T = TODO()
2021-03-11 12:14:56,338 [main:302] - generating value of type = Byte true depth = 6
2021-03-11 12:14:56,339 [main:302] - generating value of type = Byte true depth = 6
2021-03-11 12:14:56,340 [main:95] - GENERATED = minOf<Byte>(-52, 106)
2021-03-11 12:14:56,340 [main:95] - GENERATED = arrayOf<T>(minOf<Byte>(-52, 106))
2021-03-11 12:14:56,340 [main:46] - GENERATED VALUE OF TYPE Array<in T> = arrayOf<T>(minOf<Byte>(-52, 106))
2021-03-11 12:14:56,340 [main:49] - GENERATED IS CALL =true
2021-03-11 12:14:56,343 [main:55] - randomType = UInt
2021-03-11 12:14:56,436 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:14:56,465 [main:94] - GETTING Array<in T> from String
2021-03-11 12:14:56,482 [main:94] - GETTING Array<in T> from String
2021-03-11 12:14:56,483 [main:94] - GETTING Array<in T> from String
2021-03-11 12:14:56,484 [main:94] - GETTING Array<in T> from String
2021-03-11 12:14:56,484 [main:63] - replacement of a of type Array<in T> is arrayOf<T>(minOf<Byte>(-52, 106))
2021-03-11 12:14:56,576 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:14:56,581 [main:56] - replacing (arrayOf<T>(minOf<Byte>(-52, 106))::get, KFunction1<Int, Any?>)
2021-03-11 12:14:56,581 [main:38] - replacing arrayOf<T>(minOf<Byte>(-52, 106))::get KFunction1<Int, Any?>
2021-03-11 12:14:56,581 [main:42] - Getting value of type KFunction1<Int, Any?>
2021-03-11 12:14:56,674 [main:302] - generating value of type = KFunction1<Int, Any?> false depth = 0
2021-03-11 12:14:56,768 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, Any?> = 
2021-03-11 12:14:57,545 [main:55] - randomType = Triple<Array<Float>, LinkedHashMap<Byte, Double>, UByte>?
2021-03-11 12:14:57,639 [main:302] - generating value of type = Triple<Array<Float>, LinkedHashMap<Byte, Double>, UByte> false depth = 0
2021-03-11 12:14:57,738 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Array<Float>, second: LinkedHashMap<Byte, Double>, third: UByte): Triple<Array<Float>, LinkedHashMap<Byte, Double>, UByte> = TODO()
2021-03-11 12:14:57,740 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Array<Float>, second: LinkedHashMap<Byte, Double>, third: UByte): Triple<Array<Float>, LinkedHashMap<Byte, Double>, UByte> = TODO()
2021-03-11 12:14:57,837 [main:302] - generating value of type = Array<Float> false depth = 3
2021-03-11 12:14:57,934 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<Float> = TODO()
2021-03-11 12:14:57,936 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<Float> = TODO()
2021-03-11 12:14:58,031 [main:95] - GENERATED = enumValues<Float>()
2021-03-11 12:14:58,031 [main:302] - generating value of type = LinkedHashMap<Byte, Double> false depth = 3
2021-03-11 12:14:58,129 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Byte, Double>): LkedHashMap<Byte, Double> = TODO()
2021-03-11 12:14:58,131 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Byte, Double>): LkedHashMap<Byte, Double> = TODO()
2021-03-11 12:14:58,225 [main:302] - generating value of type = Pair<Byte, Double> false depth = 6
2021-03-11 12:14:58,322 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Byte, second: Double): Pair<Byte, Double> = TODO()
2021-03-11 12:14:58,324 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Byte, second: Double): Pair<Byte, Double> = TODO()
2021-03-11 12:14:58,418 [main:302] - generating value of type = Byte true depth = 9
2021-03-11 12:14:58,419 [main:302] - generating value of type = Double true depth = 9
2021-03-11 12:14:58,420 [main:95] - GENERATED = Pair<Byte, Double>(-87, 0.328201146274569)
2021-03-11 12:14:58,420 [main:95] - GENERATED = linkedMapOf<Byte, Double>(Pair<Byte, Double>(-87, 0.328201146274569))
2021-03-11 12:14:58,420 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 12:14:58,421 [main:95] - GENERATED = Triple<Array<Float>, LinkedHashMap<Byte, Double>, UByte>(enumValues<Float>(), linkedMapOf<Byte, Double>(Pair<Byte, Double>(-87, 0.328201146274569)), 82.toUByte())
2021-03-11 12:14:58,453 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:58,470 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:58,471 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:58,472 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:58,472 [main:60] - Cant find and generate replacement for arrayOf<T>(minOf<Byte>(-52, 106))::get type KFunction1<Int, Any?>
2021-03-11 12:14:58,472 [main:56] - replacing (arrayOf<T>(requireNotNull<Byte>(34, { "epimv"}))::get, KFunction1<Int, T>)
2021-03-11 12:14:58,472 [main:38] - replacing arrayOf<T>(requireNotNull<Byte>(34, { "epimv"}))::get KFunction1<Int, T>
2021-03-11 12:14:58,472 [main:42] - Getting value of type KFunction1<Int, T>
2021-03-11 12:14:58,564 [main:302] - generating value of type = KFunction1<Int, T> false depth = 0
2021-03-11 12:14:58,657 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, T> = 
2021-03-11 12:14:58,758 [main:55] - randomType = UByte
2021-03-11 12:14:58,850 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:14:58,881 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:58,898 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:58,899 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:58,900 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:58,900 [main:60] - Cant find and generate replacement for arrayOf<T>(requireNotNull<Byte>(34, { "epimv"}))::get type KFunction1<Int, T>
2021-03-11 12:14:58,900 [main:56] - replacing (arrayOf<T>(maxOf<UShort>(27181.toUShort(), 20405.toUShort(), compareByDescending<UShort>({a: UShort -> "fzvgn"})))::get, KFunction1<Int, T>)
2021-03-11 12:14:58,900 [main:38] - replacing arrayOf<T>(maxOf<UShort>(27181.toUShort(), 20405.toUShort(), compareByDescending<UShort>({a: UShort -> "fzvgn"})))::get KFunction1<Int, T>
2021-03-11 12:14:58,900 [main:42] - Getting value of type KFunction1<Int, T>
2021-03-11 12:14:58,992 [main:302] - generating value of type = KFunction1<Int, T> false depth = 0
2021-03-11 12:14:59,089 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, T> = 
2021-03-11 12:14:59,191 [main:55] - randomType = Short
2021-03-11 12:14:59,284 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:14:59,318 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:59,335 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:59,336 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:59,337 [main:94] - GETTING KFunction1<Int, T> from String
2021-03-11 12:14:59,337 [main:60] - Cant find and generate replacement for arrayOf<T>(maxOf<UShort>(27181.toUShort(), 20405.toUShort(), compareByDescending<UShort>({a: UShort -> "fzvgn"})))::get type KFunction1<Int, T>
2021-03-11 12:14:59,337 [main:56] - replacing (arrayOf<T>(minOf<Byte>(-52, 106))::get, KFunction1<Int, Any?>)
2021-03-11 12:14:59,337 [main:38] - replacing arrayOf<T>(minOf<Byte>(-52, 106))::get KFunction1<Int, Any?>
2021-03-11 12:14:59,337 [main:42] - Getting value of type KFunction1<Int, Any?>
2021-03-11 12:14:59,430 [main:302] - generating value of type = KFunction1<Int, Any?> false depth = 0
2021-03-11 12:14:59,524 [main:46] - GENERATED VALUE OF TYPE KFunction1<Int, Any?> = 
2021-03-11 12:14:59,725 [main:55] - randomType = ULong?
2021-03-11 12:14:59,818 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:14:59,850 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:59,866 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:59,867 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:59,868 [main:94] - GETTING KFunction1<Int, Any?> from String
2021-03-11 12:14:59,868 [main:60] - Cant find and generate replacement for arrayOf<T>(minOf<Byte>(-52, 106))::get type KFunction1<Int, Any?>
2021-03-11 12:14:59,868 [main:56] - replacing (arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set, KFunction2<Int, T, Unit>)
2021-03-11 12:14:59,868 [main:38] - replacing arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set KFunction2<Int, T, Unit>
2021-03-11 12:14:59,868 [main:42] - Getting value of type KFunction2<Int, T, Unit>
2021-03-11 12:14:59,961 [main:302] - generating value of type = KFunction2<Int, T, Unit> false depth = 0
2021-03-11 12:15:00,054 [main:46] - GENERATED VALUE OF TYPE KFunction2<Int, T, Unit> = 
2021-03-11 12:15:00,154 [main:55] - randomType = Long
2021-03-11 12:15:00,246 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:15:00,278 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:15:00,295 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:15:00,296 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:15:00,297 [main:94] - GETTING KFunction2<Int, T, Unit> from String
2021-03-11 12:15:00,297 [main:60] - Cant find and generate replacement for arrayOf<T>(checkNotNull<Pair<Double?, String>>(Pair<Double?, String>(0.9772974410456468, "daosp")))::set type KFunction2<Int, T, Unit>
2021-03-11 12:15:00,392 [main:90] - TRYING TO REPLACE CONSTANT 1122388227
2021-03-11 12:15:00,484 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 12:15:00,484 [main:66] - Compilation checking started
2021-03-11 12:15:00,795 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast('㝷', "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:15:00,795 [main:90] - TRYING TO REPLACE CONSTANT 0.48623055f
2021-03-11 12:15:00,908 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 12:15:00,908 [main:90] - TRYING TO REPLACE CONSTANT '㝷'
2021-03-11 12:15:01,052 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:15:01,052 [main:66] - Compilation checking started
2021-03-11 12:15:01,374 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:15:01,374 [main:90] - TRYING TO REPLACE CONSTANT true
2021-03-11 12:15:01,469 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:15:01,469 [main:66] - Compilation checking started
2021-03-11 12:15:01,811 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1653116695), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:15:01,811 [main:90] - TRYING TO REPLACE CONSTANT false
2021-03-11 12:15:01,915 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:15:01,916 [main:90] - TRYING TO REPLACE CONSTANT 1809130812
2021-03-11 12:15:02,010 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:15:02,010 [main:90] - TRYING TO REPLACE CONSTANT true
2021-03-11 12:15:02,102 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:15:02,102 [main:90] - TRYING TO REPLACE CONSTANT 1653116695
2021-03-11 12:15:02,195 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:15:02,195 [main:66] - Compilation checking started
2021-03-11 12:15:02,517 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(1297502136, '허')
}


2021-03-11 12:15:02,517 [main:90] - TRYING TO REPLACE CONSTANT 0.48623055f
2021-03-11 12:15:02,612 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 12:15:02,613 [main:90] - TRYING TO REPLACE CONSTANT 1297502136
2021-03-11 12:15:02,706 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 12:15:02,706 [main:66] - Compilation checking started
2021-03-11 12:15:03,031 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, '허')
}


2021-03-11 12:15:03,032 [main:90] - TRYING TO REPLACE CONSTANT '허'
2021-03-11 12:15:03,126 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:15:03,127 [main:66] - Compilation checking started
2021-03-11 12:15:03,444 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:03,444 [main:90] - TRYING TO REPLACE CONSTANT 0.9432627f
2021-03-11 12:15:03,540 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 12:15:03,540 [main:90] - TRYING TO REPLACE CONSTANT false
2021-03-11 12:15:03,632 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:15:03,632 [main:90] - TRYING TO REPLACE CONSTANT 1809130812
2021-03-11 12:15:03,725 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:15:03,726 [main:66] - Compilation checking started
2021-03-11 12:15:04,055 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:04,055 [main:90] - TRYING TO REPLACE CONSTANT true
2021-03-11 12:15:04,153 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:15:04,154 [main:90] - TRYING TO REPLACE CONSTANT false
2021-03-11 12:15:04,248 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:15:04,248 [main:66] - Compilation checking started
2021-03-11 12:15:04,563 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:04,563 [main:90] - TRYING TO REPLACE CONSTANT 1809130812
2021-03-11 12:15:04,657 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:15:04,657 [main:66] - Compilation checking started
2021-03-11 12:15:04,974 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(-2084717623))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:04,974 [main:90] - TRYING TO REPLACE CONSTANT 2084717623
2021-03-11 12:15:05,070 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 12:15:05,070 [main:66] - Compilation checking started
2021-03-11 12:15:05,420 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:05,421 [main:90] - TRYING TO REPLACE CONSTANT 0.48623055f
2021-03-11 12:15:05,514 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 12:15:05,514 [main:66] - Compilation checking started
2021-03-11 12:15:05,816 [main:90] - TRYING TO REPLACE CONSTANT true
2021-03-11 12:15:05,924 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:15:05,924 [main:90] - TRYING TO REPLACE CONSTANT true
2021-03-11 12:15:06,019 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:15:06,019 [main:66] - Compilation checking started
2021-03-11 12:15:06,336 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> true})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:06,337 [main:90] - TRYING TO REPLACE CONSTANT true
2021-03-11 12:15:06,433 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:15:06,433 [main:66] - Compilation checking started
2021-03-11 12:15:06,735 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.9432627f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:06,735 [main:90] - TRYING TO REPLACE CONSTANT 0.9432627f
2021-03-11 12:15:06,830 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 12:15:06,830 [main:66] - Compilation checking started
2021-03-11 12:15:07,142 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.48623055f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((17475).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:07,142 [main:90] - TRYING TO REPLACE CONSTANT 17475
2021-03-11 12:15:07,236 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:15:07,236 [main:66] - Compilation checking started
2021-03-11 12:15:07,548 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.48623055f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((1809130812).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('螓', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:07,548 [main:90] - TRYING TO REPLACE CONSTANT '螓'
2021-03-11 12:15:07,642 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-11 12:15:07,642 [main:66] - Compilation checking started
2021-03-11 12:15:07,952 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> true})
    val b1 = (bar3<Float>(arrayOf<Float>(0.48623055f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((1809130812).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('㝷', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:07,953 [main:90] - TRYING TO REPLACE CONSTANT 'ᾩ'
2021-03-11 12:15:08,048 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-11 12:15:08,048 [main:66] - Compilation checking started
2021-03-11 12:15:08,352 [main:90] - TRYING TO REPLACE CONSTANT true
2021-03-11 12:15:08,447 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:15:08,447 [main:90] - TRYING TO REPLACE CONSTANT true
2021-03-11 12:15:08,539 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:15:08,540 [main:90] - TRYING TO REPLACE CONSTANT true
2021-03-11 12:15:08,631 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:15:08,631 [main:66] - Compilation checking started
2021-03-11 12:15:08,935 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.9432627f))).takeLastWhile({a: Char -> false})
    val b1 = (bar3<Float>(arrayOf<Float>(0.48623055f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((1809130812).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('㝷', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:08,935 [main:90] - TRYING TO REPLACE CONSTANT 0.9432627f
2021-03-11 12:15:09,036 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 12:15:09,037 [main:66] - Compilation checking started
2021-03-11 12:15:09,333 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.48623055f))).takeLastWhile({a: Char -> false})
    val b1 = (bar3<Float>(arrayOf<Float>(0.48623055f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (19442).toChar().uppercase()

    assertEquals((1809130812).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('㝷', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:09,333 [main:90] - TRYING TO REPLACE CONSTANT 19442
2021-03-11 12:15:09,427 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 12:15:09,428 [main:66] - Compilation checking started
2021-03-11 12:15:09,791 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.48623055f))).takeLastWhile({a: Char -> false})
    val b1 = (bar3<Float>(arrayOf<Float>(0.48623055f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (-998293553).toChar().uppercase()

    assertEquals((1809130812).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(-793435255))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('㝷', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:09,791 [main:90] - TRYING TO REPLACE CONSTANT 793435255
2021-03-11 12:15:09,884 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 12:15:09,884 [main:66] - Compilation checking started
2021-03-11 12:15:10,187 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.48623055f))).takeLastWhile({a: Char -> false})
    val b1 = (bar3<Float>(arrayOf<Float>(0.48623055f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (-998293553).toChar().uppercase()

    assertEquals((1809130812).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).substring(1297502136))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('㝷', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:10,187 [main:90] - TRYING TO REPLACE CONSTANT true
2021-03-11 12:15:10,282 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:15:10,282 [main:66] - Compilation checking started
2021-03-11 12:15:10,606 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.48623055f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.48623055f))).takeLastWhile({a: Char -> false})
    val b1 = (bar3<Float>(arrayOf<Float>(0.48623055f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (-998293553).toChar().uppercase()

    assertEquals((1809130812).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).substring(1297502136))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('㝷', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:10,606 [main:90] - TRYING TO REPLACE CONSTANT 0.48623055f
2021-03-11 12:15:10,700 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 12:15:10,700 [main:66] - Compilation checking started
2021-03-11 12:15:11,036 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = (-21964).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.9432627f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.48623055f))).takeLastWhile({a: Char -> false})
    val b1 = (bar3<Float>(arrayOf<Float>(0.48623055f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (-998293553).toChar().uppercase()

    assertEquals((1809130812).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).substring(1297502136))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('㝷', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:11,036 [main:90] - TRYING TO REPLACE CONSTANT 21964
2021-03-11 12:15:11,133 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PARENTHESIZED)
2021-03-11 12:15:11,133 [main:66] - Compilation checking started
2021-03-11 12:15:11,443 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = ((1809130812)).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.9432627f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.48623055f))).takeLastWhile({a: Char -> false})
    val b1 = (bar3<Float>(arrayOf<Float>(0.48623055f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (-998293553).toChar().uppercase()

    assertEquals((1809130812).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).substring(1297502136))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('㝷', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:11,443 [main:90] - TRYING TO REPLACE CONSTANT false
2021-03-11 12:15:11,540 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:15:11,540 [main:66] - Compilation checking started
2021-03-11 12:15:11,839 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = ((1809130812)).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), true))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.9432627f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.48623055f))).takeLastWhile({a: Char -> false})
    val b1 = (bar3<Float>(arrayOf<Float>(0.48623055f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (-998293553).toChar().uppercase()

    assertEquals((1809130812).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).substring(1297502136))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('㝷', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:11,840 [main:90] - TRYING TO REPLACE CONSTANT 1809130812
2021-03-11 12:15:11,936 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:15:11,937 [main:66] - Compilation checking started
2021-03-11 12:15:12,236 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = ((1809130812)).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), true))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.9432627f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.48623055f))).takeLastWhile({a: Char -> false})
    val b1 = (bar3<Float>(arrayOf<Float>(0.48623055f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (-998293553).toChar().uppercase()

    assertEquals((1809130812).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).substring(1297502136))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('㝷', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:12,236 [main:90] - TRYING TO REPLACE CONSTANT ''
2021-03-11 12:15:12,332 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-11 12:15:12,332 [main:66] - Compilation checking started
2021-03-11 12:15:12,632 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = ((1809130812)).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), true))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('㝷', '얟', false)

fun box(): String {
    val getMethod = (bar0<Float>(0.9432627f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.48623055f))).takeLastWhile({a: Char -> false})
    val b1 = (bar3<Float>(arrayOf<Float>(0.48623055f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (-998293553).toChar().uppercase()

    assertEquals((1809130812).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).substring(1297502136))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('㝷', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:12,632 [main:90] - TRYING TO REPLACE CONSTANT '얟'
2021-03-11 12:15:12,724 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:15:12,725 [main:66] - Compilation checking started
2021-03-11 12:15:13,023 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = ((1809130812)).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), true))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('㝷', (-998293553).toChar(), false)

fun box(): String {
    val getMethod = (bar0<Float>(0.9432627f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.48623055f))).takeLastWhile({a: Char -> false})
    val b1 = (bar3<Float>(arrayOf<Float>(0.48623055f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (-998293553).toChar().uppercase()

    assertEquals((1809130812).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).substring(1297502136))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('㝷', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:13,023 [main:90] - TRYING TO REPLACE CONSTANT false
2021-03-11 12:15:13,120 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:15:13,120 [main:66] - Compilation checking started
2021-03-11 12:15:13,418 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = ((1809130812)).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), true))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).replaceFirst('㝷', (-998293553).toChar(), true)

fun box(): String {
    val getMethod = (bar0<Float>(0.9432627f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.48623055f))).takeLastWhile({a: Char -> false})
    val b1 = (bar3<Float>(arrayOf<Float>(0.48623055f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (-998293553).toChar().uppercase()

    assertEquals((1809130812).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).substring(1297502136))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('㝷', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:13,418 [main:90] - TRYING TO REPLACE CONSTANT false
2021-03-11 12:15:13,514 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:15:13,515 [main:90] - TRYING TO REPLACE CONSTANT 1809130812
2021-03-11 12:15:13,609 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:15:13,610 [main:66] - Compilation checking started
2021-03-11 12:15:13,949 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = ((1809130812)).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), true))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", (bar0<Float>(0.48623055f)).length.toUInt(), false))).replaceFirst('㝷', (-998293553).toChar(), true)

fun box(): String {
    val getMethod = (bar0<Float>(0.9432627f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.48623055f))).takeLastWhile({a: Char -> false})
    val b1 = (bar3<Float>(arrayOf<Float>(0.48623055f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (-998293553).toChar().uppercase()

    assertEquals((1809130812).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).substring(1297502136))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('㝷', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:13,949 [main:90] - TRYING TO REPLACE CONSTANT 0.48623055f
2021-03-11 12:15:14,042 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 12:15:14,043 [main:90] - TRYING TO REPLACE CONSTANT 729717076
2021-03-11 12:15:14,137 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:15:14,137 [main:66] - Compilation checking started
2021-03-11 12:15:14,378 [main:49] - Result = false
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = ((1809130812)).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(-998293553)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), true))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", (bar0<Float>(0.48623055f)).length.toUInt(), false))).replaceFirst('㝷', (-998293553).toChar(), true)

fun box(): String {
    val getMethod = (bar0<Float>(0.9432627f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.48623055f))).takeLastWhile({a: Char -> false})
    val b1 = (bar3<Float>(arrayOf<Float>(0.48623055f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(compareTo("cuqdr")))
    val b3 = (-998293553).toChar().uppercase()

    assertEquals((1809130812).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).substring(1297502136))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('㝷', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:14,378 [main:90] - TRYING TO REPLACE CONSTANT 998293553
2021-03-11 12:15:14,475 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 12:15:14,475 [main:66] - Compilation checking started
2021-03-11 12:15:14,789 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = ((1809130812)).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.48623055f)).length.toString(19442)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), true))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", (bar0<Float>(0.48623055f)).length.toUInt(), false))).replaceFirst('㝷', (-998293553).toChar(), true)

fun box(): String {
    val getMethod = (bar0<Float>(0.9432627f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.48623055f))).takeLastWhile({a: Char -> false})
    val b1 = (bar3<Float>(arrayOf<Float>(0.48623055f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (-998293553).toChar().uppercase()

    assertEquals((1809130812).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).substring(1297502136))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('㝷', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:14,789 [main:90] - TRYING TO REPLACE CONSTANT 0.48623055f
2021-03-11 12:15:14,886 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 12:15:14,887 [main:66] - Compilation checking started
2021-03-11 12:15:15,191 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = ((1809130812)).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.9432627f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.9432627f)).length.toString(19442)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), true))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", (bar0<Float>(0.48623055f)).length.toUInt(), false))).replaceFirst('㝷', (-998293553).toChar(), true)

fun box(): String {
    val getMethod = (bar0<Float>(0.9432627f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.48623055f))).takeLastWhile({a: Char -> false})
    val b1 = (bar3<Float>(arrayOf<Float>(0.48623055f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (-998293553).toChar().uppercase()

    assertEquals((1809130812).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).substring(1297502136))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('㝷', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:15,191 [main:90] - TRYING TO REPLACE CONSTANT 0.9432627f
2021-03-11 12:15:15,287 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 12:15:15,287 [main:66] - Compilation checking started
2021-03-11 12:15:15,582 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = ((1809130812)).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.48623055f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.9432627f)).length.toString(19442)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.48623055f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), true))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", (bar0<Float>(0.48623055f)).length.toUInt(), false))).replaceFirst('㝷', (-998293553).toChar(), true)

fun box(): String {
    val getMethod = (bar0<Float>(0.9432627f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.48623055f))).takeLastWhile({a: Char -> false})
    val b1 = (bar3<Float>(arrayOf<Float>(0.48623055f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (-998293553).toChar().uppercase()

    assertEquals((1809130812).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).substring(1297502136))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('㝷', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:15,582 [main:90] - TRYING TO REPLACE CONSTANT 0.48623055f
2021-03-11 12:15:15,675 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 12:15:15,676 [main:66] - Compilation checking started
2021-03-11 12:15:15,976 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = "eiqvt"
fun <T> bar1(vararg a: T) = ((1809130812)).toChar().plus("ezlcn")

fun <T> bar2(a: Array<out T>) = (bar3<Float>(arrayOf<Float>(0.48623055f))).trim()
fun <T> bar3(a: Array<out T>) = (bar0<Float>(0.9432627f)).length.toString(19442)

fun <T> bar4(a: Array<in T>) = (bar0<Float>(0.9432627f)).replaceIndent("vuxgl")
fun <T> bar5(a: Array<in T>) = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), true))).replaceIndentByMargin("razme", "mdrfe")

fun <F> test(f: F): String = (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", (bar0<Float>(0.48623055f)).length.toUInt(), false))).replaceFirst('㝷', (-998293553).toChar(), true)

fun box(): String {
    val getMethod = (bar0<Float>(0.9432627f)).toLowerCase()
    val setMethod = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).commonSuffixWith("tpuvf", true)

    val b0 = (bar3<Float>(arrayOf<Float>(0.48623055f))).takeLastWhile({a: Char -> false})
    val b1 = (bar3<Float>(arrayOf<Float>(0.48623055f))).dropWhile({a: Char -> false})

    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).replaceAfterLast((19442).toChar(), "omide", "jtwmw"), "fkvav")
    assertEquals((bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).trim(), "svfco")

    val b2 = (bar0<Float>(0.48623055f)).removeSurrounding(StringBuilder(-729717076))
    val b3 = (-998293553).toChar().uppercase()

    assertEquals((1809130812).toChar().uppercase(), (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(false))).substring(1297502136))
    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1809130812.toUInt(), false))).removeSurrounding("drlca"), (test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 729717076.toUInt(), true))).removePrefix(StringBuilder()))

    val b4 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).prependIndent("wspwp")
    val b5 = (bar1<HashSet<Boolean?>?>(hashSetOf<Boolean?>(true))).replace('㝷', 'ᾩ', true)

    assertEquals((test<Triple<String, UInt, Boolean>>(Triple<String, UInt, Boolean>("tglfp", 1653116695.toUInt(), false))).reversed(), (bar0<Float>(0.48623055f)).compareTo("cuqdr").toString(729717076))
    assertEquals((bar0<Float>(0.48623055f)).substring(1809130812), (bar0<Float>(0.48623055f)).compareTo("xhilr").toString(-793435255))

    return (bar3<Float>(arrayOf<Float>(0.9432627f))).padStart(-793435255, (19442).toChar())
}


2021-03-11 12:15:15,994 [main:66] - Compilation checking started
2021-03-11 12:15:16,242 [main:66] - Compilation checking started
2021-03-11 12:15:16,552 [main:66] - Compilation checking started
2021-03-11 12:15:16,852 [main:66] - Compilation checking started
2021-03-11 12:15:17,198 [main:66] - Compilation checking started
2021-03-11 12:15:17,509 [main:66] - Compilation checking started
2021-03-11 12:15:17,822 [main:66] - Compilation checking started
2021-03-11 12:15:18,187 [main:46] - AFTER TRY 0 res = import kotlin.test.assertEquals

fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}
2021-03-11 12:15:18,473 [main:43] - GENERATING CALL OF fun <T> bar0(vararg a: T) = test(a::get)
2021-03-11 12:15:18,548 [main:61] - WITHOUT TYPE PARAMS = fun <T> bar0(vararg a: UInt) = test(a::get)
2021-03-11 12:15:18,621 [main:302] - generating value of type = UInt true depth = 1
2021-03-11 12:15:18,622 [main:95] - GENERATED = bar0<UInt>(926620857.toUInt())
2021-03-11 12:15:18,694 [main:43] - GENERATING CALL OF fun <T> bar1(vararg a: T) = test(a::set)
2021-03-11 12:15:18,768 [main:61] - WITHOUT TYPE PARAMS = fun <T> bar1(vararg a: Double) = test(a::set)
2021-03-11 12:15:18,841 [main:302] - generating value of type = Double true depth = 1
2021-03-11 12:15:18,841 [main:95] - GENERATED = bar1<Double>(0.7821309887591489)
2021-03-11 12:15:18,912 [main:43] - GENERATING CALL OF fun <T> bar2(a: Array<out T>) = test(a::get)
2021-03-11 12:15:18,987 [main:61] - WITHOUT TYPE PARAMS = fun <T> bar2(a: Array<out Boolean>) = test(a::get)
2021-03-11 12:15:19,059 [main:302] - generating value of type = Array<out Boolean> false depth = 1
2021-03-11 12:15:19,134 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Boolean): Array<Boolean> = TODO()
2021-03-11 12:15:19,135 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Boolean): Array<Boolean> = TODO()
2021-03-11 12:15:19,208 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:15:19,208 [main:95] - GENERATED = arrayOf<Boolean>(true)
2021-03-11 12:15:19,208 [main:95] - GENERATED = bar2<Boolean>(arrayOf<Boolean>(true))
2021-03-11 12:15:19,279 [main:43] - GENERATING CALL OF fun <T> bar3(a: Array<out T>) = test(a::set)
2021-03-11 12:15:19,280 [main:61] - WITHOUT TYPE PARAMS = fun <T> bar3(a: Array<out String>) = test(a::set)
2021-03-11 12:15:19,352 [main:302] - generating value of type = Array<out String> false depth = 1
2021-03-11 12:15:19,427 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<Strg> = TODO()
2021-03-11 12:15:19,428 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<Strg> = TODO()
2021-03-11 12:15:19,573 [main:302] - generating value of type = Int true depth = 4
2021-03-11 12:15:19,574 [main:95] - GENERATED = arrayOfNulls<String>(-1065875956)
2021-03-11 12:15:19,574 [main:95] - GENERATED = bar3<String>(arrayOfNulls<String>(-1065875956))
2021-03-11 12:15:19,645 [main:43] - GENERATING CALL OF fun <T> bar4(a: Array<in T>) = test(a::get)
2021-03-11 12:15:19,793 [main:61] - WITHOUT TYPE PARAMS = fun <T> bar4(a: Array<in Array<Char>>) = test(a::get)
2021-03-11 12:15:19,867 [main:302] - generating value of type = Array<in Array<Char>> false depth = 1
2021-03-11 12:15:19,942 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Array<Char>> = TODO()
2021-03-11 12:15:19,943 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Array<Char>> = TODO()
2021-03-11 12:15:20,016 [main:95] - GENERATED = emptyArray<Array<Char>>()
2021-03-11 12:15:20,016 [main:95] - GENERATED = bar4<Array<Char>>(emptyArray<Array<Char>>())
2021-03-11 12:15:20,086 [main:43] - GENERATING CALL OF fun <T> bar5(a: Array<in T>) = test(a::set)
2021-03-11 12:15:20,530 [main:61] - WITHOUT TYPE PARAMS = fun <T> bar5(a: Array<in Array<Triple<Short, ULong?, Char>>>) = test(a::set)
2021-03-11 12:15:20,604 [main:302] - generating value of type = Array<in Array<Triple<Short, ULong?, Char>>> false depth = 1
2021-03-11 12:15:20,681 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Array<Triple<Short, ULong?, Char>>): Array<Array<Triple<Short, ULong?, Char>>> = TODO()
2021-03-11 12:15:20,682 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Array<Triple<Short, ULong?, Char>>): Array<Array<Triple<Short, ULong?, Char>>> = TODO()
2021-03-11 12:15:20,757 [main:302] - generating value of type = Array<Triple<Short, ULong?, Char>> false depth = 4
2021-03-11 12:15:20,836 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Triple<Short, ULong?, Char>> = TODO()
2021-03-11 12:15:20,836 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Triple<Short, ULong?, Char>> = TODO()
2021-03-11 12:15:20,909 [main:95] - GENERATED = emptyArray<Triple<Short, ULong?, Char>>()
2021-03-11 12:15:20,910 [main:95] - GENERATED = arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>())
2021-03-11 12:15:20,910 [main:95] - GENERATED = bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))
2021-03-11 12:15:20,981 [main:43] - GENERATING CALL OF fun <F> test(f: F): String = f.toString()
2021-03-11 12:15:21,539 [main:61] - WITHOUT TYPE PARAMS = fun <F> test(f: Triple<Char?, Double, Float>?): String = f.toString()
2021-03-11 12:15:21,616 [main:302] - generating value of type = Triple<Char?, Double, Float> false depth = 1
2021-03-11 12:15:21,694 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Char?, second: Double, third: Float): Triple<Char?, Double, Float> = TODO()
2021-03-11 12:15:21,695 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Char?, second: Double, third: Float): Triple<Char?, Double, Float> = TODO()
2021-03-11 12:15:21,770 [main:302] - generating value of type = Char true depth = 4
2021-03-11 12:15:21,771 [main:302] - generating value of type = Double true depth = 4
2021-03-11 12:15:21,771 [main:302] - generating value of type = Float true depth = 4
2021-03-11 12:15:21,771 [main:95] - GENERATED = Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f)
2021-03-11 12:15:21,772 [main:95] - GENERATED = test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))
2021-03-11 12:15:21,853 [main:48] - Try №0
2021-03-11 12:15:34,836 [main:48] - Already checked
2021-03-11 12:15:38,699 [main:71] - Trying to insert override suspend fun fu3(): Kla0 {
        return fu4(fu5(fu6()))
    }
2021-03-11 12:15:38,958 [main:66] - Compilation checking started
2021-03-11 12:15:40,043 [main:99] - Trying to change 207 nodes
2021-03-11 12:15:40,043 [main:103] - replacing (fu6(Kla0("OK")), Kla0)
2021-03-11 12:15:40,045 [main:38] - replacing fu6(Kla0("OK")) Kla0
2021-03-11 12:15:40,045 [main:42] - Getting value of type Kla0
2021-03-11 12:15:40,185 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:15:40,187 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-11 12:15:40,330 [main:194] - Type params = []
2021-03-11 12:15:40,480 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:15:40,483 [main:46] - GENERATED VALUE OF TYPE Kla0 = Kla0("fsqyb")
2021-03-11 12:15:40,483 [main:49] - GENERATED IS CALL =true
2021-03-11 12:15:41,893 [main:55] - randomType = Function1<Float, Function2<HashMap<ULong?, Kla6>, UByte, HashSet<Kla9>>>
2021-03-11 12:15:41,895 [main:94] - GETTING Kla0 from String
2021-03-11 12:15:41,924 [main:94] - GETTING Kla0 from String
2021-03-11 12:15:41,925 [main:94] - GETTING Kla0 from String
2021-03-11 12:15:41,926 [main:94] - GETTING Kla0 from String
2021-03-11 12:15:41,927 [main:94] - GETTING Kla0 from String
2021-03-11 12:15:41,928 [main:94] - GETTING Kla0 from String
2021-03-11 12:15:41,929 [main:94] - GETTING Kla0 from String
2021-03-11 12:15:41,929 [main:110] - replacement of fu6(Kla0("OK")) of type Kla0 is Kla0("fsqyb")
2021-03-11 12:15:42,073 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:15:42,073 [main:66] - Compilation checking started
2021-03-11 12:15:42,718 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu7()
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:15:42,722 [main:103] - replacing (prope2, String)
2021-03-11 12:15:42,725 [main:38] - replacing prope2 String
2021-03-11 12:15:42,725 [main:42] - Getting value of type String
2021-03-11 12:15:42,900 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:15:42,904 [main:46] - GENERATED VALUE OF TYPE String = "aidwi"
2021-03-11 12:15:42,904 [main:49] - GENERATED IS CALL =false
2021-03-11 12:15:42,914 [main:55] - randomType = Kla2
2021-03-11 12:15:43,072 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 12:15:43,075 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}
2021-03-11 12:15:43,214 [main:194] - Type params = []
2021-03-11 12:15:43,381 [main:137] - GENERATING call of type public final suspend fun fu7(): kotlin.String defined in Kla2[SimpleFunctionDescriptorImpl@37ec980d]
2021-03-11 12:15:43,381 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17845e8c]
2021-03-11 12:15:43,381 [main:66] - Generated call from random type = (Kla2()).fu7().decapitalize()
2021-03-11 12:15:43,382 [main:94] - GETTING String from String
2021-03-11 12:15:43,411 [main:101] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@720e46c5]]
2021-03-11 12:15:43,412 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@720e46c5]
2021-03-11 12:15:43,556 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:15:43,694 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:15:43,696 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).replaceIndentByMargin("fkwdg", "jjdbf")
2021-03-11 12:15:43,697 [main:101] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ff0185]]
2021-03-11 12:15:43,697 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ff0185]
2021-03-11 12:15:43,831 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:15:44,007 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:15:44,165 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:15:44,168 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).replaceBefore('﹇', "ujpnl", "bjaja")
2021-03-11 12:15:44,168 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a5650d3]]
2021-03-11 12:15:44,168 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a5650d3]
2021-03-11 12:15:44,168 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).trim()
2021-03-11 12:15:44,168 [main:101] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23a7e08]]
2021-03-11 12:15:44,168 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23a7e08]
2021-03-11 12:15:44,298 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:15:44,301 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:15:44,304 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).takeWhile({a: Char -> true})
2021-03-11 12:15:44,304 [main:101] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ef6a1a]]
2021-03-11 12:15:44,304 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ef6a1a]
2021-03-11 12:15:44,451 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:15:44,604 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:15:44,608 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).substringAfterLast('ꭁ', "mvxug")
2021-03-11 12:15:44,609 [main:101] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1384dfc4]]
2021-03-11 12:15:44,609 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1384dfc4]
2021-03-11 12:15:44,757 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:15:44,760 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:15:44,762 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).takeLastWhile({a: Char -> false})
2021-03-11 12:15:44,763 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]]
2021-03-11 12:15:44,763 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]
2021-03-11 12:15:44,763 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).toLowerCase()
2021-03-11 12:15:44,763 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7384550b]]
2021-03-11 12:15:44,763 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7384550b]
2021-03-11 12:15:44,895 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:15:45,036 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:15:45,169 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:15:45,174 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).replaceRange(-438880846, 1319788995, "lwoxz")
2021-03-11 12:15:45,175 [main:101] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3170b0]]
2021-03-11 12:15:45,175 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3170b0]
2021-03-11 12:15:45,311 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:15:45,314 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).trimMargin("tlbeo")
2021-03-11 12:15:45,315 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]]
2021-03-11 12:15:45,315 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]
2021-03-11 12:15:45,446 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:15:45,449 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).concat("pepwg")
2021-03-11 12:15:45,449 [main:110] - replacement of prope2 of type String is (bar2<Boolean>(arrayOf<Boolean>(true))).trimMargin("tlbeo")
2021-03-11 12:15:45,585 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:15:45,586 [main:66] - Compilation checking started
2021-03-11 12:15:45,973 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu7()
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        (bar2<Boolean>(arrayOf<Boolean>(true))).trimMargin("tlbeo") = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:15:45,975 [main:103] - replacing (i, Int)
2021-03-11 12:15:45,977 [main:38] - replacing i Int
2021-03-11 12:15:45,977 [main:42] - Getting value of type Int
2021-03-11 12:15:46,113 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:15:46,116 [main:46] - GENERATED VALUE OF TYPE Int = 1319265044
2021-03-11 12:15:46,116 [main:49] - GENERATED IS CALL =false
2021-03-11 12:15:46,463 [main:55] - randomType = List<Char>
2021-03-11 12:15:46,464 [main:94] - GETTING Int from String
2021-03-11 12:15:46,485 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26e94a44]]
2021-03-11 12:15:46,485 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26e94a44]
2021-03-11 12:15:46,620 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:15:46,623 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).length.compareTo(-79)
2021-03-11 12:15:46,623 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e6d7ca8]]
2021-03-11 12:15:46,623 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:15:46,756 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:15:46,759 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e6d7ca8]
2021-03-11 12:15:46,891 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:15:46,894 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).compareTo("otesr").rem(-114)
2021-03-11 12:15:46,894 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7f8f4e0d]]
2021-03-11 12:15:46,894 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:15:47,026 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:15:47,029 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7f8f4e0d]
2021-03-11 12:15:47,167 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:15:47,170 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).compareTo("lfocf").or(-1490313531)
2021-03-11 12:15:47,171 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38d3a19d]]
2021-03-11 12:15:47,171 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:15:47,317 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:15:47,458 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:15:47,461 [main:137] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38d3a19d]
2021-03-11 12:15:47,601 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:15:47,737 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:15:47,880 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:15:47,883 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1490935877, -740833135).lastIndexOf('劥', 328992204, true)
2021-03-11 12:15:47,883 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@51338b5]]
2021-03-11 12:15:47,883 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:15:48,015 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:15:48,018 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@51338b5]
2021-03-11 12:15:48,191 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:15:48,194 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).compareTo("utohc").coerceAtLeast(-1903080582)
2021-03-11 12:15:48,194 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@28fe86da]]
2021-03-11 12:15:48,194 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:15:48,326 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:15:48,329 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).get(-1200622052).code
2021-03-11 12:15:48,329 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@53f6a24]]
2021-03-11 12:15:48,329 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:15:48,463 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:15:48,466 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@53f6a24]
2021-03-11 12:15:48,466 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).compareTo("vpbkm").countTrailingZeroBits()
2021-03-11 12:15:48,466 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14379f00]]
2021-03-11 12:15:48,466 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14379f00]
2021-03-11 12:15:48,603 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:15:48,606 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)
2021-03-11 12:15:48,606 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@4e0b70cb]]
2021-03-11 12:15:48,606 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).length.sign
2021-03-11 12:15:48,606 [main:101] - Case = [public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@82b430e]]
2021-03-11 12:15:48,606 [main:137] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@82b430e]
2021-03-11 12:15:48,740 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:15:48,874 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:15:49,011 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:15:49,013 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).indexOf('൉', -59820146, false)
2021-03-11 12:15:49,014 [main:110] - replacement of i of type Int is (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)
2021-03-11 12:15:49,147 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:15:49,147 [main:66] - Compilation checking started
2021-03-11 12:15:49,785 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu7()
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:15:49,787 [main:103] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-11 12:15:49,788 [main:38] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-11 12:15:49,788 [main:42] - Getting value of type String
2021-03-11 12:15:49,926 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:15:49,929 [main:46] - GENERATED VALUE OF TYPE String = "supmy"
2021-03-11 12:15:49,929 [main:49] - GENERATED IS CALL =false
2021-03-11 12:15:50,720 [main:55] - randomType = Function1<Kla10, ArrayDeque<ULong>>
2021-03-11 12:15:50,720 [main:94] - GETTING String from String
2021-03-11 12:15:50,745 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]]
2021-03-11 12:15:50,745 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:15:50,884 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:15:51,021 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:15:51,024 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]
2021-03-11 12:15:51,162 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:15:51,305 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:15:51,309 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:15:51,601 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:15:51,604 [main:95] - GENERATED = StringBuilder(-1177888437)
2021-03-11 12:15:51,740 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:15:51,743 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(136330640, -234139869).commonSuffixWith(StringBuilder(-1177888437), true)
2021-03-11 12:15:51,743 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]]
2021-03-11 12:15:51,743 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:15:51,878 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:15:51,881 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]
2021-03-11 12:15:51,881 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).get(1134213079).uppercase()
2021-03-11 12:15:51,881 [main:101] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@784c069d]]
2021-03-11 12:15:51,881 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@784c069d]
2021-03-11 12:15:52,013 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:15:52,150 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:15:52,154 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).substringBeforeLast('촋', "dvfnz")
2021-03-11 12:15:52,154 [main:101] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21fc0bcb]]
2021-03-11 12:15:52,154 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21fc0bcb]
2021-03-11 12:15:52,300 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:15:52,303 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:15:52,307 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
2021-03-11 12:15:52,307 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]]
2021-03-11 12:15:52,307 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:15:52,498 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:15:52,632 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:15:52,635 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]
2021-03-11 12:15:52,767 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:15:52,770 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(-1500971069, 122585787).repeat(-1593510742)
2021-03-11 12:15:52,770 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]]
2021-03-11 12:15:52,770 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]
2021-03-11 12:15:52,911 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:15:52,915 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).concat("eqquk")
2021-03-11 12:15:52,915 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]]
2021-03-11 12:15:52,915 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]
2021-03-11 12:15:52,915 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).reversed()
2021-03-11 12:15:52,915 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]]
2021-03-11 12:15:52,915 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]
2021-03-11 12:15:53,051 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:15:53,054 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).substring(2137617007)
2021-03-11 12:15:53,055 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f03e0c3]]
2021-03-11 12:15:53,055 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f03e0c3]
2021-03-11 12:15:53,055 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).trimEnd()
2021-03-11 12:15:53,055 [main:101] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ef6a1a]]
2021-03-11 12:15:53,055 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ef6a1a]
2021-03-11 12:15:53,188 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:15:53,321 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:15:53,324 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).substringAfterLast('鏉', "posyy")
2021-03-11 12:15:53,324 [main:110] - replacement of "Wrong state-machine generated: it is finished early" of type String is (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
2021-03-11 12:15:53,455 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:15:53,455 [main:66] - Compilation checking started
2021-03-11 12:15:54,107 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu7()
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:15:54,112 [main:103] - replacing (prope2.getOrThrow(), Ty0)
2021-03-11 12:15:54,114 [main:38] - replacing prope2.getOrThrow() Ty0
2021-03-11 12:15:54,115 [main:42] - Getting value of type Ty0
2021-03-11 12:15:54,298 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 12:15:54,304 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 12:15:54,493 [main:55] - randomType = Kla7<Kla8>
2021-03-11 12:15:54,632 [main:302] - generating value of type = Kla7<Kla8> false depth = 0
2021-03-11 12:15:54,636 [main:112] - generating klass Kla7 text = abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 12:15:55,255 [main:302] - generating value of type = Kla10 false depth = 2
2021-03-11 12:15:55,258 [main:112] - generating klass Kla10 text = object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-11 12:15:55,280 [main:94] - GETTING Ty0 from String
2021-03-11 12:15:55,309 [main:94] - GETTING Ty0 from String
2021-03-11 12:15:55,310 [main:94] - GETTING Ty0 from String
2021-03-11 12:15:55,310 [main:94] - GETTING Ty0 from String
2021-03-11 12:15:55,311 [main:94] - GETTING Ty0 from String
2021-03-11 12:15:55,312 [main:94] - GETTING Ty0 from String
2021-03-11 12:15:55,313 [main:94] - GETTING Ty0 from String
2021-03-11 12:15:55,313 [main:107] - Cant find and generate replacement for prope2.getOrThrow() type Ty0
2021-03-11 12:15:55,313 [main:103] - replacing ({
        prope2.exceptionOrNull()?.let(x)
    }, Unit?)
2021-03-11 12:15:55,315 [main:38] - replacing {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    } Unit?
2021-03-11 12:15:55,315 [main:42] - Getting value of type Unit?
2021-03-11 12:15:55,458 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 12:15:55,610 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:15:55,615 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:15:55,923 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 12:15:55,926 [main:95] - GENERATED = require(false)
2021-03-11 12:15:55,926 [main:46] - GENERATED VALUE OF TYPE Unit? = require(false)
2021-03-11 12:15:55,926 [main:49] - GENERATED IS CALL =true
2021-03-11 12:15:56,102 [main:55] - randomType = Kla1?
2021-03-11 12:15:56,107 [main:94] - GETTING Unit? from String
2021-03-11 12:15:56,136 [main:101] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fa44243]]
2021-03-11 12:15:56,137 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fa44243]
2021-03-11 12:15:56,282 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 12:15:56,286 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:15:56,434 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:15:56,438 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:15:56,994 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:15:56,997 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 12:15:57,001 [main:302] - generating value of type = Any false depth = 5
2021-03-11 12:15:57,001 [main:95] - GENERATED = require(false, { "btstj"})
2021-03-11 12:15:57,001 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>())))?.forEachIndexed({a: Int, b: Char -> require(false, { "btstj"})})
2021-03-11 12:15:57,002 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a37d7ea]]
2021-03-11 12:15:57,002 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:15:57,142 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:15:57,291 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:15:57,294 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a37d7ea]
2021-03-11 12:15:57,435 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 12:15:57,439 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:15:57,587 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:15:57,592 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:15:58,058 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:15:58,061 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 12:15:58,064 [main:302] - generating value of type = Any false depth = 5
2021-03-11 12:15:58,064 [main:95] - GENERATED = check(false, { "mkmkf"})
2021-03-11 12:15:58,065 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>())))?.subSequence(-1895610622, -1944379702).forEach({a: Char -> check(false, { "mkmkf"})})
2021-03-11 12:15:58,065 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fa44243]]
2021-03-11 12:15:58,065 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:15:58,203 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:15:58,346 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:15:58,349 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fa44243]
2021-03-11 12:15:58,490 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 12:15:58,494 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:15:58,641 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:15:58,645 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:15:59,118 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:15:59,121 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 12:15:59,125 [main:302] - generating value of type = Any false depth = 5
2021-03-11 12:15:59,125 [main:95] - GENERATED = check(true, { "kduug"})
2021-03-11 12:15:59,125 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>())))?.subSequence(1486375731, -1009413314).forEachIndexed({a: Int, b: Char -> check(true, { "kduug"})})
2021-03-11 12:15:59,125 [main:101] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a37d7ea]]
2021-03-11 12:15:59,125 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a37d7ea]
2021-03-11 12:15:59,266 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 12:15:59,269 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:15:59,415 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:15:59,419 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:15:59,893 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:15:59,897 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 12:15:59,900 [main:302] - generating value of type = Any false depth = 5
2021-03-11 12:15:59,900 [main:95] - GENERATED = check(true, { "mhaxo"})
2021-03-11 12:15:59,900 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>())))?.forEach({a: Char -> check(true, { "mhaxo"})})
2021-03-11 12:15:59,900 [main:110] - replacement of {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    } of type Unit? is (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>())))?.subSequence(1486375731, -1009413314).forEachIndexed({a: Int, b: Char -> check(true, { "kduug"})})
2021-03-11 12:16:00,039 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:16:00,039 [main:66] - Compilation checking started
2021-03-11 12:16:00,046 [main:71] - Wrong syntax or breaks conditions
2021-03-11 12:16:00,046 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu7()
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>())))?.subSequence(1486375731, -1009413314).forEachIndexed({a: Int, b: Char -> check(true, { "kduug"})})
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:16:00,051 [main:103] - replacing (prope2, Result<Ty0>)
2021-03-11 12:16:00,052 [main:38] - replacing prope2 Result<Ty0>
2021-03-11 12:16:00,052 [main:42] - Getting value of type Result<Ty0>
2021-03-11 12:16:00,192 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 12:16:00,336 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 12:16:00,340 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 12:16:00,659 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 12:16:00,659 [main:46] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 12:16:00,827 [main:55] - randomType = UShort
2021-03-11 12:16:00,971 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:16:01,016 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:16:01,041 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:16:01,043 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:16:01,044 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:16:01,045 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:16:01,046 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:16:01,048 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:16:01,048 [main:107] - Cant find and generate replacement for prope2 type Result<Ty0>
2021-03-11 12:16:01,048 [main:103] - replacing ("tail-call optimization hit: method " + method, String)
2021-03-11 12:16:01,050 [main:38] - replacing "tail-call optimization hit: method " + method String
2021-03-11 12:16:01,050 [main:42] - Getting value of type String
2021-03-11 12:16:01,193 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:01,197 [main:46] - GENERATED VALUE OF TYPE String = "lyyge"
2021-03-11 12:16:01,197 [main:49] - GENERATED IS CALL =false
2021-03-11 12:16:03,549 [main:55] - randomType = Triple<Float, Triple<HashSet<Kla1>, UByte, Char>?, Triple<Pair<UByte?, Char>, Kla8?, Long>>?
2021-03-11 12:16:03,695 [main:302] - generating value of type = Triple<Float, Triple<HashSet<Kla1>, UByte, Char>?, Triple<Pair<UByte?, Char>, Kla8?, Long>> false depth = 0
2021-03-11 12:16:03,850 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Float, second: Triple<HashSet<Kla1>, UByte, Char>?, third: Triple<Pair<UByte?, Char>, Kla8?, Long>): Triple<Float, Triple<HashSet<Kla1>, UByte, Char>?, Triple<Pair<UByte?, Char>, Kla8?, Long>> = TODO()
2021-03-11 12:16:03,854 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Float, second: Triple<HashSet<Kla1>, UByte, Char>?, third: Triple<Pair<UByte?, Char>, Kla8?, Long>): Triple<Float, Triple<HashSet<Kla1>, UByte, Char>?, Triple<Pair<UByte?, Char>, Kla8?, Long>> = TODO()
2021-03-11 12:16:04,005 [main:302] - generating value of type = Float true depth = 3
2021-03-11 12:16:04,008 [main:302] - generating value of type = Triple<HashSet<Kla1>, UByte, Char> false depth = 3
2021-03-11 12:16:04,158 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: HashSet<Kla1>, second: UByte, third: Char): Triple<HashSet<Kla1>, UByte, Char> = TODO()
2021-03-11 12:16:04,162 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: HashSet<Kla1>, second: UByte, third: Char): Triple<HashSet<Kla1>, UByte, Char> = TODO()
2021-03-11 12:16:04,313 [main:302] - generating value of type = HashSet<Kla1> false depth = 6
2021-03-11 12:16:04,460 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<Kla1> = TODO()
2021-03-11 12:16:04,465 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<Kla1> = TODO()
2021-03-11 12:16:04,937 [main:302] - generating value of type = Int true depth = 9
2021-03-11 12:16:04,940 [main:302] - generating value of type = Float true depth = 9
2021-03-11 12:16:04,944 [main:95] - GENERATED = LinkedHashSet<Kla1>(258765674, 0.068362296f)
2021-03-11 12:16:04,944 [main:302] - generating value of type = UByte true depth = 6
2021-03-11 12:16:04,947 [main:302] - generating value of type = Char true depth = 6
2021-03-11 12:16:04,950 [main:95] - GENERATED = Triple<HashSet<Kla1>, UByte, Char>(LinkedHashSet<Kla1>(258765674, 0.068362296f), 38.toUByte(), '㾓')
2021-03-11 12:16:04,950 [main:302] - generating value of type = Triple<Pair<UByte?, Char>, Kla8?, Long> false depth = 3
2021-03-11 12:16:05,098 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Pair<UByte?, Char>, second: Kla8?, third: Long): Triple<Pair<UByte?, Char>, Kla8?, Long> = TODO()
2021-03-11 12:16:05,103 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Pair<UByte?, Char>, second: Kla8?, third: Long): Triple<Pair<UByte?, Char>, Kla8?, Long> = TODO()
2021-03-11 12:16:05,256 [main:302] - generating value of type = Pair<UByte?, Char> false depth = 6
2021-03-11 12:16:05,405 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UByte?, second: Char): Pair<UByte?, Char> = TODO()
2021-03-11 12:16:05,410 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UByte?, second: Char): Pair<UByte?, Char> = TODO()
2021-03-11 12:16:05,559 [main:302] - generating value of type = UByte true depth = 9
2021-03-11 12:16:05,562 [main:302] - generating value of type = Char true depth = 9
2021-03-11 12:16:05,565 [main:95] - GENERATED = Pair<UByte?, Char>(35.toUByte(), 'ȃ')
2021-03-11 12:16:05,565 [main:302] - generating value of type = Kla8 false depth = 6
2021-03-11 12:16:05,569 [main:112] - generating klass Kla8 text = class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-11 12:16:05,569 [main:302] - generating value of type = Long true depth = 6
2021-03-11 12:16:05,572 [main:95] - GENERATED = Triple<Pair<UByte?, Char>, Kla8?, Long>(Pair<UByte?, Char>(35.toUByte(), 'ȃ'), Kla8(), 2241798764153414020)
2021-03-11 12:16:05,572 [main:95] - GENERATED = Triple<Float, Triple<HashSet<Kla1>, UByte, Char>?, Triple<Pair<UByte?, Char>, Kla8?, Long>>(0.6590163f, Triple<HashSet<Kla1>, UByte, Char>(LinkedHashSet<Kla1>(258765674, 0.068362296f), 38.toUByte(), '㾓'), Triple<Pair<UByte?, Char>, Kla8?, Long>(Pair<UByte?, Char>(35.toUByte(), 'ȃ'), Kla8(), 2241798764153414020))
2021-03-11 12:16:05,613 [main:94] - GETTING String from String
2021-03-11 12:16:05,631 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f4c98d]]
2021-03-11 12:16:05,631 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:16:05,774 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:05,778 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f4c98d]
2021-03-11 12:16:05,778 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).get(-958868308).lowercase()
2021-03-11 12:16:05,778 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f7d80a8]]
2021-03-11 12:16:05,778 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f7d80a8]
2021-03-11 12:16:05,972 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:16:05,975 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:16:05,978 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).dropWhile({a: Char -> true})
2021-03-11 12:16:05,978 [main:101] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e33706e]]
2021-03-11 12:16:05,978 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e33706e]
2021-03-11 12:16:06,123 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:06,128 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).dropLast(1738773659)
2021-03-11 12:16:06,128 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]]
2021-03-11 12:16:06,128 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]
2021-03-11 12:16:06,128 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent()
2021-03-11 12:16:06,128 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]]
2021-03-11 12:16:06,128 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:16:06,270 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:06,274 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).length.toString(2065023423)
2021-03-11 12:16:06,274 [main:101] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2253ce57]]
2021-03-11 12:16:06,274 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2253ce57]
2021-03-11 12:16:06,414 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:16:06,417 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:16:06,421 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).dropLastWhile({a: Char -> false})
2021-03-11 12:16:06,421 [main:101] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3ed116f9]]
2021-03-11 12:16:06,421 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3ed116f9]
2021-03-11 12:16:06,564 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:16:06,564 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).plus("rglga")
2021-03-11 12:16:06,564 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]]
2021-03-11 12:16:06,564 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]
2021-03-11 12:16:06,564 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).toUpperCase()
2021-03-11 12:16:06,564 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]]
2021-03-11 12:16:06,564 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:16:06,706 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:06,851 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:06,854 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]
2021-03-11 12:16:06,996 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:16:07,150 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:16:07,154 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(-1113694674, 783761328).commonPrefixWith("tdqtq", false)
2021-03-11 12:16:07,154 [main:101] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ff0185]]
2021-03-11 12:16:07,154 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ff0185]
2021-03-11 12:16:07,296 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:16:07,444 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:07,589 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:07,592 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).replaceBefore('ፒ', "lllud", "nibjz")
2021-03-11 12:16:07,592 [main:110] - replacement of "tail-call optimization hit: method " + method of type String is (bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent()
2021-03-11 12:16:07,739 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:16:07,739 [main:66] - Compilation checking started
2021-03-11 12:16:08,384 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu7()
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:16:08,388 [main:103] - replacing (x, Function1<Ty0, Unit>)
2021-03-11 12:16:08,388 [main:38] - replacing x Function1<Ty0, Unit>
2021-03-11 12:16:08,388 [main:42] - Getting value of type Function1<Ty0, Unit>
2021-03-11 12:16:08,549 [main:302] - generating value of type = Function1<Ty0, Unit> false depth = 0
2021-03-11 12:16:08,552 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:16:08,707 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:16:08,711 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:16:09,027 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:16:09,030 [main:95] - GENERATED = check(true)
2021-03-11 12:16:09,031 [main:46] - GENERATED VALUE OF TYPE Function1<Ty0, Unit> = {a: Ty0 -> check(true)}
2021-03-11 12:16:09,031 [main:49] - GENERATED IS CALL =false
2021-03-11 12:16:09,209 [main:55] - randomType = Array<Kla6>
2021-03-11 12:16:09,354 [main:302] - generating value of type = Array<Kla6> false depth = 0
2021-03-11 12:16:09,502 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Kla6> = TODO()
2021-03-11 12:16:09,507 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Kla6> = TODO()
2021-03-11 12:16:09,656 [main:95] - GENERATED = emptyArray<Kla6>()
2021-03-11 12:16:09,673 [main:94] - GETTING Function1<Ty0, Unit> from String
2021-03-11 12:16:09,703 [main:94] - GETTING Function1<Ty0, Unit> from String
2021-03-11 12:16:09,704 [main:94] - GETTING Function1<Ty0, Unit> from String
2021-03-11 12:16:09,705 [main:94] - GETTING Function1<Ty0, Unit> from String
2021-03-11 12:16:09,706 [main:94] - GETTING Function1<Ty0, Unit> from String
2021-03-11 12:16:09,707 [main:94] - GETTING Function1<Ty0, Unit> from String
2021-03-11 12:16:09,708 [main:94] - GETTING Function1<Ty0, Unit> from String
2021-03-11 12:16:09,708 [main:110] - replacement of x of type Function1<Ty0, Unit> is {a: Ty0 -> check(true)}
2021-03-11 12:16:09,852 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:16:09,852 [main:66] - Compilation checking started
2021-03-11 12:16:10,280 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu7()
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
{a: Ty0 -> check(true)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:16:10,284 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 12:16:10,284 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 12:16:10,284 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 12:16:10,441 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 12:16:10,448 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 12:16:10,461 [main:55] - randomType = Kla3
2021-03-11 12:16:10,607 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 12:16:10,610 [main:112] - generating klass Kla3 text = class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}
2021-03-11 12:16:10,624 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:16:10,641 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:16:10,641 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:16:10,642 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:16:10,643 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:16:10,643 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:16:10,644 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:16:10,644 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 12:16:10,644 [main:103] - replacing (prope5, Boolean)
2021-03-11 12:16:10,646 [main:38] - replacing prope5 Boolean
2021-03-11 12:16:10,646 [main:42] - Getting value of type Boolean
2021-03-11 12:16:10,792 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:16:10,795 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:16:10,795 [main:49] - GENERATED IS CALL =false
2021-03-11 12:16:13,035 [main:55] - randomType = Function1<Boolean?, Pair<LinkedHashSet<Function2<Double, HashSet<Kla5?>, HashMap<Int, Int>>>, Array<Kla10?>>>
2021-03-11 12:16:13,036 [main:94] - GETTING Boolean from String
2021-03-11 12:16:13,057 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fad1c1b]]
2021-03-11 12:16:13,058 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:16:13,211 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:13,215 [main:137] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fad1c1b]
2021-03-11 12:16:13,215 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).get(-1292996948).isHighSurrogate()
2021-03-11 12:16:13,215 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27e859b]]
2021-03-11 12:16:13,215 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:16:13,371 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:13,374 [main:137] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27e859b]
2021-03-11 12:16:13,375 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).get(1314995413).isDigit()
2021-03-11 12:16:13,375 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49dbf015]]
2021-03-11 12:16:13,375 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:16:13,524 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:13,527 [main:137] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49dbf015]
2021-03-11 12:16:13,527 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).get(1759979896).isUpperCase()
2021-03-11 12:16:13,527 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55512dae]]
2021-03-11 12:16:13,528 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:16:13,673 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:13,676 [main:137] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55512dae]
2021-03-11 12:16:13,828 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:16:13,975 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:16:13,979 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).get(-611791044).equals('띑', true)
2021-03-11 12:16:13,979 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e28a6b1]]
2021-03-11 12:16:13,979 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:16:14,124 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:14,273 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:14,277 [main:137] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e28a6b1]
2021-03-11 12:16:14,421 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:16:14,578 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:16:14,582 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).subSequence(-1876544151, 2042068976).startsWith('ꊰ', true)
2021-03-11 12:16:14,582 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71bbc8d3]]
2021-03-11 12:16:14,582 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71bbc8d3]
2021-03-11 12:16:14,582 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).isEmpty()
2021-03-11 12:16:14,582 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2729276e]]
2021-03-11 12:16:14,582 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:16:14,731 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:14,882 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:14,886 [main:137] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2729276e]
2021-03-11 12:16:14,886 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).subSequence(1344288782, 805243335).any()
2021-03-11 12:16:14,886 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40f7b0b7]]
2021-03-11 12:16:14,886 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:16:15,033 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:15,182 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:15,186 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40f7b0b7]
2021-03-11 12:16:15,332 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:16:15,487 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 12:16:15,492 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 12:16:16,053 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:16:16,057 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 12:16:16,218 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(): Set<RegexOption> = TODO()
2021-03-11 12:16:16,222 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(): Set<RegexOption> = TODO()
2021-03-11 12:16:16,377 [main:95] - GENERATED = mutableSetOf<RegexOption>()
2021-03-11 12:16:16,377 [main:95] - GENERATED = Regex("tbris", mutableSetOf<RegexOption>())
2021-03-11 12:16:16,377 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).subSequence(-1171305429, -388904782).matches(Regex("tbris", mutableSetOf<RegexOption>()))
2021-03-11 12:16:16,377 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6236697d]]
2021-03-11 12:16:16,377 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:16:16,523 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:16,527 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6236697d]
2021-03-11 12:16:16,672 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:16:16,673 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).compareTo("lhqtq").equals("dxvru")
2021-03-11 12:16:16,673 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18a3fd3f]]
2021-03-11 12:16:16,673 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:16:16,819 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:16,822 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18a3fd3f]
2021-03-11 12:16:16,823 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).get(-423808795).isISOControl()
2021-03-11 12:16:16,823 [main:110] - replacement of prope5 of type Boolean is true
2021-03-11 12:16:16,967 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:16:16,968 [main:66] - Compilation checking started
2021-03-11 12:16:17,371 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu7()
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope1.prope6 = {
            prope1.true = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:16:17,376 [main:103] - replacing (prope2.getOrThrow(), Ty0)
2021-03-11 12:16:17,377 [main:38] - replacing prope2.getOrThrow() Ty0
2021-03-11 12:16:17,377 [main:42] - Getting value of type Ty0
2021-03-11 12:16:17,540 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 12:16:17,546 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 12:16:18,115 [main:55] - randomType = Kla7<Collection<UShort>>
2021-03-11 12:16:18,262 [main:302] - generating value of type = Kla7<Collection<UShort>> false depth = 0
2021-03-11 12:16:18,266 [main:112] - generating klass Kla7 text = abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 12:16:18,934 [main:302] - generating value of type = Kla10 false depth = 2
2021-03-11 12:16:18,938 [main:112] - generating klass Kla10 text = object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-11 12:16:18,955 [main:94] - GETTING Ty0 from String
2021-03-11 12:16:18,976 [main:94] - GETTING Ty0 from String
2021-03-11 12:16:18,977 [main:94] - GETTING Ty0 from String
2021-03-11 12:16:18,978 [main:94] - GETTING Ty0 from String
2021-03-11 12:16:18,978 [main:94] - GETTING Ty0 from String
2021-03-11 12:16:18,979 [main:94] - GETTING Ty0 from String
2021-03-11 12:16:18,979 [main:94] - GETTING Ty0 from String
2021-03-11 12:16:18,979 [main:107] - Cant find and generate replacement for prope2.getOrThrow() type Ty0
2021-03-11 12:16:18,979 [main:103] - replacing (prope2, String)
2021-03-11 12:16:18,980 [main:38] - replacing prope2 String
2021-03-11 12:16:18,980 [main:42] - Getting value of type String
2021-03-11 12:16:19,131 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:19,135 [main:46] - GENERATED VALUE OF TYPE String = "xwkol"
2021-03-11 12:16:19,135 [main:49] - GENERATED IS CALL =false
2021-03-11 12:16:19,472 [main:55] - randomType = UShort?
2021-03-11 12:16:19,618 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:16:19,651 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline infix fun and(other: kotlin.UShort): kotlin.UShort defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@14f7276f]
2021-03-11 12:16:19,796 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:16:19,800 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c1fe92f]
2021-03-11 12:16:19,945 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:19,949 [main:66] - Generated call from random type = (25400.toUShort())?.and(3950.toUShort()).toString(1713178491)
2021-03-11 12:16:19,949 [main:94] - GETTING String from String
2021-03-11 12:16:19,966 [main:101] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@784c069d]]
2021-03-11 12:16:19,966 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@784c069d]
2021-03-11 12:16:20,112 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:16:20,261 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:20,265 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).substringBeforeLast('㶯', "zflrb")
2021-03-11 12:16:20,265 [main:101] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]]
2021-03-11 12:16:20,265 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]
2021-03-11 12:16:20,410 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:16:20,565 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:16:20,569 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).commonPrefixWith("kqvuk", true)
2021-03-11 12:16:20,726 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f7d80a8]]
2021-03-11 12:16:20,726 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f7d80a8]
2021-03-11 12:16:20,875 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:16:20,878 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:16:20,882 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).dropWhile({a: Char -> false})
2021-03-11 12:16:20,882 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]]
2021-03-11 12:16:20,882 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]
2021-03-11 12:16:21,073 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:16:21,224 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:16:21,227 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).commonSuffixWith("ozrsk", true)
2021-03-11 12:16:21,227 [main:101] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f592b75]]
2021-03-11 12:16:21,227 [main:137] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f592b75]
2021-03-11 12:16:21,372 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:21,375 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).prependIndent("tctil")
2021-03-11 12:16:21,375 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]]
2021-03-11 12:16:21,375 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:16:21,525 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:21,677 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:21,681 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]
2021-03-11 12:16:21,826 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:16:21,977 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:16:21,980 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).subSequence(570618207, 1928808633).commonSuffixWith("qucfn", false)
2021-03-11 12:16:21,980 [main:101] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32174727]]
2021-03-11 12:16:21,980 [main:137] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32174727]
2021-03-11 12:16:22,125 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:22,129 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).drop(-937985041)
2021-03-11 12:16:22,129 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f4c98d]]
2021-03-11 12:16:22,129 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:16:22,273 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:22,277 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f4c98d]
2021-03-11 12:16:22,277 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).get(-239105781).lowercase()
2021-03-11 12:16:22,277 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60d466a]]
2021-03-11 12:16:22,277 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:16:22,421 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:22,572 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:22,576 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60d466a]
2021-03-11 12:16:22,722 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:16:22,874 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 12:16:22,878 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 12:16:23,380 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:16:23,383 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 12:16:23,535 [main:43] - GENERATING CALL OF fun <E> HashSet(): Set<RegexOption> = TODO()
2021-03-11 12:16:23,539 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(): Set<RegexOption> = TODO()
2021-03-11 12:16:23,692 [main:95] - GENERATED = HashSet<RegexOption>()
2021-03-11 12:16:23,692 [main:95] - GENERATED = Regex("pkztm", HashSet<RegexOption>())
2021-03-11 12:16:23,842 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 12:16:23,846 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:16:23,852 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).subSequence(-1144283058, -1246295531).replace(Regex("pkztm", HashSet<RegexOption>()), {a: MatchResult -> "fqcfd"})
2021-03-11 12:16:23,852 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]]
2021-03-11 12:16:23,852 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]
2021-03-11 12:16:24,001 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:24,004 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).concat("bwrps")
2021-03-11 12:16:24,004 [main:110] - replacement of prope2 of type String is (bar1<Double>(0.7821309887591489)).prependIndent("tctil")
2021-03-11 12:16:24,151 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:16:24,151 [main:66] - Compilation checking started
2021-03-11 12:16:24,554 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu7()
    }

    if (prope2 != "OK") return "FAIL 1 $(bar1<Double>(0.7821309887591489)).prependIndent("tctil")"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:16:24,557 [main:103] - replacing (s, String)
2021-03-11 12:16:24,559 [main:38] - replacing s String
2021-03-11 12:16:24,559 [main:42] - Getting value of type String
2021-03-11 12:16:24,706 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:24,710 [main:46] - GENERATED VALUE OF TYPE String = "loger"
2021-03-11 12:16:24,710 [main:49] - GENERATED IS CALL =false
2021-03-11 12:16:25,799 [main:55] - randomType = Pair<Int, Function1<Kla7<ArrayDeque<Long>>, Char>>?
2021-03-11 12:16:25,960 [main:302] - generating value of type = Pair<Int, Function1<Kla7<ArrayDeque<Long>>, Char>> false depth = 0
2021-03-11 12:16:26,123 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Int, second: Function1<Kla7<ArrayDeque<Long>>, Char>): Pair<Int, Function1<Kla7<ArrayDeque<Long>>, Char>> = TODO()
2021-03-11 12:16:26,128 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Int, second: Function1<Kla7<ArrayDeque<Long>>, Char>): Pair<Int, Function1<Kla7<ArrayDeque<Long>>, Char>> = TODO()
2021-03-11 12:16:26,342 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:16:26,346 [main:302] - generating value of type = Function1<Kla7<ArrayDeque<Long>>, Char> false depth = 3
2021-03-11 12:16:26,349 [main:302] - generating value of type = Char true depth = 4
2021-03-11 12:16:26,353 [main:95] - GENERATED = Pair<Int, Function1<Kla7<ArrayDeque<Long>>, Char>>(-860514520, {a: Kla7<ArrayDeque<Long>> -> 'ꁆ'})
2021-03-11 12:16:26,381 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:16:26,533 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:26,537 [main:66] - Generated call from random type = (Pair<Int, Function1<Kla7<ArrayDeque<Long>>, Char>>(-860514520, {a: Kla7<ArrayDeque<Long>> -> 'ꁆ'}))?.first.toString(365194083)
2021-03-11 12:16:26,537 [main:94] - GETTING String from String
2021-03-11 12:16:26,556 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9c84af]]
2021-03-11 12:16:26,556 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9c84af]
2021-03-11 12:16:26,556 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).uppercase()
2021-03-11 12:16:26,556 [main:101] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1384dfc4]]
2021-03-11 12:16:26,556 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1384dfc4]
2021-03-11 12:16:26,704 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:16:26,708 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:16:26,712 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).takeLastWhile({a: Char -> false})
2021-03-11 12:16:26,712 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]]
2021-03-11 12:16:26,712 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]
2021-03-11 12:16:26,864 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:16:27,019 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:16:27,024 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:16:27,355 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:16:27,359 [main:95] - GENERATED = StringBuilder("nfgvb")
2021-03-11 12:16:27,359 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).removeSuffix(StringBuilder("nfgvb"))
2021-03-11 12:16:27,359 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]]
2021-03-11 12:16:27,359 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:16:27,510 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:27,665 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:27,669 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]
2021-03-11 12:16:27,822 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:16:27,982 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:16:27,987 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).subSequence(-1248918219, -973936314).commonPrefixWith("doxff", false)
2021-03-11 12:16:27,987 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f03e0c3]]
2021-03-11 12:16:27,987 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f03e0c3]
2021-03-11 12:16:27,987 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).trimEnd()
2021-03-11 12:16:27,987 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396c7a7b]]
2021-03-11 12:16:27,987 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396c7a7b]
2021-03-11 12:16:28,141 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 12:16:28,298 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): Iterable<Int> = TODO()
2021-03-11 12:16:28,303 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): Iterable<Int> = TODO()
2021-03-11 12:16:28,459 [main:95] - GENERATED = linkedSetOf<Int>()
2021-03-11 12:16:28,459 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).slice(linkedSetOf<Int>())
2021-03-11 12:16:28,459 [main:101] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2253ce57]]
2021-03-11 12:16:28,459 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2253ce57]
2021-03-11 12:16:28,609 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:16:28,613 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:16:28,616 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).dropLastWhile({a: Char -> false})
2021-03-11 12:16:28,616 [main:101] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4accd603]]
2021-03-11 12:16:28,616 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4accd603]
2021-03-11 12:16:28,767 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:16:28,921 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:16:28,926 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:16:29,255 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:16:29,413 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:16:29,418 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:16:29,743 [main:302] - generating value of type = Int true depth = 6
2021-03-11 12:16:29,746 [main:95] - GENERATED = StringBuilder(2077133065)
2021-03-11 12:16:29,746 [main:95] - GENERATED = StringBuilder(StringBuilder(2077133065))
2021-03-11 12:16:29,747 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).removeSurrounding(StringBuilder(StringBuilder(2077133065)))
2021-03-11 12:16:29,747 [main:101] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eec66c2]]
2021-03-11 12:16:29,747 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eec66c2]
2021-03-11 12:16:29,893 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:16:29,897 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:16:29,900 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).filter({a: Char -> false})
2021-03-11 12:16:29,901 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b328c0]]
2021-03-11 12:16:29,901 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:16:30,049 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:30,053 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b328c0]
2021-03-11 12:16:30,201 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:30,205 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).get(20829101).plus("olenz")
2021-03-11 12:16:30,205 [main:110] - replacement of s of type String is (bar0<UInt>(926620857.toUInt())).uppercase()
2021-03-11 12:16:30,355 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:16:30,356 [main:66] - Compilation checking started
2021-03-11 12:16:30,788 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().(bar0<UInt>(926620857.toUInt())).uppercase()
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu7()
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:16:30,792 [main:103] - replacing ({ error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }, Function0<Nothing>)
2021-03-11 12:16:30,795 [main:38] - replacing { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) } Function0<Nothing>
2021-03-11 12:16:30,796 [main:42] - Getting value of type Function0<Nothing>
2021-03-11 12:16:30,970 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-11 12:16:30,973 [main:302] - generating value of type = Nothing false depth = 1
2021-03-11 12:16:31,134 [main:43] - GENERATING CALL OF fun error(message: kotlin.Any): Nothg = TODO()
2021-03-11 12:16:31,139 [main:61] - WITHOUT TYPE PARAMS = fun error(message: kotlin.Any): Nothg = TODO()
2021-03-11 12:16:31,476 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:16:31,476 [main:95] - GENERATED = error("zozcc")
2021-03-11 12:16:31,476 [main:46] - GENERATED VALUE OF TYPE Function0<Nothing> = { error("zozcc")}
2021-03-11 12:16:31,476 [main:49] - GENERATED IS CALL =false
2021-03-11 12:16:32,280 [main:55] - randomType = LinkedHashMap<Double, Kla3?>?
2021-03-11 12:16:32,443 [main:302] - generating value of type = LinkedHashMap<Double, Kla3?> false depth = 0
2021-03-11 12:16:32,604 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Double, Kla3?> = TODO()
2021-03-11 12:16:32,609 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Double, Kla3?> = TODO()
2021-03-11 12:16:32,767 [main:95] - GENERATED = linkedMapOf<Double, Kla3?>()
2021-03-11 12:16:32,880 [main:94] - GETTING Function0<Nothing> from String
2021-03-11 12:16:32,897 [main:94] - GETTING Function0<Nothing> from String
2021-03-11 12:16:32,898 [main:94] - GETTING Function0<Nothing> from String
2021-03-11 12:16:32,898 [main:94] - GETTING Function0<Nothing> from String
2021-03-11 12:16:32,899 [main:94] - GETTING Function0<Nothing> from String
2021-03-11 12:16:32,900 [main:94] - GETTING Function0<Nothing> from String
2021-03-11 12:16:32,901 [main:94] - GETTING Function0<Nothing> from String
2021-03-11 12:16:32,901 [main:110] - replacement of { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) } of type Function0<Nothing> is { error("zozcc")}
2021-03-11 12:16:33,052 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:16:33,052 [main:66] - Compilation checking started
2021-03-11 12:16:33,738 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu7()
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:16:33,743 [main:103] - replacing (prope5, Boolean)
2021-03-11 12:16:33,743 [main:38] - replacing prope5 Boolean
2021-03-11 12:16:33,744 [main:42] - Getting value of type Boolean
2021-03-11 12:16:33,931 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:16:33,935 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:16:33,935 [main:49] - GENERATED IS CALL =false
2021-03-11 12:16:33,950 [main:55] - randomType = Kla4
2021-03-11 12:16:34,115 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:16:34,119 [main:112] - generating klass Kla4 text = class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}
2021-03-11 12:16:34,137 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@2710a203]
2021-03-11 12:16:34,290 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:16:34,290 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5edafefc]
2021-03-11 12:16:34,439 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:16:34,443 [main:66] - Generated call from random type = (Kla4()).equals("fbqtd").or(true)
2021-03-11 12:16:34,443 [main:110] - replacement of prope5 of type Boolean is (Kla4()).equals("fbqtd").or(true)
2021-03-11 12:16:34,592 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:16:34,593 [main:66] - Compilation checking started
2021-03-11 12:16:35,286 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu7()
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:16:35,289 [main:103] - replacing (this, Kla6)
2021-03-11 12:16:35,291 [main:38] - replacing this Kla6
2021-03-11 12:16:35,291 [main:42] - Getting value of type Kla6
2021-03-11 12:16:35,454 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 12:16:35,458 [main:112] - generating klass Kla6 text = class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-11 12:16:35,458 [main:46] - GENERATED VALUE OF TYPE Kla6 = Kla6()
2021-03-11 12:16:35,458 [main:49] - GENERATED IS CALL =true
2021-03-11 12:16:36,184 [main:55] - randomType = Function2<UInt, UInt, Float>
2021-03-11 12:16:36,185 [main:94] - GETTING Kla6 from String
2021-03-11 12:16:36,206 [main:94] - GETTING Kla6 from String
2021-03-11 12:16:36,207 [main:94] - GETTING Kla6 from String
2021-03-11 12:16:36,207 [main:94] - GETTING Kla6 from String
2021-03-11 12:16:36,208 [main:94] - GETTING Kla6 from String
2021-03-11 12:16:36,209 [main:94] - GETTING Kla6 from String
2021-03-11 12:16:36,209 [main:94] - GETTING Kla6 from String
2021-03-11 12:16:36,209 [main:110] - replacement of this of type Kla6 is Kla6()
2021-03-11 12:16:36,366 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:16:36,366 [main:66] - Compilation checking started
2021-03-11 12:16:37,048 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu7()
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:16:37,053 [main:103] - replacing (fu4(fu5(fu6())), Kla0)
2021-03-11 12:16:37,056 [main:38] - replacing fu4(fu5(fu6())) Kla0
2021-03-11 12:16:37,056 [main:42] - Getting value of type Kla0
2021-03-11 12:16:37,233 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:16:37,239 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-11 12:16:37,444 [main:194] - Type params = []
2021-03-11 12:16:37,601 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:16:37,605 [main:46] - GENERATED VALUE OF TYPE Kla0 = Kla0("jvfhj")
2021-03-11 12:16:37,605 [main:49] - GENERATED IS CALL =true
2021-03-11 12:16:38,947 [main:55] - randomType = Array<Function2<Set<Double>, UInt, UShort>>?
2021-03-11 12:16:39,112 [main:302] - generating value of type = Array<Function2<Set<Double>, UInt, UShort>> false depth = 0
2021-03-11 12:16:39,285 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Function2<Set<Double>, UInt, UShort>> = TODO()
2021-03-11 12:16:39,290 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Function2<Set<Double>, UInt, UShort>> = TODO()
2021-03-11 12:16:39,462 [main:95] - GENERATED = emptyArray<Function2<Set<Double>, UInt, UShort>>()
2021-03-11 12:16:39,487 [main:94] - GETTING Kla0 from String
2021-03-11 12:16:39,516 [main:94] - GETTING Kla0 from String
2021-03-11 12:16:39,517 [main:94] - GETTING Kla0 from String
2021-03-11 12:16:39,518 [main:94] - GETTING Kla0 from String
2021-03-11 12:16:39,518 [main:94] - GETTING Kla0 from String
2021-03-11 12:16:39,519 [main:94] - GETTING Kla0 from String
2021-03-11 12:16:39,520 [main:94] - GETTING Kla0 from String
2021-03-11 12:16:39,520 [main:110] - replacement of fu4(fu5(fu6())) of type Kla0 is Kla0("jvfhj")
2021-03-11 12:16:39,684 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:16:39,685 [main:66] - Compilation checking started
2021-03-11 12:16:40,360 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu7()
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:16:40,363 [main:103] - replacing (Kla2().fu7(), String)
2021-03-11 12:16:40,363 [main:38] - replacing Kla2().fu7() String
2021-03-11 12:16:40,363 [main:42] - Getting value of type String
2021-03-11 12:16:40,524 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:40,528 [main:46] - GENERATED VALUE OF TYPE String = "rzbln"
2021-03-11 12:16:40,528 [main:49] - GENERATED IS CALL =false
2021-03-11 12:16:41,667 [main:55] - randomType = MutableMap<Function2<Double, Long, UInt?>, String>
2021-03-11 12:16:41,667 [main:94] - GETTING String from String
2021-03-11 12:16:41,691 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]]
2021-03-11 12:16:41,691 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]
2021-03-11 12:16:41,852 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:16:41,859 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).removePrefix("tzkkr")
2021-03-11 12:16:41,859 [main:101] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21fc0bcb]]
2021-03-11 12:16:41,859 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21fc0bcb]
2021-03-11 12:16:42,023 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:16:42,027 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:16:42,031 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
2021-03-11 12:16:42,031 [main:101] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@720e46c5]]
2021-03-11 12:16:42,031 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@720e46c5]
2021-03-11 12:16:42,194 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:42,368 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:42,372 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).replaceIndentByMargin("emacs", "ousqt")
2021-03-11 12:16:42,372 [main:101] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@287af9e3]]
2021-03-11 12:16:42,372 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@287af9e3]
2021-03-11 12:16:42,538 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:16:42,699 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:42,704 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).substringAfter('퐘', "fgygm")
2021-03-11 12:16:42,704 [main:101] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ff0185]]
2021-03-11 12:16:42,704 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ff0185]
2021-03-11 12:16:42,860 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:16:43,022 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:43,224 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:43,228 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).replaceBefore('', "qtoli", "dzzvy")
2021-03-11 12:16:43,228 [main:101] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd07c1]]
2021-03-11 12:16:43,228 [main:137] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd07c1]
2021-03-11 12:16:43,387 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:16:43,545 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:43,707 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:43,711 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).replaceBeforeLast('攔', "ishsg", "yqlhm")
2021-03-11 12:16:43,711 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]]
2021-03-11 12:16:43,711 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:16:43,871 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:43,875 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:16:44,035 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:44,040 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).compareTo("eajpt").toString(-1664931931)
2021-03-11 12:16:44,040 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2136d]]
2021-03-11 12:16:44,040 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2136d]
2021-03-11 12:16:44,040 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).lowercase()
2021-03-11 12:16:44,040 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]]
2021-03-11 12:16:44,040 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]
2021-03-11 12:16:44,040 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).toLowerCase()
2021-03-11 12:16:44,040 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c9b84b]]
2021-03-11 12:16:44,040 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c9b84b]
2021-03-11 12:16:44,198 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:44,360 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:44,364 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).removeRange(-1031671146, 532553698)
2021-03-11 12:16:44,364 [main:110] - replacement of Kla2().fu7() of type String is (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
2021-03-11 12:16:44,521 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:16:44,522 [main:66] - Compilation checking started
2021-03-11 12:16:45,234 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:16:45,237 [main:103] - replacing ({ c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 12:16:45,237 [main:38] - replacing { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-11 12:16:45,237 [main:42] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 12:16:45,405 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 12:16:45,409 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:16:45,416 [main:46] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> println()}
2021-03-11 12:16:45,416 [main:49] - GENERATED IS CALL =false
2021-03-11 12:16:45,792 [main:55] - randomType = Sequence<Float>
2021-03-11 12:16:45,794 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 12:16:45,816 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 12:16:45,817 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 12:16:45,818 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 12:16:45,820 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 12:16:45,821 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 12:16:45,823 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 12:16:45,823 [main:110] - replacement of { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> println()}
2021-03-11 12:16:45,980 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:16:45,980 [main:66] - Compilation checking started
2021-03-11 12:16:46,648 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:16:46,652 [main:103] - replacing (prope2, String)
2021-03-11 12:16:46,652 [main:38] - replacing prope2 String
2021-03-11 12:16:46,652 [main:42] - Getting value of type String
2021-03-11 12:16:46,812 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:46,816 [main:46] - GENERATED VALUE OF TYPE String = "tqusn"
2021-03-11 12:16:46,816 [main:49] - GENERATED IS CALL =false
2021-03-11 12:16:47,006 [main:55] - randomType = Long
2021-03-11 12:16:47,164 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:16:47,201 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@69e9875f]
2021-03-11 12:16:47,358 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:16:47,362 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:16:47,517 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:47,521 [main:66] - Generated call from random type = (3119871116916596774).compareTo(50).toString(314102182)
2021-03-11 12:16:47,521 [main:94] - GETTING String from String
2021-03-11 12:16:47,538 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]]
2021-03-11 12:16:47,538 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]
2021-03-11 12:16:47,538 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).trimIndent()
2021-03-11 12:16:47,539 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]]
2021-03-11 12:16:47,539 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]
2021-03-11 12:16:47,695 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:47,699 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).concat("wplcr")
2021-03-11 12:16:47,699 [main:101] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@784c069d]]
2021-03-11 12:16:47,699 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@784c069d]
2021-03-11 12:16:47,857 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:16:48,016 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:48,020 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).substringBeforeLast('壃', "xbdlh")
2021-03-11 12:16:48,020 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]]
2021-03-11 12:16:48,020 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]
2021-03-11 12:16:48,178 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 12:16:48,182 [main:302] - generating value of type = Char true depth = 1
2021-03-11 12:16:48,186 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).replaceFirstChar({a: Char -> '憶'})
2021-03-11 12:16:48,186 [main:101] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23a7e08]]
2021-03-11 12:16:48,186 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23a7e08]
2021-03-11 12:16:48,345 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:16:48,349 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:16:48,353 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).takeWhile({a: Char -> false})
2021-03-11 12:16:48,353 [main:101] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@579fd1d1]]
2021-03-11 12:16:48,353 [main:137] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@579fd1d1]
2021-03-11 12:16:48,509 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:16:48,671 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:16:48,834 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:16:48,838 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).replaceFirst('', '₱', true)
2021-03-11 12:16:48,838 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]]
2021-03-11 12:16:48,838 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]
2021-03-11 12:16:48,839 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).trimStart()
2021-03-11 12:16:48,839 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]]
2021-03-11 12:16:48,839 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]
2021-03-11 12:16:49,034 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:49,038 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).replaceIndent("riewv")
2021-03-11 12:16:49,038 [main:101] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4accd603]]
2021-03-11 12:16:49,038 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4accd603]
2021-03-11 12:16:49,193 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:16:49,200 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).removeSurrounding("esuoz")
2021-03-11 12:16:49,200 [main:101] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a03b602]]
2021-03-11 12:16:49,200 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a03b602]
2021-03-11 12:16:49,355 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:16:49,513 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:49,671 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:49,675 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).replaceAfter('騊', "qbroz", "lpygg")
2021-03-11 12:16:49,675 [main:110] - replacement of prope2 of type String is (bar3<String>(arrayOfNulls<String>(-1065875956))).concat("wplcr")
2021-03-11 12:16:49,830 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:16:49,831 [main:66] - Compilation checking started
2021-03-11 12:16:50,269 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        (bar3<String>(arrayOfNulls<String>(-1065875956))).concat("wplcr") = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:16:50,274 [main:103] - replacing (prope2, String)
2021-03-11 12:16:50,274 [main:38] - replacing prope2 String
2021-03-11 12:16:50,274 [main:42] - Getting value of type String
2021-03-11 12:16:50,442 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:50,446 [main:46] - GENERATED VALUE OF TYPE String = "gdbdv"
2021-03-11 12:16:50,446 [main:49] - GENERATED IS CALL =false
2021-03-11 12:16:50,461 [main:55] - randomType = Kla5
2021-03-11 12:16:50,618 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 12:16:50,621 [main:112] - generating klass Kla5 text = open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-11 12:16:50,778 [main:194] - Type params = []
2021-03-11 12:16:50,936 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 12:16:51,101 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:16:51,106 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:16:51,470 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 12:16:51,645 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:16:51,650 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:16:52,218 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-11 12:16:52,386 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:16:52,391 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:16:52,950 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:16:52,950 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:16:52,950 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:16:52,966 [main:94] - GETTING String from String
2021-03-11 12:16:52,985 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]]
2021-03-11 12:16:52,985 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]
2021-03-11 12:16:53,144 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:16:53,151 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).removePrefix("zebmo")
2021-03-11 12:16:53,151 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]]
2021-03-11 12:16:53,151 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:16:53,310 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:53,471 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:53,475 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]
2021-03-11 12:16:53,636 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:53,640 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).subSequence(-408182652, -178264625).repeat(-917091005)
2021-03-11 12:16:53,641 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]]
2021-03-11 12:16:53,641 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]
2021-03-11 12:16:53,802 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:53,806 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).replaceIndent("cxydd")
2021-03-11 12:16:53,807 [main:101] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23a7e08]]
2021-03-11 12:16:53,807 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23a7e08]
2021-03-11 12:16:53,967 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:16:53,971 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:16:53,975 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).takeWhile({a: Char -> false})
2021-03-11 12:16:53,975 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]]
2021-03-11 12:16:53,975 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:16:54,138 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:54,142 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]
2021-03-11 12:16:54,143 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(1305000335).titlecase()
2021-03-11 12:16:54,143 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]]
2021-03-11 12:16:54,143 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]
2021-03-11 12:16:54,143 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).trimIndent()
2021-03-11 12:16:54,143 [main:101] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@720e46c5]]
2021-03-11 12:16:54,143 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@720e46c5]
2021-03-11 12:16:54,303 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:54,465 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:16:54,470 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).replaceIndentByMargin("hizyn", "qahwo")
2021-03-11 12:16:54,470 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]]
2021-03-11 12:16:54,470 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]
2021-03-11 12:16:54,630 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:16:54,637 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).removeSuffix("xmsle")
2021-03-11 12:16:54,637 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]]
2021-03-11 12:16:54,637 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]
2021-03-11 12:16:54,637 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).trimStart()
2021-03-11 12:16:54,637 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]]
2021-03-11 12:16:54,637 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:16:54,841 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:55,000 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:55,004 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]
2021-03-11 12:16:55,162 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:55,322 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:55,326 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).subSequence(-279010792, 1143549909).substring(-1568177993, 900321597)
2021-03-11 12:16:55,326 [main:110] - replacement of prope2 of type String is (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).trimStart()
2021-03-11 12:16:55,482 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:16:55,483 [main:66] - Compilation checking started
2021-03-11 12:16:55,917 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).trimStart() = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:16:55,920 [main:103] - replacing (checkFinished && !prope5, Boolean)
2021-03-11 12:16:55,921 [main:38] - replacing checkFinished && !prope5 Boolean
2021-03-11 12:16:55,921 [main:42] - Getting value of type Boolean
2021-03-11 12:16:56,082 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:16:56,086 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:16:56,086 [main:49] - GENERATED IS CALL =false
2021-03-11 12:16:59,145 [main:55] - randomType = Function2<Function2<Long, Triple<Function2<Double, Kla10, Collection<UInt>>, Float, Short>, Char>, ArrayList<Kla5?>, UInt>
2021-03-11 12:16:59,146 [main:94] - GETTING Boolean from String
2021-03-11 12:16:59,168 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6236697d]]
2021-03-11 12:16:59,168 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6236697d]
2021-03-11 12:16:59,328 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:16:59,328 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).length.equals("tuenk")
2021-03-11 12:16:59,329 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cf0d78f]]
2021-03-11 12:16:59,329 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cf0d78f]
2021-03-11 12:16:59,329 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).isNotEmpty()
2021-03-11 12:16:59,329 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40f7b0b7]]
2021-03-11 12:16:59,329 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:16:59,487 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:59,648 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:16:59,652 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40f7b0b7]
2021-03-11 12:16:59,809 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:16:59,972 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:16:59,977 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:17:00,463 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:17:00,467 [main:95] - GENERATED = Regex("uurai")
2021-03-11 12:17:00,468 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).subSequence(-2082569610, -1310625784).matches(Regex("uurai"))
2021-03-11 12:17:00,468 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e28a6b1]]
2021-03-11 12:17:00,468 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:17:00,668 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:00,828 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:00,832 [main:137] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e28a6b1]
2021-03-11 12:17:00,987 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:17:01,147 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:17:01,151 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).subSequence(-1946225284, -345745304).startsWith('칡', true)
2021-03-11 12:17:01,151 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55512dae]]
2021-03-11 12:17:01,151 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:17:01,311 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:01,315 [main:137] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55512dae]
2021-03-11 12:17:01,481 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:17:01,644 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:17:01,648 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).get(938740849).equals('ᬙ', true)
2021-03-11 12:17:01,648 [main:101] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69ad0258]]
2021-03-11 12:17:01,648 [main:137] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69ad0258]
2021-03-11 12:17:01,648 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).isBlank()
2021-03-11 12:17:01,648 [main:101] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@210416a1]]
2021-03-11 12:17:01,648 [main:137] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@210416a1]
2021-03-11 12:17:01,807 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:01,970 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:17:01,974 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).endsWith("fzawf", false)
2021-03-11 12:17:01,974 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69ad0258]]
2021-03-11 12:17:01,974 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:17:02,137 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:02,295 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:02,299 [main:137] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69ad0258]
2021-03-11 12:17:02,299 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()
2021-03-11 12:17:02,299 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fad1c1b]]
2021-03-11 12:17:02,299 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:17:02,454 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:02,458 [main:137] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fad1c1b]
2021-03-11 12:17:02,458 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).get(1807737075).isHighSurrogate()
2021-03-11 12:17:02,459 [main:101] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fdbbfcb]]
2021-03-11 12:17:02,459 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fdbbfcb]
2021-03-11 12:17:02,613 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:17:02,617 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:17:02,621 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).all({a: Char -> true})
2021-03-11 12:17:02,621 [main:110] - replacement of checkFinished && !prope5 of type Boolean is (bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()
2021-03-11 12:17:02,775 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:17:02,775 [main:66] - Compilation checking started
2021-03-11 12:17:03,455 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:17:03,458 [main:103] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-11 12:17:03,458 [main:38] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-11 12:17:03,458 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 12:17:03,627 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 12:17:03,631 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:17:03,635 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 12:17:03,635 [main:49] - GENERATED IS CALL =false
2021-03-11 12:17:04,006 [main:55] - randomType = Array<Float>
2021-03-11 12:17:04,166 [main:302] - generating value of type = Array<Float> false depth = 0
2021-03-11 12:17:04,330 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Float> = TODO()
2021-03-11 12:17:04,335 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Float> = TODO()
2021-03-11 12:17:04,501 [main:95] - GENERATED = emptyArray<Float>()
2021-03-11 12:17:04,517 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 12:17:04,534 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 12:17:04,535 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 12:17:04,536 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 12:17:04,537 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 12:17:04,538 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 12:17:04,539 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 12:17:04,539 [main:110] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { false}
2021-03-11 12:17:04,699 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:17:04,700 [main:66] - Compilation checking started
2021-03-11 12:17:05,383 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:17:05,386 [main:103] - replacing (prope1, Kla9)
2021-03-11 12:17:05,387 [main:38] - replacing prope1 Kla9
2021-03-11 12:17:05,387 [main:42] - Getting value of type Kla9
2021-03-11 12:17:05,543 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-11 12:17:05,547 [main:112] - generating klass Kla9 text = class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 12:17:05,547 [main:46] - GENERATED VALUE OF TYPE Kla9 = Kla9()
2021-03-11 12:17:05,547 [main:49] - GENERATED IS CALL =true
2021-03-11 12:17:05,763 [main:55] - randomType = Pair<Kla9, String>
2021-03-11 12:17:05,919 [main:302] - generating value of type = Pair<Kla9, String> false depth = 0
2021-03-11 12:17:06,082 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla9, second: String): Pair<Kla9, String> = TODO()
2021-03-11 12:17:06,087 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla9, second: String): Pair<Kla9, String> = TODO()
2021-03-11 12:17:06,252 [main:302] - generating value of type = Kla9 false depth = 3
2021-03-11 12:17:06,256 [main:112] - generating klass Kla9 text = class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 12:17:06,256 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:17:06,260 [main:95] - GENERATED = Pair<Kla9, String>(Kla9(), "thdgv")
2021-03-11 12:17:06,270 [main:66] - Generated call from random type = (Pair<Kla9, String>(Kla9(), "thdgv")).first
2021-03-11 12:17:06,271 [main:94] - GETTING Kla9 from String
2021-03-11 12:17:06,289 [main:94] - GETTING Kla9 from String
2021-03-11 12:17:06,289 [main:94] - GETTING Kla9 from String
2021-03-11 12:17:06,290 [main:94] - GETTING Kla9 from String
2021-03-11 12:17:06,290 [main:94] - GETTING Kla9 from String
2021-03-11 12:17:06,291 [main:94] - GETTING Kla9 from String
2021-03-11 12:17:06,292 [main:94] - GETTING Kla9 from String
2021-03-11 12:17:06,292 [main:110] - replacement of prope1 of type Kla9 is (Pair<Kla9, String>(Kla9(), "thdgv")).first
2021-03-11 12:17:06,447 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:17:06,448 [main:66] - Compilation checking started
2021-03-11 12:17:07,185 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:17:07,190 [main:103] - replacing (s, String)
2021-03-11 12:17:07,190 [main:38] - replacing s String
2021-03-11 12:17:07,190 [main:42] - Getting value of type String
2021-03-11 12:17:07,364 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:07,368 [main:46] - GENERATED VALUE OF TYPE String = "lsqdj"
2021-03-11 12:17:07,368 [main:49] - GENERATED IS CALL =false
2021-03-11 12:17:07,929 [main:55] - randomType = Set<Byte>
2021-03-11 12:17:07,930 [main:94] - GETTING String from String
2021-03-11 12:17:07,948 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]]
2021-03-11 12:17:07,948 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]
2021-03-11 12:17:08,107 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 12:17:08,111 [main:302] - generating value of type = Char true depth = 1
2021-03-11 12:17:08,115 [main:105] - GENERATED CALL = (bar4<Array<Char>>(emptyArray<Array<Char>>())).replaceFirstChar({a: Char -> '뛮'})
2021-03-11 12:17:08,115 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]]
2021-03-11 12:17:08,115 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:17:08,279 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:08,282 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]
2021-03-11 12:17:08,283 [main:105] - GENERATED CALL = (bar4<Array<Char>>(emptyArray<Array<Char>>())).get(-674071128).titlecase()
2021-03-11 12:17:08,283 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]]
2021-03-11 12:17:08,283 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]
2021-03-11 12:17:08,448 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:17:08,610 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:17:08,614 [main:105] - GENERATED CALL = (bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false)
2021-03-11 12:17:08,614 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e624d9b]]
2021-03-11 12:17:08,614 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:17:08,778 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:08,947 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:08,951 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e624d9b]
2021-03-11 12:17:09,110 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:17:09,275 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:17:09,280 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:17:09,787 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:17:09,791 [main:95] - GENERATED = Regex("caiue")
2021-03-11 12:17:09,956 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:09,960 [main:105] - GENERATED CALL = (bar4<Array<Char>>(emptyArray<Array<Char>>())).subSequence(1976378381, -1910207652).replaceFirst(Regex("caiue"), "smgtr")
2021-03-11 12:17:09,960 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]]
2021-03-11 12:17:09,960 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]
2021-03-11 12:17:09,960 [main:105] - GENERATED CALL = (bar4<Array<Char>>(emptyArray<Array<Char>>())).trimStart()
2021-03-11 12:17:09,960 [main:101] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@579fd1d1]]
2021-03-11 12:17:09,960 [main:137] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@579fd1d1]
2021-03-11 12:17:10,117 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:17:10,279 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:17:10,441 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:17:10,445 [main:105] - GENERATED CALL = (bar4<Array<Char>>(emptyArray<Array<Char>>())).replaceFirst('툿', '盜', false)
2021-03-11 12:17:10,445 [main:101] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47361cce]]
2021-03-11 12:17:10,445 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47361cce]
2021-03-11 12:17:10,603 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:10,607 [main:105] - GENERATED CALL = (bar4<Array<Char>>(emptyArray<Array<Char>>())).take(-419730455)
2021-03-11 12:17:10,607 [main:101] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cff2b98]]
2021-03-11 12:17:10,607 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cff2b98]
2021-03-11 12:17:10,767 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:17:10,929 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:11,091 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:11,095 [main:105] - GENERATED CALL = (bar4<Array<Char>>(emptyArray<Array<Char>>())).replaceAfterLast('罒', "irmul", "dsuav")
2021-03-11 12:17:11,095 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]]
2021-03-11 12:17:11,095 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:17:11,252 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:11,411 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:11,415 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]
2021-03-11 12:17:11,583 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:17:11,748 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:17:11,753 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:17:12,109 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:17:12,113 [main:95] - GENERATED = StringBuilder("thwsw")
2021-03-11 12:17:12,269 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:17:12,274 [main:105] - GENERATED CALL = (bar4<Array<Char>>(emptyArray<Array<Char>>())).subSequence(-1839217033, 1778459229).commonPrefixWith(StringBuilder("thwsw"), true)
2021-03-11 12:17:12,274 [main:101] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@720e46c5]]
2021-03-11 12:17:12,274 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@720e46c5]
2021-03-11 12:17:12,431 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:12,591 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:12,595 [main:105] - GENERATED CALL = (bar4<Array<Char>>(emptyArray<Array<Char>>())).replaceIndentByMargin("pgrju", "bqdqm")
2021-03-11 12:17:12,596 [main:110] - replacement of s of type String is (bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false)
2021-03-11 12:17:12,801 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:17:12,802 [main:66] - Compilation checking started
2021-03-11 12:17:13,472 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:17:13,475 [main:103] - replacing (exception, Throwable)
2021-03-11 12:17:13,477 [main:38] - replacing exception Throwable
2021-03-11 12:17:13,477 [main:42] - Getting value of type Throwable
2021-03-11 12:17:13,637 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 12:17:13,805 [main:43] - GENERATING CALL OF fun NoSuchElementException(message: kotlin.String?): Throwable = TODO()
2021-03-11 12:17:13,810 [main:61] - WITHOUT TYPE PARAMS = fun NoSuchElementException(message: kotlin.String?): Throwable = TODO()
2021-03-11 12:17:14,170 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:17:14,175 [main:95] - GENERATED = NoSuchElementException("jpsmb")
2021-03-11 12:17:14,175 [main:46] - GENERATED VALUE OF TYPE Throwable = NoSuchElementException("jpsmb")
2021-03-11 12:17:14,175 [main:49] - GENERATED IS CALL =true
2021-03-11 12:17:14,366 [main:55] - randomType = ULong
2021-03-11 12:17:14,529 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:17:14,566 [main:94] - GETTING Throwable from String
2021-03-11 12:17:14,585 [main:94] - GETTING Throwable from String
2021-03-11 12:17:14,586 [main:94] - GETTING Throwable from String
2021-03-11 12:17:14,586 [main:94] - GETTING Throwable from String
2021-03-11 12:17:14,587 [main:94] - GETTING Throwable from String
2021-03-11 12:17:14,588 [main:94] - GETTING Throwable from String
2021-03-11 12:17:14,588 [main:94] - GETTING Throwable from String
2021-03-11 12:17:14,588 [main:110] - replacement of exception of type Throwable is NoSuchElementException("jpsmb")
2021-03-11 12:17:14,749 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:17:14,749 [main:66] - Compilation checking started
2021-03-11 12:17:15,447 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:17:15,450 [main:103] - replacing ("OK", String)
2021-03-11 12:17:15,451 [main:38] - replacing "OK" String
2021-03-11 12:17:15,451 [main:42] - Getting value of type String
2021-03-11 12:17:15,617 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:15,621 [main:46] - GENERATED VALUE OF TYPE String = "lvtcg"
2021-03-11 12:17:15,621 [main:49] - GENERATED IS CALL =false
2021-03-11 12:17:15,629 [main:55] - randomType = Double
2021-03-11 12:17:15,792 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:17:15,824 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58ad2522]
2021-03-11 12:17:15,825 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@217473a1]
2021-03-11 12:17:15,986 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:15,990 [main:66] - Generated call from random type = (0.6820296912662591).toByte().toString(-2147244155)
2021-03-11 12:17:15,990 [main:94] - GETTING String from String
2021-03-11 12:17:16,007 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]]
2021-03-11 12:17:16,007 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:17:16,170 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:16,175 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).length.toString(378572510)
2021-03-11 12:17:16,175 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]]
2021-03-11 12:17:16,175 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]
2021-03-11 12:17:16,339 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 12:17:16,343 [main:302] - generating value of type = Char true depth = 1
2021-03-11 12:17:16,347 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).replaceFirstChar({a: Char -> ''})
2021-03-11 12:17:16,347 [main:101] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a3075e0]]
2021-03-11 12:17:16,347 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a3075e0]
2021-03-11 12:17:16,512 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:16,516 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)
2021-03-11 12:17:16,516 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ce8ce0]]
2021-03-11 12:17:16,516 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ce8ce0]
2021-03-11 12:17:16,680 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:16,846 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:17:16,850 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).padEnd(1547576701, '?')
2021-03-11 12:17:16,850 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]]
2021-03-11 12:17:16,851 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]
2021-03-11 12:17:16,851 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).toUpperCase()
2021-03-11 12:17:16,851 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f03e0c3]]
2021-03-11 12:17:16,851 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f03e0c3]
2021-03-11 12:17:16,851 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).trimEnd()
2021-03-11 12:17:16,851 [main:101] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3ed116f9]]
2021-03-11 12:17:16,851 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3ed116f9]
2021-03-11 12:17:17,014 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:17:17,015 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).plus("rfoqc")
2021-03-11 12:17:17,015 [main:101] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23a7e08]]
2021-03-11 12:17:17,015 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23a7e08]
2021-03-11 12:17:17,179 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:17:17,183 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:17:17,187 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).takeWhile({a: Char -> false})
2021-03-11 12:17:17,187 [main:101] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17845e8c]]
2021-03-11 12:17:17,187 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17845e8c]
2021-03-11 12:17:17,187 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).decapitalize()
2021-03-11 12:17:17,187 [main:101] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d545e75]]
2021-03-11 12:17:17,187 [main:137] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d545e75]
2021-03-11 12:17:17,348 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:17:17,513 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:17:17,678 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:17:17,682 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).replace('烢', '謥', false)
2021-03-11 12:17:17,682 [main:110] - replacement of "OK" of type String is (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)
2021-03-11 12:17:17,843 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:17:17,844 [main:66] - Compilation checking started
2021-03-11 12:17:18,530 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if (prope2 != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:17:18,533 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 12:17:18,533 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 12:17:18,533 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 12:17:18,699 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 12:17:18,706 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 12:17:18,723 [main:55] - randomType = Kla4
2021-03-11 12:17:18,933 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:17:18,937 [main:112] - generating klass Kla4 text = class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}
2021-03-11 12:17:18,949 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:17:18,966 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:17:18,967 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:17:18,967 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:17:18,968 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:17:18,968 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:17:18,969 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:17:18,969 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 12:17:18,969 [main:103] - replacing (c, SuspendFunction0<Unit>)
2021-03-11 12:17:18,971 [main:38] - replacing c SuspendFunction0<Unit>
2021-03-11 12:17:18,971 [main:42] - Getting value of type SuspendFunction0<Unit>
2021-03-11 12:17:19,141 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 12:17:19,145 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:17:19,319 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:17:19,324 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:17:19,694 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:17:19,694 [main:95] - GENERATED = println("eenhj")
2021-03-11 12:17:19,694 [main:46] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { println("eenhj")}
2021-03-11 12:17:19,694 [main:49] - GENERATED IS CALL =false
2021-03-11 12:17:19,886 [main:55] - randomType = Short
2021-03-11 12:17:20,052 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:17:20,087 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 12:17:20,103 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 12:17:20,104 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 12:17:20,105 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 12:17:20,106 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 12:17:20,107 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 12:17:20,108 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 12:17:20,108 [main:110] - replacement of c of type SuspendFunction0<Unit> is { println("eenhj")}
2021-03-11 12:17:20,273 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:17:20,273 [main:66] - Compilation checking started
2021-03-11 12:17:20,753 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
{ println("eenhj")}.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if (prope2 != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:17:20,757 [main:103] - replacing (let(x), Unit?)
2021-03-11 12:17:20,757 [main:38] - replacing let(x) Unit?
2021-03-11 12:17:20,757 [main:42] - Getting value of type Unit?
2021-03-11 12:17:20,923 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 12:17:20,930 [main:46] - GENERATED VALUE OF TYPE Unit? = println()
2021-03-11 12:17:20,930 [main:49] - GENERATED IS CALL =true
2021-03-11 12:17:21,124 [main:55] - randomType = UShort
2021-03-11 12:17:21,295 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:17:21,334 [main:94] - GETTING Unit? from String
2021-03-11 12:17:21,354 [main:101] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fa44243]]
2021-03-11 12:17:21,355 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fa44243]
2021-03-11 12:17:21,525 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 12:17:21,529 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:17:21,701 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:17:21,706 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:17:22,073 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:17:22,077 [main:95] - GENERATED = check(true)
2021-03-11 12:17:22,078 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956)))?.forEachIndexed({a: Int, b: Char -> check(true)})
2021-03-11 12:17:22,078 [main:101] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a37d7ea]]
2021-03-11 12:17:22,078 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a37d7ea]
2021-03-11 12:17:22,243 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 12:17:22,247 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:17:22,419 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:17:22,424 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:17:22,795 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:17:22,796 [main:95] - GENERATED = println("glehf")
2021-03-11 12:17:22,796 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956)))?.forEach({a: Char -> println("glehf")})
2021-03-11 12:17:22,796 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fa44243]]
2021-03-11 12:17:22,796 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:17:22,961 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:23,131 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:23,135 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fa44243]
2021-03-11 12:17:23,300 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 12:17:23,304 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:17:23,476 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:17:23,482 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:17:24,047 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:17:24,051 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 12:17:24,055 [main:302] - generating value of type = Any false depth = 5
2021-03-11 12:17:24,055 [main:95] - GENERATED = check(false, { "wuquk"})
2021-03-11 12:17:24,056 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956)))?.subSequence(536958005, -1768512553).forEachIndexed({a: Int, b: Char -> check(false, { "wuquk"})})
2021-03-11 12:17:24,056 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a37d7ea]]
2021-03-11 12:17:24,056 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:17:24,223 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:24,393 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:24,398 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a37d7ea]
2021-03-11 12:17:24,564 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 12:17:24,568 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:17:24,740 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:17:24,746 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:17:25,161 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:17:25,161 [main:95] - GENERATED = print("xwbxw")
2021-03-11 12:17:25,162 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956)))?.subSequence(-874201546, 201500779).forEach({a: Char -> print("xwbxw")})
2021-03-11 12:17:25,162 [main:110] - replacement of let(x) of type Unit? is (bar3<String>(arrayOfNulls<String>(-1065875956)))?.subSequence(536958005, -1768512553).forEachIndexed({a: Int, b: Char -> check(false, { "wuquk"})})
2021-03-11 12:17:25,327 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:17:25,328 [main:66] - Compilation checking started
2021-03-11 12:17:25,797 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if (prope2 != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.(bar3<String>(arrayOfNulls<String>(-1065875956)))?.subSequence(536958005, -1768512553).forEachIndexed({a: Int, b: Char -> check(false, { "wuquk"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:17:25,800 [main:103] - replacing (prope2, Result<Any?>)
2021-03-11 12:17:25,800 [main:38] - replacing prope2 Result<Any?>
2021-03-11 12:17:25,800 [main:42] - Getting value of type Result<Any?>
2021-03-11 12:17:25,968 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 12:17:26,143 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 12:17:26,149 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 12:17:26,528 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 12:17:26,532 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:17:26,532 [main:95] - GENERATED = runCatching<Any?>({ "yxxtz"})
2021-03-11 12:17:26,532 [main:46] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "yxxtz"})
2021-03-11 12:17:26,532 [main:49] - GENERATED IS CALL =true
2021-03-11 12:17:26,724 [main:55] - randomType = UShort
2021-03-11 12:17:26,891 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:17:26,927 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:17:26,949 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:17:26,951 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:17:26,952 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:17:26,953 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:17:26,954 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:17:26,956 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:17:26,956 [main:110] - replacement of prope2 of type Result<Any?> is runCatching<Any?>({ "yxxtz"})
2021-03-11 12:17:27,121 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:17:27,122 [main:66] - Compilation checking started
2021-03-11 12:17:27,893 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        return fu4(Kla0("OK"))
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if (prope2 != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:17:27,899 [main:103] - replacing (fu4(Kla0("OK")), Kla0)
2021-03-11 12:17:27,901 [main:38] - replacing fu4(Kla0("OK")) Kla0
2021-03-11 12:17:27,901 [main:42] - Getting value of type Kla0
2021-03-11 12:17:28,106 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:17:28,110 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-11 12:17:28,283 [main:194] - Type params = []
2021-03-11 12:17:28,454 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:17:28,458 [main:46] - GENERATED VALUE OF TYPE Kla0 = Kla0("pccnh")
2021-03-11 12:17:28,458 [main:49] - GENERATED IS CALL =true
2021-03-11 12:17:30,127 [main:55] - randomType = Function2<Function1<Int, Kla10>, Char?, Kla7<Function1<Int, UShort?>>>
2021-03-11 12:17:30,128 [main:94] - GETTING Kla0 from String
2021-03-11 12:17:30,146 [main:94] - GETTING Kla0 from String
2021-03-11 12:17:30,146 [main:94] - GETTING Kla0 from String
2021-03-11 12:17:30,147 [main:94] - GETTING Kla0 from String
2021-03-11 12:17:30,147 [main:94] - GETTING Kla0 from String
2021-03-11 12:17:30,148 [main:94] - GETTING Kla0 from String
2021-03-11 12:17:30,148 [main:94] - GETTING Kla0 from String
2021-03-11 12:17:30,148 [main:110] - replacement of fu4(Kla0("OK")) of type Kla0 is Kla0("pccnh")
2021-03-11 12:17:30,318 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:17:30,319 [main:66] - Compilation checking started
2021-03-11 12:17:31,033 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if (prope2 != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:17:31,036 [main:103] - replacing (prope2, String)
2021-03-11 12:17:31,037 [main:38] - replacing prope2 String
2021-03-11 12:17:31,037 [main:42] - Getting value of type String
2021-03-11 12:17:31,257 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:31,261 [main:46] - GENERATED VALUE OF TYPE String = "kjiwf"
2021-03-11 12:17:31,261 [main:49] - GENERATED IS CALL =false
2021-03-11 12:17:31,475 [main:55] - randomType = Set<Kla4>
2021-03-11 12:17:31,475 [main:94] - GETTING String from String
2021-03-11 12:17:31,493 [main:101] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1384dfc4]]
2021-03-11 12:17:31,493 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1384dfc4]
2021-03-11 12:17:31,662 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:17:31,666 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:17:31,671 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).takeLastWhile({a: Char -> true})
2021-03-11 12:17:31,671 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]]
2021-03-11 12:17:31,671 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:17:31,840 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:31,845 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]
2021-03-11 12:17:31,845 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).get(856030379).uppercase()
2021-03-11 12:17:31,845 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396c7a7b]]
2021-03-11 12:17:31,845 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396c7a7b]
2021-03-11 12:17:32,014 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 12:17:32,191 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-11 12:17:32,196 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-11 12:17:32,376 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:17:32,380 [main:95] - GENERATED = setOfNotNull<Int>(400121717)
2021-03-11 12:17:32,380 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).slice(setOfNotNull<Int>(400121717))
2021-03-11 12:17:32,380 [main:101] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]]
2021-03-11 12:17:32,380 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]
2021-03-11 12:17:32,551 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:17:32,726 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:17:32,732 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:17:33,108 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:17:33,112 [main:95] - GENERATED = StringBuilder("yrqge")
2021-03-11 12:17:33,281 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:17:33,285 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false)
2021-03-11 12:17:33,286 [main:101] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d545e75]]
2021-03-11 12:17:33,286 [main:137] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d545e75]
2021-03-11 12:17:33,454 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:17:33,627 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:17:33,802 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:17:33,807 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).replace('鶊', '裻', false)
2021-03-11 12:17:33,807 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]]
2021-03-11 12:17:33,807 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]
2021-03-11 12:17:33,979 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:33,983 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).concat("jejvm")
2021-03-11 12:17:33,984 [main:101] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47361cce]]
2021-03-11 12:17:33,984 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47361cce]
2021-03-11 12:17:34,156 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:34,161 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).take(1782825754)
2021-03-11 12:17:34,161 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e624d9b]]
2021-03-11 12:17:34,161 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:17:34,334 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:34,508 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:34,512 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e624d9b]
2021-03-11 12:17:34,682 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:17:34,861 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 12:17:34,867 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 12:17:35,475 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:17:35,480 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 12:17:35,659 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): Set<RegexOption> = TODO()
2021-03-11 12:17:35,664 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): Set<RegexOption> = TODO()
2021-03-11 12:17:35,845 [main:95] - GENERATED = LinkedHashSet<RegexOption>()
2021-03-11 12:17:35,845 [main:95] - GENERATED = Regex("qduud", LinkedHashSet<RegexOption>())
2021-03-11 12:17:36,016 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:36,021 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(661212553, -914809264).replaceFirst(Regex("qduud", LinkedHashSet<RegexOption>()), "ooajb")
2021-03-11 12:17:36,021 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]]
2021-03-11 12:17:36,021 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]
2021-03-11 12:17:36,192 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:17:36,371 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:17:36,377 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:17:36,752 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:17:36,757 [main:95] - GENERATED = StringBuilder("qwnuv")
2021-03-11 12:17:36,757 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).removePrefix(StringBuilder("qwnuv"))
2021-03-11 12:17:36,757 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ce8ce0]]
2021-03-11 12:17:36,757 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ce8ce0]
2021-03-11 12:17:36,926 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:37,100 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:17:37,104 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).padEnd(1571053706, '촗')
2021-03-11 12:17:37,104 [main:110] - replacement of prope2 of type String is (bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false)
2021-03-11 12:17:37,273 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:17:37,273 [main:66] - Compilation checking started
2021-03-11 12:17:38,121 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if (prope2 != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:17:38,125 [main:103] - replacing (", got ", String)
2021-03-11 12:17:38,125 [main:38] - replacing ", got " String
2021-03-11 12:17:38,125 [main:42] - Getting value of type String
2021-03-11 12:17:38,301 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:38,305 [main:46] - GENERATED VALUE OF TYPE String = "refpv"
2021-03-11 12:17:38,305 [main:49] - GENERATED IS CALL =false
2021-03-11 12:17:38,322 [main:55] - randomType = Kla2
2021-03-11 12:17:38,495 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 12:17:38,499 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}
2021-03-11 12:17:38,671 [main:194] - Type params = []
2021-03-11 12:17:38,852 [main:137] - GENERATING call of type public final suspend fun fu7(): kotlin.String defined in Kla2[SimpleFunctionDescriptorImpl@420c3ca4]
2021-03-11 12:17:38,852 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@287af9e3]
2021-03-11 12:17:39,023 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:17:39,198 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:39,202 [main:66] - Generated call from random type = (Kla2()).fu7().substringAfter('', "aaaoz")
2021-03-11 12:17:39,203 [main:94] - GETTING String from String
2021-03-11 12:17:39,223 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9c84af]]
2021-03-11 12:17:39,223 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9c84af]
2021-03-11 12:17:39,223 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).uppercase()
2021-03-11 12:17:39,223 [main:101] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eec66c2]]
2021-03-11 12:17:39,223 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eec66c2]
2021-03-11 12:17:39,395 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:17:39,400 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:17:39,404 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).filter({a: Char -> false})
2021-03-11 12:17:39,404 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]]
2021-03-11 12:17:39,404 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:17:39,576 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:39,580 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]
2021-03-11 12:17:39,580 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).get(-2005816479).titlecase()
2021-03-11 12:17:39,580 [main:101] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd07c1]]
2021-03-11 12:17:39,580 [main:137] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd07c1]
2021-03-11 12:17:39,753 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:17:39,933 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:40,112 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:40,116 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).replaceBeforeLast('', "lljil", "stpwu")
2021-03-11 12:17:40,116 [main:101] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21fc0bcb]]
2021-03-11 12:17:40,116 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21fc0bcb]
2021-03-11 12:17:40,288 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:17:40,292 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:17:40,296 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> false})
2021-03-11 12:17:40,296 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60d466a]]
2021-03-11 12:17:40,297 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:17:40,468 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:40,645 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:40,650 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60d466a]
2021-03-11 12:17:40,824 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:17:41,010 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:17:41,016 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:17:41,407 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:17:41,412 [main:95] - GENERATED = Regex("ylxpr")
2021-03-11 12:17:41,588 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 12:17:41,593 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:17:41,600 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"})
2021-03-11 12:17:41,600 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]]
2021-03-11 12:17:41,600 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]
2021-03-11 12:17:41,600 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).toUpperCase()
2021-03-11 12:17:41,600 [main:101] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]]
2021-03-11 12:17:41,600 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]
2021-03-11 12:17:41,771 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:17:41,950 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:17:41,956 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:17:42,335 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:17:42,340 [main:95] - GENERATED = StringBuilder("ucoqi")
2021-03-11 12:17:42,511 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:17:42,515 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("ucoqi"), false)
2021-03-11 12:17:42,515 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]]
2021-03-11 12:17:42,515 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]
2021-03-11 12:17:42,688 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:17:42,867 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:17:42,873 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:17:43,256 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:17:43,435 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:17:43,441 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:17:43,827 [main:302] - generating value of type = Int true depth = 6
2021-03-11 12:17:43,833 [main:95] - GENERATED = StringBuilder(-1456908812)
2021-03-11 12:17:43,833 [main:95] - GENERATED = StringBuilder(StringBuilder(-1456908812))
2021-03-11 12:17:43,833 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).removeSuffix(StringBuilder(StringBuilder(-1456908812)))
2021-03-11 12:17:43,833 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]]
2021-03-11 12:17:43,833 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]
2021-03-11 12:17:43,834 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent()
2021-03-11 12:17:43,834 [main:110] - replacement of ", got " of type String is (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"})
2021-03-11 12:17:44,047 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:17:44,048 [main:66] - Compilation checking started
2021-03-11 12:17:44,786 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if (prope2 != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:17:44,791 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 12:17:44,791 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 12:17:44,791 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 12:17:44,970 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 12:17:44,978 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 12:17:45,203 [main:55] - randomType = Kla6?
2021-03-11 12:17:45,376 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 12:17:45,381 [main:112] - generating klass Kla6 text = class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-11 12:17:45,397 [main:66] - Generated call from random type = (Kla6())?.context
2021-03-11 12:17:45,398 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:17:45,415 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:17:45,415 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:17:45,416 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:17:45,417 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:17:45,417 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:17:45,418 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:17:45,418 [main:110] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is (Kla6())?.context
2021-03-11 12:17:45,590 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 12:17:45,590 [main:66] - Compilation checking started
2021-03-11 12:17:46,325 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if (prope2 != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:17:46,329 [main:103] - replacing (getOrThrow(), Ty0)
2021-03-11 12:17:46,329 [main:38] - replacing getOrThrow() Ty0
2021-03-11 12:17:46,329 [main:42] - Getting value of type Ty0
2021-03-11 12:17:46,514 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 12:17:46,522 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 12:17:46,729 [main:55] - randomType = Short
2021-03-11 12:17:46,906 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:17:46,965 [main:94] - GETTING Ty0 from String
2021-03-11 12:17:46,994 [main:94] - GETTING Ty0 from String
2021-03-11 12:17:46,995 [main:94] - GETTING Ty0 from String
2021-03-11 12:17:46,996 [main:94] - GETTING Ty0 from String
2021-03-11 12:17:46,996 [main:94] - GETTING Ty0 from String
2021-03-11 12:17:46,997 [main:94] - GETTING Ty0 from String
2021-03-11 12:17:46,998 [main:94] - GETTING Ty0 from String
2021-03-11 12:17:46,998 [main:107] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-11 12:17:46,998 [main:103] - replacing (getOrThrow(), Any?)
2021-03-11 12:17:47,000 [main:38] - replacing getOrThrow() Any?
2021-03-11 12:17:47,000 [main:42] - Getting value of type Any?
2021-03-11 12:17:47,180 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:17:47,180 [main:46] - GENERATED VALUE OF TYPE Any? = "ynpzu"
2021-03-11 12:17:47,180 [main:49] - GENERATED IS CALL =false
2021-03-11 12:17:48,265 [main:55] - randomType = Collection<Kla7<ULong?>>?
2021-03-11 12:17:48,266 [main:94] - GETTING Any? from String
2021-03-11 12:17:48,294 [main:94] - GETTING Any? from String
2021-03-11 12:17:48,295 [main:94] - GETTING Any? from String
2021-03-11 12:17:48,296 [main:94] - GETTING Any? from String
2021-03-11 12:17:48,298 [main:94] - GETTING Any? from String
2021-03-11 12:17:48,299 [main:94] - GETTING Any? from String
2021-03-11 12:17:48,300 [main:94] - GETTING Any? from String
2021-03-11 12:17:48,300 [main:110] - replacement of getOrThrow() of type Any? is "ynpzu"
2021-03-11 12:17:48,479 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:17:48,479 [main:66] - Compilation checking started
2021-03-11 12:17:48,972 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if (prope2 != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2."ynpzu"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:17:48,975 [main:103] - replacing ("Continuation " + c + " is not subtype of CoroutineStackFrame", String)
2021-03-11 12:17:48,977 [main:38] - replacing "Continuation " + c + " is not subtype of CoroutineStackFrame" String
2021-03-11 12:17:48,977 [main:42] - Getting value of type String
2021-03-11 12:17:49,163 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:49,168 [main:46] - GENERATED VALUE OF TYPE String = "amere"
2021-03-11 12:17:49,168 [main:49] - GENERATED IS CALL =false
2021-03-11 12:17:49,398 [main:55] - randomType = Int?
2021-03-11 12:17:49,587 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:49,630 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12089bb0]
2021-03-11 12:17:49,630 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]
2021-03-11 12:17:49,630 [main:66] - Generated call from random type = (881871101)?.toChar().uppercase()
2021-03-11 12:17:49,631 [main:110] - replacement of "Continuation " + c + " is not subtype of CoroutineStackFrame" of type String is (881871101)?.toChar().uppercase()
2021-03-11 12:17:49,822 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:17:49,823 [main:66] - Compilation checking started
2021-03-11 12:17:50,631 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if (prope2 != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return "FAIL 1 $prope2"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:17:50,635 [main:103] - replacing ("FAIL 1 $prope2", String)
2021-03-11 12:17:50,636 [main:38] - replacing "FAIL 1 $prope2" String
2021-03-11 12:17:50,636 [main:42] - Getting value of type String
2021-03-11 12:17:50,819 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:50,824 [main:46] - GENERATED VALUE OF TYPE String = "woqxa"
2021-03-11 12:17:50,824 [main:49] - GENERATED IS CALL =false
2021-03-11 12:17:51,062 [main:55] - randomType = Kla1?
2021-03-11 12:17:51,062 [main:94] - GETTING String from String
2021-03-11 12:17:51,085 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]]
2021-03-11 12:17:51,085 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:17:51,268 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:51,273 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).length.toString(-1886313976)
2021-03-11 12:17:51,274 [main:101] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cff2b98]]
2021-03-11 12:17:51,274 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cff2b98]
2021-03-11 12:17:51,458 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:17:51,647 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:51,838 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:51,845 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).replaceAfterLast('ɱ', "qxpac", "voena")
2021-03-11 12:17:51,845 [main:101] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2253ce57]]
2021-03-11 12:17:51,845 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2253ce57]
2021-03-11 12:17:52,030 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:17:52,036 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:17:52,042 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})
2021-03-11 12:17:52,042 [main:101] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eec66c2]]
2021-03-11 12:17:52,042 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eec66c2]
2021-03-11 12:17:52,231 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:17:52,236 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:17:52,243 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).filter({a: Char -> false})
2021-03-11 12:17:52,243 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]]
2021-03-11 12:17:52,243 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]
2021-03-11 12:17:52,243 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).toLowerCase()
2021-03-11 12:17:52,243 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]]
2021-03-11 12:17:52,243 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]
2021-03-11 12:17:52,431 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:17:52,440 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).removeSuffix("ytnoz")
2021-03-11 12:17:52,440 [main:101] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47361cce]]
2021-03-11 12:17:52,440 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47361cce]
2021-03-11 12:17:52,627 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:52,633 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).take(1521704956)
2021-03-11 12:17:52,633 [main:101] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ef6a1a]]
2021-03-11 12:17:52,633 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ef6a1a]
2021-03-11 12:17:52,821 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:17:53,012 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:53,018 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).substringAfterLast('ペ', "dnchg")
2021-03-11 12:17:53,018 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]]
2021-03-11 12:17:53,018 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]
2021-03-11 12:17:53,018 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).trimStart()
2021-03-11 12:17:53,018 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]]
2021-03-11 12:17:53,018 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]
2021-03-11 12:17:53,018 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).reversed()
2021-03-11 12:17:53,018 [main:110] - replacement of "FAIL 1 $prope2" of type String is (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})
2021-03-11 12:17:53,203 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:17:53,203 [main:66] - Compilation checking started
2021-03-11 12:17:53,997 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(fu5(Kla0("fsqyb")))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if (prope2 != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:17:54,001 [main:103] - replacing (fu5(Kla0("fsqyb")), Kla0)
2021-03-11 12:17:54,002 [main:38] - replacing fu5(Kla0("fsqyb")) Kla0
2021-03-11 12:17:54,002 [main:42] - Getting value of type Kla0
2021-03-11 12:17:54,191 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:17:54,197 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-11 12:17:54,381 [main:194] - Type params = []
2021-03-11 12:17:54,564 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:17:54,570 [main:46] - GENERATED VALUE OF TYPE Kla0 = Kla0("mgivj")
2021-03-11 12:17:54,570 [main:49] - GENERATED IS CALL =true
2021-03-11 12:17:54,789 [main:55] - randomType = UShort
2021-03-11 12:17:54,971 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:17:55,004 [main:94] - GETTING Kla0 from String
2021-03-11 12:17:55,021 [main:94] - GETTING Kla0 from String
2021-03-11 12:17:55,022 [main:94] - GETTING Kla0 from String
2021-03-11 12:17:55,023 [main:94] - GETTING Kla0 from String
2021-03-11 12:17:55,023 [main:94] - GETTING Kla0 from String
2021-03-11 12:17:55,024 [main:94] - GETTING Kla0 from String
2021-03-11 12:17:55,024 [main:94] - GETTING Kla0 from String
2021-03-11 12:17:55,024 [main:110] - replacement of fu5(Kla0("fsqyb")) of type Kla0 is Kla0("mgivj")
2021-03-11 12:17:55,205 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:17:55,206 [main:66] - Compilation checking started
2021-03-11 12:17:55,986 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if (prope2 != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:17:55,990 [main:103] - replacing (prope2, String)
2021-03-11 12:17:55,991 [main:38] - replacing prope2 String
2021-03-11 12:17:55,991 [main:42] - Getting value of type String
2021-03-11 12:17:56,175 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:56,180 [main:46] - GENERATED VALUE OF TYPE String = "yumsl"
2021-03-11 12:17:56,180 [main:49] - GENERATED IS CALL =false
2021-03-11 12:17:56,202 [main:55] - randomType = Kla9
2021-03-11 12:17:56,384 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-11 12:17:56,389 [main:112] - generating klass Kla9 text = class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 12:17:56,397 [main:94] - GETTING String from String
2021-03-11 12:17:56,416 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]]
2021-03-11 12:17:56,417 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]
2021-03-11 12:17:56,619 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:17:56,813 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:17:56,819 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).commonSuffixWith("ycdml", false)
2021-03-11 12:17:56,819 [main:101] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3ed116f9]]
2021-03-11 12:17:56,819 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3ed116f9]
2021-03-11 12:17:57,001 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:17:57,001 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("avdns")
2021-03-11 12:17:57,001 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a5650d3]]
2021-03-11 12:17:57,001 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a5650d3]
2021-03-11 12:17:57,001 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim()
2021-03-11 12:17:57,001 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]]
2021-03-11 12:17:57,001 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]
2021-03-11 12:17:57,184 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:57,189 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).substring(658537666)
2021-03-11 12:17:57,190 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]]
2021-03-11 12:17:57,190 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]
2021-03-11 12:17:57,190 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).toUpperCase()
2021-03-11 12:17:57,190 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]]
2021-03-11 12:17:57,190 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]
2021-03-11 12:17:57,410 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:57,416 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).repeat(-626330924)
2021-03-11 12:17:57,416 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]]
2021-03-11 12:17:57,416 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]
2021-03-11 12:17:57,416 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trimIndent()
2021-03-11 12:17:57,416 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e624d9b]]
2021-03-11 12:17:57,416 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:17:57,607 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:57,794 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:17:57,800 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e624d9b]
2021-03-11 12:17:57,982 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:17:58,170 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 12:17:58,177 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 12:17:58,804 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:17:58,810 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-11 12:17:58,816 [main:95] - GENERATED = Regex("gbfcp", kotlin.text.RegexOption.MULTILINE)
2021-03-11 12:17:59,000 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:17:59,006 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).subSequence(765046456, -77392880).replaceFirst(Regex("gbfcp", kotlin.text.RegexOption.MULTILINE), "xdort")
2021-03-11 12:17:59,006 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]]
2021-03-11 12:17:59,006 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]
2021-03-11 12:17:59,006 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trimStart()
2021-03-11 12:17:59,006 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]]
2021-03-11 12:17:59,006 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10518bc7]
2021-03-11 12:17:59,193 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:17:59,387 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:17:59,394 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:17:59,811 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:17:59,817 [main:95] - GENERATED = StringBuilder("uaeot")
2021-03-11 12:17:59,817 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).removeSuffix(StringBuilder("uaeot"))
2021-03-11 12:17:59,817 [main:110] - replacement of prope2 of type String is (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim()
2021-03-11 12:18:00,002 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:18:00,002 [main:66] - Compilation checking started
2021-03-11 12:18:00,768 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:18:00,774 [main:103] - replacing (it, Continuation<Unit>)
2021-03-11 12:18:00,775 [main:38] - replacing it Continuation<Unit>
2021-03-11 12:18:00,775 [main:42] - Getting value of type Continuation<Unit>
2021-03-11 12:18:00,984 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 12:18:01,176 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 12:18:01,183 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 12:18:01,838 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 12:18:02,031 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:18:02,038 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:18:02,468 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 12:18:02,665 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:18:02,672 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:18:03,336 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 12:18:03,535 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:18:03,542 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:18:04,275 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-11 12:18:04,473 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:18:04,480 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:18:05,154 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 15
2021-03-11 12:18:05,357 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:18:05,364 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:18:06,028 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:18:06,029 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:18:06,029 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:18:06,029 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:18:06,029 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:18:06,029 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 12:18:06,029 [main:46] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 12:18:06,250 [main:55] - randomType = UShort
2021-03-11 12:18:06,437 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:18:06,482 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 12:18:06,503 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 12:18:06,503 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 12:18:06,504 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 12:18:06,505 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 12:18:06,506 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 12:18:06,507 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 12:18:06,507 [main:107] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-11 12:18:06,507 [main:103] - replacing (it, Continuation<Unit>)
2021-03-11 12:18:06,507 [main:38] - replacing it Continuation<Unit>
2021-03-11 12:18:06,507 [main:42] - Getting value of type Continuation<Unit>
2021-03-11 12:18:06,694 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 12:18:06,888 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 12:18:06,895 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 12:18:07,557 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 12:18:07,748 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:18:07,755 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:18:08,187 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 12:18:08,389 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:18:08,397 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:18:09,082 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 12:18:09,282 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:18:09,290 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:18:09,949 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-11 12:18:10,146 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:18:10,153 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:18:10,893 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:18:10,893 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:18:10,893 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:18:10,893 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:18:10,893 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 12:18:10,893 [main:46] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 12:18:11,111 [main:55] - randomType = UShort
2021-03-11 12:18:11,294 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:18:11,328 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 12:18:11,345 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 12:18:11,346 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 12:18:11,347 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 12:18:11,347 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 12:18:11,348 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 12:18:11,349 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 12:18:11,349 [main:107] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-11 12:18:11,349 [main:103] - replacing (prope7.fu3(), Kla0)
2021-03-11 12:18:11,349 [main:38] - replacing prope7.fu3() Kla0
2021-03-11 12:18:11,349 [main:42] - Getting value of type Kla0
2021-03-11 12:18:11,533 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:18:11,538 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-11 12:18:11,721 [main:194] - Type params = []
2021-03-11 12:18:11,906 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:18:11,911 [main:46] - GENERATED VALUE OF TYPE Kla0 = Kla0("tepda")
2021-03-11 12:18:11,911 [main:49] - GENERATED IS CALL =true
2021-03-11 12:18:11,923 [main:55] - randomType = UInt
2021-03-11 12:18:12,106 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:18:12,138 [main:94] - GETTING Kla0 from String
2021-03-11 12:18:12,154 [main:94] - GETTING Kla0 from String
2021-03-11 12:18:12,155 [main:94] - GETTING Kla0 from String
2021-03-11 12:18:12,155 [main:94] - GETTING Kla0 from String
2021-03-11 12:18:12,156 [main:94] - GETTING Kla0 from String
2021-03-11 12:18:12,156 [main:94] - GETTING Kla0 from String
2021-03-11 12:18:12,157 [main:94] - GETTING Kla0 from String
2021-03-11 12:18:12,157 [main:110] - replacement of prope7.fu3() of type Kla0 is Kla0("tepda")
2021-03-11 12:18:12,339 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:18:12,340 [main:66] - Compilation checking started
2021-03-11 12:18:13,132 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:18:13,136 [main:103] - replacing (getOrThrow(), Ty0)
2021-03-11 12:18:13,136 [main:38] - replacing getOrThrow() Ty0
2021-03-11 12:18:13,136 [main:42] - Getting value of type Ty0
2021-03-11 12:18:13,319 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 12:18:13,328 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 12:18:14,093 [main:55] - randomType = Kla7<ArrayList<Function2<Kla6, Double, Short>>>
2021-03-11 12:18:14,279 [main:302] - generating value of type = Kla7<ArrayList<Function2<Kla6, Double, Short>>> false depth = 0
2021-03-11 12:18:14,285 [main:112] - generating klass Kla7 text = abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 12:18:15,393 [main:302] - generating value of type = Kla10 false depth = 2
2021-03-11 12:18:15,399 [main:112] - generating klass Kla10 text = object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}
2021-03-11 12:18:15,421 [main:94] - GETTING Ty0 from String
2021-03-11 12:18:15,438 [main:94] - GETTING Ty0 from String
2021-03-11 12:18:15,439 [main:94] - GETTING Ty0 from String
2021-03-11 12:18:15,440 [main:94] - GETTING Ty0 from String
2021-03-11 12:18:15,440 [main:94] - GETTING Ty0 from String
2021-03-11 12:18:15,441 [main:94] - GETTING Ty0 from String
2021-03-11 12:18:15,441 [main:94] - GETTING Ty0 from String
2021-03-11 12:18:15,441 [main:107] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-11 12:18:15,441 [main:103] - replacing (0, Int)
2021-03-11 12:18:15,443 [main:38] - replacing 0 Int
2021-03-11 12:18:15,443 [main:42] - Getting value of type Int
2021-03-11 12:18:15,633 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:15,639 [main:46] - GENERATED VALUE OF TYPE Int = 2121441032
2021-03-11 12:18:15,639 [main:49] - GENERATED IS CALL =false
2021-03-11 12:18:16,348 [main:55] - randomType = Kla7<Float?>?
2021-03-11 12:18:16,536 [main:302] - generating value of type = Kla7<Float?> false depth = 0
2021-03-11 12:18:16,541 [main:112] - generating klass Kla7 text = abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 12:18:17,245 [main:302] - generating value of type = Kla10 false depth = 2
2021-03-11 12:18:17,251 [main:112] - generating klass Kla10 text = object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}
2021-03-11 12:18:17,265 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla7[DeserializedSimpleFunctionDescriptor@7e488698]
2021-03-11 12:18:17,451 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:18:17,451 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5174a81f]
2021-03-11 12:18:17,638 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:18:17,644 [main:66] - Generated call from random type = (Kla10)?.equals("iqcar").compareTo(false)
2021-03-11 12:18:17,645 [main:94] - GETTING Int from String
2021-03-11 12:18:17,667 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@53f6a24]]
2021-03-11 12:18:17,668 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@53f6a24]
2021-03-11 12:18:17,668 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).length.countTrailingZeroBits()
2021-03-11 12:18:17,668 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6850dec4]]
2021-03-11 12:18:17,668 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:18:17,855 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:18:17,860 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6850dec4]
2021-03-11 12:18:18,048 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:18,242 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:18,248 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).compareTo("pcncl").coerceIn(1342882111, 1502270123)
2021-03-11 12:18:18,248 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e6d7ca8]]
2021-03-11 12:18:18,248 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e6d7ca8]
2021-03-11 12:18:18,436 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:18:18,442 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).length.rem(93)
2021-03-11 12:18:18,442 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@243a4a22]]
2021-03-11 12:18:18,442 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@243a4a22]
2021-03-11 12:18:18,630 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:18,636 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).length.xor(2101660094)
2021-03-11 12:18:18,636 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7373c033]]
2021-03-11 12:18:18,636 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:18:18,824 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:18:18,830 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7373c033]
2021-03-11 12:18:19,019 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:19,025 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).compareTo("goize").shl(2014222447)
2021-03-11 12:18:19,025 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@2e19c8c]]
2021-03-11 12:18:19,025 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:18:19,211 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:19,404 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:19,410 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).subSequence(1205121507, -880245968).lastIndex
2021-03-11 12:18:19,410 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14379f00]]
2021-03-11 12:18:19,410 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14379f00]
2021-03-11 12:18:19,598 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:18:19,604 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).length.minus(79)
2021-03-11 12:18:19,604 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@846b1df], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5174a81f]]
2021-03-11 12:18:19,605 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@846b1df]
2021-03-11 12:18:19,792 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:18:19,793 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5174a81f]
2021-03-11 12:18:19,979 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:18:19,985 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).equals("ngyde").compareTo(false)
2021-03-11 12:18:19,985 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12b30642]]
2021-03-11 12:18:19,985 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12b30642]
2021-03-11 12:18:20,173 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:20,179 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).length.ushr(-446340286)
2021-03-11 12:18:20,179 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51866d87]]
2021-03-11 12:18:20,180 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:18:20,368 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:20,560 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:20,566 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51866d87]
2021-03-11 12:18:20,566 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).subSequence(629437197, -1301551410).count()
2021-03-11 12:18:20,566 [main:110] - replacement of 0 of type Int is (Kla10)?.equals("iqcar").compareTo(false)
2021-03-11 12:18:20,753 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:18:20,754 [main:66] - Compilation checking started
2021-03-11 12:18:21,610 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:18:21,615 [main:103] - replacing (Kla9(), Kla9)
2021-03-11 12:18:21,615 [main:38] - replacing Kla9() Kla9
2021-03-11 12:18:21,615 [main:42] - Getting value of type Kla9
2021-03-11 12:18:21,828 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-11 12:18:21,834 [main:112] - generating klass Kla9 text = class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 12:18:21,835 [main:46] - GENERATED VALUE OF TYPE Kla9 = Kla9()
2021-03-11 12:18:21,835 [main:49] - GENERATED IS CALL =true
2021-03-11 12:18:22,066 [main:55] - randomType = UByte
2021-03-11 12:18:22,262 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:18:22,297 [main:94] - GETTING Kla9 from String
2021-03-11 12:18:22,316 [main:94] - GETTING Kla9 from String
2021-03-11 12:18:22,316 [main:94] - GETTING Kla9 from String
2021-03-11 12:18:22,317 [main:94] - GETTING Kla9 from String
2021-03-11 12:18:22,318 [main:94] - GETTING Kla9 from String
2021-03-11 12:18:22,318 [main:94] - GETTING Kla9 from String
2021-03-11 12:18:22,319 [main:94] - GETTING Kla9 from String
2021-03-11 12:18:22,319 [main:110] - replacement of Kla9() of type Kla9 is Kla9()
2021-03-11 12:18:22,506 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:18:22,510 [main:103] - replacing (this, Kla3)
2021-03-11 12:18:22,512 [main:38] - replacing this Kla3
2021-03-11 12:18:22,512 [main:42] - Getting value of type Kla3
2021-03-11 12:18:22,706 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 12:18:22,712 [main:112] - generating klass Kla3 text = class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}
2021-03-11 12:18:22,712 [main:46] - GENERATED VALUE OF TYPE Kla3 = Kla3()
2021-03-11 12:18:22,712 [main:49] - GENERATED IS CALL =true
2021-03-11 12:18:22,725 [main:55] - randomType = String
2021-03-11 12:18:22,919 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:18:22,945 [main:94] - GETTING Kla3 from String
2021-03-11 12:18:22,961 [main:94] - GETTING Kla3 from String
2021-03-11 12:18:22,962 [main:94] - GETTING Kla3 from String
2021-03-11 12:18:22,962 [main:94] - GETTING Kla3 from String
2021-03-11 12:18:22,963 [main:94] - GETTING Kla3 from String
2021-03-11 12:18:22,963 [main:94] - GETTING Kla3 from String
2021-03-11 12:18:22,964 [main:94] - GETTING Kla3 from String
2021-03-11 12:18:22,964 [main:110] - replacement of this of type Kla3 is Kla3()
2021-03-11 12:18:23,154 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:18:23,154 [main:66] - Compilation checking started
2021-03-11 12:18:23,998 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = false
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:18:24,002 [main:103] - replacing (prope2, Result<Ty0>)
2021-03-11 12:18:24,002 [main:38] - replacing prope2 Result<Ty0>
2021-03-11 12:18:24,002 [main:42] - Getting value of type Result<Ty0>
2021-03-11 12:18:24,192 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 12:18:24,392 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 12:18:24,399 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 12:18:24,835 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 12:18:24,835 [main:46] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 12:18:25,361 [main:55] - randomType = HashSet<LinkedHashMap<Kla8, Kla10>>
2021-03-11 12:18:25,554 [main:302] - generating value of type = HashSet<LinkedHashMap<Kla8, Kla10>> false depth = 0
2021-03-11 12:18:25,756 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<LkedHashMap<Kla8, Kla10>> = TODO()
2021-03-11 12:18:25,763 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<LkedHashMap<Kla8, Kla10>> = TODO()
2021-03-11 12:18:25,969 [main:95] - GENERATED = linkedSetOf<LinkedHashMap<Kla8, Kla10>>()
2021-03-11 12:18:26,105 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:18:26,122 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:18:26,124 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:18:26,125 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:18:26,126 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:18:26,127 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:18:26,128 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:18:26,128 [main:107] - Cant find and generate replacement for prope2 type Result<Ty0>
2021-03-11 12:18:26,128 [main:103] - replacing (false, Boolean)
2021-03-11 12:18:26,128 [main:38] - replacing false Boolean
2021-03-11 12:18:26,128 [main:42] - Getting value of type Boolean
2021-03-11 12:18:26,320 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:18:26,326 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:18:26,326 [main:49] - GENERATED IS CALL =false
2021-03-11 12:18:27,090 [main:55] - randomType = Pair<LinkedHashSet<Set<Kla8>>, Kla0>
2021-03-11 12:18:27,284 [main:302] - generating value of type = Pair<LinkedHashSet<Set<Kla8>>, Kla0> false depth = 0
2021-03-11 12:18:27,488 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: LinkedHashSet<Set<Kla8>>, second: Kla0): Pair<LinkedHashSet<Set<Kla8>>, Kla0> = TODO()
2021-03-11 12:18:27,495 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: LinkedHashSet<Set<Kla8>>, second: Kla0): Pair<LinkedHashSet<Set<Kla8>>, Kla0> = TODO()
2021-03-11 12:18:27,698 [main:302] - generating value of type = LinkedHashSet<Set<Kla8>> false depth = 3
2021-03-11 12:18:27,900 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Set<Kla8>): LkedHashSet<Set<Kla8>> = TODO()
2021-03-11 12:18:27,907 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Set<Kla8>): LkedHashSet<Set<Kla8>> = TODO()
2021-03-11 12:18:28,110 [main:302] - generating value of type = Set<Kla8> false depth = 6
2021-03-11 12:18:28,310 [main:43] - GENERATING CALL OF fun <E> HashSet(elements: kotlin.collections.Collection<Kla8>): Set<Kla8> = TODO()
2021-03-11 12:18:28,320 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(elements: kotlin.collections.Collection<Kla8>): Set<Kla8> = TODO()
2021-03-11 12:18:28,782 [main:302] - generating value of type = Collection<Kla8> false depth = 9
2021-03-11 12:18:29,001 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Kla8>): Collection<Kla8> = TODO()
2021-03-11 12:18:29,009 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Kla8>): Collection<Kla8> = TODO()
2021-03-11 12:18:29,467 [main:302] - generating value of type = Collection<Kla8> false depth = 12
2021-03-11 12:18:29,672 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(elements: Kla8): Collection<Kla8> = TODO()
2021-03-11 12:18:29,679 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(elements: Kla8): Collection<Kla8> = TODO()
2021-03-11 12:18:29,886 [main:302] - generating value of type = Kla8 false depth = 15
2021-03-11 12:18:29,892 [main:112] - generating klass Kla8 text = class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-11 12:18:29,892 [main:95] - GENERATED = mutableSetOf<Kla8>(Kla8())
2021-03-11 12:18:29,893 [main:95] - GENERATED = ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8()))
2021-03-11 12:18:29,893 [main:95] - GENERATED = HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))
2021-03-11 12:18:29,893 [main:95] - GENERATED = linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8()))))
2021-03-11 12:18:29,893 [main:302] - generating value of type = Kla0 false depth = 3
2021-03-11 12:18:29,899 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-11 12:18:30,089 [main:194] - Type params = []
2021-03-11 12:18:30,333 [main:302] - generating value of type = String true depth = 5
2021-03-11 12:18:30,339 [main:95] - GENERATED = Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))
2021-03-11 12:18:30,358 [main:137] - GENERATING call of type public open fun add(element: kotlin.collections.Set<Kla8>): kotlin.Boolean defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@fdcfc95]
2021-03-11 12:18:30,556 [main:302] - generating value of type = Set<Kla8> false depth = 0
2021-03-11 12:18:30,755 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(elements: Kla8): Set<Kla8> = TODO()
2021-03-11 12:18:30,762 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(elements: Kla8): Set<Kla8> = TODO()
2021-03-11 12:18:30,966 [main:302] - generating value of type = Kla8 false depth = 3
2021-03-11 12:18:30,972 [main:112] - generating klass Kla8 text = class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-11 12:18:30,973 [main:95] - GENERATED = mutableSetOf<Kla8>(Kla8())
2021-03-11 12:18:30,973 [main:66] - Generated call from random type = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
2021-03-11 12:18:30,973 [main:110] - replacement of false of type Boolean is (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
2021-03-11 12:18:31,165 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:18:31,166 [main:66] - Compilation checking started
2021-03-11 12:18:32,152 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:18:32,158 [main:103] - replacing (prope1.prope5, Boolean)
2021-03-11 12:18:32,158 [main:38] - replacing prope1.prope5 Boolean
2021-03-11 12:18:32,158 [main:42] - Getting value of type Boolean
2021-03-11 12:18:32,386 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:18:32,392 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:18:32,392 [main:49] - GENERATED IS CALL =false
2021-03-11 12:18:32,875 [main:55] - randomType = LinkedHashSet<Byte>
2021-03-11 12:18:33,073 [main:302] - generating value of type = LinkedHashSet<Byte> false depth = 0
2021-03-11 12:18:33,282 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Byte): LkedHashSet<Byte> = TODO()
2021-03-11 12:18:33,290 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Byte): LkedHashSet<Byte> = TODO()
2021-03-11 12:18:33,501 [main:302] - generating value of type = Byte true depth = 3
2021-03-11 12:18:33,508 [main:95] - GENERATED = linkedSetOf<Byte>(41)
2021-03-11 12:18:33,615 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@17d0bd96]
2021-03-11 12:18:33,615 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7bef169a]
2021-03-11 12:18:33,615 [main:66] - Generated call from random type = (linkedSetOf<Byte>(41)).toArray().isNotEmpty()
2021-03-11 12:18:33,615 [main:110] - replacement of prope1.prope5 of type Boolean is (linkedSetOf<Byte>(41)).toArray().isNotEmpty()
2021-03-11 12:18:33,812 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:18:33,812 [main:66] - Compilation checking started
2021-03-11 12:18:34,488 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            (linkedSetOf<Byte>(41)).toArray().isNotEmpty() = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:18:34,493 [main:103] - replacing (getOrThrow(), Any?)
2021-03-11 12:18:34,493 [main:38] - replacing getOrThrow() Any?
2021-03-11 12:18:34,493 [main:42] - Getting value of type Any?
2021-03-11 12:18:34,717 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:18:34,717 [main:46] - GENERATED VALUE OF TYPE Any? = "chyct"
2021-03-11 12:18:34,718 [main:49] - GENERATED IS CALL =false
2021-03-11 12:18:34,957 [main:55] - randomType = UShort
2021-03-11 12:18:35,157 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:18:35,191 [main:94] - GETTING Any? from String
2021-03-11 12:18:35,208 [main:94] - GETTING Any? from String
2021-03-11 12:18:35,209 [main:94] - GETTING Any? from String
2021-03-11 12:18:35,210 [main:94] - GETTING Any? from String
2021-03-11 12:18:35,211 [main:94] - GETTING Any? from String
2021-03-11 12:18:35,211 [main:94] - GETTING Any? from String
2021-03-11 12:18:35,212 [main:94] - GETTING Any? from String
2021-03-11 12:18:35,212 [main:110] - replacement of getOrThrow() of type Any? is "chyct"
2021-03-11 12:18:35,412 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:18:35,412 [main:66] - Compilation checking started
2021-03-11 12:18:36,015 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return prope7.fu3().s
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2."chyct"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:18:36,020 [main:103] - replacing (prope7.fu3().s, String)
2021-03-11 12:18:36,020 [main:38] - replacing prope7.fu3().s String
2021-03-11 12:18:36,020 [main:42] - Getting value of type String
2021-03-11 12:18:36,240 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:18:36,247 [main:46] - GENERATED VALUE OF TYPE String = "djyaw"
2021-03-11 12:18:36,247 [main:49] - GENERATED IS CALL =false
2021-03-11 12:18:36,260 [main:55] - randomType = Int
2021-03-11 12:18:36,472 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:36,524 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@a7bfc14]
2021-03-11 12:18:36,734 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:18:36,741 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e95ee6]
2021-03-11 12:18:36,953 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:36,959 [main:66] - Generated call from random type = (-856485409).div(7396636541172479118).toString(-194084457)
2021-03-11 12:18:36,959 [main:94] - GETTING String from String
2021-03-11 12:18:36,987 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]]
2021-03-11 12:18:36,987 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:18:37,196 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:37,203 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]
2021-03-11 12:18:37,203 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(-655436703).titlecase()
2021-03-11 12:18:37,203 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]]
2021-03-11 12:18:37,203 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]
2021-03-11 12:18:37,203 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).toUpperCase()
2021-03-11 12:18:37,203 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]]
2021-03-11 12:18:37,203 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]
2021-03-11 12:18:37,204 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).reversed()
2021-03-11 12:18:37,204 [main:101] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3ed116f9]]
2021-03-11 12:18:37,204 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3ed116f9]
2021-03-11 12:18:37,458 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:18:37,458 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).plus("shqju")
2021-03-11 12:18:37,458 [main:101] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4accd603]]
2021-03-11 12:18:37,458 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4accd603]
2021-03-11 12:18:37,666 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:18:37,675 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).removeSurrounding("pjwpt")
2021-03-11 12:18:37,675 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]]
2021-03-11 12:18:37,675 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]
2021-03-11 12:18:37,675 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).trimStart()
2021-03-11 12:18:37,675 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]]
2021-03-11 12:18:37,675 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]
2021-03-11 12:18:37,886 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:37,892 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).substring(-314709148)
2021-03-11 12:18:37,892 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b328c0]]
2021-03-11 12:18:37,892 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:18:38,098 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:38,104 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b328c0]
2021-03-11 12:18:38,310 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:18:38,316 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
2021-03-11 12:18:38,316 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c9b84b]]
2021-03-11 12:18:38,316 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c9b84b]
2021-03-11 12:18:38,518 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:38,725 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:38,731 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).removeRange(-1187217, 1707125597)
2021-03-11 12:18:38,731 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e624d9b]]
2021-03-11 12:18:38,731 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:18:38,934 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:39,143 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:39,149 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e624d9b]
2021-03-11 12:18:39,355 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:18:39,581 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 12:18:39,589 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 12:18:40,275 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:18:40,281 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-11 12:18:40,287 [main:95] - GENERATED = Regex("mfxlr", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-11 12:18:40,484 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:18:40,490 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).subSequence(52891796, -2145438030).replaceFirst(Regex("mfxlr", kotlin.text.RegexOption.IGNORE_CASE), "qhurv")
2021-03-11 12:18:40,490 [main:110] - replacement of prope7.fu3().s of type String is (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
2021-03-11 12:18:40,686 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:18:40,686 [main:66] - Compilation checking started
2021-03-11 12:18:41,568 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:18:41,573 [main:103] - replacing (prope6, Function0<Unit>)
2021-03-11 12:18:41,573 [main:38] - replacing prope6 Function0<Unit>
2021-03-11 12:18:41,573 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:18:41,775 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:18:41,781 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:18:41,991 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:18:41,998 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:18:42,450 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:18:42,456 [main:95] - GENERATED = require(true)
2021-03-11 12:18:42,456 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 12:18:42,456 [main:49] - GENERATED IS CALL =false
2021-03-11 12:18:42,469 [main:55] - randomType = UInt
2021-03-11 12:18:42,670 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:18:42,705 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:18:42,721 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:18:42,722 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:18:42,723 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:18:42,724 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:18:42,725 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:18:42,726 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:18:42,726 [main:110] - replacement of prope6 of type Function0<Unit> is { require(true)}
2021-03-11 12:18:42,930 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:18:42,931 [main:66] - Compilation checking started
2021-03-11 12:18:43,530 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        { require(true)}()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:18:43,534 [main:103] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-11 12:18:43,535 [main:38] - replacing c !is CoroutineStackFrame Boolean
2021-03-11 12:18:43,535 [main:42] - Getting value of type Boolean
2021-03-11 12:18:43,749 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:18:43,755 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:18:43,755 [main:49] - GENERATED IS CALL =false
2021-03-11 12:18:43,779 [main:55] - randomType = Kla8
2021-03-11 12:18:43,983 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 12:18:43,989 [main:112] - generating klass Kla8 text = class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-11 12:18:43,995 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla8[DeserializedSimpleFunctionDescriptor@3b469bb1]
2021-03-11 12:18:44,199 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:18:44,199 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a85208b]
2021-03-11 12:18:44,442 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:18:44,449 [main:66] - Generated call from random type = (Kla8()).equals("afuqv").and(false)
2021-03-11 12:18:44,450 [main:94] - GETTING Boolean from String
2021-03-11 12:18:44,472 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18a3fd3f]]
2021-03-11 12:18:44,472 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:18:44,675 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:44,681 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18a3fd3f]
2021-03-11 12:18:44,681 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).get(-1089923584).isISOControl()
2021-03-11 12:18:44,681 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e28a6b1]]
2021-03-11 12:18:44,681 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:18:44,885 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:45,094 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:45,100 [main:137] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e28a6b1]
2021-03-11 12:18:45,312 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:18:45,526 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:18:45,533 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).subSequence(2068379038, -1732873503).startsWith('倝', true)
2021-03-11 12:18:45,533 [main:101] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@588224ff]]
2021-03-11 12:18:45,533 [main:137] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@588224ff]
2021-03-11 12:18:45,741 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:18:45,747 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).matches("aiphp")
2021-03-11 12:18:45,748 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@118fdd15]]
2021-03-11 12:18:45,748 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:18:45,956 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:45,962 [main:137] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@118fdd15]
2021-03-11 12:18:45,962 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).get(1306078744).isTitleCase()
2021-03-11 12:18:45,963 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fdbbfcb]]
2021-03-11 12:18:45,963 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:18:46,171 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:46,384 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:46,390 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fdbbfcb]
2021-03-11 12:18:46,592 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:18:46,598 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:18:46,605 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).subSequence(-548452220, -352451098).all({a: Char -> false})
2021-03-11 12:18:46,605 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55512dae]]
2021-03-11 12:18:46,605 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:18:46,807 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:46,813 [main:137] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55512dae]
2021-03-11 12:18:47,016 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:18:47,224 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:18:47,231 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).get(2064926042).equals('뻛', true)
2021-03-11 12:18:47,231 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60a2469d]]
2021-03-11 12:18:47,231 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:18:47,435 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:47,441 [main:137] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60a2469d]
2021-03-11 12:18:47,441 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).get(286695467).isWhitespace()
2021-03-11 12:18:47,441 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fad1c1b]]
2021-03-11 12:18:47,441 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:18:47,643 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:47,649 [main:137] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fad1c1b]
2021-03-11 12:18:47,649 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).get(1607191310).isHighSurrogate()
2021-03-11 12:18:47,650 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@846b1df]]
2021-03-11 12:18:47,650 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@846b1df]
2021-03-11 12:18:47,852 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:18:47,852 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).equals("qrtqc")
2021-03-11 12:18:47,853 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c49afa3]]
2021-03-11 12:18:47,853 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:18:48,054 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:18:48,060 [main:137] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c49afa3]
2021-03-11 12:18:48,061 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).get(818511820).isLetterOrDigit()
2021-03-11 12:18:48,061 [main:110] - replacement of c !is CoroutineStackFrame of type Boolean is (bar0<UInt>(926620857.toUInt())).get(1607191310).isHighSurrogate()
2021-03-11 12:18:48,263 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:18:48,263 [main:66] - Compilation checking started
2021-03-11 12:18:48,862 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if ((bar0<UInt>(926620857.toUInt())).get(1607191310).isHighSurrogate()) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:18:48,867 [main:103] - replacing (c, Continuation<*>)
2021-03-11 12:18:48,867 [main:38] - replacing c Continuation<*>
2021-03-11 12:18:48,867 [main:42] - Getting value of type Continuation<*>
2021-03-11 12:18:49,070 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 12:18:49,280 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:18:49,287 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:18:50,006 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 12:18:50,216 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:18:50,224 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:18:50,695 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 12:18:50,914 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:18:50,922 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:18:51,713 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-11 12:18:51,931 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:18:51,939 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:18:52,662 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-11 12:18:52,881 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:18:52,889 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:18:53,621 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 15
2021-03-11 12:18:53,838 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:18:53,846 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:18:54,577 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 18
2021-03-11 12:18:54,577 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:18:54,577 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:18:54,577 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:18:54,578 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:18:54,578 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:18:54,578 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:18:54,578 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 12:18:54,602 [main:55] - randomType = Kla0
2021-03-11 12:18:54,809 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:18:54,815 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-11 12:18:55,020 [main:194] - Type params = []
2021-03-11 12:18:55,229 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:18:55,243 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:18:55,268 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:18:55,269 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:18:55,270 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:18:55,270 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:18:55,271 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:18:55,272 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:18:55,272 [main:107] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 12:18:55,272 [main:103] - replacing ({}, Function0<Unit>)
2021-03-11 12:18:55,272 [main:38] - replacing {} Function0<Unit>
2021-03-11 12:18:55,272 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:18:55,479 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:18:55,485 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:18:55,702 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:18:55,710 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:18:56,172 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:18:56,178 [main:95] - GENERATED = require(true)
2021-03-11 12:18:56,178 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 12:18:56,178 [main:49] - GENERATED IS CALL =false
2021-03-11 12:18:57,714 [main:55] - randomType = Array<Pair<Boolean, MutableMap<UShort, UShort>>>
2021-03-11 12:18:57,915 [main:302] - generating value of type = Array<Pair<Boolean, MutableMap<UShort, UShort>>> false depth = 0
2021-03-11 12:18:58,171 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Pair<Boolean, MutableMap<UShort, UShort>>): Array<Pair<Boolean, MutableMap<UShort, UShort>>> = TODO()
2021-03-11 12:18:58,179 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Pair<Boolean, MutableMap<UShort, UShort>>): Array<Pair<Boolean, MutableMap<UShort, UShort>>> = TODO()
2021-03-11 12:18:58,397 [main:302] - generating value of type = Pair<Boolean, MutableMap<UShort, UShort>> false depth = 3
2021-03-11 12:18:58,607 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Boolean, second: MutableMap<UShort, UShort>): Pair<Boolean, MutableMap<UShort, UShort>> = TODO()
2021-03-11 12:18:58,615 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Boolean, second: MutableMap<UShort, UShort>): Pair<Boolean, MutableMap<UShort, UShort>> = TODO()
2021-03-11 12:18:58,827 [main:302] - generating value of type = Boolean true depth = 6
2021-03-11 12:18:58,833 [main:302] - generating value of type = MutableMap<UShort, UShort> false depth = 6
2021-03-11 12:18:59,043 [main:43] - GENERATING CALL OF fun <K, V> HashMap(original: kotlin.collections.Map<UShort, UShort>): MutableMap<UShort, UShort> = TODO()
2021-03-11 12:18:59,051 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(original: kotlin.collections.Map<UShort, UShort>): MutableMap<UShort, UShort> = TODO()
2021-03-11 12:18:59,536 [main:302] - generating value of type = Map<UShort, UShort> false depth = 9
2021-03-11 12:18:59,746 [main:43] - GENERATING CALL OF fun <K, V> HashMap(initialCapacity: kotlin.Int): Map<UShort, UShort> = TODO()
2021-03-11 12:18:59,753 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(initialCapacity: kotlin.Int): Map<UShort, UShort> = TODO()
2021-03-11 12:19:00,206 [main:302] - generating value of type = Int true depth = 12
2021-03-11 12:19:00,213 [main:95] - GENERATED = HashMap<UShort, UShort>(-1133963602)
2021-03-11 12:19:00,213 [main:95] - GENERATED = HashMap<UShort, UShort>(HashMap<UShort, UShort>(-1133963602))
2021-03-11 12:19:00,213 [main:95] - GENERATED = Pair<Boolean, MutableMap<UShort, UShort>>(true, HashMap<UShort, UShort>(HashMap<UShort, UShort>(-1133963602)))
2021-03-11 12:19:00,213 [main:95] - GENERATED = arrayOf<Pair<Boolean, MutableMap<UShort, UShort>>>(Pair<Boolean, MutableMap<UShort, UShort>>(true, HashMap<UShort, UShort>(HashMap<UShort, UShort>(-1133963602))))
2021-03-11 12:19:00,238 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:19:00,256 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:19:00,257 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:19:00,258 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:19:00,259 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:19:00,260 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:19:00,261 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:19:00,261 [main:110] - replacement of {} of type Function0<Unit> is { require(true)}
2021-03-11 12:19:00,461 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:19:00,461 [main:66] - Compilation checking started
2021-03-11 12:19:01,299 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:19:01,306 [main:103] - replacing (s, String)
2021-03-11 12:19:01,309 [main:38] - replacing s String
2021-03-11 12:19:01,309 [main:42] - Getting value of type String
2021-03-11 12:19:01,531 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:19:01,537 [main:46] - GENERATED VALUE OF TYPE String = "skoux"
2021-03-11 12:19:01,537 [main:49] - GENERATED IS CALL =false
2021-03-11 12:19:01,550 [main:55] - randomType = UInt
2021-03-11 12:19:01,756 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:19:01,798 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@5bf1a3cb]
2021-03-11 12:19:02,003 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:19:02,009 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a175dac]
2021-03-11 12:19:02,218 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:02,225 [main:66] - Generated call from random type = (1610430211.toUInt()).div(5696683654361326583.toULong()).toString(616625127)
2021-03-11 12:19:02,225 [main:94] - GETTING String from String
2021-03-11 12:19:02,251 [main:101] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2253ce57]]
2021-03-11 12:19:02,251 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2253ce57]
2021-03-11 12:19:02,464 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:19:02,470 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:19:02,476 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).dropLastWhile({a: Char -> false})
2021-03-11 12:19:02,477 [main:101] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e33706e]]
2021-03-11 12:19:02,477 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e33706e]
2021-03-11 12:19:02,682 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:02,689 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).dropLast(-598338967)
2021-03-11 12:19:02,689 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]]
2021-03-11 12:19:02,689 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]
2021-03-11 12:19:02,892 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:02,899 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).repeat(265460191)
2021-03-11 12:19:02,899 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60d466a]]
2021-03-11 12:19:02,899 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:19:03,105 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:03,319 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:03,325 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60d466a]
2021-03-11 12:19:03,534 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:19:03,751 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:19:03,759 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:19:04,231 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:19:04,238 [main:95] - GENERATED = Regex("eajch")
2021-03-11 12:19:04,444 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 12:19:04,450 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:19:04,459 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).subSequence(-147640723, 907389478).replace(Regex("eajch"), {a: MatchResult -> "letus"})
2021-03-11 12:19:04,459 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c9b84b]]
2021-03-11 12:19:04,459 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c9b84b]
2021-03-11 12:19:04,664 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:04,873 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:04,879 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).removeRange(596133299, -747645442)
2021-03-11 12:19:04,879 [main:101] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cff2b98]]
2021-03-11 12:19:04,880 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cff2b98]
2021-03-11 12:19:05,130 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:19:05,342 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:19:05,555 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:19:05,561 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).replaceAfterLast('₻', "jatkq", "vjmlt")
2021-03-11 12:19:05,562 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]]
2021-03-11 12:19:05,562 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:19:05,769 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:05,775 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]
2021-03-11 12:19:05,775 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).get(1218086394).titlecase()
2021-03-11 12:19:05,776 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]]
2021-03-11 12:19:05,776 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]
2021-03-11 12:19:05,776 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).toLowerCase()
2021-03-11 12:19:05,776 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]]
2021-03-11 12:19:05,776 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]
2021-03-11 12:19:05,776 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).toUpperCase()
2021-03-11 12:19:05,776 [main:101] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47361cce]]
2021-03-11 12:19:05,776 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47361cce]
2021-03-11 12:19:05,984 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:05,990 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).take(1919988209)
2021-03-11 12:19:05,990 [main:110] - replacement of s of type String is (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).take(1919988209)
2021-03-11 12:19:06,193 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:19:06,193 [main:66] - Compilation checking started
2021-03-11 12:19:06,778 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().(bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).take(1919988209)
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:19:06,783 [main:103] - replacing ("OK", String)
2021-03-11 12:19:06,784 [main:38] - replacing "OK" String
2021-03-11 12:19:06,784 [main:42] - Getting value of type String
2021-03-11 12:19:06,992 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:19:06,998 [main:46] - GENERATED VALUE OF TYPE String = "hzfsy"
2021-03-11 12:19:06,998 [main:49] - GENERATED IS CALL =false
2021-03-11 12:19:07,011 [main:55] - randomType = UInt
2021-03-11 12:19:07,214 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:19:07,247 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@7a65b4e2]
2021-03-11 12:19:07,247 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@217473a1]
2021-03-11 12:19:07,450 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:07,457 [main:66] - Generated call from random type = (1486935796.toUInt()).toByte().toString(-143919335)
2021-03-11 12:19:07,457 [main:94] - GETTING String from String
2021-03-11 12:19:07,474 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9c84af]]
2021-03-11 12:19:07,474 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9c84af]
2021-03-11 12:19:07,475 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).uppercase()
2021-03-11 12:19:07,475 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f7d80a8]]
2021-03-11 12:19:07,475 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f7d80a8]
2021-03-11 12:19:07,679 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:19:07,685 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:19:07,692 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).dropWhile({a: Char -> false})
2021-03-11 12:19:07,692 [main:101] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21fc0bcb]]
2021-03-11 12:19:07,692 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21fc0bcb]
2021-03-11 12:19:07,897 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:19:07,904 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:19:07,910 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).filterNot({a: Char -> true})
2021-03-11 12:19:07,911 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]]
2021-03-11 12:19:07,911 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]
2021-03-11 12:19:08,115 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:08,121 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).repeat(628807951)
2021-03-11 12:19:08,121 [main:101] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534bf968]]
2021-03-11 12:19:08,121 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534bf968]
2021-03-11 12:19:08,326 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:08,536 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:19:08,543 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).padStart(773295836, '烤')
2021-03-11 12:19:08,543 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]]
2021-03-11 12:19:08,543 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b3e366f]
2021-03-11 12:19:08,746 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:19:08,752 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).concat("fiofb")
2021-03-11 12:19:08,752 [main:101] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d545e75]]
2021-03-11 12:19:08,752 [main:137] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d545e75]
2021-03-11 12:19:08,956 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:19:09,167 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:19:09,375 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:19:09,382 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).replace('ꞅ', '즍', false)
2021-03-11 12:19:09,382 [main:101] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a3075e0]]
2021-03-11 12:19:09,382 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a3075e0]
2021-03-11 12:19:09,585 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:09,592 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).takeLast(-1093634767)
2021-03-11 12:19:09,592 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]]
2021-03-11 12:19:09,592 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:19:09,796 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:10,006 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:10,012 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]
2021-03-11 12:19:10,216 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:19:10,426 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:19:10,433 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:19:10,888 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:19:10,897 [main:95] - GENERATED = StringBuilder("ocoes")
2021-03-11 12:19:11,100 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:19:11,106 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).subSequence(-1949890999, 1049618392).commonPrefixWith(StringBuilder("ocoes"), true)
2021-03-11 12:19:11,106 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]]
2021-03-11 12:19:11,106 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:19:11,311 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:11,524 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:11,530 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]
2021-03-11 12:19:11,735 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:11,991 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:11,997 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).subSequence(2085180376, 2107674176).substring(-2084075523, -1064036397)
2021-03-11 12:19:11,997 [main:110] - replacement of "OK" of type String is (bar3<String>(arrayOfNulls<String>(-1065875956))).takeLast(-1093634767)
2021-03-11 12:19:12,200 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:19:12,201 [main:66] - Compilation checking started
2021-03-11 12:19:12,786 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != (bar3<String>(arrayOfNulls<String>(-1065875956))).takeLast(-1093634767)) return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:19:12,791 [main:103] - replacing (prope2, Any?)
2021-03-11 12:19:12,791 [main:38] - replacing prope2 Any?
2021-03-11 12:19:12,791 [main:42] - Getting value of type Any?
2021-03-11 12:19:12,994 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:19:12,994 [main:46] - GENERATED VALUE OF TYPE Any? = "eccuu"
2021-03-11 12:19:12,994 [main:49] - GENERATED IS CALL =false
2021-03-11 12:19:13,007 [main:55] - randomType = Float
2021-03-11 12:19:13,212 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:19:13,246 [main:94] - GETTING Any? from String
2021-03-11 12:19:13,262 [main:94] - GETTING Any? from String
2021-03-11 12:19:13,263 [main:94] - GETTING Any? from String
2021-03-11 12:19:13,263 [main:94] - GETTING Any? from String
2021-03-11 12:19:13,264 [main:94] - GETTING Any? from String
2021-03-11 12:19:13,265 [main:94] - GETTING Any? from String
2021-03-11 12:19:13,265 [main:94] - GETTING Any? from String
2021-03-11 12:19:13,265 [main:110] - replacement of prope2 of type Any? is "eccuu"
2021-03-11 12:19:13,467 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:19:13,467 [main:66] - Compilation checking started
2021-03-11 12:19:14,045 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6()."eccuu" = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:19:14,050 [main:103] - replacing (prope4, Int)
2021-03-11 12:19:14,050 [main:38] - replacing prope4 Int
2021-03-11 12:19:14,050 [main:42] - Getting value of type Int
2021-03-11 12:19:14,263 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:14,272 [main:46] - GENERATED VALUE OF TYPE Int = 384997475
2021-03-11 12:19:14,272 [main:49] - GENERATED IS CALL =false
2021-03-11 12:19:14,304 [main:55] - randomType = Kla1
2021-03-11 12:19:14,305 [main:94] - GETTING Int from String
2021-03-11 12:19:14,321 [main:101] - Case = [public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18e49a2]]
2021-03-11 12:19:14,322 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18e49a2]
2021-03-11 12:19:14,526 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:19:14,532 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:19:14,538 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).indexOfFirst({a: Char -> true})
2021-03-11 12:19:14,538 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39a2e6a5]]
2021-03-11 12:19:14,538 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39a2e6a5]
2021-03-11 12:19:14,539 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).length.unaryMinus()
2021-03-11 12:19:14,539 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5edcf9ad]]
2021-03-11 12:19:14,539 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:19:14,742 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:14,748 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5edcf9ad]
2021-03-11 12:19:14,951 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:19:14,958 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).get(-660453646).compareTo('캙')
2021-03-11 12:19:14,958 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@51338b5]]
2021-03-11 12:19:14,958 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:19:15,162 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:19:15,168 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@51338b5]
2021-03-11 12:19:15,383 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:15,389 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).compareTo("lgzgq").coerceAtLeast(1636028226)
2021-03-11 12:19:15,390 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1358c718]]
2021-03-11 12:19:15,390 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1358c718]
2021-03-11 12:19:15,390 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).length.inc()
2021-03-11 12:19:15,390 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@41f7877a]]
2021-03-11 12:19:15,390 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@41f7877a]
2021-03-11 12:19:15,594 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:19:15,600 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).length.div(115)
2021-03-11 12:19:15,601 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7a1dc016]]
2021-03-11 12:19:15,601 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7a1dc016]
2021-03-11 12:19:15,806 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:15,813 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).length.and(-1708778954)
2021-03-11 12:19:15,813 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a3323fb]]
2021-03-11 12:19:15,813 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a3323fb]
2021-03-11 12:19:15,813 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).length.countLeadingZeroBits()
2021-03-11 12:19:15,813 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@edadc76]]
2021-03-11 12:19:15,813 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:19:16,017 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:16,023 [main:137] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@edadc76]
2021-03-11 12:19:16,024 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).get(1763059674).digitToInt()
2021-03-11 12:19:16,024 [main:101] - Case = [public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31eb7780]]
2021-03-11 12:19:16,024 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31eb7780]
2021-03-11 12:19:16,229 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 12:19:16,235 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:19:16,241 [main:105] - GENERATED CALL = (bar3<String>(arrayOfNulls<String>(-1065875956))).sumBy({a: Char -> 515344540})
2021-03-11 12:19:16,241 [main:110] - replacement of prope4 of type Int is (bar3<String>(arrayOfNulls<String>(-1065875956))).compareTo("lgzgq").coerceAtLeast(1636028226)
2021-03-11 12:19:16,444 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:19:16,445 [main:66] - Compilation checking started
2021-03-11 12:19:17,042 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if ((bar3<String>(arrayOfNulls<String>(-1065875956))).compareTo("lgzgq").coerceAtLeast(1636028226) != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:19:17,047 [main:103] - replacing (prope6, Function0<Unit>)
2021-03-11 12:19:17,047 [main:38] - replacing prope6 Function0<Unit>
2021-03-11 12:19:17,047 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:19:17,263 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:19:17,270 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:19:17,484 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:19:17,492 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:19:18,205 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:19:18,211 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 12:19:18,217 [main:302] - generating value of type = Any false depth = 5
2021-03-11 12:19:18,217 [main:95] - GENERATED = require(true, { "hrkum"})
2021-03-11 12:19:18,217 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true, { "hrkum"})}
2021-03-11 12:19:18,218 [main:49] - GENERATED IS CALL =false
2021-03-11 12:19:20,621 [main:55] - randomType = MutableMap<ArrayDeque<ULong>, List<Function1<Kla2, Collection<Array<Short>>?>>>?
2021-03-11 12:19:20,622 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:19:20,645 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:19:20,646 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:19:20,647 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:19:20,647 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:19:20,648 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:19:20,649 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:19:20,649 [main:110] - replacement of prope6 of type Function0<Unit> is { require(true, { "hrkum"})}
2021-03-11 12:19:20,852 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:19:20,853 [main:66] - Compilation checking started
2021-03-11 12:19:21,462 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        { require(true, { "hrkum"})} = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:19:21,467 [main:103] - replacing (s, String)
2021-03-11 12:19:21,467 [main:38] - replacing s String
2021-03-11 12:19:21,467 [main:42] - Getting value of type String
2021-03-11 12:19:21,671 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:19:21,677 [main:46] - GENERATED VALUE OF TYPE String = "nnuag"
2021-03-11 12:19:21,678 [main:49] - GENERATED IS CALL =false
2021-03-11 12:19:21,703 [main:55] - randomType = Kla2
2021-03-11 12:19:21,908 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 12:19:21,914 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}
2021-03-11 12:19:22,118 [main:194] - Type params = []
2021-03-11 12:19:22,331 [main:137] - GENERATING call of type public final suspend fun fu7(): kotlin.String defined in Kla2[SimpleFunctionDescriptorImpl@40c81e43]
2021-03-11 12:19:22,332 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a5650d3]
2021-03-11 12:19:22,332 [main:66] - Generated call from random type = (Kla2()).fu7().trim()
2021-03-11 12:19:22,332 [main:94] - GETTING String from String
2021-03-11 12:19:22,347 [main:101] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd07c1]]
2021-03-11 12:19:22,347 [main:137] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd07c1]
2021-03-11 12:19:22,552 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:19:22,762 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:19:22,972 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:19:22,979 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).replaceBeforeLast('☰', "tredt", "cvlzv")
2021-03-11 12:19:22,979 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]]
2021-03-11 12:19:22,979 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]
2021-03-11 12:19:22,979 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).toUpperCase()
2021-03-11 12:19:22,979 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]]
2021-03-11 12:19:22,979 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]
2021-03-11 12:19:22,979 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).reversed()
2021-03-11 12:19:22,979 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ce8ce0]]
2021-03-11 12:19:22,979 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ce8ce0]
2021-03-11 12:19:23,183 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:23,394 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:19:23,400 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).padEnd(539317847, '࣭')
2021-03-11 12:19:23,400 [main:101] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dd201a1]]
2021-03-11 12:19:23,400 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dd201a1]
2021-03-11 12:19:23,604 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 12:19:23,610 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:19:23,617 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).filterIndexed({a: Int, b: Char -> true})
2021-03-11 12:19:23,617 [main:101] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@579fd1d1]]
2021-03-11 12:19:23,617 [main:137] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@579fd1d1]
2021-03-11 12:19:23,820 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:19:24,031 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:19:24,240 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:19:24,246 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).replaceFirst('鎍', '?', true)
2021-03-11 12:19:24,247 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]]
2021-03-11 12:19:24,247 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:19:24,450 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:24,456 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]
2021-03-11 12:19:24,457 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).get(-603021327).uppercase()
2021-03-11 12:19:24,457 [main:101] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3170b0]]
2021-03-11 12:19:24,457 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3170b0]
2021-03-11 12:19:24,661 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:19:24,667 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).trimMargin("lfhts")
2021-03-11 12:19:24,667 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]]
2021-03-11 12:19:24,667 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]
2021-03-11 12:19:24,871 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:19:25,081 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:19:25,089 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:19:25,553 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:19:25,562 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-11 12:19:25,562 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).removePrefix(StringBuilder(StringBuilder()))
2021-03-11 12:19:25,562 [main:101] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cff2b98]]
2021-03-11 12:19:25,563 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cff2b98]
2021-03-11 12:19:25,813 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:19:26,029 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:19:26,247 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:19:26,253 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).replaceAfterLast('摹', "imjzf", "mdiot")
2021-03-11 12:19:26,254 [main:110] - replacement of s of type String is (bar0<UInt>(926620857.toUInt())).reversed()
2021-03-11 12:19:26,464 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:19:26,464 [main:66] - Compilation checking started
2021-03-11 12:19:27,043 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.(bar0<UInt>(926620857.toUInt())).reversed())

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:19:27,047 [main:103] - replacing (getOrThrow(), Any?)
2021-03-11 12:19:27,047 [main:38] - replacing getOrThrow() Any?
2021-03-11 12:19:27,047 [main:42] - Getting value of type Any?
2021-03-11 12:19:27,255 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:19:27,255 [main:46] - GENERATED VALUE OF TYPE Any? = "plthb"
2021-03-11 12:19:27,256 [main:49] - GENERATED IS CALL =false
2021-03-11 12:19:27,281 [main:55] - randomType = Kla6
2021-03-11 12:19:27,491 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 12:19:27,497 [main:112] - generating klass Kla6 text = class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-11 12:19:27,519 [main:66] - Generated call from random type = (Kla6()).prope2
2021-03-11 12:19:27,520 [main:94] - GETTING Any? from String
2021-03-11 12:19:27,540 [main:94] - GETTING Any? from String
2021-03-11 12:19:27,541 [main:94] - GETTING Any? from String
2021-03-11 12:19:27,542 [main:94] - GETTING Any? from String
2021-03-11 12:19:27,543 [main:94] - GETTING Any? from String
2021-03-11 12:19:27,544 [main:94] - GETTING Any? from String
2021-03-11 12:19:27,545 [main:94] - GETTING Any? from String
2021-03-11 12:19:27,545 [main:110] - replacement of getOrThrow() of type Any? is (Kla6()).prope2
2021-03-11 12:19:27,768 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:19:27,768 [main:66] - Compilation checking started
2021-03-11 12:19:28,358 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.(Kla6()).prope2
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:19:28,363 [main:103] - replacing ("FAIL2", String)
2021-03-11 12:19:28,363 [main:38] - replacing "FAIL2" String
2021-03-11 12:19:28,363 [main:42] - Getting value of type String
2021-03-11 12:19:28,570 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:19:28,576 [main:46] - GENERATED VALUE OF TYPE String = "qqpiz"
2021-03-11 12:19:28,576 [main:49] - GENERATED IS CALL =false
2021-03-11 12:19:28,601 [main:55] - randomType = Kla8
2021-03-11 12:19:28,807 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 12:19:28,813 [main:112] - generating klass Kla8 text = class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-11 12:19:28,820 [main:94] - GETTING String from String
2021-03-11 12:19:28,843 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ce8ce0]]
2021-03-11 12:19:28,843 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70ce8ce0]
2021-03-11 12:19:29,048 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:29,259 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:19:29,265 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).padEnd(-652504266, 'ᔤ')
2021-03-11 12:19:29,266 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]]
2021-03-11 12:19:29,266 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]
2021-03-11 12:19:29,472 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 12:19:29,479 [main:302] - generating value of type = Char true depth = 1
2021-03-11 12:19:29,485 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).replaceFirstChar({a: Char -> ''})
2021-03-11 12:19:29,485 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]]
2021-03-11 12:19:29,485 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:19:29,692 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:29,903 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:29,909 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]
2021-03-11 12:19:30,114 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:30,327 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:30,333 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).subSequence(-1838411948, 706793696).substring(1661994285, -996623161)
2021-03-11 12:19:30,334 [main:101] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f592b75]]
2021-03-11 12:19:30,334 [main:137] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f592b75]
2021-03-11 12:19:30,538 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:19:30,545 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).prependIndent("deasc")
2021-03-11 12:19:30,545 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f4c98d]]
2021-03-11 12:19:30,545 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:19:30,752 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:30,759 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f4c98d]
2021-03-11 12:19:30,759 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).get(233809423).lowercase()
2021-03-11 12:19:30,759 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]]
2021-03-11 12:19:30,759 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]
2021-03-11 12:19:30,966 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:19:31,181 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:19:31,187 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).commonSuffixWith("admyk", true)
2021-03-11 12:19:31,187 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2136d]]
2021-03-11 12:19:31,187 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2136d]
2021-03-11 12:19:31,188 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).lowercase()
2021-03-11 12:19:31,188 [main:101] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3ed116f9]]
2021-03-11 12:19:31,188 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3ed116f9]
2021-03-11 12:19:31,393 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:19:31,394 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")
2021-03-11 12:19:31,394 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]]
2021-03-11 12:19:31,394 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]
2021-03-11 12:19:31,598 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:31,604 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).substring(1620879401)
2021-03-11 12:19:31,604 [main:101] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ff0185]]
2021-03-11 12:19:31,604 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ff0185]
2021-03-11 12:19:31,808 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:19:32,017 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:19:32,226 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:19:32,232 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).replaceBefore('绿', "zflvf", "gwoax")
2021-03-11 12:19:32,232 [main:110] - replacement of "FAIL2" of type String is (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")
2021-03-11 12:19:32,436 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:19:32,437 [main:66] - Compilation checking started
2021-03-11 12:19:33,327 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:19:33,335 [main:103] - replacing (c, Continuation<*>)
2021-03-11 12:19:33,335 [main:38] - replacing c Continuation<*>
2021-03-11 12:19:33,335 [main:42] - Getting value of type Continuation<*>
2021-03-11 12:19:33,549 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 12:19:33,768 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:19:33,776 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:19:34,514 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 12:19:34,730 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:19:34,738 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:19:35,225 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 12:19:35,452 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:19:35,460 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:19:36,244 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:19:36,244 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:19:36,244 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:19:36,244 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 12:19:36,270 [main:55] - randomType = Kla1
2021-03-11 12:19:36,271 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:19:36,296 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:19:36,296 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:19:36,297 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:19:36,298 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:19:36,299 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:19:36,299 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:19:36,300 [main:107] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 12:19:36,300 [main:103] - replacing (this, Kla4)
2021-03-11 12:19:36,300 [main:38] - replacing this Kla4
2021-03-11 12:19:36,300 [main:42] - Getting value of type Kla4
2021-03-11 12:19:36,510 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:19:36,517 [main:112] - generating klass Kla4 text = class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return prope7.fu3().s
    }
}
2021-03-11 12:19:36,517 [main:46] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-11 12:19:36,517 [main:49] - GENERATED IS CALL =true
2021-03-11 12:19:36,542 [main:55] - randomType = Kla6
2021-03-11 12:19:36,753 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 12:19:36,760 [main:112] - generating klass Kla6 text = class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-11 12:19:36,782 [main:94] - GETTING Kla4 from String
2021-03-11 12:19:36,800 [main:94] - GETTING Kla4 from String
2021-03-11 12:19:36,801 [main:94] - GETTING Kla4 from String
2021-03-11 12:19:36,802 [main:94] - GETTING Kla4 from String
2021-03-11 12:19:36,802 [main:94] - GETTING Kla4 from String
2021-03-11 12:19:36,803 [main:94] - GETTING Kla4 from String
2021-03-11 12:19:36,803 [main:94] - GETTING Kla4 from String
2021-03-11 12:19:36,803 [main:110] - replacement of this of type Kla4 is Kla4()
2021-03-11 12:19:37,012 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:19:37,012 [main:66] - Compilation checking started
2021-03-11 12:19:37,842 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:19:37,847 [main:103] - replacing (x, Function1<Ty0, Unit>)
2021-03-11 12:19:37,847 [main:38] - replacing x Function1<Ty0, Unit>
2021-03-11 12:19:37,847 [main:42] - Getting value of type Function1<Ty0, Unit>
2021-03-11 12:19:38,053 [main:302] - generating value of type = Function1<Ty0, Unit> false depth = 0
2021-03-11 12:19:38,060 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:19:38,273 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:19:38,281 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:19:38,745 [main:95] - GENERATED = println(null)
2021-03-11 12:19:38,745 [main:46] - GENERATED VALUE OF TYPE Function1<Ty0, Unit> = {a: Ty0 -> println(null)}
2021-03-11 12:19:38,746 [main:49] - GENERATED IS CALL =false
2021-03-11 12:19:42,767 [main:55] - randomType = Function2<Kla10, Kla6, Pair<Collection<Function1<MutableMap<Byte?, ArrayDeque<String?>?>?, UShort?>>, HashSet<Kla10?>>>
2021-03-11 12:19:42,768 [main:94] - GETTING Function1<Ty0, Unit> from String
2021-03-11 12:19:42,788 [main:94] - GETTING Function1<Ty0, Unit> from String
2021-03-11 12:19:42,789 [main:94] - GETTING Function1<Ty0, Unit> from String
2021-03-11 12:19:42,790 [main:94] - GETTING Function1<Ty0, Unit> from String
2021-03-11 12:19:42,791 [main:94] - GETTING Function1<Ty0, Unit> from String
2021-03-11 12:19:42,792 [main:94] - GETTING Function1<Ty0, Unit> from String
2021-03-11 12:19:42,793 [main:94] - GETTING Function1<Ty0, Unit> from String
2021-03-11 12:19:42,793 [main:110] - replacement of x of type Function1<Ty0, Unit> is {a: Ty0 -> println(null)}
2021-03-11 12:19:43,007 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:19:43,008 [main:66] - Compilation checking started
2021-03-11 12:19:43,593 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
{a: Ty0 -> println(null)}(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:19:43,598 [main:103] - replacing (c, SuspendFunction0<Unit>)
2021-03-11 12:19:43,598 [main:38] - replacing c SuspendFunction0<Unit>
2021-03-11 12:19:43,598 [main:42] - Getting value of type SuspendFunction0<Unit>
2021-03-11 12:19:43,804 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 12:19:43,811 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:19:44,027 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:19:44,035 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:19:44,502 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:19:44,502 [main:95] - GENERATED = print("ajqzr")
2021-03-11 12:19:44,502 [main:46] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { print("ajqzr")}
2021-03-11 12:19:44,502 [main:49] - GENERATED IS CALL =false
2021-03-11 12:19:44,771 [main:55] - randomType = Kla1?
2021-03-11 12:19:44,772 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 12:19:44,789 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 12:19:44,790 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 12:19:44,791 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 12:19:44,792 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 12:19:44,793 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 12:19:44,794 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 12:19:44,794 [main:110] - replacement of c of type SuspendFunction0<Unit> is { print("ajqzr")}
2021-03-11 12:19:45,000 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:19:45,001 [main:66] - Compilation checking started
2021-03-11 12:19:45,591 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
{ print("ajqzr")}.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:19:45,595 [main:103] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-11 12:19:45,595 [main:38] - replacing c !is CoroutineStackFrame Boolean
2021-03-11 12:19:45,596 [main:42] - Getting value of type Boolean
2021-03-11 12:19:45,802 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:19:45,808 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:19:45,808 [main:49] - GENERATED IS CALL =false
2021-03-11 12:19:45,834 [main:55] - randomType = Kla4
2021-03-11 12:19:46,040 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:19:46,046 [main:112] - generating klass Kla4 text = class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}
2021-03-11 12:19:46,057 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@19476bec]
2021-03-11 12:19:46,263 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:19:46,263 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@d4b20d8]
2021-03-11 12:19:46,469 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:19:46,476 [main:66] - Generated call from random type = (Kla4()).equals("ctlvf").xor(true)
2021-03-11 12:19:46,476 [main:94] - GETTING Boolean from String
2021-03-11 12:19:46,532 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71bbc8d3]]
2021-03-11 12:19:46,533 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:19:46,739 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:46,951 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:46,958 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71bbc8d3]
2021-03-11 12:19:46,958 [main:105] - GENERATED CALL = (bar4<Array<Char>>(emptyArray<Array<Char>>())).subSequence(-492220586, -2013510963).isEmpty()
2021-03-11 12:19:46,958 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45724faa]]
2021-03-11 12:19:46,958 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:19:47,164 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:47,376 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:47,382 [main:137] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45724faa]
2021-03-11 12:19:47,589 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:47,801 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:19:48,122 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:48,334 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:48,546 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:19:48,553 [main:105] - GENERATED CALL = (bar4<Array<Char>>(emptyArray<Array<Char>>())).subSequence(211027861, -1258963048).regionMatches(1180925050, "srtzc", -1517037079, 1396410507, false)
2021-03-11 12:19:48,553 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49dbf015]]
2021-03-11 12:19:48,553 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:19:48,759 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:48,765 [main:137] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49dbf015]
2021-03-11 12:19:48,765 [main:105] - GENERATED CALL = (bar4<Array<Char>>(emptyArray<Array<Char>>())).get(-462169038).isUpperCase()
2021-03-11 12:19:48,765 [main:101] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2729276e]]
2021-03-11 12:19:48,766 [main:137] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2729276e]
2021-03-11 12:19:48,766 [main:105] - GENERATED CALL = (bar4<Array<Char>>(emptyArray<Array<Char>>())).any()
2021-03-11 12:19:48,766 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@598bd6c]]
2021-03-11 12:19:48,766 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:19:48,972 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:49,186 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:49,193 [main:137] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@598bd6c]
2021-03-11 12:19:49,402 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:49,408 [main:105] - GENERATED CALL = (bar4<Array<Char>>(emptyArray<Array<Char>>())).subSequence(-1740776407, 1618847781).hasSurrogatePairAt(174249472)
2021-03-11 12:19:49,408 [main:101] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69ad0258]]
2021-03-11 12:19:49,408 [main:137] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69ad0258]
2021-03-11 12:19:49,408 [main:105] - GENERATED CALL = (bar4<Array<Char>>(emptyArray<Array<Char>>())).isBlank()
2021-03-11 12:19:49,408 [main:101] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@588224ff]]
2021-03-11 12:19:49,408 [main:137] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@588224ff]
2021-03-11 12:19:49,618 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:19:49,625 [main:105] - GENERATED CALL = (bar4<Array<Char>>(emptyArray<Array<Char>>())).matches("mniys")
2021-03-11 12:19:49,625 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c49afa3]]
2021-03-11 12:19:49,625 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:19:49,836 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:49,842 [main:137] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c49afa3]
2021-03-11 12:19:49,843 [main:105] - GENERATED CALL = (bar4<Array<Char>>(emptyArray<Array<Char>>())).get(612792677).isLetterOrDigit()
2021-03-11 12:19:49,843 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55512dae]]
2021-03-11 12:19:49,843 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:19:50,054 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:19:50,060 [main:137] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55512dae]
2021-03-11 12:19:50,269 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:19:50,483 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:19:50,489 [main:105] - GENERATED CALL = (bar4<Array<Char>>(emptyArray<Array<Char>>())).get(-741015312).equals('☇', false)
2021-03-11 12:19:50,489 [main:101] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50c2962c]]
2021-03-11 12:19:50,490 [main:137] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50c2962c]
2021-03-11 12:19:50,697 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:19:50,910 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:19:50,917 [main:105] - GENERATED CALL = (bar4<Array<Char>>(emptyArray<Array<Char>>())).contains('?', true)
2021-03-11 12:19:50,917 [main:110] - replacement of c !is CoroutineStackFrame of type Boolean is (bar4<Array<Char>>(emptyArray<Array<Char>>())).subSequence(-1740776407, 1618847781).hasSurrogatePairAt(174249472)
2021-03-11 12:19:51,123 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:19:51,124 [main:66] - Compilation checking started
2021-03-11 12:19:51,715 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if ((bar4<Array<Char>>(emptyArray<Array<Char>>())).subSequence(-1740776407, 1618847781).hasSurrogatePairAt(174249472)) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:19:51,719 [main:103] - replacing (value, Ty0)
2021-03-11 12:19:51,719 [main:38] - replacing value Ty0
2021-03-11 12:19:51,719 [main:42] - Getting value of type Ty0
2021-03-11 12:19:51,928 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 12:19:51,937 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 12:19:51,963 [main:55] - randomType = Kla5
2021-03-11 12:19:52,171 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 12:19:52,177 [main:112] - generating klass Kla5 text = open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}
2021-03-11 12:19:52,384 [main:194] - Type params = []
2021-03-11 12:19:52,592 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 12:19:52,808 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:19:52,816 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:19:53,300 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 12:19:53,524 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:19:53,532 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:19:54,341 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:19:54,341 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:19:54,360 [main:94] - GETTING Ty0 from String
2021-03-11 12:19:54,378 [main:94] - GETTING Ty0 from String
2021-03-11 12:19:54,378 [main:94] - GETTING Ty0 from String
2021-03-11 12:19:54,379 [main:94] - GETTING Ty0 from String
2021-03-11 12:19:54,379 [main:94] - GETTING Ty0 from String
2021-03-11 12:19:54,380 [main:94] - GETTING Ty0 from String
2021-03-11 12:19:54,380 [main:94] - GETTING Ty0 from String
2021-03-11 12:19:54,380 [main:107] - Cant find and generate replacement for value type Ty0
2021-03-11 12:19:54,380 [main:103] - replacing (prope6, Function0<Unit>)
2021-03-11 12:19:54,381 [main:38] - replacing prope6 Function0<Unit>
2021-03-11 12:19:54,381 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:19:54,588 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:19:54,594 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:19:54,810 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:19:54,818 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:19:55,552 [main:302] - generating value of type = Int true depth = 4
2021-03-11 12:19:55,559 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 12:19:55,565 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 12:19:55,574 [main:95] - GENERATED = repeat(69715873, {a: Int -> println()})
2021-03-11 12:19:55,575 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(69715873, {a: Int -> println()})}
2021-03-11 12:19:55,575 [main:49] - GENERATED IS CALL =false
2021-03-11 12:19:55,843 [main:55] - randomType = Collection<Boolean>
2021-03-11 12:19:55,844 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:19:55,868 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:19:55,869 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:19:55,870 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:19:55,871 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:19:55,872 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:19:55,873 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:19:55,873 [main:110] - replacement of prope6 of type Function0<Unit> is { repeat(69715873, {a: Int -> println()})}
2021-03-11 12:19:56,079 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:19:56,079 [main:66] - Compilation checking started
2021-03-11 12:19:56,699 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        { repeat(69715873, {a: Int -> println()})} = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:19:56,704 [main:103] - replacing (x, Function1<Throwable, Unit>)
2021-03-11 12:19:56,704 [main:38] - replacing x Function1<Throwable, Unit>
2021-03-11 12:19:56,704 [main:42] - Getting value of type Function1<Throwable, Unit>
2021-03-11 12:19:56,922 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-11 12:19:56,928 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:19:57,148 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:19:57,156 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:19:57,640 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 12:19:57,647 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 12:19:57,657 [main:95] - GENERATED = contract({ println()})
2021-03-11 12:19:57,657 [main:46] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> contract({ println()})}
2021-03-11 12:19:57,657 [main:49] - GENERATED IS CALL =false
2021-03-11 12:19:57,906 [main:55] - randomType = Byte
2021-03-11 12:19:58,115 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:19:58,159 [main:94] - GETTING Function1<Throwable, Unit> from String
2021-03-11 12:19:58,177 [main:94] - GETTING Function1<Throwable, Unit> from String
2021-03-11 12:19:58,178 [main:94] - GETTING Function1<Throwable, Unit> from String
2021-03-11 12:19:58,179 [main:94] - GETTING Function1<Throwable, Unit> from String
2021-03-11 12:19:58,180 [main:94] - GETTING Function1<Throwable, Unit> from String
2021-03-11 12:19:58,181 [main:94] - GETTING Function1<Throwable, Unit> from String
2021-03-11 12:19:58,182 [main:94] - GETTING Function1<Throwable, Unit> from String
2021-03-11 12:19:58,182 [main:110] - replacement of x of type Function1<Throwable, Unit> is {a: Throwable -> contract({ println()})}
2021-03-11 12:19:58,388 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:19:58,389 [main:66] - Compilation checking started
2021-03-11 12:19:58,983 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let({a: Throwable -> contract({ println()})})
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:19:58,988 [main:103] - replacing ({}, Function0<Unit>)
2021-03-11 12:19:58,988 [main:38] - replacing {} Function0<Unit>
2021-03-11 12:19:58,988 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:19:59,199 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:19:59,205 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:19:59,423 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:19:59,431 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:19:59,903 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:19:59,903 [main:95] - GENERATED = println("tdcbs")
2021-03-11 12:19:59,903 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("tdcbs")}
2021-03-11 12:19:59,903 [main:49] - GENERATED IS CALL =false
2021-03-11 12:19:59,916 [main:55] - randomType = Short
2021-03-11 12:20:00,124 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:20:00,165 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:20:00,189 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:20:00,190 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:20:00,191 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:20:00,192 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:20:00,193 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:20:00,194 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:20:00,194 [main:110] - replacement of {} of type Function0<Unit> is { println("tdcbs")}
2021-03-11 12:20:00,410 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:20:00,410 [main:66] - Compilation checking started
2021-03-11 12:20:01,365 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { println("tdcbs")}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:20:01,369 [main:103] - replacing ({
        fu10(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 12:20:01,370 [main:38] - replacing {
        fu10(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-11 12:20:01,370 [main:42] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 12:20:01,578 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 12:20:01,584 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:20:01,798 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:20:01,806 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:20:02,274 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:20:02,281 [main:95] - GENERATED = require(true)
2021-03-11 12:20:02,281 [main:46] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> require(true)}
2021-03-11 12:20:02,281 [main:49] - GENERATED IS CALL =false
2021-03-11 12:20:02,529 [main:55] - randomType = Byte
2021-03-11 12:20:02,738 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:20:02,789 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 12:20:02,809 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 12:20:02,810 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 12:20:02,812 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 12:20:02,813 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 12:20:02,815 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 12:20:02,816 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 12:20:02,816 [main:110] - replacement of {
        fu10(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> require(true)}
2021-03-11 12:20:03,024 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:20:03,024 [main:66] - Compilation checking started
2021-03-11 12:20:03,867 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { println("tdcbs")}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:20:03,873 [main:103] - replacing (getOrThrow(), Any?)
2021-03-11 12:20:03,873 [main:38] - replacing getOrThrow() Any?
2021-03-11 12:20:03,873 [main:42] - Getting value of type Any?
2021-03-11 12:20:04,082 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:20:04,082 [main:46] - GENERATED VALUE OF TYPE Any? = "ywsep"
2021-03-11 12:20:04,082 [main:49] - GENERATED IS CALL =false
2021-03-11 12:20:04,096 [main:55] - randomType = Float
2021-03-11 12:20:04,310 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:20:04,355 [main:94] - GETTING Any? from String
2021-03-11 12:20:04,372 [main:94] - GETTING Any? from String
2021-03-11 12:20:04,373 [main:94] - GETTING Any? from String
2021-03-11 12:20:04,374 [main:94] - GETTING Any? from String
2021-03-11 12:20:04,375 [main:94] - GETTING Any? from String
2021-03-11 12:20:04,376 [main:94] - GETTING Any? from String
2021-03-11 12:20:04,377 [main:94] - GETTING Any? from String
2021-03-11 12:20:04,377 [main:110] - replacement of getOrThrow() of type Any? is "ywsep"
2021-03-11 12:20:04,590 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:20:04,591 [main:66] - Compilation checking started
2021-03-11 12:20:05,178 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"})."ywsep"
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { println("tdcbs")}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:20:05,183 [main:103] - replacing (prope2, String)
2021-03-11 12:20:05,183 [main:38] - replacing prope2 String
2021-03-11 12:20:05,183 [main:42] - Getting value of type String
2021-03-11 12:20:05,390 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:05,396 [main:46] - GENERATED VALUE OF TYPE String = "tlyhj"
2021-03-11 12:20:05,396 [main:49] - GENERATED IS CALL =false
2021-03-11 12:20:06,254 [main:55] - randomType = Pair<UInt, Map<Kla6, Short>>
2021-03-11 12:20:06,463 [main:302] - generating value of type = Pair<UInt, Map<Kla6, Short>> false depth = 0
2021-03-11 12:20:06,683 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UInt, second: Map<Kla6, Short>): Pair<UInt, Map<Kla6, Short>> = TODO()
2021-03-11 12:20:06,691 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UInt, second: Map<Kla6, Short>): Pair<UInt, Map<Kla6, Short>> = TODO()
2021-03-11 12:20:06,916 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:20:06,922 [main:302] - generating value of type = Map<Kla6, Short> false depth = 3
2021-03-11 12:20:07,140 [main:43] - GENERATING CALL OF fun <K, V> mapOf(pair: kotlin.Pair<Kla6, Short>): Map<Kla6, Short> = TODO()
2021-03-11 12:20:07,149 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mapOf(pair: kotlin.Pair<Kla6, Short>): Map<Kla6, Short> = TODO()
2021-03-11 12:20:07,657 [main:302] - generating value of type = Pair<Kla6, Short> false depth = 6
2021-03-11 12:20:07,927 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla6, second: Short): Pair<Kla6, Short> = TODO()
2021-03-11 12:20:07,935 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla6, second: Short): Pair<Kla6, Short> = TODO()
2021-03-11 12:20:08,169 [main:302] - generating value of type = Kla6 false depth = 9
2021-03-11 12:20:08,176 [main:112] - generating klass Kla6 text = class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-11 12:20:08,176 [main:302] - generating value of type = Short true depth = 9
2021-03-11 12:20:08,182 [main:95] - GENERATED = Pair<Kla6, Short>(Kla6(), -26065)
2021-03-11 12:20:08,182 [main:95] - GENERATED = mapOf<Kla6, Short>(Pair<Kla6, Short>(Kla6(), -26065))
2021-03-11 12:20:08,183 [main:95] - GENERATED = Pair<UInt, Map<Kla6, Short>>(892633008.toUInt(), mapOf<Kla6, Short>(Pair<Kla6, Short>(Kla6(), -26065)))
2021-03-11 12:20:08,201 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bd78bd6]
2021-03-11 12:20:08,410 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:08,416 [main:66] - Generated call from random type = (Pair<UInt, Map<Kla6, Short>>(892633008.toUInt(), mapOf<Kla6, Short>(Pair<Kla6, Short>(Kla6(), -26065)))).first.toString(356334817)
2021-03-11 12:20:08,416 [main:94] - GETTING String from String
2021-03-11 12:20:08,440 [main:101] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dd201a1]]
2021-03-11 12:20:08,440 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dd201a1]
2021-03-11 12:20:08,646 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 12:20:08,653 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:20:08,659 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).filterIndexed({a: Int, b: Char -> false})
2021-03-11 12:20:08,659 [main:101] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4accd603]]
2021-03-11 12:20:08,659 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4accd603]
2021-03-11 12:20:08,866 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:20:09,083 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:20:09,091 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:20:09,570 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:20:09,786 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:20:09,794 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:20:10,259 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-11 12:20:10,476 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:20:10,484 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:20:10,945 [main:302] - generating value of type = CharSequence false depth = 9
2021-03-11 12:20:10,955 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-11 12:20:10,955 [main:95] - GENERATED = StringBuilder(StringBuilder(StringBuilder()))
2021-03-11 12:20:10,955 [main:95] - GENERATED = StringBuilder(StringBuilder(StringBuilder(StringBuilder())))
2021-03-11 12:20:10,955 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).removeSurrounding(StringBuilder(StringBuilder(StringBuilder(StringBuilder()))))
2021-03-11 12:20:10,955 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]]
2021-03-11 12:20:10,955 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:20:11,162 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:11,168 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:20:11,375 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:11,382 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).compareTo("uewmf").toString(1193056684)
2021-03-11 12:20:11,382 [main:101] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eec66c2]]
2021-03-11 12:20:11,382 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eec66c2]
2021-03-11 12:20:11,588 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:20:11,594 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:20:11,601 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).filter({a: Char -> true})
2021-03-11 12:20:11,601 [main:101] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534bf968]]
2021-03-11 12:20:11,601 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534bf968]
2021-03-11 12:20:11,807 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:12,020 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:20:12,027 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).padStart(485789800, '⿪')
2021-03-11 12:20:12,027 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]]
2021-03-11 12:20:12,027 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]
2021-03-11 12:20:12,234 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:20:12,243 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).removePrefix("mvqzx")
2021-03-11 12:20:12,243 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]]
2021-03-11 12:20:12,243 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]
2021-03-11 12:20:12,450 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:12,457 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).replaceIndent("lnsfp")
2021-03-11 12:20:12,457 [main:101] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2502fc72]]
2021-03-11 12:20:12,457 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2502fc72]
2021-03-11 12:20:12,457 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).capitalize()
2021-03-11 12:20:12,457 [main:101] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3ed116f9]]
2021-03-11 12:20:12,457 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3ed116f9]
2021-03-11 12:20:12,664 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:20:12,664 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).plus("hloxf")
2021-03-11 12:20:12,664 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]]
2021-03-11 12:20:12,664 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]
2021-03-11 12:20:12,870 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 12:20:12,877 [main:302] - generating value of type = Char true depth = 1
2021-03-11 12:20:12,883 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).replaceFirstChar({a: Char -> 'ᘰ'})
2021-03-11 12:20:12,883 [main:110] - replacement of prope2 of type String is (bar0<UInt>(926620857.toUInt())).replaceFirstChar({a: Char -> 'ᘰ'})
2021-03-11 12:20:13,089 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:20:13,090 [main:66] - Compilation checking started
2021-03-11 12:20:13,923 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $(bar0<UInt>(926620857.toUInt())).replaceFirstChar({a: Char -> 'ᘰ'})"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { println("tdcbs")}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:20:13,928 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 12:20:13,928 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 12:20:13,928 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 12:20:14,143 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 12:20:14,152 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 12:20:14,178 [main:55] - randomType = Kla2
2021-03-11 12:20:14,393 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 12:20:14,400 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}
2021-03-11 12:20:14,613 [main:194] - Type params = []
2021-03-11 12:20:14,890 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:20:14,909 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:20:14,910 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:20:14,910 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:20:14,911 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:20:14,912 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:20:14,912 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:20:14,912 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 12:20:14,912 [main:103] - replacing (prope2, Result<Ty0>)
2021-03-11 12:20:14,912 [main:38] - replacing prope2 Result<Ty0>
2021-03-11 12:20:14,912 [main:42] - Getting value of type Result<Ty0>
2021-03-11 12:20:15,126 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 12:20:15,352 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 12:20:15,360 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 12:20:15,839 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 12:20:15,840 [main:46] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 12:20:16,356 [main:55] - randomType = Set<ULong?>
2021-03-11 12:20:16,357 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:20:16,376 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:20:16,378 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:20:16,379 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:20:16,380 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:20:16,381 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:20:16,382 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:20:16,382 [main:107] - Cant find and generate replacement for prope2 type Result<Ty0>
2021-03-11 12:20:16,382 [main:103] - replacing (prope2.getOrThrow(), Ty0)
2021-03-11 12:20:16,382 [main:38] - replacing prope2.getOrThrow() Ty0
2021-03-11 12:20:16,382 [main:42] - Getting value of type Ty0
2021-03-11 12:20:16,594 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 12:20:16,604 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 12:20:16,855 [main:55] - randomType = UByte
2021-03-11 12:20:17,066 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:20:17,109 [main:94] - GETTING Ty0 from String
2021-03-11 12:20:17,126 [main:94] - GETTING Ty0 from String
2021-03-11 12:20:17,127 [main:94] - GETTING Ty0 from String
2021-03-11 12:20:17,127 [main:94] - GETTING Ty0 from String
2021-03-11 12:20:17,128 [main:94] - GETTING Ty0 from String
2021-03-11 12:20:17,129 [main:94] - GETTING Ty0 from String
2021-03-11 12:20:17,129 [main:94] - GETTING Ty0 from String
2021-03-11 12:20:17,129 [main:107] - Cant find and generate replacement for prope2.getOrThrow() type Ty0
2021-03-11 12:20:17,129 [main:103] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-11 12:20:17,129 [main:38] - replacing c !is CoroutineStackFrame Boolean
2021-03-11 12:20:17,130 [main:42] - Getting value of type Boolean
2021-03-11 12:20:17,338 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:20:17,344 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:20:17,344 [main:49] - GENERATED IS CALL =false
2021-03-11 12:20:17,369 [main:55] - randomType = Kla4
2021-03-11 12:20:17,575 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:20:17,582 [main:112] - generating klass Kla4 text = class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}
2021-03-11 12:20:17,592 [main:137] - GENERATING call of type public final suspend fun fu7(): kotlin.String defined in Kla4[SimpleFunctionDescriptorImpl@314f0ce1]
2021-03-11 12:20:17,592 [main:137] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18d1d172]
2021-03-11 12:20:17,799 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:18,013 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:20:18,020 [main:66] - Generated call from random type = (Kla4()).fu7().startsWith("tiasr", true)
2021-03-11 12:20:18,021 [main:94] - GETTING Boolean from String
2021-03-11 12:20:18,038 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fce3d80]]
2021-03-11 12:20:18,038 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:20:18,243 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:18,250 [main:137] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fce3d80]
2021-03-11 12:20:18,250 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).get(826656847).isSurrogate()
2021-03-11 12:20:18,250 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@846b1df], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e86e8b0]]
2021-03-11 12:20:18,250 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@846b1df]
2021-03-11 12:20:18,457 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:20:18,457 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e86e8b0]
2021-03-11 12:20:18,663 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:20:18,663 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).equals("shlnv").equals("venah")
2021-03-11 12:20:18,663 [main:101] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fdbbfcb]]
2021-03-11 12:20:18,663 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fdbbfcb]
2021-03-11 12:20:18,869 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:20:18,875 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:20:18,881 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).all({a: Char -> true})
2021-03-11 12:20:18,882 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2729276e]]
2021-03-11 12:20:18,882 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:20:19,089 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:19,302 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:19,308 [main:137] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2729276e]
2021-03-11 12:20:19,308 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).subSequence(991700916, -770888967).any()
2021-03-11 12:20:19,309 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6236697d]]
2021-03-11 12:20:19,309 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:20:19,515 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:19,521 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6236697d]
2021-03-11 12:20:19,727 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:20:19,727 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).compareTo("wohcp").equals("zzejj")
2021-03-11 12:20:19,727 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60a2469d]]
2021-03-11 12:20:19,727 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:20:19,934 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:19,940 [main:137] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60a2469d]
2021-03-11 12:20:19,940 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).get(-2088206023).isWhitespace()
2021-03-11 12:20:19,940 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@846b1df], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a1a8ff0]]
2021-03-11 12:20:19,940 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@846b1df]
2021-03-11 12:20:20,145 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:20:20,146 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a1a8ff0]
2021-03-11 12:20:20,146 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).equals("moyoe").not()
2021-03-11 12:20:20,146 [main:101] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@598bd6c]]
2021-03-11 12:20:20,146 [main:137] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@598bd6c]
2021-03-11 12:20:20,352 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:20,358 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).hasSurrogatePairAt(-678025065)
2021-03-11 12:20:20,358 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e8d3796]]
2021-03-11 12:20:20,358 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:20:20,564 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:20,777 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:20,783 [main:137] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e8d3796]
2021-03-11 12:20:20,989 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:20:21,202 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:20:21,208 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).subSequence(-1578231110, 1866723748).endsWith('ᶊ', false)
2021-03-11 12:20:21,208 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50c2962c]]
2021-03-11 12:20:21,208 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:20:21,414 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:21,627 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:21,634 [main:137] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50c2962c]
2021-03-11 12:20:21,840 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:20:22,093 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:20:22,100 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).subSequence(-436911605, -364755355).contains('돨', false)
2021-03-11 12:20:22,255 [main:110] - replacement of c !is CoroutineStackFrame of type Boolean is (bar1<Double>(0.7821309887591489)).subSequence(991700916, -770888967).any()
2021-03-11 12:20:22,468 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:20:22,468 [main:66] - Compilation checking started
2021-03-11 12:20:23,076 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $(bar0<UInt>(926620857.toUInt())).replaceFirstChar({a: Char -> 'ᘰ'})"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if ((bar1<Double>(0.7821309887591489)).subSequence(991700916, -770888967).any()) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { println("tdcbs")}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..numberOfSuspensions) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:20:23,081 [main:103] - replacing (numberOfSuspensions, Int)
2021-03-11 12:20:23,081 [main:38] - replacing numberOfSuspensions Int
2021-03-11 12:20:23,081 [main:42] - Getting value of type Int
2021-03-11 12:20:23,289 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:23,295 [main:46] - GENERATED VALUE OF TYPE Int = -2060614854
2021-03-11 12:20:23,295 [main:49] - GENERATED IS CALL =false
2021-03-11 12:20:23,598 [main:55] - randomType = Map<Char?, Float>
2021-03-11 12:20:23,599 [main:94] - GETTING Int from String
2021-03-11 12:20:23,616 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5fb992a5]]
2021-03-11 12:20:23,616 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:20:23,823 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:23,829 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5fb992a5]
2021-03-11 12:20:24,035 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:24,041 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).compareTo("nsmdq").shr(2135617566)
2021-03-11 12:20:24,042 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7e85bc61]]
2021-03-11 12:20:24,042 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7e85bc61]
2021-03-11 12:20:24,249 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:24,255 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).length.rotateLeft(553422109)
2021-03-11 12:20:24,255 [main:101] - Case = [public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38d3a19d]]
2021-03-11 12:20:24,255 [main:137] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38d3a19d]
2021-03-11 12:20:24,461 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:20:24,673 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:24,885 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:20:24,892 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).lastIndexOf('亯', 535544536, true)
2021-03-11 12:20:24,892 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d27ef72]]
2021-03-11 12:20:24,892 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:20:25,098 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:25,310 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:25,316 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d27ef72]
2021-03-11 12:20:25,523 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:20:25,529 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:20:25,535 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).subSequence(600608731, 1585597099).indexOfLast({a: Char -> true})
2021-03-11 12:20:25,536 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@51338b5]]
2021-03-11 12:20:25,536 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:20:25,742 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:25,748 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@51338b5]
2021-03-11 12:20:25,955 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:25,961 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).compareTo("xefae").coerceAtLeast(-853934529)
2021-03-11 12:20:25,961 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7f8f4e0d]]
2021-03-11 12:20:25,961 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:20:26,167 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:26,174 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7f8f4e0d]
2021-03-11 12:20:26,380 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:26,387 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).compareTo("cfpqz").or(1030076693)
2021-03-11 12:20:26,387 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@775a6193]]
2021-03-11 12:20:26,387 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).length.absoluteValue
2021-03-11 12:20:26,387 [main:101] - Case = [public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@2e19c8c]]
2021-03-11 12:20:26,387 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).lastIndex
2021-03-11 12:20:26,387 [main:101] - Case = [public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63e3454a]]
2021-03-11 12:20:26,387 [main:137] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63e3454a]
2021-03-11 12:20:26,594 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 12:20:26,808 [main:43] - GENERATING CALL OF fun CharArray(size: kotlin.Int): CharArray = TODO()
2021-03-11 12:20:26,816 [main:61] - WITHOUT TYPE PARAMS = fun CharArray(size: kotlin.Int): CharArray = TODO()
2021-03-11 12:20:27,277 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:20:27,283 [main:95] - GENERATED = CharArray(-1874516024)
2021-03-11 12:20:27,491 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:27,703 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:20:27,709 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).indexOfAny(CharArray(-1874516024), 692467588, false)
2021-03-11 12:20:27,709 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a3323fb]]
2021-03-11 12:20:27,710 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a3323fb]
2021-03-11 12:20:27,710 [main:105] - GENERATED CALL = (bar0<UInt>(926620857.toUInt())).length.countLeadingZeroBits()
2021-03-11 12:20:27,710 [main:110] - replacement of numberOfSuspensions of type Int is (bar0<UInt>(926620857.toUInt())).indexOfAny(CharArray(-1874516024), 692467588, false)
2021-03-11 12:20:27,915 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:20:27,916 [main:66] - Compilation checking started
2021-03-11 12:20:28,766 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $(bar0<UInt>(926620857.toUInt())).replaceFirstChar({a: Char -> 'ᘰ'})"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { println("tdcbs")}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..(bar0<UInt>(926620857.toUInt())).indexOfAny(CharArray(-1874516024), 692467588, false)) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:20:28,771 [main:103] - replacing (prope2, String)
2021-03-11 12:20:28,772 [main:38] - replacing prope2 String
2021-03-11 12:20:28,772 [main:42] - Getting value of type String
2021-03-11 12:20:28,983 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:28,989 [main:46] - GENERATED VALUE OF TYPE String = "fcvyr"
2021-03-11 12:20:28,989 [main:49] - GENERATED IS CALL =false
2021-03-11 12:20:29,294 [main:55] - randomType = Boolean?
2021-03-11 12:20:29,512 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:20:29,533 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5174a81f]
2021-03-11 12:20:29,746 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:20:29,753 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:20:29,968 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:29,974 [main:66] - Generated call from random type = (false)?.compareTo(false).toString(1070625950)
2021-03-11 12:20:29,974 [main:94] - GETTING String from String
2021-03-11 12:20:30,001 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]]
2021-03-11 12:20:30,001 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:20:30,214 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:30,430 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:30,437 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]
2021-03-11 12:20:30,646 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:20:30,869 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:20:30,875 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).subSequence(320127637, -230376840).commonPrefixWith(StringBuilder(), false)
2021-03-11 12:20:30,876 [main:101] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@784c069d]]
2021-03-11 12:20:30,876 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@784c069d]
2021-03-11 12:20:31,086 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:20:31,303 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:31,310 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).substringBeforeLast('윋', "cboal")
2021-03-11 12:20:31,310 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]]
2021-03-11 12:20:31,310 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7db322e2]
2021-03-11 12:20:31,522 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:31,528 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).replaceIndent("eewat")
2021-03-11 12:20:31,529 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]]
2021-03-11 12:20:31,529 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69f380b3]
2021-03-11 12:20:31,529 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).trimStart()
2021-03-11 12:20:31,529 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]]
2021-03-11 12:20:31,529 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]
2021-03-11 12:20:31,529 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).toLowerCase()
2021-03-11 12:20:31,529 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]]
2021-03-11 12:20:31,529 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:20:31,739 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:31,745 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5007bb04]
2021-03-11 12:20:31,745 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(-439750220).uppercase()
2021-03-11 12:20:31,745 [main:101] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534bf968]]
2021-03-11 12:20:31,745 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534bf968]
2021-03-11 12:20:31,958 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:32,173 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:20:32,180 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).padStart(1192089452, '嘋')
2021-03-11 12:20:32,180 [main:101] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@720e46c5]]
2021-03-11 12:20:32,180 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@720e46c5]
2021-03-11 12:20:32,392 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:32,610 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:32,617 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).replaceIndentByMargin("cydrk", "yumau")
2021-03-11 12:20:32,617 [main:101] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17845e8c]]
2021-03-11 12:20:32,617 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17845e8c]
2021-03-11 12:20:32,617 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).decapitalize()
2021-03-11 12:20:32,617 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]]
2021-03-11 12:20:32,617 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:20:32,828 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:33,045 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:33,051 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]
2021-03-11 12:20:33,263 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:33,481 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:33,487 [main:105] - GENERATED CALL = (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).subSequence(-302218949, -1690571089).substring(1878508564, -14065881)
2021-03-11 12:20:33,488 [main:110] - replacement of prope2 of type String is (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).substringBeforeLast('윋', "cboal")
2021-03-11 12:20:33,698 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:20:33,698 [main:66] - Compilation checking started
2021-03-11 12:20:34,290 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).substringBeforeLast('윋', "cboal") = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $(bar0<UInt>(926620857.toUInt())).replaceFirstChar({a: Char -> 'ᘰ'})"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { println("tdcbs")}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..(bar0<UInt>(926620857.toUInt())).indexOfAny(CharArray(-1874516024), 692467588, false)) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:20:34,295 [main:103] - replacing (t, Ty0)
2021-03-11 12:20:34,295 [main:38] - replacing t Ty0
2021-03-11 12:20:34,295 [main:42] - Getting value of type Ty0
2021-03-11 12:20:34,504 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 12:20:34,514 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 12:20:34,539 [main:55] - randomType = Kla5
2021-03-11 12:20:34,751 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 12:20:34,757 [main:112] - generating klass Kla5 text = open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}
2021-03-11 12:20:34,968 [main:194] - Type params = []
2021-03-11 12:20:35,177 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 12:20:35,394 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:20:35,403 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:20:35,888 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 12:20:36,112 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:20:36,120 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:20:36,953 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:20:36,953 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:20:36,973 [main:94] - GETTING Ty0 from String
2021-03-11 12:20:36,994 [main:94] - GETTING Ty0 from String
2021-03-11 12:20:36,995 [main:94] - GETTING Ty0 from String
2021-03-11 12:20:36,996 [main:94] - GETTING Ty0 from String
2021-03-11 12:20:36,996 [main:94] - GETTING Ty0 from String
2021-03-11 12:20:36,997 [main:94] - GETTING Ty0 from String
2021-03-11 12:20:36,997 [main:94] - GETTING Ty0 from String
2021-03-11 12:20:36,997 [main:107] - Cant find and generate replacement for t type Ty0
2021-03-11 12:20:36,997 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 12:20:36,997 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 12:20:36,997 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 12:20:37,213 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 12:20:37,222 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 12:20:37,248 [main:55] - randomType = Kla10
2021-03-11 12:20:37,460 [main:302] - generating value of type = Kla10 false depth = 0
2021-03-11 12:20:37,466 [main:112] - generating klass Kla10 text = object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}
2021-03-11 12:20:37,485 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:20:37,501 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:20:37,502 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:20:37,503 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:20:37,503 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:20:37,504 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:20:37,505 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:20:37,505 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 12:20:37,505 [main:103] - replacing (method, String)
2021-03-11 12:20:37,505 [main:38] - replacing method String
2021-03-11 12:20:37,505 [main:42] - Getting value of type String
2021-03-11 12:20:37,733 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:37,739 [main:46] - GENERATED VALUE OF TYPE String = "jvaui"
2021-03-11 12:20:37,739 [main:49] - GENERATED IS CALL =false
2021-03-11 12:20:37,988 [main:55] - randomType = ULong
2021-03-11 12:20:38,196 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:20:38,228 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a175dac]
2021-03-11 12:20:38,439 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:38,445 [main:66] - Generated call from random type = (8348952855766624876.toULong()).toString(-1518938148)
2021-03-11 12:20:38,445 [main:94] - GETTING String from String
2021-03-11 12:20:38,468 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]]
2021-03-11 12:20:38,468 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9667a5b]
2021-03-11 12:20:38,680 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 12:20:38,686 [main:302] - generating value of type = Char true depth = 1
2021-03-11 12:20:38,693 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).replaceFirstChar({a: Char -> '墒'})
2021-03-11 12:20:38,693 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]]
2021-03-11 12:20:38,693 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]
2021-03-11 12:20:38,693 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).toLowerCase()
2021-03-11 12:20:38,693 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]]
2021-03-11 12:20:38,693 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:20:38,909 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:38,916 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c1dde]
2021-03-11 12:20:39,129 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:39,136 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).compareTo("rguxw").toString(1723812413)
2021-03-11 12:20:39,136 [main:101] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2502fc72]]
2021-03-11 12:20:39,136 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2502fc72]
2021-03-11 12:20:39,136 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).capitalize()
2021-03-11 12:20:39,136 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]]
2021-03-11 12:20:39,136 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eab0a3f]
2021-03-11 12:20:39,136 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).reversed()
2021-03-11 12:20:39,136 [main:101] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cff2b98]]
2021-03-11 12:20:39,136 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cff2b98]
2021-03-11 12:20:39,348 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:20:39,567 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:39,784 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:39,791 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).replaceAfterLast('홴', "sxots", "zpffx")
2021-03-11 12:20:39,791 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]]
2021-03-11 12:20:39,791 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d10016]
2021-03-11 12:20:39,999 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:20:40,216 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:20:40,224 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:20:40,693 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:20:40,700 [main:95] - GENERATED = StringBuilder("czkmh")
2021-03-11 12:20:40,700 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).removePrefix(StringBuilder("czkmh"))
2021-03-11 12:20:40,700 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]]
2021-03-11 12:20:40,700 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0a852b]
2021-03-11 12:20:40,700 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent()
2021-03-11 12:20:40,700 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f7d80a8]]
2021-03-11 12:20:40,700 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f7d80a8]
2021-03-11 12:20:40,912 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:20:40,918 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:20:40,925 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).dropWhile({a: Char -> true})
2021-03-11 12:20:40,925 [main:101] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ef6a1a]]
2021-03-11 12:20:40,925 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ef6a1a]
2021-03-11 12:20:41,134 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:20:41,347 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:41,354 [main:105] - GENERATED CALL = (bar2<Boolean>(arrayOf<Boolean>(true))).substringAfterLast('ਅ', "ixghy")
2021-03-11 12:20:41,354 [main:110] - replacement of method of type String is (bar2<Boolean>(arrayOf<Boolean>(true))).capitalize()
2021-03-11 12:20:41,562 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:20:41,562 [main:66] - Compilation checking started
2021-03-11 12:20:42,460 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $(bar0<UInt>(926620857.toUInt())).replaceFirstChar({a: Char -> 'ᘰ'})"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith((bar2<Boolean>(arrayOf<Boolean>(true))).capitalize()) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { println("tdcbs")}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..(bar0<UInt>(926620857.toUInt())).indexOfAny(CharArray(-1874516024), 692467588, false)) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:20:42,465 [main:103] - replacing ("\n", String)
2021-03-11 12:20:42,466 [main:38] - replacing "\n" String
2021-03-11 12:20:42,466 [main:42] - Getting value of type String
2021-03-11 12:20:42,678 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:42,685 [main:46] - GENERATED VALUE OF TYPE String = "ljxwm"
2021-03-11 12:20:42,685 [main:49] - GENERATED IS CALL =false
2021-03-11 12:20:42,711 [main:55] - randomType = Kla4
2021-03-11 12:20:42,922 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:20:42,928 [main:112] - generating klass Kla4 text = class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}
2021-03-11 12:20:42,939 [main:137] - GENERATING call of type public final suspend fun fu7(): kotlin.String defined in Kla4[SimpleFunctionDescriptorImpl@493fff97]
2021-03-11 12:20:42,939 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]
2021-03-11 12:20:42,940 [main:66] - Generated call from random type = (Kla4()).fu7().toLowerCase()
2021-03-11 12:20:42,940 [main:94] - GETTING String from String
2021-03-11 12:20:42,956 [main:101] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@287af9e3]]
2021-03-11 12:20:42,956 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@287af9e3]
2021-03-11 12:20:43,167 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:20:43,384 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:43,391 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).substringAfter('丟', "isenk")
2021-03-11 12:20:43,391 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60d466a]]
2021-03-11 12:20:43,391 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:20:43,601 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:43,864 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:43,871 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60d466a]
2021-03-11 12:20:44,081 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:20:44,299 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:20:44,307 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:20:44,786 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:20:44,793 [main:95] - GENERATED = Regex("eavhu")
2021-03-11 12:20:45,005 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 12:20:45,012 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:20:45,022 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).subSequence(-162119246, -264460912).replace(Regex("eavhu"), {a: MatchResult -> StringBuilder()})
2021-03-11 12:20:45,022 [main:101] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534bf968]]
2021-03-11 12:20:45,022 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534bf968]
2021-03-11 12:20:45,232 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:45,451 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:20:45,458 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).padStart(-320441124, '卿')
2021-03-11 12:20:45,458 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c9b84b]]
2021-03-11 12:20:45,458 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c9b84b]
2021-03-11 12:20:45,669 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:45,888 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:45,895 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).removeRange(-1441085954, 1789034666)
2021-03-11 12:20:45,895 [main:101] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ff0185]]
2021-03-11 12:20:45,895 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ff0185]
2021-03-11 12:20:46,103 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:20:46,321 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:46,536 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:46,543 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).replaceBefore('ꏲ', "gdagj", "eizls")
2021-03-11 12:20:46,543 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]]
2021-03-11 12:20:46,543 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]
2021-03-11 12:20:46,544 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).toUpperCase()
2021-03-11 12:20:46,544 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b328c0]]
2021-03-11 12:20:46,544 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:20:46,753 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:46,759 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b328c0]
2021-03-11 12:20:46,971 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:46,978 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).get(147589122).plus("mcjgd")
2021-03-11 12:20:46,978 [main:101] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e33706e]]
2021-03-11 12:20:46,978 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e33706e]
2021-03-11 12:20:47,190 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:47,197 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).dropLast(1936128608)
2021-03-11 12:20:47,197 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]]
2021-03-11 12:20:47,197 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:20:47,408 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:47,625 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:47,632 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4986e43f]
2021-03-11 12:20:47,844 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:20:48,065 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:20:48,073 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:20:48,548 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:20:48,555 [main:95] - GENERATED = StringBuilder(1661961029)
2021-03-11 12:20:48,766 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:20:48,773 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).subSequence(1778474795, -603594851).commonSuffixWith(StringBuilder(1661961029), true)
2021-03-11 12:20:48,773 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]]
2021-03-11 12:20:48,773 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b2c9a1]
2021-03-11 12:20:48,774 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).toLowerCase()
2021-03-11 12:20:48,774 [main:110] - replacement of "\n" of type String is bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))
2021-03-11 12:20:48,988 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(CALL_EXPRESSION)
2021-03-11 12:20:48,988 [main:66] - Compilation checking started
2021-03-11 12:20:49,854 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $(bar0<UInt>(926620857.toUInt())).replaceFirstChar({a: Char -> 'ᘰ'})"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith((bar2<Boolean>(arrayOf<Boolean>(true))).capitalize()) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { println("tdcbs")}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..(bar0<UInt>(926620857.toUInt())).indexOfAny(CharArray(-1874516024), 692467588, false)) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:20:49,859 [main:103] - replacing (prope2, String)
2021-03-11 12:20:49,860 [main:38] - replacing prope2 String
2021-03-11 12:20:49,860 [main:42] - Getting value of type String
2021-03-11 12:20:50,076 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:50,084 [main:46] - GENERATED VALUE OF TYPE String = "hdiux"
2021-03-11 12:20:50,084 [main:49] - GENERATED IS CALL =false
2021-03-11 12:20:50,116 [main:55] - randomType = Kla1
2021-03-11 12:20:50,116 [main:94] - GETTING String from String
2021-03-11 12:20:50,143 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]]
2021-03-11 12:20:50,143 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d58fba]
2021-03-11 12:20:50,355 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:50,363 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).substring(595177941)
2021-03-11 12:20:50,364 [main:101] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3ed116f9]]
2021-03-11 12:20:50,364 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3ed116f9]
2021-03-11 12:20:50,577 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:20:50,578 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("sygru")
2021-03-11 12:20:50,578 [main:101] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@579fd1d1]]
2021-03-11 12:20:50,578 [main:137] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@579fd1d1]
2021-03-11 12:20:50,789 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:20:51,010 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:20:51,273 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:20:51,281 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).replaceFirst('খ', '椌', false)
2021-03-11 12:20:51,281 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c9b84b]]
2021-03-11 12:20:51,281 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c9b84b]
2021-03-11 12:20:51,494 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:51,715 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:51,723 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).removeRange(1840703181, -1494157266)
2021-03-11 12:20:51,723 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2136d]]
2021-03-11 12:20:51,723 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2136d]
2021-03-11 12:20:51,723 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).lowercase()
2021-03-11 12:20:51,723 [main:101] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]]
2021-03-11 12:20:51,723 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]
2021-03-11 12:20:51,937 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:20:52,159 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:20:52,169 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:20:52,651 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:20:52,659 [main:95] - GENERATED = StringBuilder(1437541171)
2021-03-11 12:20:52,871 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:20:52,879 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).commonPrefixWith(StringBuilder(1437541171), true)
2021-03-11 12:20:52,879 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]]
2021-03-11 12:20:52,880 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:20:53,094 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:53,312 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:53,320 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365bdc08]
2021-03-11 12:20:53,532 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:53,751 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:53,759 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).subSequence(-2137071841, 781395683).substring(323040226, -492950158)
2021-03-11 12:20:53,759 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b328c0]]
2021-03-11 12:20:53,759 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:20:53,971 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:53,979 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b328c0]
2021-03-11 12:20:54,189 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:54,198 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).get(1226372978).plus("tuddm")
2021-03-11 12:20:54,198 [main:101] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32174727]]
2021-03-11 12:20:54,198 [main:137] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32174727]
2021-03-11 12:20:54,412 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:54,420 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).drop(1984857867)
2021-03-11 12:20:54,420 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]]
2021-03-11 12:20:54,420 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:20:54,633 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:54,854 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:54,862 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75e5f37d]
2021-03-11 12:20:55,075 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:55,083 [main:105] - GENERATED CALL = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).subSequence(-1770937101, 789849923).repeat(1512208210)
2021-03-11 12:20:55,083 [main:110] - replacement of prope2 of type String is (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).subSequence(-1770937101, 789849923).repeat(1512208210)
2021-03-11 12:20:55,296 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:20:55,296 [main:66] - Compilation checking started
2021-03-11 12:20:55,900 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $(bar0<UInt>(926620857.toUInt())).replaceFirstChar({a: Char -> 'ᘰ'})"

    (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).subSequence(-1770937101, 789849923).repeat(1512208210) = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith((bar2<Boolean>(arrayOf<Boolean>(true))).capitalize()) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { println("tdcbs")}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..(bar0<UInt>(926620857.toUInt())).indexOfAny(CharArray(-1874516024), 692467588, false)) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:20:55,906 [main:103] - replacing (prope4, Int)
2021-03-11 12:20:55,906 [main:38] - replacing prope4 Int
2021-03-11 12:20:55,906 [main:42] - Getting value of type Int
2021-03-11 12:20:56,120 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:56,127 [main:46] - GENERATED VALUE OF TYPE Int = -78025513
2021-03-11 12:20:56,127 [main:49] - GENERATED IS CALL =false
2021-03-11 12:20:56,412 [main:55] - randomType = ArrayList<Char>
2021-03-11 12:20:56,627 [main:302] - generating value of type = ArrayList<Char> false depth = 0
2021-03-11 12:20:56,855 [main:43] - GENERATING CALL OF fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Char> = TODO()
2021-03-11 12:20:56,865 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Char> = TODO()
2021-03-11 12:20:57,353 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:20:57,361 [main:95] - GENERATED = ArrayList<Char>(-169587912)
2021-03-11 12:20:57,475 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7556a83e]
2021-03-11 12:20:57,475 [main:66] - Generated call from random type = (ArrayList<Char>(-169587912)).modCount.takeHighestOneBit()
2021-03-11 12:20:57,476 [main:94] - GETTING Int from String
2021-03-11 12:20:57,494 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5edcf9ad]]
2021-03-11 12:20:57,494 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3df6e69b]
2021-03-11 12:20:57,705 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:57,714 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5edcf9ad]
2021-03-11 12:20:57,925 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:20:57,933 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).get(-707219748).compareTo('⮱')
2021-03-11 12:20:57,933 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7e85bc61]]
2021-03-11 12:20:57,933 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:20:58,143 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:58,151 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7e85bc61]
2021-03-11 12:20:58,362 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:58,370 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).compareTo("wqnsc").rotateLeft(845381535)
2021-03-11 12:20:58,370 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@41f7877a]]
2021-03-11 12:20:58,370 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:20:58,621 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:58,629 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@41f7877a]
2021-03-11 12:20:58,840 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:20:58,848 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).compareTo("rpooz").div(-14)
2021-03-11 12:20:58,848 [main:101] - Case = [public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@2e19c8c]]
2021-03-11 12:20:58,848 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).lastIndex
2021-03-11 12:20:58,848 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6cb21878]]
2021-03-11 12:20:58,848 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6cb21878]
2021-03-11 12:20:59,060 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:59,068 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).length.rotateRight(1979364408)
2021-03-11 12:20:59,068 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7556a83e]]
2021-03-11 12:20:59,068 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7556a83e]
2021-03-11 12:20:59,068 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).length.takeHighestOneBit()
2021-03-11 12:20:59,068 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@246b40f5]]
2021-03-11 12:20:59,068 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@11c29f02]
2021-03-11 12:20:59,280 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:20:59,288 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@246b40f5]
2021-03-11 12:20:59,288 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).compareTo("itfjj").takeLowestOneBit()
2021-03-11 12:20:59,288 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d7115cc]]
2021-03-11 12:20:59,288 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:20:59,500 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:59,719 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:20:59,727 [main:137] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d7115cc]
2021-03-11 12:20:59,939 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 12:21:00,160 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 12:21:00,170 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 12:21:00,392 [main:302] - generating value of type = Char true depth = 3
2021-03-11 12:21:00,400 [main:95] - GENERATED = charArrayOf('')
2021-03-11 12:21:00,614 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:00,834 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:21:00,842 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).subSequence(1066717298, -2145758011).lastIndexOfAny(charArrayOf(''), -889876683, false)
2021-03-11 12:21:00,842 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b9f00b9]]
2021-03-11 12:21:00,842 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b9f00b9]
2021-03-11 12:21:01,053 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:21:01,061 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).length.times(81)
2021-03-11 12:21:01,061 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70dd8888], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7f8f4e0d]]
2021-03-11 12:21:01,061 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7f8f4e0d]
2021-03-11 12:21:01,272 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:01,280 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).length.or(-368197338)
2021-03-11 12:21:01,280 [main:110] - replacement of prope4 of type Int is (bar1<Double>(0.7821309887591489)).length.times(81)
2021-03-11 12:21:01,490 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:21:01,491 [main:66] - Compilation checking started
2021-03-11 12:21:02,098 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $(bar0<UInt>(926620857.toUInt())).replaceFirstChar({a: Char -> 'ᘰ'})"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith((bar2<Boolean>(arrayOf<Boolean>(true))).capitalize()) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { println("tdcbs")}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(bar1<Double>(0.7821309887591489)).length.times(81) = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..(bar0<UInt>(926620857.toUInt())).indexOfAny(CharArray(-1874516024), 692467588, false)) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:21:02,103 [main:103] - replacing (fu3(), Kla0)
2021-03-11 12:21:02,103 [main:38] - replacing fu3() Kla0
2021-03-11 12:21:02,103 [main:42] - Getting value of type Kla0
2021-03-11 12:21:02,326 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:21:02,334 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-11 12:21:02,554 [main:194] - Type params = []
2021-03-11 12:21:02,773 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:21:02,781 [main:46] - GENERATED VALUE OF TYPE Kla0 = Kla0("zbngl")
2021-03-11 12:21:02,782 [main:49] - GENERATED IS CALL =true
2021-03-11 12:21:03,069 [main:55] - randomType = Kla6?
2021-03-11 12:21:03,280 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 12:21:03,287 [main:112] - generating klass Kla6 text = class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-11 12:21:03,304 [main:94] - GETTING Kla0 from String
2021-03-11 12:21:03,330 [main:94] - GETTING Kla0 from String
2021-03-11 12:21:03,331 [main:94] - GETTING Kla0 from String
2021-03-11 12:21:03,332 [main:94] - GETTING Kla0 from String
2021-03-11 12:21:03,332 [main:94] - GETTING Kla0 from String
2021-03-11 12:21:03,333 [main:94] - GETTING Kla0 from String
2021-03-11 12:21:03,333 [main:94] - GETTING Kla0 from String
2021-03-11 12:21:03,333 [main:110] - replacement of fu3() of type Kla0 is Kla0("zbngl")
2021-03-11 12:21:03,553 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:21:03,553 [main:66] - Compilation checking started
2021-03-11 12:21:04,157 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.Kla0("zbngl").s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = "FAIL"
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $(bar0<UInt>(926620857.toUInt())).replaceFirstChar({a: Char -> 'ᘰ'})"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith((bar2<Boolean>(arrayOf<Boolean>(true))).capitalize()) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { println("tdcbs")}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..(bar0<UInt>(926620857.toUInt())).indexOfAny(CharArray(-1874516024), 692467588, false)) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:21:04,162 [main:103] - replacing ("FAIL", String)
2021-03-11 12:21:04,163 [main:38] - replacing "FAIL" String
2021-03-11 12:21:04,163 [main:42] - Getting value of type String
2021-03-11 12:21:04,376 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:04,383 [main:46] - GENERATED VALUE OF TYPE String = "dgqfs"
2021-03-11 12:21:04,384 [main:49] - GENERATED IS CALL =false
2021-03-11 12:21:05,908 [main:55] - randomType = Triple<Char, LinkedHashMap<List<Kla8>, Long>?, Kla1>
2021-03-11 12:21:06,118 [main:302] - generating value of type = Triple<Char, LinkedHashMap<List<Kla8>, Long>?, Kla1> false depth = 0
2021-03-11 12:21:06,341 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Char, second: LinkedHashMap<List<Kla8>, Long>?, third: Kla1): Triple<Char, LinkedHashMap<List<Kla8>, Long>?, Kla1> = TODO()
2021-03-11 12:21:06,351 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Char, second: LinkedHashMap<List<Kla8>, Long>?, third: Kla1): Triple<Char, LinkedHashMap<List<Kla8>, Long>?, Kla1> = TODO()
2021-03-11 12:21:06,576 [main:302] - generating value of type = Char true depth = 3
2021-03-11 12:21:06,584 [main:302] - generating value of type = LinkedHashMap<List<Kla8>, Long> false depth = 3
2021-03-11 12:21:06,806 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<List<Kla8>, Long> = TODO()
2021-03-11 12:21:06,816 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<List<Kla8>, Long> = TODO()
2021-03-11 12:21:07,040 [main:95] - GENERATED = linkedMapOf<List<Kla8>, Long>()
2021-03-11 12:21:07,040 [main:302] - generating value of type = Kla1 false depth = 3
2021-03-11 12:21:07,048 [main:112] - generating klass Kla1 text = interface Kla1 {
    suspend fun fu3(): Kla0
}
2021-03-11 12:21:07,498 [main:302] - generating value of type = Kla3 false depth = 5
2021-03-11 12:21:07,506 [main:112] - generating klass Kla3 text = class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}
2021-03-11 12:21:07,507 [main:95] - GENERATED = Triple<Char, LinkedHashMap<List<Kla8>, Long>?, Kla1>('쮾', linkedMapOf<List<Kla8>, Long>(), Kla3())
2021-03-11 12:21:07,534 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe0fe09]
2021-03-11 12:21:07,534 [main:66] - Generated call from random type = (Triple<Char, LinkedHashMap<List<Kla8>, Long>?, Kla1>('쮾', linkedMapOf<List<Kla8>, Long>(), Kla3())).first.titlecase()
2021-03-11 12:21:07,534 [main:94] - GETTING String from String
2021-03-11 12:21:07,555 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7384550b]]
2021-03-11 12:21:07,555 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7384550b]
2021-03-11 12:21:07,767 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:07,985 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:08,205 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:21:08,216 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).replaceRange(-522626568, 931148886, "jacvz")
2021-03-11 12:21:08,216 [main:101] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d545e75]]
2021-03-11 12:21:08,216 [main:137] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d545e75]
2021-03-11 12:21:08,427 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:08,645 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:08,883 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:21:08,892 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).replace('⾾', '', false)
2021-03-11 12:21:08,892 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]]
2021-03-11 12:21:08,892 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:21:09,110 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:09,329 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:09,337 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]
2021-03-11 12:21:09,549 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:21:09,771 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:21:09,781 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:21:10,267 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:21:10,275 [main:95] - GENERATED = StringBuilder(-901230552)
2021-03-11 12:21:10,487 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:21:10,495 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).subSequence(-1992606678, 2048822088).commonPrefixWith(StringBuilder(-901230552), true)
2021-03-11 12:21:10,495 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]]
2021-03-11 12:21:10,495 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675d80e2]
2021-03-11 12:21:10,495 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).toUpperCase()
2021-03-11 12:21:10,495 [main:101] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dd201a1]]
2021-03-11 12:21:10,495 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@dd201a1]
2021-03-11 12:21:10,707 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 12:21:10,715 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:21:10,723 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).filterIndexed({a: Int, b: Char -> true})
2021-03-11 12:21:10,723 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e624d9b]]
2021-03-11 12:21:10,723 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3a480b5]
2021-03-11 12:21:10,935 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:11,160 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:11,169 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e624d9b]
2021-03-11 12:21:11,386 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:21:11,615 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:21:11,625 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:21:12,111 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:21:12,119 [main:95] - GENERATED = Regex("dcgbk")
2021-03-11 12:21:12,329 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:12,337 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).subSequence(-2077741776, -860026898).replaceFirst(Regex("dcgbk"), "bjlzx")
2021-03-11 12:21:12,337 [main:101] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]]
2021-03-11 12:21:12,337 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1adf7723]
2021-03-11 12:21:12,549 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:21:12,770 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:21:12,778 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).commonPrefixWith(StringBuilder(), false)
2021-03-11 12:21:12,778 [main:101] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd07c1]]
2021-03-11 12:21:12,778 [main:137] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd07c1]
2021-03-11 12:21:12,992 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:13,214 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:13,480 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:13,489 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).replaceBeforeLast('䫹', "pwyek", "wwvuf")
2021-03-11 12:21:13,489 [main:101] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2253ce57]]
2021-03-11 12:21:13,489 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2253ce57]
2021-03-11 12:21:13,699 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:21:13,707 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:21:13,715 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).dropLastWhile({a: Char -> true})
2021-03-11 12:21:13,716 [main:101] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eec66c2]]
2021-03-11 12:21:13,716 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eec66c2]
2021-03-11 12:21:13,928 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:21:13,936 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:21:13,944 [main:105] - GENERATED CALL = (bar1<Double>(0.7821309887591489)).filter({a: Char -> false})
2021-03-11 12:21:13,944 [main:110] - replacement of "FAIL" of type String is (bar1<Double>(0.7821309887591489)).filterIndexed({a: Int, b: Char -> true})
2021-03-11 12:21:14,155 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:21:14,155 [main:66] - Compilation checking started
2021-03-11 12:21:15,028 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = (bar1<Double>(0.7821309887591489)).filterIndexed({a: Int, b: Char -> true})
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $(bar0<UInt>(926620857.toUInt())).replaceFirstChar({a: Char -> 'ᘰ'})"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith((bar2<Boolean>(arrayOf<Boolean>(true))).capitalize()) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { println("tdcbs")}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..(bar0<UInt>(926620857.toUInt())).indexOfAny(CharArray(-1874516024), 692467588, false)) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:21:15,034 [main:103] - replacing (getOrThrow(), Any?)
2021-03-11 12:21:15,034 [main:38] - replacing getOrThrow() Any?
2021-03-11 12:21:15,034 [main:42] - Getting value of type Any?
2021-03-11 12:21:15,247 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:21:15,247 [main:46] - GENERATED VALUE OF TYPE Any? = "eilzp"
2021-03-11 12:21:15,247 [main:49] - GENERATED IS CALL =false
2021-03-11 12:21:15,506 [main:55] - randomType = Long
2021-03-11 12:21:15,725 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:21:15,770 [main:94] - GETTING Any? from String
2021-03-11 12:21:15,786 [main:94] - GETTING Any? from String
2021-03-11 12:21:15,787 [main:94] - GETTING Any? from String
2021-03-11 12:21:15,788 [main:94] - GETTING Any? from String
2021-03-11 12:21:15,789 [main:94] - GETTING Any? from String
2021-03-11 12:21:15,790 [main:94] - GETTING Any? from String
2021-03-11 12:21:15,791 [main:94] - GETTING Any? from String
2021-03-11 12:21:15,791 [main:110] - replacement of getOrThrow() of type Any? is "eilzp"
2021-03-11 12:21:16,010 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:21:16,011 [main:66] - Compilation checking started
2021-03-11 12:21:16,614 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun <T> bar0(vararg a: T) = test(a::get)
fun <T> bar1(vararg a: T) = test(a::set)

fun <T> bar2(a: Array<out T>) = test(a::get)
fun <T> bar3(a: Array<out T>) = test(a::set)

fun <T> bar4(a: Array<in T>) = test(a::get)
fun <T> bar5(a: Array<in T>) = test(a::set)

fun <F> test(f: F): String = f.toString()

fun box(): String {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
    val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"

    val b0 = bar0("")
    val b1 = bar1("")

    assertEquals(getMethod, b0)
    assertEquals(setMethod, b1)

    val b2 = bar2(arrayOf(""))
    val b3 = bar3(arrayOf(""))

    assertEquals(getMethod, b2)
    assertEquals(setMethod, b3)

    val b4 = bar4(arrayOf(""))
    val b5 = bar5(arrayOf(""))

    assertEquals(getMethod, b4)
    assertEquals(setMethod, b5)

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return fu4(Kla0("mgivj"))
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = this
        return Kla0("tepda").s
    }
}

class Kla3 : Kla1 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0((bar4<Array<Char>>(emptyArray<Array<Char>>())).commonSuffixWith("agmsf", false))

    suspend fun fu6(): String = "OK"

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("jvfhj")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla3()
        return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).get(2035039941).plus("mpgjc")
    }
}

class Kla4 : Kla1 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    override suspend fun fu3(): Kla0 {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
return Kla0("pccnh")
    }

    suspend fun fu7(): String {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
val prope7: Kla1 = Kla4()
        return prope7.fu3().s
    }
}

fun box899(): String {

    val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
var prope2 = (bar1<Double>(0.7821309887591489)).filterIndexed({a: Int, b: Char -> true})
    fu0 {
        prope2 = (bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true})
    }

    if ((bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).trim() != (bar0<UInt>(926620857.toUInt())).takeLast(-1274462649)) return (test<Triple<Char?, Double, Float>?>(Triple<Char?, Double, Float>('틗', 0.6705320693090654, 0.84207976f))).dropLastWhile({a: Char -> true})

    prope2 = (bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))).plus("schkq")

    fu0 {
        prope2 = Kla3().fu7()
    }

    if ((bar2<Boolean>(arrayOf<Boolean>(true))).commonPrefixWith(StringBuilder("yrqge"), false) != "OK") return "FAIL 2 $(bar0<UInt>(926620857.toUInt())).replaceFirstChar({a: Char -> 'ᘰ'})"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla4().fu7()
    }

    return prope2
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = (Kla6())?.context) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope2."eilzp"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
Kla6().prope2 = runCatching<Any?>({ "yxxtz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu10(c: Continuation<*>) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
if (c !is CoroutineStackFrame) error((881871101)?.toChar().uppercase())
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu11(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { it?.methodName?.startsWith((bar2<Boolean>(arrayOf<Boolean>(true))).capitalize()) == true }?.let { error("zozcc")}
    }

    fun fu12(method: String) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope3.find { false} ?: error((bar2<Boolean>(arrayOf<Boolean>(true))).trimIndent() + " has no state-machine " +
                prope3.joinToString(separator = bar5<Array<Triple<Short, ULong?, Char>>>(arrayOf<Array<Triple<Short, ULong?, Char>>>(emptyArray<Triple<Short, ULong?, Char>>()))))
    }
}

val prope0 = Kla8()

class Kla9 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = { println("tdcbs")}

    fun fu13() {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
prope4 = (Kla10)?.equals("iqcar").compareTo(false)
        prope5 = (Pair<LinkedHashSet<Set<Kla8>>, Kla0>(linkedSetOf<Set<Kla8>>(HashSet<Kla8>(ArrayDeque<Kla8>(mutableSetOf<Kla8>(Kla8())))), Kla0("kanss"))).first.add(mutableSetOf<Kla8>(Kla8()))
        prope6 = { require(true)}
    }

    suspend fun fu14() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
for (i in 1..(bar0<UInt>(926620857.toUInt())).indexOfAny(CharArray(-1874516024), 692467588, false)) {
            if (prope4 != (bar2<Boolean>(arrayOf<Boolean>(true))).length.minus(9)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (bar2<Boolean>(arrayOf<Boolean>(true))).subSequence(1262465209, -2089194700).replace(Regex("ylxpr"), {a: MatchResult -> "fwcrp"}) + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((Kla4()).equals("fbqtd").or(true)) error((bar2<Boolean>(arrayOf<Boolean>(true))).filterNot({a: Char -> true}))
        prope6()
        if ((bar1<Double>(0.7821309887591489)).subSequence(-895960033, 1071264293).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
(Pair<Kla9, String>(Kla9(), "thdgv")).first.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val getMethod = "fun kotlin.Array<T>.get(kotlin.Int): T"
val setMethod = "fun kotlin.Array<T>.set(kotlin.Int, T): kotlin.Unit"
val b0 = bar0("")
val b1 = bar1("")
val b2 = bar2(arrayOf(""))
val b3 = bar3(arrayOf(""))
val b4 = bar4(arrayOf(""))
val b5 = bar5(arrayOf(""))
throw NoSuchElementException("jpsmb")
    }
}


2021-03-11 12:21:16,619 [main:103] - replacing (prope2, Result<Ty0>)
2021-03-11 12:21:16,619 [main:38] - replacing prope2 Result<Ty0>
2021-03-11 12:21:16,619 [main:42] - Getting value of type Result<Ty0>
2021-03-11 12:21:16,833 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 12:21:17,057 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 12:21:17,066 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 12:21:17,565 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 12:21:17,565 [main:46] - GENERATED VALUE OF TYPE Result<Ty0> = 
