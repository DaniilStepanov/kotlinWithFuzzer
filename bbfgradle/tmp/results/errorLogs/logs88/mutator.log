2021-03-12 05:54:09,793 [main:66] - Compilation checking started
2021-03-12 05:54:11,208 [main:45] - Trying to change 2 nodes
2021-03-12 05:54:11,210 [main:53] - replacing ("OK", String)
2021-03-12 05:54:11,211 [main:50] - replacing "OK" String
2021-03-12 05:54:11,211 [main:54] - Getting value of type String
2021-03-12 05:54:11,300 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:54:11,304 [main:58] - GENERATED VALUE OF TYPE String = "ekjrp"
2021-03-12 05:54:11,305 [main:61] - GENERATED IS CALL =false
2021-03-12 05:54:12,854 [main:67] - randomType = Triple<LinkedHashMap<Byte?, UInt?>, ULong, Long>?
2021-03-12 05:54:12,952 [main:302] - generating value of type = Triple<LinkedHashMap<Byte?, UInt?>, ULong, Long> false depth = 0
2021-03-12 05:54:13,094 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: LinkedHashMap<Byte?, UInt?>, second: ULong, third: Long): Triple<LinkedHashMap<Byte?, UInt?>, ULong, Long> = TODO()
2021-03-12 05:54:13,098 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: LinkedHashMap<Byte?, UInt?>, second: ULong, third: Long): Triple<LinkedHashMap<Byte?, UInt?>, ULong, Long> = TODO()
2021-03-12 05:54:13,204 [main:302] - generating value of type = LinkedHashMap<Byte?, UInt?> false depth = 3
2021-03-12 05:54:13,334 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Byte?, UInt?> = TODO()
2021-03-12 05:54:13,337 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Byte?, UInt?> = TODO()
2021-03-12 05:54:13,434 [main:95] - GENERATED = linkedMapOf<Byte?, UInt?>()
2021-03-12 05:54:13,434 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 05:54:13,434 [main:302] - generating value of type = Long true depth = 3
2021-03-12 05:54:13,435 [main:95] - GENERATED = Triple<LinkedHashMap<Byte?, UInt?>, ULong, Long>(linkedMapOf<Byte?, UInt?>(), 4988987349570208470.toULong(), -9033780820439431198)
2021-03-12 05:54:13,576 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f850d83]
2021-03-12 05:54:13,649 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:54:13,652 [main:78] - Generated call from random type = (Triple<LinkedHashMap<Byte?, UInt?>, ULong, Long>(linkedMapOf<Byte?, UInt?>(), 4988987349570208470.toULong(), -9033780820439431198))?.third.toString(-1070061616)
2021-03-12 05:54:13,652 [main:61] - replacement of "OK" of type String is (Triple<LinkedHashMap<Byte?, UInt?>, ULong, Long>(linkedMapOf<Byte?, UInt?>(), 4988987349570208470.toULong(), -9033780820439431198))?.third.toString(-1070061616)
2021-03-12 05:54:13,747 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:54:13,748 [main:66] - Compilation checking started
2021-03-12 05:54:14,460 [main:53] - Result = true
Text:
fun box(): String {
    while (true) break
    return (Triple<LinkedHashMap<Byte?, UInt?>, ULong, Long>(linkedMapOf<Byte?, UInt?>(), 4988987349570208470.toULong(), -9033780820439431198))?.third.toString(-1070061616)
}


2021-03-12 05:54:14,559 [main:119] - TRYING TO REPLACE CONSTANT 1070061616
2021-03-12 05:54:14,663 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 05:54:14,663 [main:66] - Compilation checking started
2021-03-12 05:54:15,066 [main:119] - TRYING TO REPLACE CONSTANT 4988987349570208470
2021-03-12 05:54:15,163 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 05:54:15,164 [main:66] - Compilation checking started
2021-03-12 05:54:15,598 [main:53] - Result = true
Text:
fun box(): String {
    while (true) break
    return (Triple<LinkedHashMap<Byte?, UInt?>, ULong, Long>(linkedMapOf<Byte?, UInt?>(), 9033780820439431198.toULong(), -9033780820439431198))?.third.toString(-1070061616)
}


2021-03-12 05:54:15,599 [main:119] - TRYING TO REPLACE CONSTANT 9033780820439431198
2021-03-12 05:54:15,698 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 05:54:15,699 [main:66] - Compilation checking started
2021-03-12 05:54:16,112 [main:53] - Result = true
Text:
fun box(): String {
    while (true) break
    return (Triple<LinkedHashMap<Byte?, UInt?>, ULong, Long>(linkedMapOf<Byte?, UInt?>(), 9033780820439431198.toULong(), (Triple<LinkedHashMap<Byte?, UInt?>, ULong, Long>(linkedMapOf<Byte?, UInt?>(), 9033780820439431198.toULong(), -9033780820439431198))?.third))?.third.toString(-1070061616)
}


2021-03-12 05:54:16,138 [main:41] - AFTER TRY 0 res = fun box(): String {
    while (true) break
    return "OK"
}
2021-03-12 05:54:16,463 [main:43] - Try №0
2021-03-12 05:54:18,333 [main:69] - Trying to insert fun box659() = fu0<Int> {
    fu1<Boolean> {
        "OK"
    }
}
2021-03-12 05:54:18,435 [main:66] - Compilation checking started
2021-03-12 05:54:18,872 [main:103] - Trying to change 13 nodes
2021-03-12 05:54:18,872 [main:107] - replacing ("OK", String)
2021-03-12 05:54:18,872 [main:50] - replacing "OK" String
2021-03-12 05:54:18,872 [main:54] - Getting value of type String
2021-03-12 05:54:18,966 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:54:18,966 [main:58] - GENERATED VALUE OF TYPE String = "aqhfh"
2021-03-12 05:54:18,966 [main:61] - GENERATED IS CALL =false
2021-03-12 05:54:19,248 [main:67] - randomType = Collection<Long>
2021-03-12 05:54:19,248 [main:114] - replacement of "OK" of type String is "aqhfh"
2021-03-12 05:54:19,329 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 05:54:19,329 [main:66] - Compilation checking started
2021-03-12 05:54:19,613 [main:53] - Result = true
Text:
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> {
    fu1<Boolean> {
        "aqhfh"
    }
}


2021-03-12 05:54:19,614 [main:107] - replacing ({
    fu1<Boolean> {
        "aqhfh"
    }
}, [@kotlin.ExtensionFunctionType] Function1<Kla0<Int>, String>)
2021-03-12 05:54:19,614 [main:50] - replacing {
    fu1<Boolean> {
        "aqhfh"
    }
} [@kotlin.ExtensionFunctionType] Function1<Kla0<Int>, String>
2021-03-12 05:54:19,614 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Kla0<Int>, String>
2021-03-12 05:54:19,724 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Kla0<Int>, String> false depth = 0
2021-03-12 05:54:19,725 [main:302] - generating value of type = String true depth = 1
2021-03-12 05:54:19,726 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Kla0<Int>, String> = { "qyoon"}
2021-03-12 05:54:19,726 [main:61] - GENERATED IS CALL =false
2021-03-12 05:54:20,681 [main:67] - randomType = Kla0<Triple<ULong, Function1<Char, List<Set<UShort>>>, Kla0<Int?>>>
2021-03-12 05:54:20,773 [main:302] - generating value of type = Kla0<Triple<ULong, Function1<Char, List<Set<UShort>>>, Kla0<Int?>>> false depth = 0
2021-03-12 05:54:20,774 [main:112] - generating klass Kla0 text = class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}
2021-03-12 05:54:21,150 [main:114] - replacement of {
    fu1<Boolean> {
        "aqhfh"
    }
} of type [@kotlin.ExtensionFunctionType] Function1<Kla0<Int>, String> is { "qyoon"}
2021-03-12 05:54:21,228 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:54:21,228 [main:66] - Compilation checking started
2021-03-12 05:54:21,442 [main:53] - Result = true
Text:
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}


2021-03-12 05:54:21,443 [main:107] - replacing (block, [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty1>, String>)
2021-03-12 05:54:21,443 [main:50] - replacing block [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty1>, String>
2021-03-12 05:54:21,443 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty1>, String>
2021-03-12 05:54:21,536 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty1>, String> false depth = 0
2021-03-12 05:54:21,537 [main:302] - generating value of type = String true depth = 1
2021-03-12 05:54:21,537 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty1>, String> = { "phiba"}
2021-03-12 05:54:21,538 [main:61] - GENERATED IS CALL =false
2021-03-12 05:54:21,720 [main:67] - randomType = ULong?
2021-03-12 05:54:21,797 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 05:54:21,888 [main:114] - replacement of block of type [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty1>, String> is { "phiba"}
2021-03-12 05:54:21,964 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:54:21,964 [main:66] - Compilation checking started
2021-03-12 05:54:22,126 [main:49] - Result = false
Text:
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().{ "phiba"}()

fun box659() = fu0<Int> { "qyoon"}


2021-03-12 05:54:22,127 [main:107] - replacing (block(), String)
2021-03-12 05:54:22,127 [main:50] - replacing block() String
2021-03-12 05:54:22,127 [main:54] - Getting value of type String
2021-03-12 05:54:22,219 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:54:22,220 [main:58] - GENERATED VALUE OF TYPE String = "pgknq"
2021-03-12 05:54:22,220 [main:61] - GENERATED IS CALL =false
2021-03-12 05:54:24,969 [main:67] - randomType = Kla0<Short>
2021-03-12 05:54:25,066 [main:302] - generating value of type = Kla0<Short> false depth = 0
2021-03-12 05:54:25,066 [main:112] - generating klass Kla0 text = class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}
2021-03-12 05:54:25,242 [main:149] - GENERATING call of type public final fun <Ty3> fu1(block: Kla0<kotlin.Short>.Kla1<Ty3>.() -> kotlin.String): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@56d812e8]
2021-03-12 05:54:25,319 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Kla1<Ty3, Short>, String> false depth = 0
2021-03-12 05:54:25,319 [main:302] - generating value of type = String true depth = 1
2021-03-12 05:54:25,320 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f7cab66]
2021-03-12 05:54:25,320 [main:78] - Generated call from random type = (Kla0<Short>()).fu1({ "zrqck"}).toUpperCase()
2021-03-12 05:54:25,320 [main:114] - replacement of block() of type String is "pgknq"
2021-03-12 05:54:25,392 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 05:54:25,393 [main:66] - Compilation checking started
2021-03-12 05:54:25,485 [main:49] - Result = false
Text:
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>()."pgknq"
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}


2021-03-12 05:54:25,486 [main:107] - replacing (Kla1<Ty3>(), Kla1<Ty3, Ty0>)
2021-03-12 05:54:25,486 [main:50] - replacing Kla1<Ty3>() Kla1<Ty3, Ty0>
2021-03-12 05:54:25,486 [main:54] - Getting value of type Kla1<Ty3, Ty0>
2021-03-12 05:54:25,573 [main:302] - generating value of type = Kla1<Ty3, Ty0> false depth = 0
2021-03-12 05:54:25,574 [main:112] - generating klass Kla1 text = inner class Kla1<Ty2>
2021-03-12 05:54:25,574 [main:58] - GENERATED VALUE OF TYPE Kla1<Ty3, Ty0> = 
2021-03-12 05:54:26,174 [main:67] - randomType = Kla0<Function2<Double, ArrayList<Sequence<Char>>, UShort>>
2021-03-12 05:54:26,248 [main:302] - generating value of type = Kla0<Function2<Double, ArrayList<Sequence<Char>>, UShort>> false depth = 0
2021-03-12 05:54:26,248 [main:112] - generating klass Kla0 text = class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}
2021-03-12 05:54:27,219 [main:111] - Cant find and generate replacement for Kla1<Ty3>() type Kla1<Ty3, Ty0>
2021-03-12 05:54:27,219 [main:107] - replacing (block, [@kotlin.ExtensionFunctionType] Function1<Kla1<Ty3, Ty0>, String>)
2021-03-12 05:54:27,220 [main:50] - replacing block [@kotlin.ExtensionFunctionType] Function1<Kla1<Ty3, Ty0>, String>
2021-03-12 05:54:27,220 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Kla1<Ty3, Ty0>, String>
2021-03-12 05:54:27,294 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Kla1<Ty3, Ty0>, String> false depth = 0
2021-03-12 05:54:27,294 [main:302] - generating value of type = String true depth = 1
2021-03-12 05:54:27,294 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Kla1<Ty3, Ty0>, String> = { "gztqd"}
2021-03-12 05:54:27,295 [main:61] - GENERATED IS CALL =false
2021-03-12 05:54:27,375 [main:67] - randomType = String?
2021-03-12 05:54:27,461 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:54:27,494 [main:114] - replacement of block of type [@kotlin.ExtensionFunctionType] Function1<Kla1<Ty3, Ty0>, String> is { "gztqd"}
2021-03-12 05:54:27,574 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:54:27,575 [main:66] - Compilation checking started
2021-03-12 05:54:27,720 [main:49] - Result = false
Text:
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().{ "gztqd"}()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}


2021-03-12 05:54:27,792 [main:41] - AFTER TRY 1 res = fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}


2021-03-12 05:54:27,940 [main:112] - generating klass Kla0 text = class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}
2021-03-12 05:54:28,187 [main:112] - generating klass Kla1 text = inner class Kla1<Ty2>
2021-03-12 05:54:28,338 [main:43] - GENERATING CALL OF fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()
2021-03-12 05:54:28,414 [main:61] - WITHOUT TYPE PARAMS = fun <Ty1> fu0(block: Kla0<Kla0<Boolean>>.() -> String) = Kla0<Ty1>().block()
2021-03-12 05:54:28,566 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Kla0<Kla0<Boolean>>, String> false depth = 1
2021-03-12 05:54:28,566 [main:302] - generating value of type = String true depth = 2
2021-03-12 05:54:28,567 [main:95] - GENERATED = fu0<Kla0<Boolean>>({ "jkbcg"})
2021-03-12 05:54:28,659 [main:43] - Try №1
2021-03-12 05:54:29,289 [main:69] - Trying to insert //WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}
2021-03-12 05:54:29,383 [main:66] - Compilation checking started
2021-03-12 05:54:29,862 [main:103] - Trying to change 4 nodes
2021-03-12 05:54:29,862 [main:107] - replacing (prope0, String)
2021-03-12 05:54:29,862 [main:50] - replacing prope0 String
2021-03-12 05:54:29,862 [main:54] - Getting value of type String
2021-03-12 05:54:29,952 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:54:29,952 [main:58] - GENERATED VALUE OF TYPE String = "mmqkw"
2021-03-12 05:54:29,953 [main:61] - GENERATED IS CALL =false
2021-03-12 05:54:29,953 [main:67] - randomType = Boolean
2021-03-12 05:54:30,043 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:54:30,058 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d2a4ce0]
2021-03-12 05:54:30,145 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:54:30,146 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52a8be22]
2021-03-12 05:54:30,241 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:54:30,242 [main:78] - Generated call from random type = (true).compareTo(false).toString(1848822221)
2021-03-12 05:54:30,242 [main:106] - GETTING String from String
2021-03-12 05:54:30,278 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65639ae6]]
2021-03-12 05:54:30,278 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65639ae6]
2021-03-12 05:54:30,405 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:54:30,497 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:54:30,499 [main:117] - GENERATED CALL = (fu0<Kla0<Boolean>>({ "jkbcg"})).replaceAfterLast('娐', "sifac", Kla0<Short>().fu1())
2021-03-12 05:54:30,499 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56ac39b8]]
2021-03-12 05:54:30,499 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56ac39b8]
2021-03-12 05:54:30,588 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:54:30,589 [main:117] - GENERATED CALL = (fu0<Kla0<Boolean>>({ "jkbcg"})).substringAfterLast('뱿', Kla0<Short>().fu1())
2021-03-12 05:54:30,589 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280ba906]]
2021-03-12 05:54:30,589 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280ba906]
2021-03-12 05:54:30,589 [main:117] - GENERATED CALL = (fu0<Kla0<Boolean>>({ "jkbcg"})).trimEnd()
2021-03-12 05:54:30,590 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396e07d2]]
2021-03-12 05:54:30,590 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396e07d2]
2021-03-12 05:54:30,680 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 05:54:30,871 [main:43] - GENERATING CALL OF fun <E> ArrayList(elements: kotlin.collections.Collection<Double>): Iterable<Int> = TODO()
2021-03-12 05:54:30,872 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(elements: kotlin.collections.Collection<Double>): Iterable<Int> = TODO()
2021-03-12 05:54:31,125 [main:302] - generating value of type = Collection<Double> false depth = 3
2021-03-12 05:54:31,215 [main:43] - GENERATING CALL OF fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<Double>.()->kotlin.Unit): Collection<Double> = TODO()
2021-03-12 05:54:31,216 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<Double>.()->kotlin.Unit): Collection<Double> = TODO()
2021-03-12 05:54:31,478 [main:302] - generating value of type = Int true depth = 6
2021-03-12 05:54:31,479 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<Double>, Unit> false depth = 6
2021-03-12 05:54:31,479 [main:302] - generating value of type = Unit false depth = 7
2021-03-12 05:54:31,600 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:54:31,602 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:54:31,807 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 10
2021-03-12 05:54:31,807 [main:302] - generating value of type = Unit false depth = 11
2021-03-12 05:54:31,899 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:54:31,901 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:54:32,222 [main:302] - generating value of type = Int true depth = 14
2021-03-12 05:54:32,223 [main:302] - generating value of type = Function1<Int, Unit> false depth = 14
2021-03-12 05:54:32,223 [main:302] - generating value of type = Unit false depth = 15
2021-03-12 05:54:32,337 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:54:32,339 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:54:32,510 [main:302] - generating value of type = Boolean true depth = 18
2021-03-12 05:54:32,510 [main:385] - Cant generate call of fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:54:32,510 [main:95] - GENERATED = repeat(-1522206518, {a: Int -> })
2021-03-12 05:54:32,511 [main:95] - GENERATED = contract({ repeat(-1522206518, {a: Int -> })})
2021-03-12 05:54:32,511 [main:95] - GENERATED = buildSet<Double>(-1752471596, { contract({ repeat(-1522206518, {a: Int -> })})})
2021-03-12 05:54:32,512 [main:95] - GENERATED = ArrayList<Double>(buildSet<Double>(-1752471596, { contract({ repeat(-1522206518, {a: Int -> })})}))
2021-03-12 05:54:32,513 [main:117] - GENERATED CALL = (fu0<Kla0<Boolean>>({ "jkbcg"})).slice(ArrayList<Double>(buildSet<Double>(-1752471596, { contract({ repeat(-1522206518, {a: Int -> })})})))
2021-03-12 05:54:32,513 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e5a611c]]
2021-03-12 05:54:32,513 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:54:32,602 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:54:32,698 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:54:32,699 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e5a611c]
2021-03-12 05:54:32,787 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:54:32,900 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 05:54:32,902 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 05:54:33,070 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:54:33,070 [main:95] - GENERATED = Regex("zpxap")
2021-03-12 05:54:33,071 [main:117] - GENERATED CALL = (fu0<Kla0<Boolean>>({ "jkbcg"})).subSequence(1079858916, -1754492163).replaceFirst(Regex("zpxap"), Kla0<Short>().fu1())
2021-03-12 05:54:33,071 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122af64]]
2021-03-12 05:54:33,071 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122af64]
2021-03-12 05:54:33,152 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:54:33,153 [main:117] - GENERATED CALL = (fu0<Kla0<Boolean>>({ "jkbcg"})).repeat(128055650)
2021-03-12 05:54:33,153 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d51a508]]
2021-03-12 05:54:33,153 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d51a508]
2021-03-12 05:54:33,153 [main:117] - GENERATED CALL = (fu0<Kla0<Boolean>>({ "jkbcg"})).trimIndent()
2021-03-12 05:54:33,153 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122af64]]
2021-03-12 05:54:33,153 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:54:33,237 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:54:33,364 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:54:33,365 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122af64]
2021-03-12 05:54:33,447 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:54:33,447 [main:117] - GENERATED CALL = (fu0<Kla0<Boolean>>({ "jkbcg"})).subSequence(-1548450923, -218338466).repeat(1964517944)
2021-03-12 05:54:33,447 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66b9d2d1]]
2021-03-12 05:54:33,448 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66b9d2d1]
2021-03-12 05:54:33,448 [main:117] - GENERATED CALL = (fu0<Kla0<Boolean>>({ "jkbcg"})).uppercase()
2021-03-12 05:54:33,448 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eba6b09]]
2021-03-12 05:54:33,448 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eba6b09]
2021-03-12 05:54:33,448 [main:117] - GENERATED CALL = (fu0<Kla0<Boolean>>({ "jkbcg"})).trimMargin(Kla0<Short>().fu1())
2021-03-12 05:54:33,449 [main:114] - replacement of prope0 of type String is (fu0<Kla0<Boolean>>({ "jkbcg"})).trimMargin(Kla0<Short>().fu1())
2021-03-12 05:54:33,526 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:54:33,527 [main:66] - Compilation checking started
2021-03-12 05:54:33,703 [main:49] - Result = false
Text:
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return (fu0<Kla0<Boolean>>({ "jkbcg"})).trimMargin(Kla0<Short>().fu1())
}


2021-03-12 05:54:33,704 [main:107] - replacing ("OK", String)
2021-03-12 05:54:33,704 [main:50] - replacing "OK" String
2021-03-12 05:54:33,704 [main:54] - Getting value of type String
2021-03-12 05:54:33,796 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:54:33,796 [main:58] - GENERATED VALUE OF TYPE String = "obqfd"
2021-03-12 05:54:33,797 [main:61] - GENERATED IS CALL =false
2021-03-12 05:54:34,167 [main:67] - randomType = Function1<Char?, UInt>
2021-03-12 05:54:34,167 [main:106] - GETTING String from String
2021-03-12 05:54:34,215 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a190df7]]
2021-03-12 05:54:34,216 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a190df7]
2021-03-12 05:54:34,295 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:54:34,296 [main:117] - GENERATED CALL = (Kla0<Short>().fu1()).dropLast(-39687581)
2021-03-12 05:54:34,296 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4adf4ebf]]
2021-03-12 05:54:34,296 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4adf4ebf]
2021-03-12 05:54:34,297 [main:117] - GENERATED CALL = (Kla0<Short>().fu1()).replaceIndent(fu0<Kla0<Boolean>>({ "jkbcg"}))
2021-03-12 05:54:34,297 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f8dedf]]
2021-03-12 05:54:34,297 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:54:34,375 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:54:34,453 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:54:34,454 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f8dedf]
2021-03-12 05:54:34,532 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:54:34,631 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 05:54:34,632 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 05:54:34,892 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:54:34,892 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 05:54:34,979 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 05:54:34,980 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 05:54:35,064 [main:302] - generating value of type = RegexOption false depth = 6
2021-03-12 05:54:35,068 [main:95] - GENERATED = setOfNotNull<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 05:54:35,068 [main:95] - GENERATED = Regex("snqpz", setOfNotNull<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE))
2021-03-12 05:54:35,182 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 05:54:35,183 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:54:35,187 [main:117] - GENERATED CALL = (Kla0<Short>().fu1()).subSequence(829561610, -1012305756).replace(Regex("snqpz", setOfNotNull<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)), {a: MatchResult -> "lhhkh"})
2021-03-12 05:54:35,188 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79089abb]]
2021-03-12 05:54:35,188 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79089abb]
2021-03-12 05:54:35,188 [main:117] - GENERATED CALL = (Kla0<Short>().fu1()).trimStart()
2021-03-12 05:54:35,188 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a90b83]]
2021-03-12 05:54:35,188 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a90b83]
2021-03-12 05:54:35,274 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:54:35,274 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:54:35,275 [main:117] - GENERATED CALL = (Kla0<Short>().fu1()).dropLastWhile({a: Char -> false})
2021-03-12 05:54:35,275 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c04dd27]]
2021-03-12 05:54:35,275 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c04dd27]
2021-03-12 05:54:35,275 [main:117] - GENERATED CALL = (Kla0<Short>().fu1()).concat(Kla0<Short>().fu1())
2021-03-12 05:54:35,276 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43da71d6]]
2021-03-12 05:54:35,276 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43da71d6]
2021-03-12 05:54:35,355 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:54:35,359 [main:117] - GENERATED CALL = (Kla0<Short>().fu1()).removeSuffix("nlosa")
2021-03-12 05:54:35,359 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]]
2021-03-12 05:54:35,360 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:54:35,437 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:54:35,514 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:54:35,515 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]
2021-03-12 05:54:35,592 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:54:35,696 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:54:35,697 [main:117] - GENERATED CALL = (Kla0<Short>().fu1()).subSequence(1526974153, -1126726343).commonSuffixWith("satsy", false)
2021-03-12 05:54:35,697 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f0c722]]
2021-03-12 05:54:35,698 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f0c722]
2021-03-12 05:54:35,783 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:54:35,784 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:54:35,784 [main:117] - GENERATED CALL = (Kla0<Short>().fu1()).filterNot({a: Char -> false})
2021-03-12 05:54:35,784 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9c1180]]
2021-03-12 05:54:35,785 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9c1180]
2021-03-12 05:54:35,863 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:54:35,867 [main:117] - GENERATED CALL = (Kla0<Short>().fu1()).removePrefix("fuanp")
2021-03-12 05:54:35,867 [main:114] - replacement of "OK" of type String is (Kla0<Short>().fu1()).subSequence(1526974153, -1126726343).commonSuffixWith("satsy", false)
2021-03-12 05:54:35,946 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:54:35,947 [main:66] - Compilation checking started
2021-03-12 05:54:36,139 [main:49] - Result = false
Text:
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { (Kla0<Short>().fu1()).subSequence(1526974153, -1126726343).commonSuffixWith("satsy", false) }
    return prope0
}


2021-03-12 05:54:36,220 [main:41] - AFTER TRY 2 res = fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}


2021-03-12 05:54:36,402 [main:112] - generating klass Kla0 text = class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}
2021-03-12 05:54:36,651 [main:112] - generating klass Kla1 text = inner class Kla1<Ty2>
2021-03-12 05:54:36,839 [main:43] - GENERATING CALL OF fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()
2021-03-12 05:54:36,841 [main:61] - WITHOUT TYPE PARAMS = fun <Ty1> fu0(block: Kla0<String>.() -> String) = Kla0<Ty1>().block()
2021-03-12 05:54:37,037 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Kla0<String>, String> false depth = 1
2021-03-12 05:54:37,037 [main:302] - generating value of type = String true depth = 2
2021-03-12 05:54:37,038 [main:95] - GENERATED = fu0<String>({ "bjgag"})
2021-03-12 05:54:37,123 [main:43] - Try №2
2021-03-12 05:54:51,643 [main:48] - Already checked
2021-03-12 05:54:51,907 [main:48] - Already checked
2021-03-12 05:54:56,179 [main:69] - Trying to insert fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
2021-03-12 05:54:56,290 [main:66] - Compilation checking started
2021-03-12 05:54:57,444 [main:103] - Trying to change 229 nodes
2021-03-12 05:54:57,444 [main:107] - replacing (prope4++, Int)
2021-03-12 05:54:57,445 [main:50] - replacing prope4++ Int
2021-03-12 05:54:57,445 [main:54] - Getting value of type Int
2021-03-12 05:54:57,602 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:54:57,604 [main:58] - GENERATED VALUE OF TYPE Int = -154484740
2021-03-12 05:54:57,604 [main:61] - GENERATED IS CALL =false
2021-03-12 05:54:57,783 [main:67] - randomType = UShort
2021-03-12 05:54:57,947 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 05:54:57,998 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@37047792]
2021-03-12 05:54:58,192 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:54:58,195 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5275f18a]
2021-03-12 05:54:58,195 [main:78] - Generated call from random type = (5021.toUShort()).compareTo(36.toUByte()).inv()
2021-03-12 05:54:58,196 [main:114] - replacement of prope4++ of type Int is (5021.toUShort()).compareTo(36.toUByte()).inv()
2021-03-12 05:54:58,369 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:54:58,370 [main:66] - Compilation checking started
2021-03-12 05:54:59,154 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.intercepted().resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.intercepted().resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { fu3() } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:54:59,158 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 05:54:59,158 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 05:54:59,158 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 05:54:59,355 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 05:54:59,362 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 05:54:59,369 [main:67] - randomType = UByte
2021-03-12 05:54:59,523 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:54:59,571 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:54:59,611 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:54:59,611 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 05:54:59,611 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 05:54:59,611 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 05:54:59,611 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 05:54:59,779 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 05:54:59,786 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 05:54:59,799 [main:67] - randomType = Kla7
2021-03-12 05:54:59,957 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 05:54:59,960 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}
2021-03-12 05:54:59,970 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:55:00,005 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:55:00,005 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 05:55:00,005 [main:107] - replacing ("OK", String)
2021-03-12 05:55:00,005 [main:50] - replacing "OK" String
2021-03-12 05:55:00,005 [main:54] - Getting value of type String
2021-03-12 05:55:00,163 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:55:00,166 [main:58] - GENERATED VALUE OF TYPE String = "uczzu"
2021-03-12 05:55:00,166 [main:61] - GENERATED IS CALL =false
2021-03-12 05:55:00,179 [main:67] - randomType = Kla5
2021-03-12 05:55:00,342 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 05:55:00,345 [main:112] - generating klass Kla5 text = class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}
2021-03-12 05:55:00,369 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@67a0e690]
2021-03-12 05:55:00,370 [main:78] - Generated call from random type = (Kla5()).prope5?.toString()!!
2021-03-12 05:55:00,370 [main:106] - GETTING String from String
2021-03-12 05:55:00,401 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6059c509]]
2021-03-12 05:55:00,402 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6059c509]
2021-03-12 05:55:00,571 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:00,726 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:00,912 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:55:00,919 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).replaceRange(-1396642817, 914893145, "qkqvf")
2021-03-12 05:55:00,919 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e91ca8f]]
2021-03-12 05:55:00,919 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e91ca8f]
2021-03-12 05:55:00,919 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).toLowerCase()
2021-03-12 05:55:00,919 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280ba906]]
2021-03-12 05:55:00,919 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280ba906]
2021-03-12 05:55:00,920 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).trimEnd()
2021-03-12 05:55:00,920 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b3bfac]]
2021-03-12 05:55:00,920 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b3bfac]
2021-03-12 05:55:01,068 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:01,072 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).take(-528626193)
2021-03-12 05:55:01,072 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40b7db4d]]
2021-03-12 05:55:01,072 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40b7db4d]
2021-03-12 05:55:01,072 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).capitalize()
2021-03-12 05:55:01,072 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52a8be22]]
2021-03-12 05:55:01,073 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52a8be22]
2021-03-12 05:55:01,239 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:01,243 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).length.toString(1077105862)
2021-03-12 05:55:01,243 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56ac39b8]]
2021-03-12 05:55:01,243 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56ac39b8]
2021-03-12 05:55:01,411 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:55:01,418 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).substringAfterLast('ﰱ', fu0<String>({ "bjgag"}))
2021-03-12 05:55:01,418 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@210c047e]]
2021-03-12 05:55:01,418 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@210c047e]
2021-03-12 05:55:01,579 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:55:01,583 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).prependIndent("enmla")
2021-03-12 05:55:01,583 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5742c619]]
2021-03-12 05:55:01,583 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5742c619]
2021-03-12 05:55:01,734 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:55:01,738 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:55:01,742 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).dropWhile({a: Char -> false})
2021-03-12 05:55:01,742 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51f6003c]]
2021-03-12 05:55:01,742 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51f6003c]
2021-03-12 05:55:01,905 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:55:02,060 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:55:02,064 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).replaceBefore('', Kla0<Char>().fu1(), "jvsgd")
2021-03-12 05:55:02,065 [main:114] - replacement of "OK" of type String is (Kla0<Char>().fu1()).dropWhile({a: Char -> false})
2021-03-12 05:55:02,259 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:55:02,259 [main:66] - Compilation checking started
2021-03-12 05:55:02,696 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.intercepted().resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.intercepted().resumeWithException(RuntimeException((Kla0<Char>().fu1()).dropWhile({a: Char -> false})))
    COROUTINE_SUSPENDED
}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { fu3() } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:55:02,699 [main:107] - replacing (fu3(), String)
2021-03-12 05:55:02,699 [main:50] - replacing fu3() String
2021-03-12 05:55:02,699 [main:54] - Getting value of type String
2021-03-12 05:55:02,840 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:55:02,844 [main:58] - GENERATED VALUE OF TYPE String = "jaokp"
2021-03-12 05:55:02,844 [main:61] - GENERATED IS CALL =false
2021-03-12 05:55:03,727 [main:67] - randomType = Kla3<Function2<Byte?, UByte, Long>>
2021-03-12 05:55:03,873 [main:302] - generating value of type = Kla3<Function2<Byte?, UByte, Long>> false depth = 0
2021-03-12 05:55:03,876 [main:112] - generating klass Kla3 text = private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}
2021-03-12 05:55:04,366 [main:194] - Type params = [Function2<Byte?, UByte, Long>]
2021-03-12 05:55:04,523 [main:302] - generating value of type = Function0<Unit> false depth = 2
2021-03-12 05:55:04,527 [main:302] - generating value of type = Unit false depth = 3
2021-03-12 05:55:04,685 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:55:04,689 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:55:05,211 [main:302] - generating value of type = Int true depth = 6
2021-03-12 05:55:05,215 [main:302] - generating value of type = Function1<Int, Unit> false depth = 6
2021-03-12 05:55:05,218 [main:302] - generating value of type = Unit false depth = 7
2021-03-12 05:55:05,376 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:55:05,380 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:55:05,889 [main:302] - generating value of type = Boolean true depth = 10
2021-03-12 05:55:05,892 [main:302] - generating value of type = Function0<Any> false depth = 10
2021-03-12 05:55:05,896 [main:302] - generating value of type = Any false depth = 11
2021-03-12 05:55:05,896 [main:95] - GENERATED = require(true, { "tggho"})
2021-03-12 05:55:05,896 [main:95] - GENERATED = repeat(83022224, {a: Int -> require(true, { "tggho"})})
2021-03-12 05:55:06,070 [main:302] - generating value of type = Continuation<Function2<Byte?, UByte, Long>> false depth = 2
2021-03-12 05:55:06,254 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Function2<Byte?, UByte, Long>>)->kotlin.Unit): Contuation<Function2<Byte?, UByte, Long>> = TODO()
2021-03-12 05:55:06,261 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Function2<Byte?, UByte, Long>>)->kotlin.Unit): Contuation<Function2<Byte?, UByte, Long>> = TODO()
2021-03-12 05:55:06,784 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-12 05:55:06,934 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:55:06,941 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:55:07,292 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-12 05:55:07,454 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:55:07,459 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:55:08,018 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-12 05:55:08,171 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:55:08,175 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:55:08,679 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 14
2021-03-12 05:55:08,825 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:55:08,829 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:55:09,388 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:55:09,389 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:55:09,389 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:55:09,389 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:55:09,389 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Function2<Byte?, UByte, Long>>)->kotlin.Unit): Contuation<Function2<Byte?, UByte, Long>> = TODO()
2021-03-12 05:55:09,432 [main:106] - GETTING String from String
2021-03-12 05:55:09,451 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4adf4ebf]]
2021-03-12 05:55:09,451 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4adf4ebf]
2021-03-12 05:55:09,452 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).replaceIndent(Kla0<Char>().fu1())
2021-03-12 05:55:09,452 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29555276]]
2021-03-12 05:55:09,452 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29555276]
2021-03-12 05:55:09,594 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:55:09,747 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:55:09,750 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).substringBeforeLast('韚', "bwvop")
2021-03-12 05:55:09,751 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4196f0ef]]
2021-03-12 05:55:09,751 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4196f0ef]
2021-03-12 05:55:09,888 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 05:55:09,891 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:55:09,895 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).filterIndexed({a: Int, b: Char -> true})
2021-03-12 05:55:09,895 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65639ae6]]
2021-03-12 05:55:09,895 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65639ae6]
2021-03-12 05:55:10,027 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:55:10,031 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).replaceAfterLast('?', fu0<String>({ "bjgag"}), fu0<String>({ "bjgag"}))
2021-03-12 05:55:10,031 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72950e61]]
2021-03-12 05:55:10,031 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72950e61]
2021-03-12 05:55:10,165 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:55:10,301 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:55:10,436 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:55:10,439 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).replace('ꭜ', '信', false)
2021-03-12 05:55:10,439 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f7fbd46]]
2021-03-12 05:55:10,439 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f7fbd46]
2021-03-12 05:55:10,439 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).decapitalize()
2021-03-12 05:55:10,439 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9c1180]]
2021-03-12 05:55:10,440 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9c1180]
2021-03-12 05:55:10,594 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:55:10,775 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:55:10,780 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:55:11,121 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:55:11,125 [main:95] - GENERATED = StringBuilder("fnaen")
2021-03-12 05:55:11,125 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).removePrefix(StringBuilder("fnaen"))
2021-03-12 05:55:11,125 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f8dedf]]
2021-03-12 05:55:11,125 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:55:11,259 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:11,400 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:11,403 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f8dedf]
2021-03-12 05:55:11,553 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:55:11,693 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 05:55:11,698 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 05:55:12,190 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:55:12,193 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 05:55:12,391 [main:43] - GENERATING CALL OF fun <T> setOf(): Set<RegexOption> = TODO()
2021-03-12 05:55:12,395 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(): Set<RegexOption> = TODO()
2021-03-12 05:55:12,539 [main:95] - GENERATED = setOf<RegexOption>()
2021-03-12 05:55:12,539 [main:95] - GENERATED = Regex("nwcuu", setOf<RegexOption>())
2021-03-12 05:55:12,673 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 05:55:12,676 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:55:12,683 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(-1954741875, -1611827238).replace(Regex("nwcuu", setOf<RegexOption>()), {a: MatchResult -> "qoafr"})
2021-03-12 05:55:12,683 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bb68b6d]]
2021-03-12 05:55:12,683 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bb68b6d]
2021-03-12 05:55:12,816 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:55:12,819 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:55:12,823 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).takeLastWhile({a: Char -> true})
2021-03-12 05:55:12,823 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@210c047e]]
2021-03-12 05:55:12,823 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@210c047e]
2021-03-12 05:55:12,823 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).prependIndent(Kla0<Char>().fu1())
2021-03-12 05:55:12,823 [main:114] - replacement of fu3() of type String is "jaokp"
2021-03-12 05:55:12,953 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 05:55:12,954 [main:66] - Compilation checking started
2021-03-12 05:55:13,633 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.intercepted().resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.intercepted().resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:55:13,636 [main:107] - replacing (c, Continuation<Unit>)
2021-03-12 05:55:13,636 [main:50] - replacing c Continuation<Unit>
2021-03-12 05:55:13,636 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 05:55:13,779 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 05:55:13,919 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:55:13,924 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:55:14,408 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 05:55:14,555 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:55:14,560 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:55:14,857 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 05:55:14,997 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:55:15,002 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:55:15,501 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 05:55:15,650 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:55:15,654 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:55:16,162 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-12 05:55:16,302 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:55:16,306 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:55:16,767 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 15
2021-03-12 05:55:16,908 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:55:16,913 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:55:17,373 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:55:17,373 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:55:17,373 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:55:17,373 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:55:17,373 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:55:17,373 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:55:17,373 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 05:55:17,552 [main:67] - randomType = LinkedHashSet<Kla4>
2021-03-12 05:55:17,687 [main:302] - generating value of type = LinkedHashSet<Kla4> false depth = 0
2021-03-12 05:55:17,828 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<Kla4> = TODO()
2021-03-12 05:55:17,832 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<Kla4> = TODO()
2021-03-12 05:55:18,282 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:55:18,285 [main:302] - generating value of type = Float true depth = 3
2021-03-12 05:55:18,289 [main:95] - GENERATED = LinkedHashSet<Kla4>(1875240553, 0.20325923f)
2021-03-12 05:55:18,487 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 05:55:18,523 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 05:55:18,523 [main:111] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-12 05:55:18,523 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-12 05:55:18,523 [main:50] - replacing prope8 Function0<Unit>
2021-03-12 05:55:18,523 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:55:18,667 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:55:18,670 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:55:18,821 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:55:18,826 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:55:19,136 [main:302] - generating value of type = Any false depth = 4
2021-03-12 05:55:19,137 [main:95] - GENERATED = print("myotm")
2021-03-12 05:55:19,137 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("myotm")}
2021-03-12 05:55:19,137 [main:61] - GENERATED IS CALL =false
2021-03-12 05:55:19,150 [main:67] - randomType = Kla7
2021-03-12 05:55:19,285 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 05:55:19,288 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}
2021-03-12 05:55:19,297 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:55:19,331 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:55:19,331 [main:114] - replacement of prope8 of type Function0<Unit> is { print("myotm")}
2021-03-12 05:55:19,490 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:55:19,490 [main:66] - Compilation checking started
2021-03-12 05:55:19,920 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.intercepted().resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.intercepted().resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            { print("myotm")}()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:55:19,923 [main:107] - replacing (prope5, Result<Ty4>)
2021-03-12 05:55:19,923 [main:50] - replacing prope5 Result<Ty4>
2021-03-12 05:55:19,923 [main:54] - Getting value of type Result<Ty4>
2021-03-12 05:55:20,067 [main:302] - generating value of type = Result<Ty4> false depth = 0
2021-03-12 05:55:20,215 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty4): Result<Ty4> = TODO()
2021-03-12 05:55:20,220 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty4): Result<Ty4> = TODO()
2021-03-12 05:55:20,512 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty4): Result<Ty4> = TODO()
2021-03-12 05:55:20,512 [main:58] - GENERATED VALUE OF TYPE Result<Ty4> = 
2021-03-12 05:55:21,335 [main:67] - randomType = Kla3<HashMap<Map<Kla2, UInt>, UShort?>>
2021-03-12 05:55:21,477 [main:302] - generating value of type = Kla3<HashMap<Map<Kla2, UInt>, UShort?>> false depth = 0
2021-03-12 05:55:21,480 [main:112] - generating klass Kla3 text = private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}
2021-03-12 05:55:21,920 [main:194] - Type params = [HashMap<Map<Kla2, UInt>, UShort?>]
2021-03-12 05:55:22,048 [main:302] - generating value of type = Function0<Unit> false depth = 2
2021-03-12 05:55:22,052 [main:302] - generating value of type = Unit false depth = 3
2021-03-12 05:55:22,190 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:55:22,195 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:55:22,635 [main:302] - generating value of type = Boolean true depth = 6
2021-03-12 05:55:22,638 [main:302] - generating value of type = Function0<Any> false depth = 6
2021-03-12 05:55:22,641 [main:302] - generating value of type = Any false depth = 7
2021-03-12 05:55:22,642 [main:95] - GENERATED = require(false, { "gejuw"})
2021-03-12 05:55:22,799 [main:302] - generating value of type = Continuation<HashMap<Map<Kla2, UInt>, UShort?>> false depth = 2
2021-03-12 05:55:22,936 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<HashMap<Map<Kla2, UInt>, UShort?>>)->kotlin.Unit): Contuation<HashMap<Map<Kla2, UInt>, UShort?>> = TODO()
2021-03-12 05:55:22,940 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<HashMap<Map<Kla2, UInt>, UShort?>>)->kotlin.Unit): Contuation<HashMap<Map<Kla2, UInt>, UShort?>> = TODO()
2021-03-12 05:55:23,433 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-12 05:55:23,570 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:55:23,574 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:55:23,867 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-12 05:55:24,008 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:55:24,012 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:55:24,463 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-12 05:55:24,603 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:55:24,607 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:55:25,109 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 14
2021-03-12 05:55:25,248 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:55:25,252 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:55:25,710 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:55:25,710 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:55:25,710 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:55:25,710 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:55:25,710 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<HashMap<Map<Kla2, UInt>, UShort?>>)->kotlin.Unit): Contuation<HashMap<Map<Kla2, UInt>, UShort?>> = TODO()
2021-03-12 05:55:25,768 [main:106] - GETTING Result<Ty4> from String
2021-03-12 05:55:25,802 [main:106] - GETTING Result<Ty4> from String
2021-03-12 05:55:25,802 [main:111] - Cant find and generate replacement for prope5 type Result<Ty4>
2021-03-12 05:55:25,802 [main:107] - replacing ({ error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }, Function0<Nothing>)
2021-03-12 05:55:25,802 [main:50] - replacing { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) } Function0<Nothing>
2021-03-12 05:55:25,802 [main:54] - Getting value of type Function0<Nothing>
2021-03-12 05:55:25,934 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-12 05:55:25,937 [main:302] - generating value of type = Nothing false depth = 1
2021-03-12 05:55:25,944 [main:58] - GENERATED VALUE OF TYPE Function0<Nothing> = { TODO()}
2021-03-12 05:55:25,944 [main:61] - GENERATED IS CALL =false
2021-03-12 05:55:25,957 [main:67] - randomType = Kla2
2021-03-12 05:55:26,088 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 05:55:26,092 [main:112] - generating klass Kla2 text = class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}
2021-03-12 05:55:26,221 [main:194] - Type params = []
2021-03-12 05:55:26,346 [main:302] - generating value of type = Function0<Unit> false depth = 2
2021-03-12 05:55:26,349 [main:302] - generating value of type = Unit false depth = 3
2021-03-12 05:55:26,415 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 05:55:26,444 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 05:55:26,444 [main:114] - replacement of { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) } of type Function0<Nothing> is { TODO()}
2021-03-12 05:55:26,582 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:55:26,582 [main:66] - Compilation checking started
2021-03-12 05:55:27,259 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.intercepted().resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.intercepted().resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:55:27,262 [main:107] - replacing (prope4 != expectedCount, Boolean)
2021-03-12 05:55:27,263 [main:50] - replacing prope4 != expectedCount Boolean
2021-03-12 05:55:27,263 [main:54] - Getting value of type Boolean
2021-03-12 05:55:27,399 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:55:27,404 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:55:27,405 [main:61] - GENERATED IS CALL =false
2021-03-12 05:55:27,411 [main:67] - randomType = Boolean
2021-03-12 05:55:27,557 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:55:27,574 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@f79deff]
2021-03-12 05:55:27,703 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:55:27,704 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@298bfadd]
2021-03-12 05:55:27,849 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:55:27,850 [main:78] - Generated call from random type = (true).equals("hmqji").equals("kzxvg")
2021-03-12 05:55:27,851 [main:106] - GETTING Boolean from String
2021-03-12 05:55:27,881 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5daf7fea]]
2021-03-12 05:55:27,882 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:55:28,011 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:55:28,012 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5daf7fea]
2021-03-12 05:55:28,012 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).equals("dnrcu").not()
2021-03-12 05:55:28,012 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c068836]]
2021-03-12 05:55:28,012 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:55:28,143 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:28,272 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:28,275 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c068836]
2021-03-12 05:55:28,275 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(-2068412862, 1916090760).none()
2021-03-12 05:55:28,275 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5755f025]]
2021-03-12 05:55:28,275 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:55:28,403 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5755f025]
2021-03-12 05:55:28,530 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:55:28,534 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).equals(null).and(true)
2021-03-12 05:55:28,534 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@39afea83]]
2021-03-12 05:55:28,534 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:55:28,661 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:28,790 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:28,793 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@39afea83]
2021-03-12 05:55:28,919 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:55:28,920 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(2013207405, -720324049).equals("qgrtf")
2021-03-12 05:55:28,920 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eb3bad8]]
2021-03-12 05:55:28,920 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eb3bad8]
2021-03-12 05:55:29,047 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:55:29,187 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:55:29,190 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).contains('', true)
2021-03-12 05:55:29,190 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@335247d3]]
2021-03-12 05:55:29,190 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:55:29,315 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:29,319 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@335247d3]
2021-03-12 05:55:29,319 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(859423100).isUpperCase()
2021-03-12 05:55:29,319 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d068465]]
2021-03-12 05:55:29,319 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:55:29,445 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:29,576 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:29,579 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d068465]
2021-03-12 05:55:29,706 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:29,710 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(672566495, 703715376).hasSurrogatePairAt(1760278795)
2021-03-12 05:55:29,710 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51aeaeb8]]
2021-03-12 05:55:29,710 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:55:29,838 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:29,970 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:29,973 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51aeaeb8]
2021-03-12 05:55:30,108 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:30,236 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:55:30,377 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:30,505 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:30,633 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:55:30,636 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(-1378947701, 1168593172).regionMatches(127616651, StringBuilder(), 794575684, -1257318687, false)
2021-03-12 05:55:30,636 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77ae82e0]]
2021-03-12 05:55:30,636 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77ae82e0]
2021-03-12 05:55:30,763 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:55:30,766 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:55:30,770 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).all({a: Char -> true})
2021-03-12 05:55:30,770 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cea665c]]
2021-03-12 05:55:30,770 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cea665c]
2021-03-12 05:55:30,770 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).toBoolean()
2021-03-12 05:55:30,770 [main:114] - replacement of prope4 != expectedCount of type Boolean is (Kla0<Char>().fu1()).subSequence(-1378947701, 1168593172).regionMatches(127616651, StringBuilder(), 794575684, -1257318687, false)
2021-03-12 05:55:30,897 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:55:30,898 [main:66] - Compilation checking started
2021-03-12 05:55:31,291 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.intercepted().resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.intercepted().resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if ((Kla0<Char>().fu1()).subSequence(-1378947701, 1168593172).regionMatches(127616651, StringBuilder(), 794575684, -1257318687, false)) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:55:31,293 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 05:55:31,294 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 05:55:31,294 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 05:55:31,428 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 05:55:31,434 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 05:55:31,448 [main:67] - randomType = Kla8
2021-03-12 05:55:31,580 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 05:55:31,583 [main:112] - generating klass Kla8 text = class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:55:31,594 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:55:31,612 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:55:31,612 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 05:55:31,612 [main:107] - replacing ({ x ->
    x.intercepted().resume("OK")
    COROUTINE_SUSPENDED
}, Function1<Continuation<String>, Any?>)
2021-03-12 05:55:31,613 [main:50] - replacing { x ->
    x.intercepted().resume("OK")
    COROUTINE_SUSPENDED
} Function1<Continuation<String>, Any?>
2021-03-12 05:55:31,613 [main:54] - Getting value of type Function1<Continuation<String>, Any?>
2021-03-12 05:55:31,740 [main:302] - generating value of type = Function1<Continuation<String>, Any?> false depth = 0
2021-03-12 05:55:31,743 [main:302] - generating value of type = Any false depth = 1
2021-03-12 05:55:31,743 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<String>, Any?> = {a: Continuation<String> -> "fmcpl"}
2021-03-12 05:55:31,743 [main:61] - GENERATED IS CALL =false
2021-03-12 05:55:31,899 [main:67] - randomType = LinkedHashSet<UShort>
2021-03-12 05:55:32,024 [main:302] - generating value of type = LinkedHashSet<UShort> false depth = 0
2021-03-12 05:55:32,159 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: UShort): LkedHashSet<UShort> = TODO()
2021-03-12 05:55:32,164 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: UShort): LkedHashSet<UShort> = TODO()
2021-03-12 05:55:32,295 [main:302] - generating value of type = UShort true depth = 3
2021-03-12 05:55:32,298 [main:95] - GENERATED = linkedSetOf<UShort>(26200.toUShort())
2021-03-12 05:55:32,437 [main:106] - GETTING Function1<Continuation<String>, Any?> from String
2021-03-12 05:55:32,456 [main:106] - GETTING Function1<Continuation<String>, Any?> from String
2021-03-12 05:55:32,456 [main:114] - replacement of { x ->
    x.intercepted().resume("OK")
    COROUTINE_SUSPENDED
} of type Function1<Continuation<String>, Any?> is {a: Continuation<String> -> "fmcpl"}
2021-03-12 05:55:32,580 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:55:32,580 [main:66] - Compilation checking started
2021-03-12 05:55:33,221 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.intercepted().resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:55:33,225 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected ", String)
2021-03-12 05:55:33,225 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " String
2021-03-12 05:55:33,225 [main:54] - Getting value of type String
2021-03-12 05:55:33,385 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:55:33,389 [main:58] - GENERATED VALUE OF TYPE String = "tvbsx"
2021-03-12 05:55:33,389 [main:61] - GENERATED IS CALL =false
2021-03-12 05:55:33,402 [main:67] - randomType = Kla5
2021-03-12 05:55:33,542 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 05:55:33,545 [main:112] - generating klass Kla5 text = class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}
2021-03-12 05:55:33,563 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@67a0e690]
2021-03-12 05:55:33,564 [main:78] - Generated call from random type = (Kla5()).prope5?.toString()!!
2021-03-12 05:55:33,564 [main:106] - GETTING String from String
2021-03-12 05:55:33,586 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f567b3f]]
2021-03-12 05:55:33,586 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f567b3f]
2021-03-12 05:55:33,713 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:55:33,842 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:55:33,845 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).replaceBeforeLast('币', "qusct", Kla0<Char>().fu1())
2021-03-12 05:55:33,846 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@faeda96]]
2021-03-12 05:55:33,846 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:55:33,971 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:33,975 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@faeda96]
2021-03-12 05:55:33,975 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(277958697).lowercase()
2021-03-12 05:55:33,975 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36e429dc]]
2021-03-12 05:55:33,975 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36e429dc]
2021-03-12 05:55:34,103 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:55:34,106 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:55:34,109 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).takeWhile({a: Char -> true})
2021-03-12 05:55:34,110 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]]
2021-03-12 05:55:34,110 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]
2021-03-12 05:55:34,237 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:55:34,370 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:55:34,374 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:55:34,651 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 05:55:34,658 [main:95] - GENERATED = StringBuilder("tvocl")
2021-03-12 05:55:34,781 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:55:34,785 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).commonSuffixWith(StringBuilder("tvocl"), false)
2021-03-12 05:55:34,785 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a190df7]]
2021-03-12 05:55:34,785 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a190df7]
2021-03-12 05:55:34,909 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:34,912 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).dropLast(969415032)
2021-03-12 05:55:34,912 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d981b77]]
2021-03-12 05:55:34,912 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d981b77]
2021-03-12 05:55:34,913 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).lowercase()
2021-03-12 05:55:34,913 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40b7db4d]]
2021-03-12 05:55:34,913 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40b7db4d]
2021-03-12 05:55:34,913 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).capitalize()
2021-03-12 05:55:34,913 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56ac39b8]]
2021-03-12 05:55:34,913 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56ac39b8]
2021-03-12 05:55:35,040 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:55:35,044 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).substringAfterLast('쫉', Kla0<Char>().fu1())
2021-03-12 05:55:35,044 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ddb68b3]]
2021-03-12 05:55:35,044 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ddb68b3]
2021-03-12 05:55:35,171 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:35,300 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:35,303 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).removeRange(-1048748976, 1169394130)
2021-03-12 05:55:35,303 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58c60e80]]
2021-03-12 05:55:35,303 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:55:35,426 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:35,571 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:35,574 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58c60e80]
2021-03-12 05:55:35,701 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:35,827 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:35,830 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(1149997641, -1465967314).substring(-907528294, -1368625797)
2021-03-12 05:55:35,831 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " of type String is (Kla0<Char>().fu1()).lowercase()
2021-03-12 05:55:35,954 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:55:35,955 [main:66] - Compilation checking started
2021-03-12 05:55:36,321 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.intercepted().resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error((Kla0<Char>().fu1()).lowercase() + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:55:36,323 [main:107] - replacing (exception, Throwable)
2021-03-12 05:55:36,323 [main:50] - replacing exception Throwable
2021-03-12 05:55:36,323 [main:54] - Getting value of type Throwable
2021-03-12 05:55:36,451 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 05:55:36,458 [main:58] - GENERATED VALUE OF TYPE Throwable = CharacterCodingException()
2021-03-12 05:55:36,459 [main:61] - GENERATED IS CALL =true
2021-03-12 05:55:39,100 [main:67] - randomType = Triple<ArrayDeque<ULong>, UInt, Function2<Kla6<UShort>, Sequence<Float?>, Triple<List<Short?>?, Kla5?, String?>>>?
2021-03-12 05:55:39,223 [main:302] - generating value of type = Triple<ArrayDeque<ULong>, UInt, Function2<Kla6<UShort>, Sequence<Float?>, Triple<List<Short?>?, Kla5?, String?>>> false depth = 0
2021-03-12 05:55:39,359 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: ArrayDeque<ULong>, second: UInt, third: Function2<Kla6<UShort>, Sequence<Float?>, Triple<List<Short?>?, Kla5?, String?>>): Triple<ArrayDeque<ULong>, UInt, Function2<Kla6<UShort>, Sequence<Float?>, Triple<List<Short?>?, Kla5?, String?>>> = TODO()
2021-03-12 05:55:39,363 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: ArrayDeque<ULong>, second: UInt, third: Function2<Kla6<UShort>, Sequence<Float?>, Triple<List<Short?>?, Kla5?, String?>>): Triple<ArrayDeque<ULong>, UInt, Function2<Kla6<UShort>, Sequence<Float?>, Triple<List<Short?>?, Kla5?, String?>>> = TODO()
2021-03-12 05:55:39,495 [main:302] - generating value of type = ArrayDeque<ULong> false depth = 3
2021-03-12 05:55:39,626 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<ULong> = TODO()
2021-03-12 05:55:39,630 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<ULong> = TODO()
2021-03-12 05:55:39,943 [main:302] - generating value of type = Int true depth = 6
2021-03-12 05:55:39,946 [main:95] - GENERATED = ArrayDeque<ULong>(-1280053735)
2021-03-12 05:55:39,946 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 05:55:39,949 [main:302] - generating value of type = Function2<Kla6<UShort>, Sequence<Float?>, Triple<List<Short?>?, Kla5?, String?>> false depth = 3
2021-03-12 05:55:39,952 [main:302] - generating value of type = Triple<List<Short?>?, Kla5?, String?> false depth = 4
2021-03-12 05:55:40,086 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: List<Short?>?, second: Kla5?, third: String?): Triple<List<Short?>?, Kla5?, String?> = TODO()
2021-03-12 05:55:40,090 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: List<Short?>?, second: Kla5?, third: String?): Triple<List<Short?>?, Kla5?, String?> = TODO()
2021-03-12 05:55:40,220 [main:302] - generating value of type = List<Short?> false depth = 7
2021-03-12 05:55:40,351 [main:43] - GENERATING CALL OF fun <T> listOf(element: Short?): List<Short?> = TODO()
2021-03-12 05:55:40,355 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(element: Short?): List<Short?> = TODO()
2021-03-12 05:55:40,486 [main:302] - generating value of type = Short true depth = 10
2021-03-12 05:55:40,490 [main:95] - GENERATED = listOf<Short?>(26041)
2021-03-12 05:55:40,490 [main:302] - generating value of type = Kla5 false depth = 7
2021-03-12 05:55:40,493 [main:112] - generating klass Kla5 text = class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}
2021-03-12 05:55:40,493 [main:302] - generating value of type = String true depth = 7
2021-03-12 05:55:40,496 [main:95] - GENERATED = Triple<List<Short?>?, Kla5?, String?>(listOf<Short?>(26041), Kla5(), "lgjke")
2021-03-12 05:55:40,496 [main:95] - GENERATED = Triple<ArrayDeque<ULong>, UInt, Function2<Kla6<UShort>, Sequence<Float?>, Triple<List<Short?>?, Kla5?, String?>>>(ArrayDeque<ULong>(-1280053735), 1551878600.toUInt(), {a: Kla6<UShort>, b: Sequence<Float?> -> Triple<List<Short?>?, Kla5?, String?>(listOf<Short?>(26041), Kla5(), "lgjke")})
2021-03-12 05:55:40,552 [main:106] - GETTING Throwable from String
2021-03-12 05:55:40,577 [main:106] - GETTING Throwable from String
2021-03-12 05:55:40,577 [main:114] - replacement of exception of type Throwable is CharacterCodingException()
2021-03-12 05:55:40,705 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:55:40,706 [main:66] - Compilation checking started
2021-03-12 05:55:41,357 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.intercepted().resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:55:41,361 [main:107] - replacing ({ x ->
    x.intercepted().resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}, Function1<Continuation<String>, Any?>)
2021-03-12 05:55:41,361 [main:50] - replacing { x ->
    x.intercepted().resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
} Function1<Continuation<String>, Any?>
2021-03-12 05:55:41,361 [main:54] - Getting value of type Function1<Continuation<String>, Any?>
2021-03-12 05:55:41,514 [main:302] - generating value of type = Function1<Continuation<String>, Any?> false depth = 0
2021-03-12 05:55:41,517 [main:302] - generating value of type = Any false depth = 1
2021-03-12 05:55:41,517 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<String>, Any?> = {a: Continuation<String> -> "fuqbb"}
2021-03-12 05:55:41,518 [main:61] - GENERATED IS CALL =false
2021-03-12 05:55:41,532 [main:67] - randomType = String?
2021-03-12 05:55:41,666 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:55:41,692 [main:106] - GETTING Function1<Continuation<String>, Any?> from String
2021-03-12 05:55:41,711 [main:106] - GETTING Function1<Continuation<String>, Any?> from String
2021-03-12 05:55:41,711 [main:114] - replacement of { x ->
    x.intercepted().resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
} of type Function1<Continuation<String>, Any?> is {a: Continuation<String> -> "fuqbb"}
2021-03-12 05:55:41,835 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:55:41,835 [main:66] - Compilation checking started
2021-03-12 05:55:42,496 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:55:42,499 [main:107] - replacing (prope2.prope7, Boolean)
2021-03-12 05:55:42,500 [main:50] - replacing prope2.prope7 Boolean
2021-03-12 05:55:42,500 [main:54] - Getting value of type Boolean
2021-03-12 05:55:42,631 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:55:42,634 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:55:42,634 [main:61] - GENERATED IS CALL =false
2021-03-12 05:55:42,799 [main:67] - randomType = Kla7?
2021-03-12 05:55:42,922 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 05:55:42,925 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}
2021-03-12 05:55:42,931 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla7[DeserializedSimpleFunctionDescriptor@38ade138]
2021-03-12 05:55:43,053 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:55:43,054 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5daf7fea]
2021-03-12 05:55:43,054 [main:78] - Generated call from random type = (Kla7())?.equals("sykzt").not()
2021-03-12 05:55:43,055 [main:106] - GETTING Boolean from String
2021-03-12 05:55:43,077 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77ae82e0]]
2021-03-12 05:55:43,078 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:55:43,200 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:43,330 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:43,333 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77ae82e0]
2021-03-12 05:55:43,456 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:55:43,459 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:55:43,463 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(1480016781, 2136661881).all({a: Char -> true})
2021-03-12 05:55:43,463 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]]
2021-03-12 05:55:43,463 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:55:43,586 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:55:43,586 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).equals("oeumw")
2021-03-12 05:55:43,586 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@39afea83]]
2021-03-12 05:55:43,586 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:55:43,710 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:43,835 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:43,838 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@39afea83]
2021-03-12 05:55:43,962 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:55:43,962 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(-1459960368, 1422265049).equals("ophlp")
2021-03-12 05:55:43,962 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@221d65f3]]
2021-03-12 05:55:43,962 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:55:44,087 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@221d65f3]
2021-03-12 05:55:44,211 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:55:44,214 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).equals(null).or(true)
2021-03-12 05:55:44,214 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a24c88]]
2021-03-12 05:55:44,214 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a24c88]
2021-03-12 05:55:44,337 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:55:44,340 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).startsWith(Kla0<Char>().fu1(), true)
2021-03-12 05:55:44,340 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c068836]]
2021-03-12 05:55:44,340 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c068836]
2021-03-12 05:55:44,340 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).none()
2021-03-12 05:55:44,341 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@298bfadd]]
2021-03-12 05:55:44,341 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:55:44,482 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:55:44,483 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@298bfadd]
2021-03-12 05:55:44,607 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:55:44,608 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).equals("kzehf").equals("iqnhm")
2021-03-12 05:55:44,608 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c611e61]]
2021-03-12 05:55:44,608 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:55:44,730 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:44,734 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c611e61]
2021-03-12 05:55:44,857 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:55:44,982 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:55:44,986 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(1233101711).equals('?', false)
2021-03-12 05:55:44,986 [main:113] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@314eea13]]
2021-03-12 05:55:44,986 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@314eea13]
2021-03-12 05:55:44,986 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).isBlank()
2021-03-12 05:55:44,986 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51aeaeb8]]
2021-03-12 05:55:44,986 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51aeaeb8]
2021-03-12 05:55:45,112 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:45,240 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:55:45,370 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:45,495 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:45,622 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:55:45,625 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).regionMatches(-1002210155, StringBuilder(), 1915340880, 1239337011, true)
2021-03-12 05:55:45,625 [main:114] - replacement of prope2.prope7 of type Boolean is (Kla0<Char>().fu1()).equals("kzehf").equals("iqnhm")
2021-03-12 05:55:45,748 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:55:45,749 [main:66] - Compilation checking started
2021-03-12 05:55:46,109 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            (Kla0<Char>().fu1()).equals("kzehf").equals("iqnhm") = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:55:46,111 [main:107] - replacing (prope9 != null, Boolean)
2021-03-12 05:55:46,112 [main:50] - replacing prope9 != null Boolean
2021-03-12 05:55:46,112 [main:54] - Getting value of type Boolean
2021-03-12 05:55:46,234 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:55:46,237 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:55:46,237 [main:61] - GENERATED IS CALL =false
2021-03-12 05:55:46,380 [main:67] - randomType = ULong
2021-03-12 05:55:46,504 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 05:55:46,535 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@4f0da593]
2021-03-12 05:55:46,683 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6a365511]
2021-03-12 05:55:46,814 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:55:46,817 [main:78] - Generated call from random type = (7250850322570847176.toULong()).equals(null).xor(false)
2021-03-12 05:55:46,818 [main:106] - GETTING Boolean from String
2021-03-12 05:55:46,847 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f7bc479]]
2021-03-12 05:55:46,847 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:55:46,986 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:47,122 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:47,126 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f7bc479]
2021-03-12 05:55:47,126 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(1598438440, 122871975).isNotBlank()
2021-03-12 05:55:47,126 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b7db3f2]]
2021-03-12 05:55:47,126 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:55:47,250 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:47,253 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b7db3f2]
2021-03-12 05:55:47,253 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(263699486).isWhitespace()
2021-03-12 05:55:47,254 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f512be2]]
2021-03-12 05:55:47,254 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f512be2]
2021-03-12 05:55:47,376 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:55:47,377 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).length.equals("gnjqb")
2021-03-12 05:55:47,377 [main:113] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@314eea13]]
2021-03-12 05:55:47,377 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@314eea13]
2021-03-12 05:55:47,377 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).isBlank()
2021-03-12 05:55:47,377 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@525fcad2]]
2021-03-12 05:55:47,377 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:55:47,502 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:47,627 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:47,630 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@525fcad2]
2021-03-12 05:55:47,752 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:55:47,880 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:55:47,883 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(1529044807, 1094985538).startsWith('世', true)
2021-03-12 05:55:47,884 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ea7a2d8]]
2021-03-12 05:55:47,884 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:55:48,006 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:48,009 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ea7a2d8]
2021-03-12 05:55:48,009 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(1523475459).isDigit()
2021-03-12 05:55:48,009 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77ae82e0]]
2021-03-12 05:55:48,009 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:55:48,133 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:48,260 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:48,263 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77ae82e0]
2021-03-12 05:55:48,385 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:55:48,388 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:55:48,392 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(-1927751020, -1160452861).all({a: Char -> false})
2021-03-12 05:55:48,392 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@39afea83]]
2021-03-12 05:55:48,392 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:55:48,515 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:48,643 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:48,647 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@39afea83]
2021-03-12 05:55:48,773 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:55:48,773 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(1209548068, -1189856862).equals("lppet")
2021-03-12 05:55:48,773 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@728cebf4]]
2021-03-12 05:55:48,773 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@728cebf4]
2021-03-12 05:55:48,774 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).isNotEmpty()
2021-03-12 05:55:48,774 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@347c5fec]]
2021-03-12 05:55:48,774 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:55:48,917 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:49,052 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:49,055 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@347c5fec]
2021-03-12 05:55:49,184 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:55:49,312 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 05:55:49,316 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 05:55:49,729 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:55:49,732 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 05:55:49,736 [main:95] - GENERATED = Regex("qvkos", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 05:55:49,736 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(-1641477961, -164712531).matches(Regex("qvkos", kotlin.text.RegexOption.IGNORE_CASE))
2021-03-12 05:55:49,736 [main:114] - replacement of prope9 != null of type Boolean is (Kla0<Char>().fu1()).subSequence(-1641477961, -164712531).matches(Regex("qvkos", kotlin.text.RegexOption.IGNORE_CASE))
2021-03-12 05:55:49,858 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:55:49,859 [main:66] - Compilation checking started
2021-03-12 05:55:50,385 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while ((Kla0<Char>().fu1()).subSequence(-1641477961, -164712531).matches(Regex("qvkos", kotlin.text.RegexOption.IGNORE_CASE))) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:55:50,387 [main:107] - replacing (e, Exception)
2021-03-12 05:55:50,387 [main:50] - replacing e Exception
2021-03-12 05:55:50,387 [main:54] - Getting value of type Exception
2021-03-12 05:55:50,518 [main:302] - generating value of type = Exception false depth = 0
2021-03-12 05:55:50,525 [main:58] - GENERATED VALUE OF TYPE Exception = ClassCastException()
2021-03-12 05:55:50,525 [main:61] - GENERATED IS CALL =true
2021-03-12 05:55:50,675 [main:67] - randomType = ULong
2021-03-12 05:55:50,801 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 05:55:50,837 [main:106] - GETTING Exception from String
2021-03-12 05:55:50,860 [main:106] - GETTING Exception from String
2021-03-12 05:55:50,860 [main:114] - replacement of e of type Exception is ClassCastException()
2021-03-12 05:55:50,999 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:55:50,999 [main:66] - Compilation checking started
2021-03-12 05:55:51,678 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${ClassCastException().message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:55:51,680 [main:107] - replacing (prope5.getOrThrow(), Ty4)
2021-03-12 05:55:51,680 [main:50] - replacing prope5.getOrThrow() Ty4
2021-03-12 05:55:51,680 [main:54] - Getting value of type Ty4
2021-03-12 05:55:51,816 [main:302] - generating value of type = Ty4 false depth = 0
2021-03-12 05:55:51,823 [main:58] - GENERATED VALUE OF TYPE Ty4 = 
2021-03-12 05:55:51,836 [main:67] - randomType = Kla5
2021-03-12 05:55:51,968 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 05:55:51,971 [main:112] - generating klass Kla5 text = class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}
2021-03-12 05:55:51,998 [main:106] - GETTING Ty4 from String
2021-03-12 05:55:52,029 [main:106] - GETTING Ty4 from String
2021-03-12 05:55:52,029 [main:111] - Cant find and generate replacement for prope5.getOrThrow() type Ty4
2021-03-12 05:55:52,029 [main:107] - replacing ("fail 4", String)
2021-03-12 05:55:52,029 [main:50] - replacing "fail 4" String
2021-03-12 05:55:52,030 [main:54] - Getting value of type String
2021-03-12 05:55:52,164 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:55:52,167 [main:58] - GENERATED VALUE OF TYPE String = "birme"
2021-03-12 05:55:52,167 [main:61] - GENERATED IS CALL =false
2021-03-12 05:55:52,492 [main:67] - randomType = Array<Kla6<Kla2>>
2021-03-12 05:55:52,626 [main:302] - generating value of type = Array<Kla6<Kla2>> false depth = 0
2021-03-12 05:55:52,764 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Kla6<Kla2>): Array<Kla6<Kla2>> = TODO()
2021-03-12 05:55:52,769 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Kla6<Kla2>): Array<Kla6<Kla2>> = TODO()
2021-03-12 05:55:52,916 [main:302] - generating value of type = Kla6<Kla2> false depth = 3
2021-03-12 05:55:52,919 [main:112] - generating klass Kla6 text = abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}
2021-03-12 05:55:53,797 [main:302] - generating value of type = Kla3<Kla2> false depth = 5
2021-03-12 05:55:53,800 [main:112] - generating klass Kla3 text = private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}
2021-03-12 05:55:54,249 [main:194] - Type params = [Kla2]
2021-03-12 05:55:54,379 [main:302] - generating value of type = Function0<Unit> false depth = 7
2021-03-12 05:55:54,382 [main:302] - generating value of type = Unit false depth = 8
2021-03-12 05:55:54,512 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:55:54,516 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:55:54,936 [main:302] - generating value of type = Int true depth = 11
2021-03-12 05:55:54,939 [main:302] - generating value of type = Function1<Int, Unit> false depth = 11
2021-03-12 05:55:54,942 [main:302] - generating value of type = Unit false depth = 12
2021-03-12 05:55:55,073 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:55:55,077 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:55:55,496 [main:302] - generating value of type = Boolean true depth = 15
2021-03-12 05:55:55,499 [main:302] - generating value of type = Function0<Any> false depth = 15
2021-03-12 05:55:55,502 [main:302] - generating value of type = Any false depth = 16
2021-03-12 05:55:55,503 [main:95] - GENERATED = check(true, { })
2021-03-12 05:55:55,503 [main:95] - GENERATED = repeat(-217919222, {a: Int -> check(true, { })})
2021-03-12 05:55:55,644 [main:302] - generating value of type = Continuation<Kla2> false depth = 7
2021-03-12 05:55:55,772 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Kla2>)->kotlin.Unit): Contuation<Kla2> = TODO()
2021-03-12 05:55:55,776 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Kla2>)->kotlin.Unit): Contuation<Kla2> = TODO()
2021-03-12 05:55:56,204 [main:302] - generating value of type = CoroutineContext false depth = 10
2021-03-12 05:55:56,383 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:55:56,387 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:55:56,667 [main:302] - generating value of type = Key<*> false depth = 13
2021-03-12 05:55:56,798 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:55:56,802 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:55:57,237 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:55:57,237 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:55:57,237 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Kla2>)->kotlin.Unit): Contuation<Kla2> = TODO()
2021-03-12 05:55:57,238 [main:95] - GENERATED = arrayOf<Kla6<Kla2>>(Kla3<Kla2>({ repeat(-217919222, {a: Int -> check(true, { })})}, ))
2021-03-12 05:55:57,252 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@11ad162d]
2021-03-12 05:55:57,373 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:55:57,506 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:55:57,632 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:55:57,761 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:55:57,889 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:55:58,017 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:55:58,021 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:55:58,293 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:55:58,297 [main:95] - GENERATED = StringBuilder("ysxfl")
2021-03-12 05:55:58,420 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 05:55:58,423 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:55:58,550 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:55:58,554 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:55:58,859 [main:302] - generating value of type = Int true depth = 4
2021-03-12 05:55:58,862 [main:95] - GENERATED = StringBuilder(-1651887441)
2021-03-12 05:55:58,863 [main:78] - Generated call from random type = (arrayOf<Kla6<Kla2>>(Kla3<Kla2>({ repeat(-217919222, {a: Int -> check(true, { })})}, ))).joinToString("fewdb", "qrabl", "xkrcz", 1035613431, StringBuilder("ysxfl"), {a: T -> StringBuilder(-1651887441)})
2021-03-12 05:55:58,863 [main:114] - replacement of "fail 4" of type String is (arrayOf<Kla6<Kla2>>(Kla3<Kla2>({ repeat(-217919222, {a: Int -> check(true, { })})}, ))).joinToString("fewdb", "qrabl", "xkrcz", 1035613431, StringBuilder("ysxfl"), {a: T -> StringBuilder(-1651887441)})
2021-03-12 05:55:58,988 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:55:58,989 [main:66] - Compilation checking started
2021-03-12 05:55:59,429 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${ClassCastException().message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return (arrayOf<Kla6<Kla2>>(Kla3<Kla2>({ repeat(-217919222, {a: Int -> check(true, { })})}, ))).joinToString("fewdb", "qrabl", "xkrcz", 1035613431, StringBuilder("ysxfl"), {a: T -> StringBuilder(-1651887441)})
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:55:59,431 [main:107] - replacing ("tail-call optimization hit: method ", String)
2021-03-12 05:55:59,431 [main:50] - replacing "tail-call optimization hit: method " String
2021-03-12 05:55:59,431 [main:54] - Getting value of type String
2021-03-12 05:55:59,573 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:55:59,576 [main:58] - GENERATED VALUE OF TYPE String = "bxgus"
2021-03-12 05:55:59,576 [main:61] - GENERATED IS CALL =false
2021-03-12 05:55:59,721 [main:67] - randomType = Short
2021-03-12 05:55:59,846 [main:302] - generating value of type = Short true depth = 0
2021-03-12 05:55:59,894 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@502e364]
2021-03-12 05:55:59,894 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52a8be22]
2021-03-12 05:56:00,022 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:00,025 [main:78] - Generated call from random type = (-13179).toInt().toString(588399606)
2021-03-12 05:56:00,026 [main:106] - GETTING String from String
2021-03-12 05:56:00,049 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52a8be22]]
2021-03-12 05:56:00,049 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52a8be22]
2021-03-12 05:56:00,176 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:00,179 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).length.toString(1537399791)
2021-03-12 05:56:00,179 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280ba906]]
2021-03-12 05:56:00,179 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280ba906]
2021-03-12 05:56:00,180 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).trimEnd()
2021-03-12 05:56:00,180 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]]
2021-03-12 05:56:00,180 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:56:00,305 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:00,437 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:00,441 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]
2021-03-12 05:56:00,563 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:56:00,694 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:56:00,697 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(1337660783, -1262261409).commonSuffixWith("ezlfa", false)
2021-03-12 05:56:00,697 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51f6003c]]
2021-03-12 05:56:00,697 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51f6003c]
2021-03-12 05:56:00,822 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:56:00,827 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).replaceBefore('໐', Kla0<Char>().fu1(), fu0<String>({ "bjgag"}))
2021-03-12 05:56:00,827 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7404f92d]]
2021-03-12 05:56:00,828 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7404f92d]
2021-03-12 05:56:00,956 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:56:00,959 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).substringAfter('ᆾ', fu0<String>({ "bjgag"}))
2021-03-12 05:56:00,960 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66b9d2d1]]
2021-03-12 05:56:00,960 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66b9d2d1]
2021-03-12 05:56:00,960 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).uppercase()
2021-03-12 05:56:00,960 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43da71d6]]
2021-03-12 05:56:00,960 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43da71d6]
2021-03-12 05:56:01,087 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:56:01,093 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).removeSuffix("puppn")
2021-03-12 05:56:01,094 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@238f1ef2]]
2021-03-12 05:56:01,094 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:56:01,218 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:01,347 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:01,350 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@238f1ef2]
2021-03-12 05:56:01,474 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:56:01,614 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:56:01,617 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(-1697791430, -328591023).commonPrefixWith("fxphe", false)
2021-03-12 05:56:01,617 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40b7db4d]]
2021-03-12 05:56:01,617 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40b7db4d]
2021-03-12 05:56:01,618 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).capitalize()
2021-03-12 05:56:01,618 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@af7c122]]
2021-03-12 05:56:01,618 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@af7c122]
2021-03-12 05:56:01,745 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:01,748 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).substring(404890232)
2021-03-12 05:56:01,748 [main:114] - replacement of "tail-call optimization hit: method " of type String is (Kla0<Char>().fu1()).substringAfter('ᆾ', fu0<String>({ "bjgag"}))
2021-03-12 05:56:01,870 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:56:01,870 [main:66] - Compilation checking started
2021-03-12 05:56:02,269 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${ClassCastException().message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((Kla0<Char>().fu1()).substringAfter('ᆾ', fu0<String>({ "bjgag"})) + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:56:02,272 [main:107] - replacing (prope5.exceptionOrNull(), Throwable?)
2021-03-12 05:56:02,272 [main:50] - replacing prope5.exceptionOrNull() Throwable?
2021-03-12 05:56:02,272 [main:54] - Getting value of type Throwable?
2021-03-12 05:56:02,397 [main:58] - GENERATED VALUE OF TYPE Throwable? = null
2021-03-12 05:56:02,397 [main:61] - GENERATED IS CALL =false
2021-03-12 05:56:02,856 [main:67] - randomType = Kla3<Kla6<Char>>
2021-03-12 05:56:02,978 [main:302] - generating value of type = Kla3<Kla6<Char>> false depth = 0
2021-03-12 05:56:02,981 [main:112] - generating klass Kla3 text = private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}
2021-03-12 05:56:03,267 [main:194] - Type params = [Kla6<Char>]
2021-03-12 05:56:03,408 [main:302] - generating value of type = Function0<Unit> false depth = 2
2021-03-12 05:56:03,412 [main:302] - generating value of type = Unit false depth = 3
2021-03-12 05:56:03,545 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:56:03,549 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:56:03,834 [main:302] - generating value of type = Any false depth = 6
2021-03-12 05:56:03,834 [main:95] - GENERATED = print("yluhi")
2021-03-12 05:56:03,979 [main:302] - generating value of type = Continuation<Kla6<Char>> false depth = 2
2021-03-12 05:56:04,111 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Kla6<Char>>)->kotlin.Unit): Contuation<Kla6<Char>> = TODO()
2021-03-12 05:56:04,116 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Kla6<Char>>)->kotlin.Unit): Contuation<Kla6<Char>> = TODO()
2021-03-12 05:56:04,573 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-12 05:56:04,700 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:56:04,704 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:56:04,985 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-12 05:56:05,119 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:56:05,123 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:56:05,554 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:56:05,554 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:56:05,554 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Kla6<Char>>)->kotlin.Unit): Contuation<Kla6<Char>> = TODO()
2021-03-12 05:56:05,584 [main:106] - GETTING Throwable? from String
2021-03-12 05:56:05,604 [main:106] - GETTING Throwable? from String
2021-03-12 05:56:05,604 [main:114] - replacement of prope5.exceptionOrNull() of type Throwable? is null
2021-03-12 05:56:05,724 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(NULL)
2021-03-12 05:56:05,724 [main:66] - Compilation checking started
2021-03-12 05:56:06,344 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${ClassCastException().message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:56:06,347 [main:107] - replacing (prope5, Any?)
2021-03-12 05:56:06,348 [main:50] - replacing prope5 Any?
2021-03-12 05:56:06,348 [main:54] - Getting value of type Any?
2021-03-12 05:56:06,510 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:56:06,511 [main:58] - GENERATED VALUE OF TYPE Any? = "bygsw"
2021-03-12 05:56:06,511 [main:61] - GENERATED IS CALL =false
2021-03-12 05:56:06,524 [main:67] - randomType = String?
2021-03-12 05:56:06,665 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:56:06,694 [main:106] - GETTING Any? from String
2021-03-12 05:56:06,718 [main:106] - GETTING Any? from String
2021-03-12 05:56:06,719 [main:114] - replacement of prope5 of type Any? is "bygsw"
2021-03-12 05:56:06,839 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 05:56:06,839 [main:66] - Compilation checking started
2021-03-12 05:56:07,257 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${ClassCastException().message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this."bygsw" = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:56:07,260 [main:107] - replacing ({
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    }, Any?)
2021-03-12 05:56:07,260 [main:50] - replacing {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } Any?
2021-03-12 05:56:07,260 [main:54] - Getting value of type Any?
2021-03-12 05:56:07,405 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:56:07,406 [main:58] - GENERATED VALUE OF TYPE Any? = "jvitr"
2021-03-12 05:56:07,406 [main:61] - GENERATED IS CALL =false
2021-03-12 05:56:07,840 [main:67] - randomType = LinkedHashMap<Short, UInt>
2021-03-12 05:56:07,963 [main:302] - generating value of type = LinkedHashMap<Short, UInt> false depth = 0
2021-03-12 05:56:08,096 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashMap<Short, UInt> = TODO()
2021-03-12 05:56:08,100 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashMap<Short, UInt> = TODO()
2021-03-12 05:56:08,520 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:56:08,524 [main:302] - generating value of type = Float true depth = 3
2021-03-12 05:56:08,527 [main:95] - GENERATED = LinkedHashMap<Short, UInt>(1833998233, 0.5680174f)
2021-03-12 05:56:08,695 [main:106] - GETTING Any? from String
2021-03-12 05:56:08,724 [main:106] - GETTING Any? from String
2021-03-12 05:56:08,724 [main:114] - replacement of {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } of type Any? is "jvitr"
2021-03-12 05:56:08,853 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-12 05:56:08,854 [main:66] - Compilation checking started
2021-03-12 05:56:08,858 [main:71] - Wrong syntax or breaks conditions
2021-03-12 05:56:08,858 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try "jvitr" catch (e: Exception) {
        "Exception: ${ClassCastException().message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:56:08,860 [main:107] - replacing ("fail 2", String)
2021-03-12 05:56:08,861 [main:50] - replacing "fail 2" String
2021-03-12 05:56:08,861 [main:54] - Getting value of type String
2021-03-12 05:56:08,984 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:56:08,987 [main:58] - GENERATED VALUE OF TYPE String = "tuykp"
2021-03-12 05:56:08,988 [main:61] - GENERATED IS CALL =false
2021-03-12 05:56:09,000 [main:67] - randomType = String?
2021-03-12 05:56:09,123 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:56:09,147 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:56:09,268 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:09,392 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:09,396 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f8dedf]
2021-03-12 05:56:09,518 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:56:09,645 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 05:56:09,649 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 05:56:10,116 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:56:10,119 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 05:56:10,249 [main:43] - GENERATING CALL OF fun <E> HashSet(elements: kotlin.collections.Collection<RegexOption>): Set<RegexOption> = TODO()
2021-03-12 05:56:10,253 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(elements: kotlin.collections.Collection<RegexOption>): Set<RegexOption> = TODO()
2021-03-12 05:56:10,546 [main:302] - generating value of type = Collection<RegexOption> false depth = 6
2021-03-12 05:56:10,678 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): Collection<RegexOption> = TODO()
2021-03-12 05:56:10,682 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): Collection<RegexOption> = TODO()
2021-03-12 05:56:10,815 [main:95] - GENERATED = linkedSetOf<RegexOption>()
2021-03-12 05:56:10,815 [main:95] - GENERATED = HashSet<RegexOption>(linkedSetOf<RegexOption>())
2021-03-12 05:56:10,815 [main:95] - GENERATED = Regex("xubni", HashSet<RegexOption>(linkedSetOf<RegexOption>()))
2021-03-12 05:56:10,936 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 05:56:10,939 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:56:10,946 [main:78] - Generated call from random type = ("yzdam")?.subSequence(57584994, 925539407).replace(Regex("xubni", HashSet<RegexOption>(linkedSetOf<RegexOption>())), {a: MatchResult -> StringBuilder()})
2021-03-12 05:56:10,946 [main:106] - GETTING String from String
2021-03-12 05:56:10,964 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5898cc8d]]
2021-03-12 05:56:10,964 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:56:11,087 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:11,090 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5898cc8d]
2021-03-12 05:56:11,090 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(685606132).uppercase()
2021-03-12 05:56:11,090 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ab1054]]
2021-03-12 05:56:11,091 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ab1054]
2021-03-12 05:56:11,211 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:11,334 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:56:11,337 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).padStart(477147726, '苨')
2021-03-12 05:56:11,337 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4196f0ef]]
2021-03-12 05:56:11,338 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4196f0ef]
2021-03-12 05:56:11,458 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 05:56:11,461 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:56:11,464 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).filterIndexed({a: Int, b: Char -> false})
2021-03-12 05:56:11,464 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@530ec99c]]
2021-03-12 05:56:11,464 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@530ec99c]
2021-03-12 05:56:11,587 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:11,591 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).drop(-491439198)
2021-03-12 05:56:11,591 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f567b3f]]
2021-03-12 05:56:11,591 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f567b3f]
2021-03-12 05:56:11,714 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:56:11,838 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:56:11,964 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:56:11,967 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).replaceBeforeLast('鸑', "oushp", "jitma")
2021-03-12 05:56:11,967 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d51a508]]
2021-03-12 05:56:11,967 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d51a508]
2021-03-12 05:56:11,968 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).trimIndent()
2021-03-12 05:56:11,968 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c04dd27]]
2021-03-12 05:56:11,968 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c04dd27]
2021-03-12 05:56:11,968 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).concat(Kla0<Char>().fu1())
2021-03-12 05:56:11,968 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52a8be22]]
2021-03-12 05:56:11,968 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52a8be22]
2021-03-12 05:56:12,092 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:12,095 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).length.toString(905191316)
2021-03-12 05:56:12,095 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a190df7]]
2021-03-12 05:56:12,095 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a190df7]
2021-03-12 05:56:12,217 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:12,220 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).dropLast(-203478313)
2021-03-12 05:56:12,220 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7404f92d]]
2021-03-12 05:56:12,220 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7404f92d]
2021-03-12 05:56:12,341 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:56:12,465 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:56:12,468 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).substringAfter('靂', "ifoif")
2021-03-12 05:56:12,468 [main:114] - replacement of "fail 2" of type String is Kla0<Char>().fu1()
2021-03-12 05:56:12,589 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:56:12,590 [main:66] - Compilation checking started
2021-03-12 05:56:12,975 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${ClassCastException().message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return Kla0<Char>().fu1()
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:56:12,977 [main:107] - replacing (prope3, String?)
2021-03-12 05:56:12,977 [main:50] - replacing prope3 String?
2021-03-12 05:56:12,977 [main:54] - Getting value of type String?
2021-03-12 05:56:13,109 [main:58] - GENERATED VALUE OF TYPE String? = null
2021-03-12 05:56:13,109 [main:61] - GENERATED IS CALL =false
2021-03-12 05:56:13,254 [main:67] - randomType = UInt
2021-03-12 05:56:13,378 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 05:56:13,416 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@9bd1e6d]
2021-03-12 05:56:13,417 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2263d4a7]
2021-03-12 05:56:13,541 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:13,544 [main:78] - Generated call from random type = (1822787696.toUInt()).toUByte().toString(-1170802858)
2021-03-12 05:56:13,544 [main:106] - GETTING String? from String
2021-03-12 05:56:13,567 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6969b325]]
2021-03-12 05:56:13,567 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:56:13,692 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:13,695 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6969b325]
2021-03-12 05:56:13,695 [main:117] - GENERATED CALL = (Kla0<Char>().fu1())?.get(1035805099).plus(Kla0<Char>().fu1())
2021-03-12 05:56:13,695 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65639ae6]]
2021-03-12 05:56:13,695 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65639ae6]
2021-03-12 05:56:13,821 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:56:13,824 [main:117] - GENERATED CALL = (Kla0<Char>().fu1())?.replaceAfterLast('', fu0<String>({ "bjgag"}), fu0<String>({ "bjgag"}))
2021-03-12 05:56:13,824 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6059c509]]
2021-03-12 05:56:13,824 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6059c509]
2021-03-12 05:56:13,945 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:14,071 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:14,196 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:56:14,203 [main:117] - GENERATED CALL = (Kla0<Char>().fu1())?.replaceRange(1405671025, 1031197824, "tasmp")
2021-03-12 05:56:14,203 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56ac39b8]]
2021-03-12 05:56:14,203 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56ac39b8]
2021-03-12 05:56:14,323 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:56:14,326 [main:117] - GENERATED CALL = (Kla0<Char>().fu1())?.substringAfterLast('Ꞇ', fu0<String>({ "bjgag"}))
2021-03-12 05:56:14,327 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25a57319]]
2021-03-12 05:56:14,327 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25a57319]
2021-03-12 05:56:14,327 [main:117] - GENERATED CALL = (Kla0<Char>().fu1())?.replaceIndentByMargin(Kla0<Char>().fu1(), Kla0<Char>().fu1())
2021-03-12 05:56:14,327 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ab1054]]
2021-03-12 05:56:14,327 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ab1054]
2021-03-12 05:56:14,447 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:14,570 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:56:14,574 [main:117] - GENERATED CALL = (Kla0<Char>().fu1())?.padStart(41198409, '玱')
2021-03-12 05:56:14,574 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122af64]]
2021-03-12 05:56:14,574 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122af64]
2021-03-12 05:56:14,695 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:14,698 [main:117] - GENERATED CALL = (Kla0<Char>().fu1())?.repeat(1593747065)
2021-03-12 05:56:14,698 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe54abf]]
2021-03-12 05:56:14,698 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe54abf]
2021-03-12 05:56:14,698 [main:117] - GENERATED CALL = (Kla0<Char>().fu1())?.trim()
2021-03-12 05:56:14,698 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58c60e80]]
2021-03-12 05:56:14,698 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:56:14,819 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:14,947 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:14,950 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58c60e80]
2021-03-12 05:56:15,071 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:15,194 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:15,198 [main:117] - GENERATED CALL = (Kla0<Char>().fu1())?.subSequence(449172352, -1446457147).substring(1823259740, -652963998)
2021-03-12 05:56:15,357 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ddb68b3]]
2021-03-12 05:56:15,357 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ddb68b3]
2021-03-12 05:56:15,477 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:15,599 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:15,603 [main:117] - GENERATED CALL = (Kla0<Char>().fu1())?.removeRange(251301692, 291369301)
2021-03-12 05:56:15,603 [main:114] - replacement of prope3 of type String? is (1822787696.toUInt()).toUByte().toString(-1170802858)
2021-03-12 05:56:15,723 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:56:15,723 [main:66] - Compilation checking started
2021-03-12 05:56:16,127 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                (1822787696.toUInt()).toUByte().toString(-1170802858) = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${ClassCastException().message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        dispatcher()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:56:16,129 [main:107] - replacing (dispatcher, Function0<Unit>)
2021-03-12 05:56:16,129 [main:50] - replacing dispatcher Function0<Unit>
2021-03-12 05:56:16,130 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:56:16,251 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:56:16,254 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:56:16,384 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:56:16,389 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:56:16,800 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:56:16,803 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 05:56:16,806 [main:302] - generating value of type = Any false depth = 5
2021-03-12 05:56:16,806 [main:95] - GENERATED = require(true, { "uzbxk"})
2021-03-12 05:56:16,806 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true, { "uzbxk"})}
2021-03-12 05:56:16,807 [main:61] - GENERATED IS CALL =false
2021-03-12 05:56:17,099 [main:67] - randomType = Long?
2021-03-12 05:56:17,219 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:56:17,256 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:56:17,279 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:56:17,280 [main:114] - replacement of dispatcher of type Function0<Unit> is { require(true, { "uzbxk"})}
2021-03-12 05:56:17,405 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:56:17,406 [main:66] - Compilation checking started
2021-03-12 05:56:17,995 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${ClassCastException().message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:56:17,997 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-12 05:56:17,997 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-12 05:56:17,997 [main:54] - Getting value of type Boolean
2021-03-12 05:56:18,125 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:56:18,128 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:56:18,128 [main:61] - GENERATED IS CALL =false
2021-03-12 05:56:18,141 [main:67] - randomType = Kla4
2021-03-12 05:56:18,272 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 05:56:18,276 [main:112] - generating klass Kla4 text = open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}
2021-03-12 05:56:18,398 [main:194] - Type params = []
2021-03-12 05:56:18,520 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 05:56:18,647 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:56:18,651 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:56:18,965 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 05:56:19,114 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:56:19,121 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:56:19,556 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-12 05:56:19,689 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:56:19,693 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:56:20,121 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-12 05:56:20,252 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:56:20,256 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:56:20,678 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:56:20,679 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:56:20,679 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:56:20,679 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:56:20,692 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@37de98a2]
2021-03-12 05:56:20,813 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:56:20,814 [main:78] - Generated call from random type = (Kla4()).context.equals("nelji")
2021-03-12 05:56:20,815 [main:106] - GETTING Boolean from String
2021-03-12 05:56:20,837 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22d47d25]]
2021-03-12 05:56:20,837 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:56:20,958 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:20,961 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22d47d25]
2021-03-12 05:56:20,961 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).get(1260087412).isLowSurrogate()
2021-03-12 05:56:20,961 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@488da598]]
2021-03-12 05:56:20,961 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:56:21,083 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:21,087 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@488da598]
2021-03-12 05:56:21,087 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).get(797113174).isTitleCase()
2021-03-12 05:56:21,087 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@221d65f3]]
2021-03-12 05:56:21,087 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:56:21,208 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:56:21,208 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@221d65f3]
2021-03-12 05:56:21,329 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:56:21,332 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).equals("hgsws").or(true)
2021-03-12 05:56:21,333 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f512be2]]
2021-03-12 05:56:21,333 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f512be2]
2021-03-12 05:56:21,452 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:56:21,453 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).length.equals("fouwq")
2021-03-12 05:56:21,453 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@314eea13]]
2021-03-12 05:56:21,453 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:56:21,573 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:21,698 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:21,702 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@314eea13]
2021-03-12 05:56:21,702 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(506405424, -633043574).isBlank()
2021-03-12 05:56:21,702 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5755f025]]
2021-03-12 05:56:21,702 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:56:21,850 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:56:21,850 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5755f025]
2021-03-12 05:56:21,975 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:56:21,979 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).equals("ajhvw").and(true)
2021-03-12 05:56:21,979 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d068465]]
2021-03-12 05:56:21,979 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:56:22,102 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:22,224 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:22,227 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d068465]
2021-03-12 05:56:22,347 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:22,350 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(676186253, 441786091).hasSurrogatePairAt(-1218905905)
2021-03-12 05:56:22,350 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6a365511]]
2021-03-12 05:56:22,350 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:56:22,472 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:56:22,472 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6a365511]
2021-03-12 05:56:22,592 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:56:22,595 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).equals("xguqh").xor(false)
2021-03-12 05:56:22,595 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@525fcad2]]
2021-03-12 05:56:22,595 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:56:22,720 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:22,843 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:22,846 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@525fcad2]
2021-03-12 05:56:22,967 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:56:23,092 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:56:23,096 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(410019931, -1690959668).startsWith('墙', true)
2021-03-12 05:56:23,096 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a24c88]]
2021-03-12 05:56:23,096 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a24c88]
2021-03-12 05:56:23,226 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:56:23,229 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).startsWith(Kla0<Char>().fu1(), true)
2021-03-12 05:56:23,230 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (fu0<String>({ "bjgag"})).equals("hgsws").or(true)
2021-03-12 05:56:23,357 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:56:23,358 [main:66] - Compilation checking started
2021-03-12 05:56:23,955 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${ClassCastException().message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:56:23,958 [main:107] - replacing (prope5, Result<Ty4>)
2021-03-12 05:56:23,958 [main:50] - replacing prope5 Result<Ty4>
2021-03-12 05:56:23,958 [main:54] - Getting value of type Result<Ty4>
2021-03-12 05:56:24,092 [main:302] - generating value of type = Result<Ty4> false depth = 0
2021-03-12 05:56:24,218 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty4): Result<Ty4> = TODO()
2021-03-12 05:56:24,223 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty4): Result<Ty4> = TODO()
2021-03-12 05:56:24,497 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty4): Result<Ty4> = TODO()
2021-03-12 05:56:24,497 [main:58] - GENERATED VALUE OF TYPE Result<Ty4> = 
2021-03-12 05:56:24,510 [main:67] - randomType = Kla7
2021-03-12 05:56:24,629 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 05:56:24,633 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}
2021-03-12 05:56:24,640 [main:106] - GETTING Result<Ty4> from String
2021-03-12 05:56:24,663 [main:106] - GETTING Result<Ty4> from String
2021-03-12 05:56:24,663 [main:111] - Cant find and generate replacement for prope5 type Result<Ty4>
2021-03-12 05:56:24,663 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-12 05:56:24,663 [main:50] - replacing prope8 Function0<Unit>
2021-03-12 05:56:24,663 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:56:24,786 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:56:24,789 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:56:24,940 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:56:24,944 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:56:25,220 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 05:56:25,224 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 05:56:25,350 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:56:25,354 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:56:25,621 [main:302] - generating value of type = Any false depth = 8
2021-03-12 05:56:25,621 [main:95] - GENERATED = println("ndbxi")
2021-03-12 05:56:25,621 [main:95] - GENERATED = contract({ println("ndbxi")})
2021-03-12 05:56:25,621 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ println("ndbxi")})}
2021-03-12 05:56:25,621 [main:61] - GENERATED IS CALL =false
2021-03-12 05:56:26,637 [main:67] - randomType = LinkedHashMap<Short, Kla0<LinkedHashMap<Short, Double?>>>
2021-03-12 05:56:26,756 [main:302] - generating value of type = LinkedHashMap<Short, Kla0<LinkedHashMap<Short, Double?>>> false depth = 0
2021-03-12 05:56:26,885 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashMap<Short, Kla0<LinkedHashMap<Short, Double?>>> = TODO()
2021-03-12 05:56:26,889 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashMap<Short, Kla0<LinkedHashMap<Short, Double?>>> = TODO()
2021-03-12 05:56:27,302 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:56:27,305 [main:302] - generating value of type = Float true depth = 3
2021-03-12 05:56:27,308 [main:95] - GENERATED = LinkedHashMap<Short, Kla0<LinkedHashMap<Short, Double?>>>(1418860098, 0.73785734f)
2021-03-12 05:56:27,506 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:56:27,525 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:56:27,525 [main:114] - replacement of prope8 of type Function0<Unit> is { contract({ println("ndbxi")})}
2021-03-12 05:56:27,646 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:56:27,646 [main:66] - Compilation checking started
2021-03-12 05:56:28,052 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${ClassCastException().message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        { contract({ println("ndbxi")})}()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:56:28,054 [main:107] - replacing (prope2, Kla8)
2021-03-12 05:56:28,054 [main:50] - replacing prope2 Kla8
2021-03-12 05:56:28,054 [main:54] - Getting value of type Kla8
2021-03-12 05:56:28,181 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 05:56:28,184 [main:112] - generating klass Kla8 text = class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:56:28,184 [main:58] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-12 05:56:28,184 [main:61] - GENERATED IS CALL =true
2021-03-12 05:56:28,330 [main:67] - randomType = Long
2021-03-12 05:56:28,451 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:56:28,486 [main:106] - GETTING Kla8 from String
2021-03-12 05:56:28,504 [main:106] - GETTING Kla8 from String
2021-03-12 05:56:28,504 [main:114] - replacement of prope2 of type Kla8 is Kla8()
2021-03-12 05:56:28,626 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:56:28,626 [main:66] - Compilation checking started
2021-03-12 05:56:29,221 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${ClassCastException().message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:56:29,225 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-12 05:56:29,225 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-12 05:56:29,225 [main:54] - Getting value of type String
2021-03-12 05:56:29,364 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:56:29,367 [main:58] - GENERATED VALUE OF TYPE String = "vswbt"
2021-03-12 05:56:29,367 [main:61] - GENERATED IS CALL =false
2021-03-12 05:56:30,239 [main:67] - randomType = Function2<Set<Char>, Long, Array<Boolean>>
2021-03-12 05:56:30,239 [main:106] - GETTING String from String
2021-03-12 05:56:30,257 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17458d64]]
2021-03-12 05:56:30,257 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17458d64]
2021-03-12 05:56:30,258 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).reversed()
2021-03-12 05:56:30,258 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a90b83]]
2021-03-12 05:56:30,258 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a90b83]
2021-03-12 05:56:30,378 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:56:30,381 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:56:30,384 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).dropLastWhile({a: Char -> false})
2021-03-12 05:56:30,384 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d51a508]]
2021-03-12 05:56:30,384 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d51a508]
2021-03-12 05:56:30,385 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).trimIndent()
2021-03-12 05:56:30,385 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c04dd27]]
2021-03-12 05:56:30,385 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c04dd27]
2021-03-12 05:56:30,385 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).concat(Kla0<Char>().fu1())
2021-03-12 05:56:30,385 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9c1180]]
2021-03-12 05:56:30,385 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9c1180]
2021-03-12 05:56:30,505 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:56:30,511 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).removePrefix("ycpdt")
2021-03-12 05:56:30,511 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1571a09e]]
2021-03-12 05:56:30,511 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1571a09e]
2021-03-12 05:56:30,632 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:56:30,636 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).replaceAfter('', Kla0<Char>().fu1(), fu0<String>({ "bjgag"}))
2021-03-12 05:56:30,636 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65639ae6]]
2021-03-12 05:56:30,636 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65639ae6]
2021-03-12 05:56:30,755 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:56:30,909 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:56:30,913 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).replaceAfterLast('쿹', fu0<String>({ "bjgag"}), "evgwf")
2021-03-12 05:56:30,913 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52a8be22]]
2021-03-12 05:56:30,913 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52a8be22]
2021-03-12 05:56:31,032 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:31,036 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).length.toString(-214453517)
2021-03-12 05:56:31,036 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f7cab66]]
2021-03-12 05:56:31,036 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f7cab66]
2021-03-12 05:56:31,036 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).toUpperCase()
2021-03-12 05:56:31,036 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b3bfac]]
2021-03-12 05:56:31,036 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b3bfac]
2021-03-12 05:56:31,158 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:31,161 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).take(-1169084850)
2021-03-12 05:56:31,161 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is (fu0<String>({ "bjgag"})).toUpperCase()
2021-03-12 05:56:31,280 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:56:31,281 [main:66] - Compilation checking started
2021-03-12 05:56:31,848 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${ClassCastException().message}"
    }

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:56:31,850 [main:107] - replacing (try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${ClassCastException().message}"
    }, Any?)
2021-03-12 05:56:31,851 [main:50] - replacing try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${ClassCastException().message}"
    } Any?
2021-03-12 05:56:31,851 [main:54] - Getting value of type Any?
2021-03-12 05:56:31,978 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:56:31,978 [main:58] - GENERATED VALUE OF TYPE Any? = "svljj"
2021-03-12 05:56:31,978 [main:61] - GENERATED IS CALL =false
2021-03-12 05:56:32,264 [main:67] - randomType = ArrayList<Double>
2021-03-12 05:56:32,385 [main:302] - generating value of type = ArrayList<Double> false depth = 0
2021-03-12 05:56:32,512 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Double): ArrayList<Double> = TODO()
2021-03-12 05:56:32,516 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Double): ArrayList<Double> = TODO()
2021-03-12 05:56:32,643 [main:302] - generating value of type = Double true depth = 3
2021-03-12 05:56:32,646 [main:95] - GENERATED = arrayListOf<Double>(0.14774669294208653)
2021-03-12 05:56:32,799 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@476cd442]
2021-03-12 05:56:32,799 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@7e357cd1]
2021-03-12 05:56:32,920 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:32,923 [main:78] - Generated call from random type = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)
2021-03-12 05:56:32,924 [main:106] - GETTING Any? from String
2021-03-12 05:56:32,943 [main:106] - GETTING Any? from String
2021-03-12 05:56:32,943 [main:114] - replacement of try {
        c.startCoroutineUninterceptedOrReturn(object: Kla6<String>() {
            override val context: CoroutineContext
                get() =  Kla2 { (5021.toUShort()).compareTo(36.toUByte()).inv() }

            override fun resumeWithException(exception: Throwable) {
                prope3 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope3 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${ClassCastException().message}"
    } of type Any? is (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)
2021-03-12 05:56:33,064 [main:33] - Trying to replace Element(TRY) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:56:33,064 [main:66] - Compilation checking started
2021-03-12 05:56:33,756 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:56:33,758 [main:107] - replacing (checkFinished && !prope7, Boolean)
2021-03-12 05:56:33,758 [main:50] - replacing checkFinished && !prope7 Boolean
2021-03-12 05:56:33,759 [main:54] - Getting value of type Boolean
2021-03-12 05:56:33,886 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:56:33,888 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:56:33,889 [main:61] - GENERATED IS CALL =false
2021-03-12 05:56:34,023 [main:67] - randomType = ULong
2021-03-12 05:56:34,171 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 05:56:34,201 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6ef815a3]
2021-03-12 05:56:34,201 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5d4369c5]
2021-03-12 05:56:34,201 [main:78] - Generated call from random type = (3776159501904900306.toULong()).toDouble().isNaN()
2021-03-12 05:56:34,202 [main:106] - GETTING Boolean from String
2021-03-12 05:56:34,220 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d4bdafd]]
2021-03-12 05:56:34,220 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d4bdafd]
2021-03-12 05:56:34,220 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).any()
2021-03-12 05:56:34,220 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ea7a2d8]]
2021-03-12 05:56:34,220 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:56:34,340 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:34,343 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ea7a2d8]
2021-03-12 05:56:34,343 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(-1743972364).isDigit()
2021-03-12 05:56:34,343 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a1ed933]]
2021-03-12 05:56:34,343 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:56:34,460 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:34,463 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a1ed933]
2021-03-12 05:56:34,463 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(-1743641331).isSurrogate()
2021-03-12 05:56:34,463 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6a365511]]
2021-03-12 05:56:34,463 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:56:34,583 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:56:34,583 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6a365511]
2021-03-12 05:56:34,701 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:56:34,703 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).equals("jhuyw").xor(true)
2021-03-12 05:56:34,704 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@341fdf09]]
2021-03-12 05:56:34,704 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@341fdf09]
2021-03-12 05:56:34,819 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:56:34,821 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).endsWith(Kla0<Char>().fu1(), true)
2021-03-12 05:56:34,821 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c068836]]
2021-03-12 05:56:34,822 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c068836]
2021-03-12 05:56:34,822 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).none()
2021-03-12 05:56:34,822 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f1ffc0]]
2021-03-12 05:56:34,822 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:56:34,937 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:34,940 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f1ffc0]
2021-03-12 05:56:34,940 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(-619428725).isISOControl()
2021-03-12 05:56:34,940 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@298bfadd]]
2021-03-12 05:56:34,940 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:56:35,060 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:56:35,060 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@298bfadd]
2021-03-12 05:56:35,177 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:56:35,177 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).equals("sizfs").equals("znolo")
2021-03-12 05:56:35,177 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51aeaeb8]]
2021-03-12 05:56:35,177 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:56:35,292 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:35,418 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:35,421 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51aeaeb8]
2021-03-12 05:56:35,536 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:35,654 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:56:35,773 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:56:35,777 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:56:36,038 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:56:36,041 [main:95] - GENERATED = StringBuilder("leesp")
2021-03-12 05:56:36,161 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:36,280 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:36,398 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:56:36,400 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(-1074029307, 1547548140).regionMatches(244852402, StringBuilder("leesp"), 1725000582, -1336377998, false)
2021-03-12 05:56:36,400 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77ae82e0]]
2021-03-12 05:56:36,400 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:56:36,516 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:36,634 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:36,637 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77ae82e0]
2021-03-12 05:56:36,752 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:56:36,754 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:56:36,757 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(-1503748324, -784197383).all({a: Char -> true})
2021-03-12 05:56:36,757 [main:114] - replacement of checkFinished && !prope7 of type Boolean is (3776159501904900306.toULong()).toDouble().isNaN()
2021-03-12 05:56:36,880 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:56:36,880 [main:66] - Compilation checking started
2021-03-12 05:56:37,526 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:56:37,529 [main:107] - replacing (prope7, Boolean)
2021-03-12 05:56:37,530 [main:50] - replacing prope7 Boolean
2021-03-12 05:56:37,530 [main:54] - Getting value of type Boolean
2021-03-12 05:56:37,679 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:56:37,682 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:56:37,682 [main:61] - GENERATED IS CALL =false
2021-03-12 05:56:37,973 [main:67] - randomType = HashMap<UShort, String?>
2021-03-12 05:56:38,091 [main:302] - generating value of type = HashMap<UShort, String?> false depth = 0
2021-03-12 05:56:38,213 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<UShort, Strg?> = TODO()
2021-03-12 05:56:38,216 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<UShort, Strg?> = TODO()
2021-03-12 05:56:38,339 [main:95] - GENERATED = hashMapOf<UShort, String?>()
2021-03-12 05:56:38,458 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.MutableSet[DeserializedSimpleFunctionDescriptor@54e5a798]
2021-03-12 05:56:38,574 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:56:38,575 [main:78] - Generated call from random type = (hashMapOf<UShort, String?>()).entries.equals("flvrg")
2021-03-12 05:56:38,575 [main:114] - replacement of prope7 of type Boolean is (hashMapOf<UShort, String?>()).entries.equals("flvrg")
2021-03-12 05:56:38,692 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:56:38,692 [main:66] - Compilation checking started
2021-03-12 05:56:39,083 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        (hashMapOf<UShort, String?>()).entries.equals("flvrg") = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:56:39,086 [main:107] - replacing (" has no state-machine ", String)
2021-03-12 05:56:39,086 [main:50] - replacing " has no state-machine " String
2021-03-12 05:56:39,086 [main:54] - Getting value of type String
2021-03-12 05:56:39,221 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:56:39,224 [main:58] - GENERATED VALUE OF TYPE String = "wfpxx"
2021-03-12 05:56:39,224 [main:61] - GENERATED IS CALL =false
2021-03-12 05:56:39,501 [main:67] - randomType = Sequence<Char>
2021-03-12 05:56:39,501 [main:106] - GETTING String from String
2021-03-12 05:56:39,519 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@530ec99c]]
2021-03-12 05:56:39,519 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@530ec99c]
2021-03-12 05:56:39,637 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:39,640 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).drop(290767833)
2021-03-12 05:56:39,640 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f0c722]]
2021-03-12 05:56:39,640 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f0c722]
2021-03-12 05:56:39,759 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:56:39,761 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:56:39,764 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).filterNot({a: Char -> true})
2021-03-12 05:56:39,764 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b3bfac]]
2021-03-12 05:56:39,764 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b3bfac]
2021-03-12 05:56:39,892 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:39,896 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).take(1520280510)
2021-03-12 05:56:39,896 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@af7c122]]
2021-03-12 05:56:39,896 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@af7c122]
2021-03-12 05:56:40,017 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:40,020 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).substring(-2049657355)
2021-03-12 05:56:40,020 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f8dedf]]
2021-03-12 05:56:40,020 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:56:40,146 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:40,302 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:40,305 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f8dedf]
2021-03-12 05:56:40,421 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:56:40,543 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 05:56:40,546 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 05:56:40,933 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:56:40,935 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 05:56:40,938 [main:95] - GENERATED = Regex("pimkt", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 05:56:41,055 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 05:56:41,057 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:56:41,186 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:56:41,190 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:56:41,449 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-12 05:56:41,571 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:56:41,574 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:56:41,834 [main:302] - generating value of type = Int true depth = 7
2021-03-12 05:56:41,837 [main:95] - GENERATED = StringBuilder(-1699548338)
2021-03-12 05:56:41,837 [main:95] - GENERATED = StringBuilder(StringBuilder(-1699548338))
2021-03-12 05:56:41,837 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(-1521249075, 1117980385).replace(Regex("pimkt", kotlin.text.RegexOption.IGNORE_CASE), {a: MatchResult -> StringBuilder(StringBuilder(-1699548338))})
2021-03-12 05:56:41,837 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4adf4ebf]]
2021-03-12 05:56:41,837 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4adf4ebf]
2021-03-12 05:56:41,954 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:56:41,957 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).replaceIndent("ppwon")
2021-03-12 05:56:41,957 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]]
2021-03-12 05:56:41,957 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]
2021-03-12 05:56:42,075 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:56:42,198 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:56:42,200 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).commonSuffixWith(StringBuilder(), true)
2021-03-12 05:56:42,200 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56ac39b8]]
2021-03-12 05:56:42,200 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56ac39b8]
2021-03-12 05:56:42,316 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:56:42,319 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).substringAfterLast('ᓒ', Kla0<Char>().fu1())
2021-03-12 05:56:42,320 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@767a278]]
2021-03-12 05:56:42,320 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@767a278]
2021-03-12 05:56:42,435 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 05:56:42,438 [main:302] - generating value of type = Char true depth = 1
2021-03-12 05:56:42,441 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'})
2021-03-12 05:56:42,441 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8b74fb]]
2021-03-12 05:56:42,441 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8b74fb]
2021-03-12 05:56:42,557 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:42,676 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:56:42,678 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).padEnd(-1508892869, '')
2021-03-12 05:56:42,678 [main:114] - replacement of " has no state-machine " of type String is (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'})
2021-03-12 05:56:42,794 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:56:42,795 [main:66] - Compilation checking started
2021-03-12 05:56:43,441 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:56:43,444 [main:107] - replacing ("tail-call optimization hit: method ", String)
2021-03-12 05:56:43,444 [main:50] - replacing "tail-call optimization hit: method " String
2021-03-12 05:56:43,444 [main:54] - Getting value of type String
2021-03-12 05:56:43,565 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:56:43,567 [main:58] - GENERATED VALUE OF TYPE String = "jkpgp"
2021-03-12 05:56:43,567 [main:61] - GENERATED IS CALL =false
2021-03-12 05:56:43,977 [main:67] - randomType = Sequence<Float?>
2021-03-12 05:56:43,978 [main:106] - GETTING String from String
2021-03-12 05:56:43,996 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6059c509]]
2021-03-12 05:56:43,996 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6059c509]
2021-03-12 05:56:44,119 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:44,244 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:44,366 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:56:44,372 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).replaceRange(1143996014, 456356175, "dtppu")
2021-03-12 05:56:44,372 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58c60e80]]
2021-03-12 05:56:44,372 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:56:44,492 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:44,612 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:44,614 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58c60e80]
2021-03-12 05:56:44,732 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:44,855 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:44,858 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(896110767, 570048612).substring(946553380, -1653809050)
2021-03-12 05:56:44,858 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5742c619]]
2021-03-12 05:56:44,858 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5742c619]
2021-03-12 05:56:44,983 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:56:44,986 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:56:44,989 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).dropWhile({a: Char -> false})
2021-03-12 05:56:44,989 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe54abf]]
2021-03-12 05:56:44,989 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe54abf]
2021-03-12 05:56:44,989 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).trim()
2021-03-12 05:56:44,989 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4adf4ebf]]
2021-03-12 05:56:44,989 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4adf4ebf]
2021-03-12 05:56:44,989 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).replaceIndent(fu0<String>({ "bjgag"}))
2021-03-12 05:56:44,989 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eba6b09]]
2021-03-12 05:56:44,989 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eba6b09]
2021-03-12 05:56:44,990 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).trimMargin(Kla0<Char>().fu1())
2021-03-12 05:56:44,990 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52a8be22]]
2021-03-12 05:56:44,990 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:56:44,990 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52a8be22]
2021-03-12 05:56:45,120 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:45,123 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).compareTo(fu0<String>({ "bjgag"})).toString(1956186333)
2021-03-12 05:56:45,123 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56ac39b8]]
2021-03-12 05:56:45,123 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56ac39b8]
2021-03-12 05:56:45,247 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:56:45,371 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:56:45,373 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).substringAfterLast('', "zoegm")
2021-03-12 05:56:45,374 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d981b77]]
2021-03-12 05:56:45,374 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d981b77]
2021-03-12 05:56:45,374 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).lowercase()
2021-03-12 05:56:45,374 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f7cab66]]
2021-03-12 05:56:45,374 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f7cab66]
2021-03-12 05:56:45,374 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).toUpperCase()
2021-03-12 05:56:45,374 [main:114] - replacement of "tail-call optimization hit: method " of type String is fu0<String>({ "bjgag"})
2021-03-12 05:56:45,492 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(CALL_EXPRESSION)
2021-03-12 05:56:45,492 [main:66] - Compilation checking started
2021-03-12 05:56:46,305 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:56:46,308 [main:107] - replacing (prope4++, Int)
2021-03-12 05:56:46,308 [main:50] - replacing prope4++ Int
2021-03-12 05:56:46,308 [main:54] - Getting value of type Int
2021-03-12 05:56:46,434 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:46,437 [main:58] - GENERATED VALUE OF TYPE Int = 626559660
2021-03-12 05:56:46,437 [main:61] - GENERATED IS CALL =false
2021-03-12 05:56:46,704 [main:67] - randomType = Float?
2021-03-12 05:56:46,822 [main:302] - generating value of type = Float true depth = 0
2021-03-12 05:56:46,888 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@310bf0]
2021-03-12 05:56:47,016 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:56:47,019 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23746f63]
2021-03-12 05:56:47,020 [main:78] - Generated call from random type = (0.8929061f)?.compareTo(-122).unaryPlus()
2021-03-12 05:56:47,020 [main:114] - replacement of prope4++ of type Int is (0.8929061f)?.compareTo(-122).unaryPlus()
2021-03-12 05:56:47,154 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:56:47,154 [main:66] - Compilation checking started
2021-03-12 05:56:47,739 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:56:47,742 [main:107] - replacing (true, Boolean)
2021-03-12 05:56:47,742 [main:50] - replacing true Boolean
2021-03-12 05:56:47,742 [main:54] - Getting value of type Boolean
2021-03-12 05:56:47,866 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:56:47,868 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:56:47,868 [main:61] - GENERATED IS CALL =false
2021-03-12 05:56:48,187 [main:67] - randomType = List<Float>
2021-03-12 05:56:48,188 [main:106] - GETTING Boolean from String
2021-03-12 05:56:48,222 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@488da598]]
2021-03-12 05:56:48,222 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:56:48,345 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:48,348 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@488da598]
2021-03-12 05:56:48,348 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).get(1519873172).isTitleCase()
2021-03-12 05:56:48,348 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ea7a2d8]]
2021-03-12 05:56:48,348 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:56:48,469 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:48,472 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ea7a2d8]
2021-03-12 05:56:48,472 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).get(702174078).isDigit()
2021-03-12 05:56:48,472 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f512be2]]
2021-03-12 05:56:48,472 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f512be2]
2021-03-12 05:56:48,592 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:56:48,592 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).length.equals("eetms")
2021-03-12 05:56:48,592 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@221d65f3]]
2021-03-12 05:56:48,593 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:56:48,711 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:56:48,711 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@221d65f3]
2021-03-12 05:56:48,830 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:56:48,832 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).equals("rsrjy").or(true)
2021-03-12 05:56:48,832 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@347c5fec]]
2021-03-12 05:56:48,833 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:56:48,951 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:49,073 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:49,075 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@347c5fec]
2021-03-12 05:56:49,193 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:56:49,318 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 05:56:49,321 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 05:56:49,582 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:56:49,585 [main:95] - GENERATED = Regex("elert")
2021-03-12 05:56:49,585 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(1372277865, -2084439889).matches(Regex("elert"))
2021-03-12 05:56:49,585 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a1ed933]]
2021-03-12 05:56:49,585 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:56:49,705 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:49,707 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a1ed933]
2021-03-12 05:56:49,708 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).get(2065235664).isSurrogate()
2021-03-12 05:56:49,708 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a140107]]
2021-03-12 05:56:49,708 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:56:49,825 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:49,946 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:49,949 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a140107]
2021-03-12 05:56:50,067 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:56:50,219 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:56:50,222 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(1472667689, 962551012).endsWith('啙', false)
2021-03-12 05:56:50,222 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4244399]]
2021-03-12 05:56:50,222 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:56:50,342 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:50,466 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:50,469 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4244399]
2021-03-12 05:56:50,469 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(1275733144, 299593392).isEmpty()
2021-03-12 05:56:50,469 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b7db3f2]]
2021-03-12 05:56:50,469 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:56:50,588 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:50,591 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b7db3f2]
2021-03-12 05:56:50,591 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).get(315481057).isWhitespace()
2021-03-12 05:56:50,591 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f7bc479]]
2021-03-12 05:56:50,591 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:56:50,709 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:50,829 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:50,831 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f7bc479]
2021-03-12 05:56:50,832 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(-307371749, -431892639).isNotBlank()
2021-03-12 05:56:50,832 [main:114] - replacement of true of type Boolean is false
2021-03-12 05:56:50,950 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 05:56:50,950 [main:66] - Compilation checking started
2021-03-12 05:56:51,536 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:56:51,538 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected ", String)
2021-03-12 05:56:51,538 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " String
2021-03-12 05:56:51,538 [main:54] - Getting value of type String
2021-03-12 05:56:51,659 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:56:51,661 [main:58] - GENERATED VALUE OF TYPE String = "nyagh"
2021-03-12 05:56:51,662 [main:61] - GENERATED IS CALL =false
2021-03-12 05:56:51,667 [main:67] - randomType = ULong
2021-03-12 05:56:51,785 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 05:56:51,816 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7253dc9b]
2021-03-12 05:56:51,816 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e066197]
2021-03-12 05:56:51,934 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:51,936 [main:78] - Generated call from random type = (2313185691137187450.toULong()).toShort().toString(1144776787)
2021-03-12 05:56:51,936 [main:106] - GETTING String from String
2021-03-12 05:56:51,954 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@faeda96]]
2021-03-12 05:56:51,955 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:56:52,074 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:52,077 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@faeda96]
2021-03-12 05:56:52,077 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(-1396796868).lowercase()
2021-03-12 05:56:52,077 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7404f92d]]
2021-03-12 05:56:52,077 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7404f92d]
2021-03-12 05:56:52,194 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:56:52,314 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:56:52,316 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).substringAfter('匆', "fywik")
2021-03-12 05:56:52,317 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58c60e80]]
2021-03-12 05:56:52,317 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:56:52,434 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:52,555 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:52,558 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58c60e80]
2021-03-12 05:56:52,677 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:52,797 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:52,799 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(424868071, 872401918).substring(-1127975815, -165773499)
2021-03-12 05:56:52,800 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ab1054]]
2021-03-12 05:56:52,800 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ab1054]
2021-03-12 05:56:52,921 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:53,048 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:56:53,051 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).padStart(252082500, '把')
2021-03-12 05:56:53,051 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8b74fb]]
2021-03-12 05:56:53,052 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8b74fb]
2021-03-12 05:56:53,172 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:53,292 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:56:53,295 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).padEnd(787474754, '扷')
2021-03-12 05:56:53,295 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56ac39b8]]
2021-03-12 05:56:53,295 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56ac39b8]
2021-03-12 05:56:53,441 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:56:53,444 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).substringAfterLast('꾇', Kla0<Char>().fu1())
2021-03-12 05:56:53,444 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29555276]]
2021-03-12 05:56:53,444 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29555276]
2021-03-12 05:56:53,569 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:56:53,572 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).substringBeforeLast('ᆛ', Kla0<Char>().fu1())
2021-03-12 05:56:53,572 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5898cc8d]]
2021-03-12 05:56:53,572 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:56:53,691 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:53,694 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5898cc8d]
2021-03-12 05:56:53,694 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(862966852).uppercase()
2021-03-12 05:56:53,694 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@767a278]]
2021-03-12 05:56:53,694 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@767a278]
2021-03-12 05:56:53,813 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 05:56:53,815 [main:302] - generating value of type = Char true depth = 1
2021-03-12 05:56:53,818 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).replaceFirstChar({a: Char -> '꛳'})
2021-03-12 05:56:53,818 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@204b97a1]]
2021-03-12 05:56:53,818 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:56:53,946 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:53,949 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@204b97a1]
2021-03-12 05:56:53,949 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(-1776335111).titlecase()
2021-03-12 05:56:53,949 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " of type String is (Kla0<Char>().fu1()).get(-1776335111).titlecase()
2021-03-12 05:56:54,067 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:56:54,068 [main:66] - Compilation checking started
2021-03-12 05:56:54,430 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error((Kla0<Char>().fu1()).get(-1776335111).titlecase() + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:56:54,433 [main:107] - replacing (c, Continuation<*>)
2021-03-12 05:56:54,433 [main:50] - replacing c Continuation<*>
2021-03-12 05:56:54,433 [main:54] - Getting value of type Continuation<*>
2021-03-12 05:56:54,550 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 05:56:54,673 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 05:56:54,676 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 05:56:55,092 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 05:56:55,218 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:56:55,221 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:56:55,494 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 05:56:55,620 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:56:55,623 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:56:56,033 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 05:56:56,162 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:56:56,166 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:56:56,634 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:56:56,634 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:56:56,634 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:56:56,634 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 05:56:56,634 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 05:56:56,644 [main:67] - randomType = Kla4
2021-03-12 05:56:56,761 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 05:56:56,764 [main:112] - generating klass Kla4 text = open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}
2021-03-12 05:56:56,882 [main:194] - Type params = []
2021-03-12 05:56:57,000 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 05:56:57,124 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:56:57,128 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:56:57,391 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 05:56:57,516 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:56:57,520 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:56:57,924 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:56:57,924 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:56:57,938 [main:106] - GETTING Continuation<*> from String
2021-03-12 05:56:57,956 [main:106] - GETTING Continuation<*> from String
2021-03-12 05:56:57,956 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 05:56:57,956 [main:107] - replacing (suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"}, String)
2021-03-12 05:56:57,957 [main:50] - replacing suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"} String
2021-03-12 05:56:57,957 [main:54] - Getting value of type String
2021-03-12 05:56:58,075 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:56:58,077 [main:58] - GENERATED VALUE OF TYPE String = "srpzx"
2021-03-12 05:56:58,078 [main:61] - GENERATED IS CALL =false
2021-03-12 05:56:58,083 [main:67] - randomType = String
2021-03-12 05:56:58,200 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:56:58,221 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25d4625]
2021-03-12 05:56:58,338 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:56:58,460 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:56:58,464 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:56:58,720 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 05:56:58,726 [main:95] - GENERATED = StringBuilder("wzvfe")
2021-03-12 05:56:58,726 [main:78] - Generated call from random type = ("vaglc").removeSurrounding(StringBuilder("wzvfe"))
2021-03-12 05:56:58,726 [main:106] - GETTING String from String
2021-03-12 05:56:58,750 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56ac39b8]]
2021-03-12 05:56:58,750 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56ac39b8]
2021-03-12 05:56:58,877 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:56:58,880 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).substringAfterLast('ᢊ', fu0<String>({ "bjgag"}))
2021-03-12 05:56:58,880 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5742c619]]
2021-03-12 05:56:58,880 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5742c619]
2021-03-12 05:56:58,997 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:56:59,000 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:56:59,003 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).dropWhile({a: Char -> false})
2021-03-12 05:56:59,003 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@af7c122]]
2021-03-12 05:56:59,003 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@af7c122]
2021-03-12 05:56:59,121 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:59,124 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).substring(407364356)
2021-03-12 05:56:59,124 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6059c509]]
2021-03-12 05:56:59,124 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6059c509]
2021-03-12 05:56:59,241 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:59,362 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:56:59,482 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:56:59,488 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).replaceRange(1253006766, 1405984162, "cmzyr")
2021-03-12 05:56:59,488 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]]
2021-03-12 05:56:59,488 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]
2021-03-12 05:56:59,605 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:56:59,761 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:56:59,763 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)
2021-03-12 05:56:59,764 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e5a611c]]
2021-03-12 05:56:59,764 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:56:59,884 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:00,004 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:00,007 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e5a611c]
2021-03-12 05:57:00,125 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:57:00,247 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 05:57:00,251 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 05:57:00,640 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:57:00,643 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 05:57:00,646 [main:95] - GENERATED = Regex("hagzi", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 05:57:00,646 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(-1688183887, -1399806525).replaceFirst(Regex("hagzi", kotlin.text.RegexOption.IGNORE_CASE), fu0<String>({ "bjgag"}))
2021-03-12 05:57:00,646 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79089abb]]
2021-03-12 05:57:00,646 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79089abb]
2021-03-12 05:57:00,646 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).trimStart()
2021-03-12 05:57:00,646 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d51a508]]
2021-03-12 05:57:00,646 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d51a508]
2021-03-12 05:57:00,646 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).trimIndent()
2021-03-12 05:57:00,647 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@767a278]]
2021-03-12 05:57:00,647 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@767a278]
2021-03-12 05:57:00,763 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 05:57:00,766 [main:302] - generating value of type = Char true depth = 1
2021-03-12 05:57:00,769 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '킦'})
2021-03-12 05:57:00,769 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9c1180]]
2021-03-12 05:57:00,769 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9c1180]
2021-03-12 05:57:00,887 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:57:01,009 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:57:01,013 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:57:01,273 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:57:01,275 [main:95] - GENERATED = StringBuilder(-862052103)
2021-03-12 05:57:01,276 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).removePrefix(StringBuilder(-862052103))
2021-03-12 05:57:01,276 [main:114] - replacement of suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fuqbb"} of type String is (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)
2021-03-12 05:57:01,392 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:57:01,392 [main:66] - Compilation checking started
2021-03-12 05:57:01,995 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:57:01,997 [main:107] - replacing (fu2(), String)
2021-03-12 05:57:01,997 [main:50] - replacing fu2() String
2021-03-12 05:57:01,997 [main:54] - Getting value of type String
2021-03-12 05:57:02,122 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:57:02,125 [main:58] - GENERATED VALUE OF TYPE String = "uwlwi"
2021-03-12 05:57:02,125 [main:61] - GENERATED IS CALL =false
2021-03-12 05:57:02,273 [main:67] - randomType = Kla2
2021-03-12 05:57:02,392 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 05:57:02,394 [main:112] - generating klass Kla2 text = class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}
2021-03-12 05:57:02,513 [main:194] - Type params = []
2021-03-12 05:57:02,630 [main:302] - generating value of type = Function0<Unit> false depth = 2
2021-03-12 05:57:02,633 [main:302] - generating value of type = Unit false depth = 3
2021-03-12 05:57:02,757 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:57:02,760 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:57:03,018 [main:302] - generating value of type = Any false depth = 6
2021-03-12 05:57:03,018 [main:95] - GENERATED = print("ryfrk")
2021-03-12 05:57:03,071 [main:106] - GETTING String from String
2021-03-12 05:57:03,089 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a90b83]]
2021-03-12 05:57:03,089 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a90b83]
2021-03-12 05:57:03,231 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:57:03,233 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:57:03,236 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).dropLastWhile({a: Char -> true})
2021-03-12 05:57:03,236 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bb68b6d]]
2021-03-12 05:57:03,236 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bb68b6d]
2021-03-12 05:57:03,354 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:57:03,356 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:57:03,359 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).takeLastWhile({a: Char -> false})
2021-03-12 05:57:03,359 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396e07d2]]
2021-03-12 05:57:03,359 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396e07d2]
2021-03-12 05:57:03,479 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 05:57:03,603 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 05:57:03,606 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 05:57:03,730 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:57:03,732 [main:95] - GENERATED = hashSetOf<Int>(942812170)
2021-03-12 05:57:03,733 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).slice(hashSetOf<Int>(942812170))
2021-03-12 05:57:03,733 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f7cab66]]
2021-03-12 05:57:03,733 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f7cab66]
2021-03-12 05:57:03,733 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).toUpperCase()
2021-03-12 05:57:03,733 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]]
2021-03-12 05:57:03,733 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]
2021-03-12 05:57:03,851 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:57:03,974 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:57:03,977 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:57:04,241 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 05:57:04,364 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:57:04,368 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:57:04,634 [main:302] - generating value of type = String true depth = 6
2021-03-12 05:57:04,636 [main:95] - GENERATED = StringBuilder("rxwbm")
2021-03-12 05:57:04,637 [main:95] - GENERATED = StringBuilder(StringBuilder("rxwbm"))
2021-03-12 05:57:04,754 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:57:04,757 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).commonSuffixWith(StringBuilder(StringBuilder("rxwbm")), false)
2021-03-12 05:57:04,757 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40b7db4d]]
2021-03-12 05:57:04,757 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40b7db4d]
2021-03-12 05:57:04,757 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).capitalize()
2021-03-12 05:57:04,757 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43da71d6]]
2021-03-12 05:57:04,757 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43da71d6]
2021-03-12 05:57:04,875 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:57:04,998 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:57:05,001 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:57:05,272 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:57:05,274 [main:95] - GENERATED = StringBuilder(-382324892)
2021-03-12 05:57:05,275 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).removeSuffix(StringBuilder(-382324892))
2021-03-12 05:57:05,275 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a190df7]]
2021-03-12 05:57:05,275 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a190df7]
2021-03-12 05:57:05,396 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:05,399 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).dropLast(-1284326470)
2021-03-12 05:57:05,399 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122af64]]
2021-03-12 05:57:05,399 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122af64]
2021-03-12 05:57:05,525 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:05,528 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).repeat(995505945)
2021-03-12 05:57:05,528 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ab1054]]
2021-03-12 05:57:05,528 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ab1054]
2021-03-12 05:57:05,647 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:05,768 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:05,771 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).padStart(1246485349, '撒')
2021-03-12 05:57:05,771 [main:114] - replacement of fu2() of type String is (Kla0<Char>().fu1()).repeat(995505945)
2021-03-12 05:57:05,889 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:57:05,889 [main:66] - Compilation checking started
2021-03-12 05:57:06,260 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if (prope4 != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { (Kla0<Char>().fu1()).repeat(995505945) } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:57:06,262 [main:107] - replacing (prope4, Int)
2021-03-12 05:57:06,262 [main:50] - replacing prope4 Int
2021-03-12 05:57:06,262 [main:54] - Getting value of type Int
2021-03-12 05:57:06,380 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:06,383 [main:58] - GENERATED VALUE OF TYPE Int = -2066762718
2021-03-12 05:57:06,383 [main:61] - GENERATED IS CALL =false
2021-03-12 05:57:06,521 [main:67] - randomType = Boolean?
2021-03-12 05:57:06,664 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:57:06,679 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d2a4ce0]
2021-03-12 05:57:06,800 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:57:06,803 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7bef169a]
2021-03-12 05:57:06,921 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:06,924 [main:78] - Generated call from random type = (true)?.compareTo(true).rotateLeft(-960105673)
2021-03-12 05:57:06,925 [main:106] - GETTING Int from String
2021-03-12 05:57:06,946 [main:113] - Case = [public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d99c2b4]]
2021-03-12 05:57:06,947 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d99c2b4]
2021-03-12 05:57:06,947 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).toInt()
2021-03-12 05:57:06,947 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53c110e4]]
2021-03-12 05:57:06,947 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:57:06,947 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53c110e4]
2021-03-12 05:57:07,066 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:57:07,069 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).compareTo(fu0<String>({ "bjgag"})).div(-87)
2021-03-12 05:57:07,069 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23510e50]]
2021-03-12 05:57:07,069 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23510e50]
2021-03-12 05:57:07,069 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).length.dec()
2021-03-12 05:57:07,069 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b6fee42]]
2021-03-12 05:57:07,069 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b6fee42]
2021-03-12 05:57:07,188 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:57:07,191 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).length.plus(-69)
2021-03-12 05:57:07,191 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7bef169a]]
2021-03-12 05:57:07,191 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:57:07,191 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7bef169a]
2021-03-12 05:57:07,308 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:07,311 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).compareTo(Kla0<Char>().fu1()).rotateLeft(-1421257641)
2021-03-12 05:57:07,311 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7f278d1e]]
2021-03-12 05:57:07,311 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:57:07,429 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:07,431 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7f278d1e]
2021-03-12 05:57:07,550 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:07,552 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ')
2021-03-12 05:57:07,553 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77a940aa]]
2021-03-12 05:57:07,553 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77a940aa]
2021-03-12 05:57:07,553 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).length.unaryMinus()
2021-03-12 05:57:07,553 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cbb3894]]
2021-03-12 05:57:07,553 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:57:07,677 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:57:07,680 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cbb3894]
2021-03-12 05:57:07,797 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:57:07,800 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).compareTo("auycv").rem(-46)
2021-03-12 05:57:07,800 [main:113] - Case = [public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f64c962]]
2021-03-12 05:57:07,800 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f64c962]
2021-03-12 05:57:07,919 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:08,042 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:08,163 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:57:08,166 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).indexOf('跚', -718169428, false)
2021-03-12 05:57:08,166 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64707e4]]
2021-03-12 05:57:08,166 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:57:08,283 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:08,404 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:08,406 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64707e4]
2021-03-12 05:57:08,407 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(62213712, -2018296559).count()
2021-03-12 05:57:08,407 [main:114] - replacement of prope4 of type Int is (fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ')
2021-03-12 05:57:08,523 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:57:08,524 [main:66] - Compilation checking started
2021-03-12 05:57:09,114 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:57:09,117 [main:107] - replacing (dispatcher, Function0<Unit>)
2021-03-12 05:57:09,117 [main:50] - replacing dispatcher Function0<Unit>
2021-03-12 05:57:09,117 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:57:09,257 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:57:09,260 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:57:09,385 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:57:09,389 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:57:09,653 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 05:57:09,655 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 05:57:09,780 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:57:09,784 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:57:10,225 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 05:57:10,227 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 05:57:10,230 [main:302] - generating value of type = Any false depth = 9
2021-03-12 05:57:10,230 [main:95] - GENERATED = check(true, { "hnhuj"})
2021-03-12 05:57:10,230 [main:95] - GENERATED = contract({ check(true, { "hnhuj"})})
2021-03-12 05:57:10,230 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ check(true, { "hnhuj"})})}
2021-03-12 05:57:10,230 [main:61] - GENERATED IS CALL =false
2021-03-12 05:57:10,365 [main:67] - randomType = UByte
2021-03-12 05:57:10,484 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:57:10,515 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:57:10,534 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:57:10,534 [main:114] - replacement of dispatcher of type Function0<Unit> is { contract({ check(true, { "hnhuj"})})}
2021-03-12 05:57:10,652 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:57:10,652 [main:66] - Compilation checking started
2021-03-12 05:57:11,013 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3({ contract({ check(true, { "hnhuj"})})}, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:57:11,015 [main:107] - replacing (prope5, Result<Ty4>)
2021-03-12 05:57:11,015 [main:50] - replacing prope5 Result<Ty4>
2021-03-12 05:57:11,015 [main:54] - Getting value of type Result<Ty4>
2021-03-12 05:57:11,137 [main:302] - generating value of type = Result<Ty4> false depth = 0
2021-03-12 05:57:11,262 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty4): Result<Ty4> = TODO()
2021-03-12 05:57:11,266 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty4): Result<Ty4> = TODO()
2021-03-12 05:57:11,529 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty4): Result<Ty4> = TODO()
2021-03-12 05:57:11,529 [main:58] - GENERATED VALUE OF TYPE Result<Ty4> = 
2021-03-12 05:57:13,165 [main:67] - randomType = Map<Triple<Function2<Float, Function2<MutableMap<Kla9, Int>, Long, Double>, Kla2?>, Int, Collection<Kla6<Double>>>, Kla2>
2021-03-12 05:57:13,167 [main:106] - GETTING Result<Ty4> from String
2021-03-12 05:57:13,187 [main:106] - GETTING Result<Ty4> from String
2021-03-12 05:57:13,187 [main:111] - Cant find and generate replacement for prope5 type Result<Ty4>
2021-03-12 05:57:13,187 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 05:57:13,187 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 05:57:13,187 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 05:57:13,306 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 05:57:13,311 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 05:57:13,317 [main:67] - randomType = Boolean
2021-03-12 05:57:13,435 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:57:13,448 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:57:13,466 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:57:13,466 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 05:57:13,466 [main:107] - replacing (context, CoroutineContext)
2021-03-12 05:57:13,466 [main:50] - replacing context CoroutineContext
2021-03-12 05:57:13,466 [main:54] - Getting value of type CoroutineContext
2021-03-12 05:57:13,585 [main:302] - generating value of type = CoroutineContext false depth = 0
2021-03-12 05:57:13,733 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:57:13,737 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:57:14,011 [main:302] - generating value of type = Key<*> false depth = 3
2021-03-12 05:57:14,141 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:57:14,144 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:57:14,553 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 6
2021-03-12 05:57:14,682 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:57:14,686 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:57:15,097 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 05:57:15,225 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:57:15,228 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:57:15,635 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:57:15,635 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:57:15,635 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:57:15,635 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:57:15,635 [main:58] - GENERATED VALUE OF TYPE CoroutineContext = 
2021-03-12 05:57:16,625 [main:67] - randomType = Kla6<Function1<ArrayDeque<Boolean>, LinkedHashMap<Kla9, UShort>>>?
2021-03-12 05:57:16,746 [main:302] - generating value of type = Kla6<Function1<ArrayDeque<Boolean>, LinkedHashMap<Kla9, UShort>>> false depth = 0
2021-03-12 05:57:16,748 [main:112] - generating klass Kla6 text = abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}
2021-03-12 05:57:17,192 [main:302] - generating value of type = Kla3<Function1<ArrayDeque<Boolean>, LinkedHashMap<Kla9, UShort>>> false depth = 2
2021-03-12 05:57:17,195 [main:112] - generating klass Kla3 text = private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}
2021-03-12 05:57:17,461 [main:194] - Type params = [Function1<ArrayDeque<Boolean>, LinkedHashMap<Kla9, UShort>>]
2021-03-12 05:57:17,578 [main:302] - generating value of type = Function0<Unit> false depth = 4
2021-03-12 05:57:17,581 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 05:57:17,704 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:57:17,707 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:57:17,967 [main:302] - generating value of type = Any false depth = 8
2021-03-12 05:57:17,968 [main:95] - GENERATED = print("pbqzt")
2021-03-12 05:57:18,107 [main:302] - generating value of type = Continuation<Function1<ArrayDeque<Boolean>, LinkedHashMap<Kla9, UShort>>> false depth = 4
2021-03-12 05:57:18,235 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Function1<ArrayDeque<Boolean>, LinkedHashMap<Kla9, UShort>>>)->kotlin.Unit): Contuation<Function1<ArrayDeque<Boolean>, LkedHashMap<Kla9, UShort>>> = TODO()
2021-03-12 05:57:18,239 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Function1<ArrayDeque<Boolean>, LinkedHashMap<Kla9, UShort>>>)->kotlin.Unit): Contuation<Function1<ArrayDeque<Boolean>, LkedHashMap<Kla9, UShort>>> = TODO()
2021-03-12 05:57:18,653 [main:302] - generating value of type = CoroutineContext false depth = 7
2021-03-12 05:57:18,779 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:57:18,782 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:57:19,051 [main:302] - generating value of type = Key<*> false depth = 10
2021-03-12 05:57:19,181 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:57:19,184 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:57:19,599 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 13
2021-03-12 05:57:19,726 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:57:19,730 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:57:20,139 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 16
2021-03-12 05:57:20,139 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:57:20,140 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:57:20,140 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:57:20,140 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Function1<ArrayDeque<Boolean>, LinkedHashMap<Kla9, UShort>>>)->kotlin.Unit): Contuation<Function1<ArrayDeque<Boolean>, LkedHashMap<Kla9, UShort>>> = TODO()
2021-03-12 05:57:20,164 [main:78] - Generated call from random type = (Kla3<Function1<ArrayDeque<Boolean>, LinkedHashMap<Kla9, UShort>>>({ print("pbqzt")}, ))?.context
2021-03-12 05:57:20,164 [main:114] - replacement of context of type CoroutineContext is (Kla3<Function1<ArrayDeque<Boolean>, LinkedHashMap<Kla9, UShort>>>({ print("pbqzt")}, ))?.context
2021-03-12 05:57:20,283 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 05:57:20,283 [main:66] - Compilation checking started
2021-03-12 05:57:20,650 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.(Kla3<Function1<ArrayDeque<Boolean>, LinkedHashMap<Kla9, UShort>>>({ print("pbqzt")}, ))?.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:57:20,652 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected ", String)
2021-03-12 05:57:20,652 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " String
2021-03-12 05:57:20,652 [main:54] - Getting value of type String
2021-03-12 05:57:20,813 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:57:20,816 [main:58] - GENERATED VALUE OF TYPE String = "xoexa"
2021-03-12 05:57:20,816 [main:61] - GENERATED IS CALL =false
2021-03-12 05:57:20,953 [main:67] - randomType = UShort
2021-03-12 05:57:21,082 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 05:57:21,121 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@51763efd]
2021-03-12 05:57:21,121 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e066197]
2021-03-12 05:57:21,240 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:21,242 [main:78] - Generated call from random type = (14043.toUShort()).toShort().toString(2021029977)
2021-03-12 05:57:21,243 [main:106] - GETTING String from String
2021-03-12 05:57:21,261 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8b74fb]]
2021-03-12 05:57:21,261 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8b74fb]
2021-03-12 05:57:21,379 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:21,500 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:21,502 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).padEnd(-960716447, '媉')
2021-03-12 05:57:21,503 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396e07d2]]
2021-03-12 05:57:21,503 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396e07d2]
2021-03-12 05:57:21,620 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 05:57:21,745 [main:43] - GENERATING CALL OF fun <T> mutableListOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 05:57:21,748 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 05:57:21,873 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:57:21,876 [main:95] - GENERATED = mutableListOf<Int>(-1066012692)
2021-03-12 05:57:21,876 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).slice(mutableListOf<Int>(-1066012692))
2021-03-12 05:57:21,876 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5898cc8d]]
2021-03-12 05:57:21,876 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:57:21,994 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:21,997 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5898cc8d]
2021-03-12 05:57:21,997 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(833265165).uppercase()
2021-03-12 05:57:21,997 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4adf4ebf]]
2021-03-12 05:57:21,997 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4adf4ebf]
2021-03-12 05:57:21,997 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).replaceIndent(Kla0<Char>().fu1())
2021-03-12 05:57:21,998 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5742c619]]
2021-03-12 05:57:21,998 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5742c619]
2021-03-12 05:57:22,117 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:57:22,119 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:57:22,122 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).dropWhile({a: Char -> true})
2021-03-12 05:57:22,122 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4196f0ef]]
2021-03-12 05:57:22,122 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4196f0ef]
2021-03-12 05:57:22,240 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 05:57:22,243 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:57:22,245 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).filterIndexed({a: Int, b: Char -> true})
2021-03-12 05:57:22,245 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@faeda96]]
2021-03-12 05:57:22,245 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:57:22,364 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:22,366 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@faeda96]
2021-03-12 05:57:22,366 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(1898475556).lowercase()
2021-03-12 05:57:22,367 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@767a278]]
2021-03-12 05:57:22,367 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@767a278]
2021-03-12 05:57:22,485 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 05:57:22,488 [main:302] - generating value of type = Char true depth = 1
2021-03-12 05:57:22,491 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).replaceFirstChar({a: Char -> '୯'})
2021-03-12 05:57:22,491 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43da71d6]]
2021-03-12 05:57:22,491 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43da71d6]
2021-03-12 05:57:22,609 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:57:22,614 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).removeSuffix("ojyvo")
2021-03-12 05:57:22,615 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e91ca8f]]
2021-03-12 05:57:22,615 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e91ca8f]
2021-03-12 05:57:22,615 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).toLowerCase()
2021-03-12 05:57:22,615 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " of type String is (Kla0<Char>().fu1()).get(833265165).uppercase()
2021-03-12 05:57:22,733 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:57:22,733 [main:66] - Compilation checking started
2021-03-12 05:57:23,090 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error((Kla0<Char>().fu1()).get(833265165).uppercase() + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:57:23,092 [main:107] - replacing (c, Continuation<Unit>)
2021-03-12 05:57:23,092 [main:50] - replacing c Continuation<Unit>
2021-03-12 05:57:23,092 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 05:57:23,210 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 05:57:23,335 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:57:23,339 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:57:23,742 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 05:57:23,866 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:57:23,870 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:57:24,144 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 05:57:24,271 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:57:24,274 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:57:24,739 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 05:57:24,866 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:57:24,870 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:57:25,277 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-12 05:57:25,404 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:57:25,408 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:57:25,812 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 15
2021-03-12 05:57:25,939 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:57:25,942 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:57:26,358 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 18
2021-03-12 05:57:26,358 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:57:26,358 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:57:26,358 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:57:26,358 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:57:26,358 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:57:26,358 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:57:26,358 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 05:57:26,927 [main:67] - randomType = Kla6<HashMap<Long, Kla6<Byte>>>
2021-03-12 05:57:27,044 [main:302] - generating value of type = Kla6<HashMap<Long, Kla6<Byte>>> false depth = 0
2021-03-12 05:57:27,047 [main:112] - generating klass Kla6 text = abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}
2021-03-12 05:57:27,578 [main:302] - generating value of type = Kla3<HashMap<Long, Kla6<Byte>>> false depth = 2
2021-03-12 05:57:27,581 [main:112] - generating klass Kla3 text = private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}
2021-03-12 05:57:27,977 [main:194] - Type params = [HashMap<Long, Kla6<Byte>>]
2021-03-12 05:57:28,140 [main:302] - generating value of type = Function0<Unit> false depth = 4
2021-03-12 05:57:28,142 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 05:57:28,288 [main:302] - generating value of type = Continuation<HashMap<Long, Kla6<Byte>>> false depth = 4
2021-03-12 05:57:28,413 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<HashMap<Long, Kla6<Byte>>>)->kotlin.Unit): Contuation<HashMap<Long, Kla6<Byte>>> = TODO()
2021-03-12 05:57:28,416 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<HashMap<Long, Kla6<Byte>>>)->kotlin.Unit): Contuation<HashMap<Long, Kla6<Byte>>> = TODO()
2021-03-12 05:57:28,831 [main:302] - generating value of type = CoroutineContext false depth = 7
2021-03-12 05:57:28,957 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:57:28,960 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:57:29,229 [main:302] - generating value of type = Key<*> false depth = 10
2021-03-12 05:57:29,357 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:57:29,360 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:57:29,766 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:57:29,767 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:57:29,767 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<HashMap<Long, Kla6<Byte>>>)->kotlin.Unit): Contuation<HashMap<Long, Kla6<Byte>>> = TODO()
2021-03-12 05:57:29,787 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 05:57:29,805 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 05:57:29,805 [main:111] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-12 05:57:29,805 [main:107] - replacing (continuation.context, CoroutineContext)
2021-03-12 05:57:29,805 [main:50] - replacing continuation.context CoroutineContext
2021-03-12 05:57:29,805 [main:54] - Getting value of type CoroutineContext
2021-03-12 05:57:29,923 [main:302] - generating value of type = CoroutineContext false depth = 0
2021-03-12 05:57:30,047 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:57:30,051 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:57:30,317 [main:302] - generating value of type = Key<*> false depth = 3
2021-03-12 05:57:30,445 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:57:30,448 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:57:30,854 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 6
2021-03-12 05:57:30,981 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:57:30,985 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:57:31,391 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 05:57:31,519 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:57:31,522 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:57:32,000 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:57:32,000 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:57:32,002 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:57:32,002 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:57:32,002 [main:58] - GENERATED VALUE OF TYPE CoroutineContext = 
2021-03-12 05:57:32,422 [main:67] - randomType = HashMap<UByte, Kla2>
2021-03-12 05:57:32,541 [main:302] - generating value of type = HashMap<UByte, Kla2> false depth = 0
2021-03-12 05:57:32,665 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<UByte, Kla2>): HashMap<UByte, Kla2> = TODO()
2021-03-12 05:57:32,668 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<UByte, Kla2>): HashMap<UByte, Kla2> = TODO()
2021-03-12 05:57:32,793 [main:302] - generating value of type = Pair<UByte, Kla2> false depth = 3
2021-03-12 05:57:32,918 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UByte, second: Kla2): Pair<UByte, Kla2> = TODO()
2021-03-12 05:57:32,921 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UByte, second: Kla2): Pair<UByte, Kla2> = TODO()
2021-03-12 05:57:33,048 [main:302] - generating value of type = UByte true depth = 6
2021-03-12 05:57:33,051 [main:302] - generating value of type = Kla2 false depth = 6
2021-03-12 05:57:33,053 [main:112] - generating klass Kla2 text = class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}
2021-03-12 05:57:33,172 [main:194] - Type params = []
2021-03-12 05:57:33,290 [main:302] - generating value of type = Function0<Unit> false depth = 8
2021-03-12 05:57:33,292 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 05:57:33,415 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:57:33,419 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:57:33,678 [main:302] - generating value of type = Any false depth = 12
2021-03-12 05:57:33,678 [main:95] - GENERATED = println("xvjrr")
2021-03-12 05:57:33,679 [main:95] - GENERATED = Pair<UByte, Kla2>(84.toUByte(), Kla2({ println("xvjrr")}))
2021-03-12 05:57:33,679 [main:95] - GENERATED = hashMapOf<UByte, Kla2>(Pair<UByte, Kla2>(84.toUByte(), Kla2({ println("xvjrr")})))
2021-03-12 05:57:33,773 [main:149] - GENERATING call of type public open fun get(key: kotlin.UByte): Kla2? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@6739f197]
2021-03-12 05:57:33,893 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:57:33,896 [main:149] - GENERATING call of type public open fun minusKey(key: kotlin.coroutines.CoroutineContext.Key<*>): kotlin.coroutines.CoroutineContext defined in Kla2[DeserializedSimpleFunctionDescriptor@7bc953c]
2021-03-12 05:57:34,017 [main:302] - generating value of type = Key<*> false depth = 0
2021-03-12 05:57:34,146 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:57:34,149 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:57:34,557 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:57:34,557 [main:158] - CANT GENERATE PARAMS FOR public open fun minusKey(key: kotlin.coroutines.CoroutineContext.Key<*>): kotlin.coroutines.CoroutineContext defined in Kla2[DeserializedSimpleFunctionDescriptor@7bc953c]
2021-03-12 05:57:34,558 [main:78] - Generated call from random type = (hashMapOf<UByte, Kla2>(Pair<UByte, Kla2>(84.toUByte(), Kla2({ println("xvjrr")})))).null!!
2021-03-12 05:57:34,559 [main:106] - GETTING CoroutineContext from String
2021-03-12 05:57:34,580 [main:106] - GETTING CoroutineContext from String
2021-03-12 05:57:34,580 [main:114] - replacement of continuation.context of type CoroutineContext is (hashMapOf<UByte, Kla2>(Pair<UByte, Kla2>(84.toUByte(), Kla2({ println("xvjrr")})))).null!!
2021-03-12 05:57:34,699 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-12 05:57:34,699 [main:66] - Compilation checking started
2021-03-12 05:57:35,067 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = (hashMapOf<UByte, Kla2>(Pair<UByte, Kla2>(84.toUByte(), Kla2({ println("xvjrr")})))).null!!

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "OK") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:57:35,069 [main:107] - replacing (value, Ty4)
2021-03-12 05:57:35,069 [main:50] - replacing value Ty4
2021-03-12 05:57:35,069 [main:54] - Getting value of type Ty4
2021-03-12 05:57:35,187 [main:302] - generating value of type = Ty4 false depth = 0
2021-03-12 05:57:35,192 [main:58] - GENERATED VALUE OF TYPE Ty4 = 
2021-03-12 05:57:36,097 [main:67] - randomType = Function1<String, Function1<Kla3<MutableMap<Float?, Long>>, Short>>
2021-03-12 05:57:36,098 [main:106] - GETTING Ty4 from String
2021-03-12 05:57:36,116 [main:106] - GETTING Ty4 from String
2021-03-12 05:57:36,116 [main:111] - Cant find and generate replacement for value type Ty4
2021-03-12 05:57:36,116 [main:107] - replacing ("OK", String)
2021-03-12 05:57:36,117 [main:50] - replacing "OK" String
2021-03-12 05:57:36,117 [main:54] - Getting value of type String
2021-03-12 05:57:36,235 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:57:36,237 [main:58] - GENERATED VALUE OF TYPE String = "vqpqn"
2021-03-12 05:57:36,237 [main:61] - GENERATED IS CALL =false
2021-03-12 05:57:36,527 [main:67] - randomType = Function1<Double, Sequence<Kla8>>
2021-03-12 05:57:36,527 [main:106] - GETTING String from String
2021-03-12 05:57:36,545 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a190df7]]
2021-03-12 05:57:36,545 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a190df7]
2021-03-12 05:57:36,663 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:36,666 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).dropLast(-1542624809)
2021-03-12 05:57:36,666 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6969b325]]
2021-03-12 05:57:36,666 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:57:36,784 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:36,786 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6969b325]
2021-03-12 05:57:36,787 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).get(1365318260).plus(fu0<String>({ "bjgag"}))
2021-03-12 05:57:36,787 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eba6b09]]
2021-03-12 05:57:36,787 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eba6b09]
2021-03-12 05:57:36,787 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).trimMargin(Kla0<Char>().fu1())
2021-03-12 05:57:36,787 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f567b3f]]
2021-03-12 05:57:36,787 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f567b3f]
2021-03-12 05:57:36,906 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:36,908 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).replaceBeforeLast('塬', Kla0<Char>().fu1(), fu0<String>({ "bjgag"}))
2021-03-12 05:57:36,909 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17458d64]]
2021-03-12 05:57:36,909 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17458d64]
2021-03-12 05:57:36,909 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).reversed()
2021-03-12 05:57:36,909 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72950e61]]
2021-03-12 05:57:36,909 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72950e61]
2021-03-12 05:57:37,027 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:37,148 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:37,270 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:57:37,273 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).replace('¼', '', true)
2021-03-12 05:57:37,273 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51f6003c]]
2021-03-12 05:57:37,273 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51f6003c]
2021-03-12 05:57:37,391 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:37,511 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:57:37,514 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).replaceBefore('ᓾ', Kla0<Char>().fu1(), "ojwoo")
2021-03-12 05:57:37,514 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a90b83]]
2021-03-12 05:57:37,514 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a90b83]
2021-03-12 05:57:37,632 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:57:37,634 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:57:37,637 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).dropLastWhile({a: Char -> true})
2021-03-12 05:57:37,637 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2c09ad8b]]
2021-03-12 05:57:37,637 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2c09ad8b]
2021-03-12 05:57:37,756 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:57:37,757 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).plus("zbsow")
2021-03-12 05:57:37,757 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b3bfac]]
2021-03-12 05:57:37,757 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b3bfac]
2021-03-12 05:57:37,877 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:37,880 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).take(-440465766)
2021-03-12 05:57:37,880 [main:114] - replacement of "OK" of type String is "vqpqn"
2021-03-12 05:57:38,002 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 05:57:38,002 [main:66] - Compilation checking started
2021-03-12 05:57:38,566 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:57:38,569 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i, String)
2021-03-12 05:57:38,569 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i String
2021-03-12 05:57:38,569 [main:54] - Getting value of type String
2021-03-12 05:57:38,692 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:57:38,695 [main:58] - GENERATED VALUE OF TYPE String = "bmjiw"
2021-03-12 05:57:38,696 [main:61] - GENERATED IS CALL =false
2021-03-12 05:57:38,701 [main:67] - randomType = Int
2021-03-12 05:57:38,824 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:38,862 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@76b1d49b]
2021-03-12 05:57:38,862 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@faeda96]
2021-03-12 05:57:38,862 [main:78] - Generated call from random type = (794901779).toChar().lowercase()
2021-03-12 05:57:38,862 [main:106] - GETTING String from String
2021-03-12 05:57:38,879 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d51a508]]
2021-03-12 05:57:38,879 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d51a508]
2021-03-12 05:57:38,879 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).trimIndent()
2021-03-12 05:57:38,879 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30b7e630]]
2021-03-12 05:57:38,880 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30b7e630]
2021-03-12 05:57:38,997 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:39,120 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:57:39,123 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).substringBefore('?', "gyfnp")
2021-03-12 05:57:39,123 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8b74fb]]
2021-03-12 05:57:39,123 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8b74fb]
2021-03-12 05:57:39,240 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:39,360 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:39,363 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).padEnd(-1479216907, '?')
2021-03-12 05:57:39,363 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58c60e80]]
2021-03-12 05:57:39,363 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:57:39,481 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:39,608 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:39,611 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58c60e80]
2021-03-12 05:57:39,728 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:39,880 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:39,883 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(-1131316560, -925178137).substring(713996894, -656443317)
2021-03-12 05:57:39,883 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7404f92d]]
2021-03-12 05:57:39,883 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7404f92d]
2021-03-12 05:57:40,000 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:40,121 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:57:40,124 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).substringAfter('幓', "tybzw")
2021-03-12 05:57:40,124 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122af64]]
2021-03-12 05:57:40,124 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:57:40,241 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:40,360 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:40,363 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122af64]
2021-03-12 05:57:40,480 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:40,483 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(1932557072, 806585188).repeat(-1330420111)
2021-03-12 05:57:40,483 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9c1180]]
2021-03-12 05:57:40,483 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9c1180]
2021-03-12 05:57:40,600 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:57:40,606 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).removePrefix("iwtif")
2021-03-12 05:57:40,606 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@faeda96]]
2021-03-12 05:57:40,606 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:57:40,724 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:40,727 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@faeda96]
2021-03-12 05:57:40,727 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).get(-24697848).lowercase()
2021-03-12 05:57:40,727 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]]
2021-03-12 05:57:40,727 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]
2021-03-12 05:57:40,845 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:57:40,968 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:57:40,970 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).commonSuffixWith("eljml", false)
2021-03-12 05:57:40,970 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65639ae6]]
2021-03-12 05:57:40,971 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65639ae6]
2021-03-12 05:57:41,090 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:41,210 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:57:41,213 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).replaceAfterLast('켨', "hoyma", fu0<String>({ "bjgag"}))
2021-03-12 05:57:41,213 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i of type String is (794901779).toChar().lowercase()
2021-03-12 05:57:41,330 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:57:41,330 [main:66] - Compilation checking started
2021-03-12 05:57:41,909 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:57:41,911 [main:107] - replacing (1, Int)
2021-03-12 05:57:41,911 [main:50] - replacing 1 Int
2021-03-12 05:57:41,911 [main:54] - Getting value of type Int
2021-03-12 05:57:42,031 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:42,034 [main:58] - GENERATED VALUE OF TYPE Int = -54011518
2021-03-12 05:57:42,034 [main:61] - GENERATED IS CALL =false
2021-03-12 05:57:42,039 [main:67] - randomType = Float
2021-03-12 05:57:42,159 [main:302] - generating value of type = Float true depth = 0
2021-03-12 05:57:42,197 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@189c12c4]
2021-03-12 05:57:42,197 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4261e7b]
2021-03-12 05:57:42,315 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:57:42,318 [main:78] - Generated call from random type = (0.2251423f).toDouble().compareTo(76)
2021-03-12 05:57:42,319 [main:106] - GETTING Int from String
2021-03-12 05:57:42,337 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ce99614]]
2021-03-12 05:57:42,337 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:57:42,456 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:42,579 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:42,582 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ce99614]
2021-03-12 05:57:42,701 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 05:57:42,824 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 05:57:42,828 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 05:57:42,952 [main:302] - generating value of type = Char true depth = 3
2021-03-12 05:57:42,955 [main:95] - GENERATED = charArrayOf('鄺')
2021-03-12 05:57:43,074 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:43,196 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:57:43,199 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)
2021-03-12 05:57:43,199 [main:113] - Case = [public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bf8ec9a]]
2021-03-12 05:57:43,199 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bf8ec9a]
2021-03-12 05:57:43,317 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 05:57:43,440 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 05:57:43,443 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 05:57:43,567 [main:302] - generating value of type = Char true depth = 3
2021-03-12 05:57:43,570 [main:95] - GENERATED = charArrayOf('쇊')
2021-03-12 05:57:43,689 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:43,809 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:57:43,812 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).lastIndexOfAny(charArrayOf('쇊'), -1860425349, true)
2021-03-12 05:57:43,812 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20c1fe97]]
2021-03-12 05:57:43,812 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20c1fe97]
2021-03-12 05:57:43,967 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:43,970 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).length.xor(-1738043226)
2021-03-12 05:57:43,970 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23510e50]]
2021-03-12 05:57:43,970 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:57:43,970 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23510e50]
2021-03-12 05:57:43,971 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).compareTo(fu0<String>({ "bjgag"})).dec()
2021-03-12 05:57:43,971 [main:113] - Case = [public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f64c962]]
2021-03-12 05:57:43,971 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f64c962]
2021-03-12 05:57:44,091 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:44,213 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:44,334 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:57:44,336 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).indexOf('ᰍ', 819641347, true)
2021-03-12 05:57:44,337 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6302d9cb]]
2021-03-12 05:57:44,337 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6302d9cb]
2021-03-12 05:57:44,454 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 05:57:44,456 [main:302] - generating value of type = Int true depth = 1
2021-03-12 05:57:44,459 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).sumOf({a: Char -> -453488808})
2021-03-12 05:57:44,459 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53c110e4]]
2021-03-12 05:57:44,459 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:57:44,459 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53c110e4]
2021-03-12 05:57:44,576 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:57:44,579 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).compareTo(fu0<String>({ "bjgag"})).div(-63)
2021-03-12 05:57:44,579 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5275f18a]]
2021-03-12 05:57:44,579 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5275f18a]
2021-03-12 05:57:44,580 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).length.inv()
2021-03-12 05:57:44,580 [main:113] - Case = [public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9297551]]
2021-03-12 05:57:44,580 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9297551]
2021-03-12 05:57:44,697 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 05:57:44,700 [main:302] - generating value of type = Int true depth = 1
2021-03-12 05:57:44,703 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).sumBy({a: Char -> 1151741664})
2021-03-12 05:57:44,703 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6302d9cb]]
2021-03-12 05:57:44,703 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:57:44,821 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:44,942 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:44,945 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6302d9cb]
2021-03-12 05:57:45,063 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 05:57:45,066 [main:302] - generating value of type = Int true depth = 1
2021-03-12 05:57:45,069 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(-1232243858, 258587686).sumOf({a: Char -> 1011401777})
2021-03-12 05:57:45,069 [main:114] - replacement of 1 of type Int is (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)
2021-03-12 05:57:45,186 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:57:45,187 [main:66] - Compilation checking started
2021-03-12 05:57:45,781 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if (fu6(1) { fu4() } != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:57:45,784 [main:107] - replacing (fu6(1) { fu4() }, String)
2021-03-12 05:57:45,784 [main:50] - replacing fu6(1) { fu4() } String
2021-03-12 05:57:45,784 [main:54] - Getting value of type String
2021-03-12 05:57:45,927 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:57:45,930 [main:58] - GENERATED VALUE OF TYPE String = "fmgqx"
2021-03-12 05:57:45,930 [main:61] - GENERATED IS CALL =false
2021-03-12 05:57:46,075 [main:67] - randomType = Kla9
2021-03-12 05:57:46,195 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 05:57:46,198 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}
2021-03-12 05:57:46,218 [main:106] - GETTING String from String
2021-03-12 05:57:46,235 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29555276]]
2021-03-12 05:57:46,235 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29555276]
2021-03-12 05:57:46,356 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:46,359 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).substringBeforeLast('?', Kla0<Char>().fu1())
2021-03-12 05:57:46,359 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280ba906]]
2021-03-12 05:57:46,359 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280ba906]
2021-03-12 05:57:46,359 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).trimEnd()
2021-03-12 05:57:46,359 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f7cab66]]
2021-03-12 05:57:46,359 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f7cab66]
2021-03-12 05:57:46,359 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).toUpperCase()
2021-03-12 05:57:46,359 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6969b325]]
2021-03-12 05:57:46,359 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:57:46,479 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:46,482 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6969b325]
2021-03-12 05:57:46,482 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).get(-1318064410).plus(fu0<String>({ "bjgag"}))
2021-03-12 05:57:46,482 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@210c047e]]
2021-03-12 05:57:46,482 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@210c047e]
2021-03-12 05:57:46,483 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).prependIndent(Kla0<Char>().fu1())
2021-03-12 05:57:46,483 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ab1054]]
2021-03-12 05:57:46,483 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ab1054]
2021-03-12 05:57:46,605 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:46,729 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:46,732 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).padStart(-1809246428, '潎')
2021-03-12 05:57:46,732 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f0c722]]
2021-03-12 05:57:46,732 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f0c722]
2021-03-12 05:57:46,855 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:57:46,858 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:57:46,861 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).filterNot({a: Char -> false})
2021-03-12 05:57:46,861 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@af7c122]]
2021-03-12 05:57:46,861 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@af7c122]
2021-03-12 05:57:46,981 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:46,984 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).substring(-1541060966)
2021-03-12 05:57:46,984 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d981b77]]
2021-03-12 05:57:46,984 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d981b77]
2021-03-12 05:57:46,985 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).lowercase()
2021-03-12 05:57:46,985 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30b7e630]]
2021-03-12 05:57:46,985 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30b7e630]
2021-03-12 05:57:47,107 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:47,110 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).substringBefore('ꫥ', Kla0<Char>().fu1())
2021-03-12 05:57:47,112 [main:114] - replacement of fu6(1) { fu4() } of type String is (fu0<String>({ "bjgag"})).toUpperCase()
2021-03-12 05:57:47,232 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:57:47,232 [main:66] - Compilation checking started
2021-03-12 05:57:47,811 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:57:47,814 [main:107] - replacing (suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}, String)
2021-03-12 05:57:47,814 [main:50] - replacing suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
} String
2021-03-12 05:57:47,814 [main:54] - Getting value of type String
2021-03-12 05:57:47,944 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:57:47,947 [main:58] - GENERATED VALUE OF TYPE String = "lcwoy"
2021-03-12 05:57:47,947 [main:61] - GENERATED IS CALL =false
2021-03-12 05:57:48,270 [main:67] - randomType = Kla0<UByte>
2021-03-12 05:57:48,390 [main:302] - generating value of type = Kla0<UByte> false depth = 0
2021-03-12 05:57:48,393 [main:112] - generating klass Kla0 text = class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}
2021-03-12 05:57:48,981 [main:149] - GENERATING call of type public final fun <Ty3> fu1(block: Kla0<kotlin.UByte>.Kla1<Ty3>.() -> kotlin.String): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@2b74a501]
2021-03-12 05:57:49,104 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Kla1<Ty3, UByte>, String> false depth = 0
2021-03-12 05:57:49,106 [main:302] - generating value of type = String true depth = 1
2021-03-12 05:57:49,109 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79089abb]
2021-03-12 05:57:49,109 [main:78] - Generated call from random type = (Kla0<UByte>()).fu1({ "nrfrr"}).trimStart()
2021-03-12 05:57:49,109 [main:106] - GETTING String from String
2021-03-12 05:57:49,131 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f567b3f]]
2021-03-12 05:57:49,132 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f567b3f]
2021-03-12 05:57:49,252 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:49,255 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).replaceBeforeLast('䓪', fu0<String>({ "bjgag"}), Kla0<Char>().fu1())
2021-03-12 05:57:49,255 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29555276]]
2021-03-12 05:57:49,255 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29555276]
2021-03-12 05:57:49,374 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:49,496 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:57:49,499 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).substringBeforeLast('ꂾ', "vzdas")
2021-03-12 05:57:49,499 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe54abf]]
2021-03-12 05:57:49,499 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe54abf]
2021-03-12 05:57:49,499 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).trim()
2021-03-12 05:57:49,499 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17458d64]]
2021-03-12 05:57:49,499 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17458d64]
2021-03-12 05:57:49,500 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).reversed()
2021-03-12 05:57:49,500 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f8dedf]]
2021-03-12 05:57:49,500 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:57:49,619 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:49,741 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:49,744 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f8dedf]
2021-03-12 05:57:49,863 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:57:49,987 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 05:57:49,991 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 05:57:50,262 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:57:50,265 [main:95] - GENERATED = Regex("oqoex")
2021-03-12 05:57:50,388 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 05:57:50,391 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:57:50,396 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(-173952983, 1807523185).replace(Regex("oqoex"), {a: MatchResult -> "vhxaa"})
2021-03-12 05:57:50,396 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6969b325]]
2021-03-12 05:57:50,396 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:57:50,515 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:50,518 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6969b325]
2021-03-12 05:57:50,638 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:57:50,641 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(-1903251976).plus("htfpc")
2021-03-12 05:57:50,641 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]]
2021-03-12 05:57:50,641 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]
2021-03-12 05:57:50,763 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:57:50,889 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:57:50,893 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:57:51,157 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:57:51,160 [main:95] - GENERATED = StringBuilder("qwqrf")
2021-03-12 05:57:51,280 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:57:51,283 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).commonSuffixWith(StringBuilder("qwqrf"), false)
2021-03-12 05:57:51,284 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@530ec99c]]
2021-03-12 05:57:51,284 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@530ec99c]
2021-03-12 05:57:51,404 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:51,407 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).drop(-2138456284)
2021-03-12 05:57:51,407 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6059c509]]
2021-03-12 05:57:51,407 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6059c509]
2021-03-12 05:57:51,528 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:51,659 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:51,781 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:57:51,787 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).replaceRange(-684463607, -767780473, "tqshs")
2021-03-12 05:57:51,787 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65639ae6]]
2021-03-12 05:57:51,787 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65639ae6]
2021-03-12 05:57:51,907 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:52,029 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:57:52,031 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).replaceAfterLast('뽠', "onmml", fu0<String>({ "bjgag"}))
2021-03-12 05:57:52,032 [main:114] - replacement of suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
} of type String is "lcwoy"
2021-03-12 05:57:52,156 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 05:57:52,156 [main:66] - Compilation checking started
2021-03-12 05:57:52,768 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:57:52,771 [main:107] - replacing (prope5.getOrThrow(), Ty4)
2021-03-12 05:57:52,771 [main:50] - replacing prope5.getOrThrow() Ty4
2021-03-12 05:57:52,772 [main:54] - Getting value of type Ty4
2021-03-12 05:57:52,909 [main:302] - generating value of type = Ty4 false depth = 0
2021-03-12 05:57:52,914 [main:58] - GENERATED VALUE OF TYPE Ty4 = 
2021-03-12 05:57:53,642 [main:67] - randomType = Pair<LinkedHashMap<Kla0<Kla5>, Double>, UInt>?
2021-03-12 05:57:53,761 [main:302] - generating value of type = Pair<LinkedHashMap<Kla0<Kla5>, Double>, UInt> false depth = 0
2021-03-12 05:57:53,887 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: LinkedHashMap<Kla0<Kla5>, Double>, second: UInt): Pair<LinkedHashMap<Kla0<Kla5>, Double>, UInt> = TODO()
2021-03-12 05:57:53,891 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: LinkedHashMap<Kla0<Kla5>, Double>, second: UInt): Pair<LinkedHashMap<Kla0<Kla5>, Double>, UInt> = TODO()
2021-03-12 05:57:54,016 [main:302] - generating value of type = LinkedHashMap<Kla0<Kla5>, Double> false depth = 3
2021-03-12 05:57:54,143 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(): LinkedHashMap<Kla0<Kla5>, Double> = TODO()
2021-03-12 05:57:54,147 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(): LinkedHashMap<Kla0<Kla5>, Double> = TODO()
2021-03-12 05:57:54,274 [main:95] - GENERATED = LinkedHashMap<Kla0<Kla5>, Double>()
2021-03-12 05:57:54,274 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 05:57:54,277 [main:95] - GENERATED = Pair<LinkedHashMap<Kla0<Kla5>, Double>, UInt>(LinkedHashMap<Kla0<Kla5>, Double>(), 1337224790.toUInt())
2021-03-12 05:57:54,308 [main:106] - GETTING Ty4 from String
2021-03-12 05:57:54,326 [main:106] - GETTING Ty4 from String
2021-03-12 05:57:54,326 [main:111] - Cant find and generate replacement for prope5.getOrThrow() type Ty4
2021-03-12 05:57:54,326 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions, String)
2021-03-12 05:57:54,327 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions String
2021-03-12 05:57:54,327 [main:54] - Getting value of type String
2021-03-12 05:57:54,445 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:57:54,448 [main:58] - GENERATED VALUE OF TYPE String = "kmjti"
2021-03-12 05:57:54,448 [main:61] - GENERATED IS CALL =false
2021-03-12 05:57:54,583 [main:67] - randomType = UInt
2021-03-12 05:57:54,702 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 05:57:54,732 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@60dcf976]
2021-03-12 05:57:54,732 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f850d83]
2021-03-12 05:57:54,852 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:54,855 [main:78] - Generated call from random type = (1393011787.toUInt()).toLong().toString(-1173463311)
2021-03-12 05:57:54,855 [main:106] - GETTING String from String
2021-03-12 05:57:54,878 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f567b3f]]
2021-03-12 05:57:54,878 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f567b3f]
2021-03-12 05:57:54,998 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:55,001 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).replaceBeforeLast('', fu0<String>({ "bjgag"}), fu0<String>({ "bjgag"}))
2021-03-12 05:57:55,001 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d39c6e0]]
2021-03-12 05:57:55,001 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d39c6e0]
2021-03-12 05:57:55,123 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:55,243 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:55,364 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:57:55,366 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).replaceFirst('쑎', '沔', false)
2021-03-12 05:57:55,366 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eba6b09]]
2021-03-12 05:57:55,366 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eba6b09]
2021-03-12 05:57:55,485 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:57:55,487 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).trimMargin("uqoqt")
2021-03-12 05:57:55,487 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5898cc8d]]
2021-03-12 05:57:55,487 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:57:55,605 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:55,608 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5898cc8d]
2021-03-12 05:57:55,608 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(1865673374).uppercase()
2021-03-12 05:57:55,608 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122af64]]
2021-03-12 05:57:55,608 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:57:55,726 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:55,848 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:55,850 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122af64]
2021-03-12 05:57:55,969 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:55,972 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(-1679647505, 288430397).repeat(97615968)
2021-03-12 05:57:55,972 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ab1054]]
2021-03-12 05:57:55,972 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ab1054]
2021-03-12 05:57:56,092 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:56,214 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:56,217 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).padStart(117784956, '돢')
2021-03-12 05:57:56,217 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396e07d2]]
2021-03-12 05:57:56,217 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396e07d2]
2021-03-12 05:57:56,335 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 05:57:56,461 [main:43] - GENERATING CALL OF fun <T> listOf(): Iterable<Int> = TODO()
2021-03-12 05:57:56,464 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(): Iterable<Int> = TODO()
2021-03-12 05:57:56,633 [main:95] - GENERATED = listOf<Int>()
2021-03-12 05:57:56,633 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).slice(listOf<Int>())
2021-03-12 05:57:56,633 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40b7db4d]]
2021-03-12 05:57:56,633 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40b7db4d]
2021-03-12 05:57:56,633 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).capitalize()
2021-03-12 05:57:56,633 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@af7c122]]
2021-03-12 05:57:56,633 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@af7c122]
2021-03-12 05:57:56,752 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:56,755 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).substring(1186250409)
2021-03-12 05:57:56,755 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43da71d6]]
2021-03-12 05:57:56,755 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43da71d6]
2021-03-12 05:57:56,876 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:57:56,999 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:57:57,003 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:57:57,265 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 05:57:57,271 [main:95] - GENERATED = StringBuilder("zmyfe")
2021-03-12 05:57:57,271 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).removeSuffix(StringBuilder("zmyfe"))
2021-03-12 05:57:57,271 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions of type String is (Kla0<Char>().fu1()).subSequence(-1679647505, 288430397).repeat(97615968)
2021-03-12 05:57:57,389 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:57:57,389 [main:66] - Compilation checking started
2021-03-12 05:57:57,761 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error((Kla0<Char>().fu1()).subSequence(-1679647505, 288430397).repeat(97615968) + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:57:57,764 [main:107] - replacing (fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}), String)
2021-03-12 05:57:57,764 [main:50] - replacing fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) String
2021-03-12 05:57:57,764 [main:54] - Getting value of type String
2021-03-12 05:57:57,891 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:57:57,894 [main:58] - GENERATED VALUE OF TYPE String = "iwfft"
2021-03-12 05:57:57,894 [main:61] - GENERATED IS CALL =false
2021-03-12 05:57:58,467 [main:67] - randomType = Function2<Kla4?, Collection<String>, ArrayDeque<Char>>
2021-03-12 05:57:58,468 [main:106] - GETTING String from String
2021-03-12 05:57:58,486 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36e429dc]]
2021-03-12 05:57:58,486 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36e429dc]
2021-03-12 05:57:58,610 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:57:58,613 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:57:58,615 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).takeWhile({a: Char -> true})
2021-03-12 05:57:58,616 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c04dd27]]
2021-03-12 05:57:58,616 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c04dd27]
2021-03-12 05:57:58,733 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:57:58,736 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).concat("angnp")
2021-03-12 05:57:58,736 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52a8be22]]
2021-03-12 05:57:58,736 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:57:58,736 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52a8be22]
2021-03-12 05:57:58,858 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:58,861 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).compareTo(fu0<String>({ "bjgag"})).toString(1055978362)
2021-03-12 05:57:58,861 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40b7db4d]]
2021-03-12 05:57:58,861 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40b7db4d]
2021-03-12 05:57:58,861 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).capitalize()
2021-03-12 05:57:58,861 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@faeda96]]
2021-03-12 05:57:58,861 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:57:58,980 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:58,983 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@faeda96]
2021-03-12 05:57:58,983 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(-197920394).lowercase()
2021-03-12 05:57:58,983 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1571a09e]]
2021-03-12 05:57:58,983 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1571a09e]
2021-03-12 05:57:59,103 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:59,106 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).replaceAfter('䯇', fu0<String>({ "bjgag"}), fu0<String>({ "bjgag"}))
2021-03-12 05:57:59,106 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2c09ad8b]]
2021-03-12 05:57:59,106 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2c09ad8b]
2021-03-12 05:57:59,225 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:57:59,225 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).plus("dziqv")
2021-03-12 05:57:59,226 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@238f1ef2]]
2021-03-12 05:57:59,226 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:57:59,351 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:59,472 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:57:59,475 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@238f1ef2]
2021-03-12 05:57:59,593 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:57:59,716 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:57:59,719 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(342989512, 179563062).commonPrefixWith("ugklt", false)
2021-03-12 05:57:59,719 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280ba906]]
2021-03-12 05:57:59,719 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280ba906]
2021-03-12 05:57:59,720 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).trimEnd()
2021-03-12 05:57:59,720 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72950e61]]
2021-03-12 05:57:59,720 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72950e61]
2021-03-12 05:57:59,838 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:57:59,960 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:58:00,083 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:00,085 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).replace('籝', '꿾', true)
2021-03-12 05:58:00,085 [main:114] - replacement of fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) of type String is (Kla0<Char>().fu1()).replace('籝', '꿾', true)
2021-03-12 05:58:00,205 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:58:00,205 [main:66] - Compilation checking started
2021-03-12 05:58:00,558 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((Kla0<Char>().fu1()).replace('籝', '꿾', true) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:58:00,560 [main:107] - replacing (COROUTINE_SUSPENDED, Any)
2021-03-12 05:58:00,560 [main:50] - replacing COROUTINE_SUSPENDED Any
2021-03-12 05:58:00,560 [main:54] - Getting value of type Any
2021-03-12 05:58:00,680 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:58:00,680 [main:58] - GENERATED VALUE OF TYPE Any = "yuwtq"
2021-03-12 05:58:00,680 [main:61] - GENERATED IS CALL =false
2021-03-12 05:58:01,012 [main:67] - randomType = Map<Long?, Long>
2021-03-12 05:58:01,016 [main:106] - GETTING Any from String
2021-03-12 05:58:01,035 [main:114] - replacement of COROUTINE_SUSPENDED of type Any is "yuwtq"
2021-03-12 05:58:01,153 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 05:58:01,153 [main:66] - Compilation checking started
2021-03-12 05:58:01,754 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if (fu6(0) { fu2() } != "OK") return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:58:01,756 [main:107] - replacing (c, Continuation<*>)
2021-03-12 05:58:01,756 [main:50] - replacing c Continuation<*>
2021-03-12 05:58:01,756 [main:54] - Getting value of type Continuation<*>
2021-03-12 05:58:01,882 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 05:58:02,006 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 05:58:02,010 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 05:58:02,419 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 05:58:02,542 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:02,546 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:02,811 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 05:58:02,938 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:02,942 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:03,351 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:03,352 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:03,352 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 05:58:03,352 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 05:58:03,362 [main:67] - randomType = Kla4
2021-03-12 05:58:03,480 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 05:58:03,483 [main:112] - generating klass Kla4 text = open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}
2021-03-12 05:58:03,600 [main:194] - Type params = []
2021-03-12 05:58:03,718 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 05:58:03,844 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:03,848 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:04,128 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 05:58:04,256 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:04,259 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:04,668 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 05:58:04,795 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:58:04,799 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:58:05,278 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-12 05:58:05,405 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:58:05,409 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:58:05,814 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 14
2021-03-12 05:58:05,941 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:58:05,945 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:58:06,351 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:58:06,351 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:58:06,351 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:58:06,351 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:06,351 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:06,366 [main:106] - GETTING Continuation<*> from String
2021-03-12 05:58:06,384 [main:106] - GETTING Continuation<*> from String
2021-03-12 05:58:06,384 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 05:58:06,384 [main:107] - replacing (fu6(0) { fu2() } != "OK", Boolean)
2021-03-12 05:58:06,384 [main:50] - replacing fu6(0) { fu2() } != "OK" Boolean
2021-03-12 05:58:06,384 [main:54] - Getting value of type Boolean
2021-03-12 05:58:06,503 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:06,505 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:58:06,505 [main:61] - GENERATED IS CALL =false
2021-03-12 05:58:06,511 [main:67] - randomType = Char
2021-03-12 05:58:06,629 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:58:06,650 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@756e251c]
2021-03-12 05:58:06,768 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:58:06,768 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5daf7fea]
2021-03-12 05:58:06,768 [main:78] - Generated call from random type = ('娿').equals("zmfqx").not()
2021-03-12 05:58:06,769 [main:106] - GETTING Boolean from String
2021-03-12 05:58:06,788 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b7db3f2]]
2021-03-12 05:58:06,788 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:58:06,906 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:06,908 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b7db3f2]
2021-03-12 05:58:06,909 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).get(-1259804344).isWhitespace()
2021-03-12 05:58:06,909 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]]
2021-03-12 05:58:06,909 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:58:07,026 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:58:07,027 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).equals("scmwa")
2021-03-12 05:58:07,027 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c068836]]
2021-03-12 05:58:07,027 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c068836]
2021-03-12 05:58:07,027 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).none()
2021-03-12 05:58:07,027 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a140107]]
2021-03-12 05:58:07,027 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:58:07,146 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:07,266 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:07,269 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a140107]
2021-03-12 05:58:07,386 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:58:07,506 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:07,509 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(-796726253, 574004733).endsWith('⛆', false)
2021-03-12 05:58:07,510 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@347c5fec]]
2021-03-12 05:58:07,510 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:58:07,628 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:07,748 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:07,751 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@347c5fec]
2021-03-12 05:58:07,869 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:58:07,992 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 05:58:07,996 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 05:58:08,406 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:58:08,409 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 05:58:08,534 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 05:58:08,538 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 05:58:08,664 [main:302] - generating value of type = RegexOption false depth = 6
2021-03-12 05:58:08,667 [main:95] - GENERATED = linkedSetOf<RegexOption>(kotlin.text.RegexOption.MULTILINE)
2021-03-12 05:58:08,667 [main:95] - GENERATED = Regex("vwgdw", linkedSetOf<RegexOption>(kotlin.text.RegexOption.MULTILINE))
2021-03-12 05:58:08,668 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(-1797895633, 1669314575).matches(Regex("vwgdw", linkedSetOf<RegexOption>(kotlin.text.RegexOption.MULTILINE)))
2021-03-12 05:58:08,668 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4244399]]
2021-03-12 05:58:08,668 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:58:08,788 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:08,911 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:08,914 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4244399]
2021-03-12 05:58:08,914 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(1830832362, 1118483211).isEmpty()
2021-03-12 05:58:08,914 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4244399]]
2021-03-12 05:58:08,914 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4244399]
2021-03-12 05:58:08,914 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).isEmpty()
2021-03-12 05:58:08,914 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534faf7a]]
2021-03-12 05:58:08,914 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:58:09,034 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:09,037 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534faf7a]
2021-03-12 05:58:09,037 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).get(-1187673887).isDefined()
2021-03-12 05:58:09,037 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@314eea13]]
2021-03-12 05:58:09,037 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:58:09,158 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:09,280 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:09,283 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@314eea13]
2021-03-12 05:58:09,283 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(2045725765, 870304389).isBlank()
2021-03-12 05:58:09,283 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@221d65f3]]
2021-03-12 05:58:09,284 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:58:09,451 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:58:09,452 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@221d65f3]
2021-03-12 05:58:09,572 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:09,575 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).equals("knsdg").or(false)
2021-03-12 05:58:09,575 [main:114] - replacement of fu6(0) { fu2() } != "OK" of type Boolean is (fu0<String>({ "bjgag"})).none()
2021-03-12 05:58:09,694 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:58:09,694 [main:66] - Compilation checking started
2021-03-12 05:58:10,252 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:58:10,255 [main:107] - replacing (prope7, Boolean)
2021-03-12 05:58:10,255 [main:50] - replacing prope7 Boolean
2021-03-12 05:58:10,255 [main:54] - Getting value of type Boolean
2021-03-12 05:58:10,375 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:10,378 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:58:10,378 [main:61] - GENERATED IS CALL =false
2021-03-12 05:58:10,383 [main:67] - randomType = String
2021-03-12 05:58:10,503 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:58:10,524 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:58:10,644 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:10,767 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:10,770 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@314eea13]
2021-03-12 05:58:10,770 [main:78] - Generated call from random type = ("zownh").subSequence(1556677940, -1568505653).isBlank()
2021-03-12 05:58:10,771 [main:106] - GETTING Boolean from String
2021-03-12 05:58:10,789 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c611e61]]
2021-03-12 05:58:10,789 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:58:10,910 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:10,913 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c611e61]
2021-03-12 05:58:11,033 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:58:11,156 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:11,159 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(-453649358).equals('冽', false)
2021-03-12 05:58:11,159 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5755f025]]
2021-03-12 05:58:11,159 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:58:11,279 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5755f025]
2021-03-12 05:58:11,399 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:11,402 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).equals(null).and(true)
2021-03-12 05:58:11,402 [main:113] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca1d83b]]
2021-03-12 05:58:11,402 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca1d83b]
2021-03-12 05:58:11,402 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).matches(fu0<String>({ "bjgag"}))
2021-03-12 05:58:11,402 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@314eea13]]
2021-03-12 05:58:11,402 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:58:11,522 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:11,644 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:11,647 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@314eea13]
2021-03-12 05:58:11,647 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(-1793227575, -1128854428).isBlank()
2021-03-12 05:58:11,647 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4244399]]
2021-03-12 05:58:11,648 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:58:11,767 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:11,890 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:11,892 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4244399]
2021-03-12 05:58:11,893 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(661722039, 517259927).isEmpty()
2021-03-12 05:58:11,893 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d068465]]
2021-03-12 05:58:11,893 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d068465]
2021-03-12 05:58:12,013 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:12,015 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).hasSurrogatePairAt(1120875538)
2021-03-12 05:58:12,016 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534faf7a]]
2021-03-12 05:58:12,016 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:58:12,136 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:12,139 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534faf7a]
2021-03-12 05:58:12,139 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(-1243975916).isDefined()
2021-03-12 05:58:12,139 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51aeaeb8]]
2021-03-12 05:58:12,139 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51aeaeb8]
2021-03-12 05:58:12,259 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:12,381 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:58:12,508 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:58:12,512 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:58:12,944 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:58:12,947 [main:95] - GENERATED = StringBuilder(-521155291)
2021-03-12 05:58:13,068 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:13,192 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:13,314 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:13,317 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).regionMatches(425100067, StringBuilder(-521155291), 481787483, -1539078533, false)
2021-03-12 05:58:13,317 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ea7a2d8]]
2021-03-12 05:58:13,317 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:58:13,437 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:13,440 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ea7a2d8]
2021-03-12 05:58:13,440 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(2020783873).isDigit()
2021-03-12 05:58:13,440 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f512be2]]
2021-03-12 05:58:13,440 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:58:13,560 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:58:13,562 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f512be2]
2021-03-12 05:58:13,682 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:58:13,682 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).compareTo("yuxqx").equals("jmcmo")
2021-03-12 05:58:13,682 [main:114] - replacement of prope7 of type Boolean is (Kla0<Char>().fu1()).regionMatches(425100067, StringBuilder(-521155291), 481787483, -1539078533, false)
2021-03-12 05:58:13,802 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:58:13,802 [main:66] - Compilation checking started
2021-03-12 05:58:14,225 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        (Kla0<Char>().fu1()).regionMatches(425100067, StringBuilder(-521155291), 481787483, -1539078533, false) = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:58:14,227 [main:107] - replacing (true, Boolean)
2021-03-12 05:58:14,227 [main:50] - replacing true Boolean
2021-03-12 05:58:14,227 [main:54] - Getting value of type Boolean
2021-03-12 05:58:14,348 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:14,350 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:58:14,350 [main:61] - GENERATED IS CALL =false
2021-03-12 05:58:14,498 [main:67] - randomType = ArrayList<Kla8>
2021-03-12 05:58:14,618 [main:302] - generating value of type = ArrayList<Kla8> false depth = 0
2021-03-12 05:58:14,744 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Kla8): ArrayList<Kla8> = TODO()
2021-03-12 05:58:14,747 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Kla8): ArrayList<Kla8> = TODO()
2021-03-12 05:58:14,876 [main:302] - generating value of type = Kla8 false depth = 3
2021-03-12 05:58:14,879 [main:112] - generating klass Kla8 text = class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:58:14,879 [main:95] - GENERATED = arrayListOf<Kla8>(Kla8())
2021-03-12 05:58:15,005 [main:149] - GENERATING call of type public open fun add(element: Kla8): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3fbc1d11]
2021-03-12 05:58:15,130 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 05:58:15,133 [main:112] - generating klass Kla8 text = class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:58:15,133 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@298bfadd]
2021-03-12 05:58:15,253 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:58:15,254 [main:78] - Generated call from random type = (arrayListOf<Kla8>(Kla8())).add(Kla8()).equals("ldoyf")
2021-03-12 05:58:15,255 [main:106] - GETTING Boolean from String
2021-03-12 05:58:15,273 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f7bc479]]
2021-03-12 05:58:15,273 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:58:15,394 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:15,517 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:15,519 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f7bc479]
2021-03-12 05:58:15,520 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(1790033133, -286707029).isNotBlank()
2021-03-12 05:58:15,520 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]]
2021-03-12 05:58:15,520 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:58:15,640 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).equals(null)
2021-03-12 05:58:15,640 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@488da598]]
2021-03-12 05:58:15,640 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:58:15,760 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:15,762 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@488da598]
2021-03-12 05:58:15,763 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(1341703882).isTitleCase()
2021-03-12 05:58:15,763 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c611e61]]
2021-03-12 05:58:15,763 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:58:15,883 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:15,885 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c611e61]
2021-03-12 05:58:16,005 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:58:16,130 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:16,133 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(370543981).equals('뷜', true)
2021-03-12 05:58:16,133 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d4bdafd]]
2021-03-12 05:58:16,133 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d4bdafd]
2021-03-12 05:58:16,133 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).any()
2021-03-12 05:58:16,133 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5755f025]]
2021-03-12 05:58:16,133 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:58:16,253 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:58:16,253 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5755f025]
2021-03-12 05:58:16,373 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:16,376 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).equals("epljj").and(false)
2021-03-12 05:58:16,376 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f512be2]]
2021-03-12 05:58:16,376 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:58:16,376 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f512be2]
2021-03-12 05:58:16,496 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:58:16,497 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).compareTo(Kla0<Char>().fu1()).equals("corka")
2021-03-12 05:58:16,497 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f1ffc0]]
2021-03-12 05:58:16,497 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:58:16,616 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:16,619 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f1ffc0]
2021-03-12 05:58:16,619 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(1910481773).isISOControl()
2021-03-12 05:58:16,619 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f512be2]]
2021-03-12 05:58:16,619 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f512be2]
2021-03-12 05:58:16,739 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).length.equals(null)
2021-03-12 05:58:16,739 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a24c88]]
2021-03-12 05:58:16,739 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a24c88]
2021-03-12 05:58:16,859 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:16,862 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).startsWith(fu0<String>({ "bjgag"}), false)
2021-03-12 05:58:16,862 [main:114] - replacement of true of type Boolean is (Kla0<Char>().fu1()).subSequence(1790033133, -286707029).isNotBlank()
2021-03-12 05:58:16,983 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:58:16,983 [main:66] - Compilation checking started
2021-03-12 05:58:17,341 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = (Kla0<Char>().fu1()).subSequence(1790033133, -286707029).isNotBlank()
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:58:17,343 [main:107] - replacing (prope5.getOrThrow(), Any?)
2021-03-12 05:58:17,343 [main:50] - replacing prope5.getOrThrow() Any?
2021-03-12 05:58:17,343 [main:54] - Getting value of type Any?
2021-03-12 05:58:17,463 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:58:17,463 [main:58] - GENERATED VALUE OF TYPE Any? = "zknqp"
2021-03-12 05:58:17,464 [main:61] - GENERATED IS CALL =false
2021-03-12 05:58:18,349 [main:67] - randomType = Pair<Kla6<Float>, LinkedHashMap<HashSet<Char>, UByte>>?
2021-03-12 05:58:18,508 [main:302] - generating value of type = Pair<Kla6<Float>, LinkedHashMap<HashSet<Char>, UByte>> false depth = 0
2021-03-12 05:58:18,636 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla6<Float>, second: LinkedHashMap<HashSet<Char>, UByte>): Pair<Kla6<Float>, LinkedHashMap<HashSet<Char>, UByte>> = TODO()
2021-03-12 05:58:18,639 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla6<Float>, second: LinkedHashMap<HashSet<Char>, UByte>): Pair<Kla6<Float>, LinkedHashMap<HashSet<Char>, UByte>> = TODO()
2021-03-12 05:58:18,766 [main:302] - generating value of type = Kla6<Float> false depth = 3
2021-03-12 05:58:18,768 [main:112] - generating klass Kla6 text = abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}
2021-03-12 05:58:19,302 [main:302] - generating value of type = Kla3<Float> false depth = 5
2021-03-12 05:58:19,305 [main:112] - generating klass Kla3 text = private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}
2021-03-12 05:58:19,715 [main:194] - Type params = [Float]
2021-03-12 05:58:19,834 [main:302] - generating value of type = Function0<Unit> false depth = 7
2021-03-12 05:58:19,837 [main:302] - generating value of type = Unit false depth = 8
2021-03-12 05:58:19,977 [main:302] - generating value of type = Continuation<Float> false depth = 7
2021-03-12 05:58:20,104 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Float>)->kotlin.Unit): Contuation<Float> = TODO()
2021-03-12 05:58:20,108 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Float>)->kotlin.Unit): Contuation<Float> = TODO()
2021-03-12 05:58:20,518 [main:302] - generating value of type = CoroutineContext false depth = 10
2021-03-12 05:58:20,643 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:20,647 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:20,918 [main:302] - generating value of type = Key<*> false depth = 13
2021-03-12 05:58:21,047 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:21,051 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:21,465 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:21,465 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:21,465 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Float>)->kotlin.Unit): Contuation<Float> = TODO()
2021-03-12 05:58:21,466 [main:302] - generating value of type = LinkedHashMap<HashSet<Char>, UByte> false depth = 3
2021-03-12 05:58:21,593 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<HashSet<Char>, UByte> = TODO()
2021-03-12 05:58:21,596 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<HashSet<Char>, UByte> = TODO()
2021-03-12 05:58:21,723 [main:95] - GENERATED = linkedMapOf<HashSet<Char>, UByte>()
2021-03-12 05:58:21,723 [main:95] - GENERATED = Pair<Kla6<Float>, LinkedHashMap<HashSet<Char>, UByte>>(Kla3<Float>({ println()}, ), linkedMapOf<HashSet<Char>, UByte>())
2021-03-12 05:58:21,755 [main:106] - GETTING Any? from String
2021-03-12 05:58:21,776 [main:106] - GETTING Any? from String
2021-03-12 05:58:21,776 [main:114] - replacement of prope5.getOrThrow() of type Any? is "zknqp"
2021-03-12 05:58:21,899 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 05:58:21,900 [main:66] - Compilation checking started
2021-03-12 05:58:22,461 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:58:22,463 [main:107] - replacing (true, Boolean)
2021-03-12 05:58:22,463 [main:50] - replacing true Boolean
2021-03-12 05:58:22,463 [main:54] - Getting value of type Boolean
2021-03-12 05:58:22,596 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:22,599 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:58:22,599 [main:61] - GENERATED IS CALL =false
2021-03-12 05:58:22,610 [main:67] - randomType = Kla4
2021-03-12 05:58:22,734 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 05:58:22,737 [main:112] - generating klass Kla4 text = open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}
2021-03-12 05:58:22,857 [main:194] - Type params = []
2021-03-12 05:58:23,017 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 05:58:23,145 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:23,148 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:23,417 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 05:58:23,546 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:23,549 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:23,960 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:23,960 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:23,972 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@2cde0cef]
2021-03-12 05:58:24,094 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:58:24,094 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@221d65f3]
2021-03-12 05:58:24,214 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:24,216 [main:78] - Generated call from random type = (Kla4()).equals("jfcny").or(true)
2021-03-12 05:58:24,217 [main:106] - GETTING Boolean from String
2021-03-12 05:58:24,236 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d068465]]
2021-03-12 05:58:24,236 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:58:24,355 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:24,477 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:24,480 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d068465]
2021-03-12 05:58:24,600 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:24,602 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(-46884945, 1952856602).hasSurrogatePairAt(361471428)
2021-03-12 05:58:24,603 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@298bfadd]]
2021-03-12 05:58:24,603 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:58:24,721 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:58:24,722 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@298bfadd]
2021-03-12 05:58:24,841 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:58:24,841 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).equals("ldroh").equals("eabxg")
2021-03-12 05:58:24,841 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77ae82e0]]
2021-03-12 05:58:24,842 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:58:24,961 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:25,085 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:25,088 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77ae82e0]
2021-03-12 05:58:25,207 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:58:25,210 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:58:25,213 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(-234195959, 772289457).all({a: Char -> false})
2021-03-12 05:58:25,213 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c068836]]
2021-03-12 05:58:25,213 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:58:25,332 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:25,453 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:25,456 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c068836]
2021-03-12 05:58:25,456 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(-1083446763, 315767258).none()
2021-03-12 05:58:25,456 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]]
2021-03-12 05:58:25,456 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:58:25,575 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:58:25,575 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).equals("dwwcm")
2021-03-12 05:58:25,575 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f7bc479]]
2021-03-12 05:58:25,575 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:58:25,694 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:25,815 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:25,818 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f7bc479]
2021-03-12 05:58:25,818 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(1833797111, 90144711).isNotBlank()
2021-03-12 05:58:25,818 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@221d65f3]]
2021-03-12 05:58:25,819 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:58:25,938 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@221d65f3]
2021-03-12 05:58:26,057 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:26,060 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).equals(null).or(false)
2021-03-12 05:58:26,060 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c611e61]]
2021-03-12 05:58:26,060 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:58:26,180 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:26,182 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c611e61]
2021-03-12 05:58:26,301 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:58:26,423 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:26,426 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(-1506905463).equals('᠖', false)
2021-03-12 05:58:26,426 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cea665c]]
2021-03-12 05:58:26,426 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cea665c]
2021-03-12 05:58:26,426 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).toBoolean()
2021-03-12 05:58:26,426 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f512be2]]
2021-03-12 05:58:26,426 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:58:26,545 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:58:26,548 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f512be2]
2021-03-12 05:58:26,667 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:58:26,667 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).compareTo("tkpun").equals("zykjt")
2021-03-12 05:58:26,668 [main:114] - replacement of true of type Boolean is (Kla0<Char>().fu1()).equals("dwwcm")
2021-03-12 05:58:26,786 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:58:26,787 [main:66] - Compilation checking started
2021-03-12 05:58:27,142 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = (Kla0<Char>().fu1()).equals("dwwcm")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:58:27,144 [main:107] - replacing ({ c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 05:58:27,144 [main:50] - replacing { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-12 05:58:27,144 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 05:58:27,315 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 05:58:27,318 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:58:27,324 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> println()}
2021-03-12 05:58:27,324 [main:61] - GENERATED IS CALL =false
2021-03-12 05:58:27,602 [main:67] - randomType = Set<UShort>
2021-03-12 05:58:27,604 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 05:58:27,624 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 05:58:27,624 [main:114] - replacement of { c ->
        (0.8929061f)?.compareTo(-122).unaryPlus()
        prope8 = { c.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> println()}
2021-03-12 05:58:27,743 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:58:27,743 [main:66] - Compilation checking started
2021-03-12 05:58:28,277 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:58:28,280 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-12 05:58:28,280 [main:50] - replacing prope8 Function0<Unit>
2021-03-12 05:58:28,280 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:58:28,405 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:58:28,408 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:58:28,534 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:58:28,537 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:58:28,799 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:58:28,802 [main:95] - GENERATED = check(true)
2021-03-12 05:58:28,802 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-12 05:58:28,802 [main:61] - GENERATED IS CALL =false
2021-03-12 05:58:28,812 [main:67] - randomType = Kla7
2021-03-12 05:58:28,933 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 05:58:28,936 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}
2021-03-12 05:58:28,942 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:58:28,962 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:58:28,962 [main:114] - replacement of prope8 of type Function0<Unit> is { check(true)}
2021-03-12 05:58:29,082 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:58:29,082 [main:66] - Compilation checking started
2021-03-12 05:58:29,431 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().{ check(true)} = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:58:29,433 [main:107] - replacing (Kla7(), Kla7)
2021-03-12 05:58:29,433 [main:50] - replacing Kla7() Kla7
2021-03-12 05:58:29,433 [main:54] - Getting value of type Kla7
2021-03-12 05:58:29,553 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 05:58:29,556 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}
2021-03-12 05:58:29,556 [main:58] - GENERATED VALUE OF TYPE Kla7 = Kla7()
2021-03-12 05:58:29,556 [main:61] - GENERATED IS CALL =true
2021-03-12 05:58:29,835 [main:67] - randomType = Kla3<UByte>
2021-03-12 05:58:29,962 [main:302] - generating value of type = Kla3<UByte> false depth = 0
2021-03-12 05:58:29,965 [main:112] - generating klass Kla3 text = private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}
2021-03-12 05:58:30,364 [main:194] - Type params = [UByte]
2021-03-12 05:58:30,482 [main:302] - generating value of type = Function0<Unit> false depth = 2
2021-03-12 05:58:30,485 [main:302] - generating value of type = Unit false depth = 3
2021-03-12 05:58:30,611 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:58:30,614 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:58:30,882 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 6
2021-03-12 05:58:30,885 [main:302] - generating value of type = Unit false depth = 7
2021-03-12 05:58:31,011 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:58:31,014 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:58:31,278 [main:302] - generating value of type = Any false depth = 10
2021-03-12 05:58:31,279 [main:95] - GENERATED = println("ebtfy")
2021-03-12 05:58:31,279 [main:95] - GENERATED = contract({ println("ebtfy")})
2021-03-12 05:58:31,411 [main:302] - generating value of type = Continuation<UByte> false depth = 2
2021-03-12 05:58:31,536 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<UByte>)->kotlin.Unit): Contuation<UByte> = TODO()
2021-03-12 05:58:31,539 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<UByte>)->kotlin.Unit): Contuation<UByte> = TODO()
2021-03-12 05:58:32,000 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-12 05:58:32,128 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:32,131 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:32,400 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-12 05:58:32,552 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:32,556 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:32,976 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-12 05:58:33,114 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:58:33,118 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:58:33,531 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 14
2021-03-12 05:58:33,660 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:58:33,663 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:58:34,072 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 17
2021-03-12 05:58:34,072 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:58:34,072 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:58:34,072 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:34,072 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:34,072 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<UByte>)->kotlin.Unit): Contuation<UByte> = TODO()
2021-03-12 05:58:34,098 [main:106] - GETTING Kla7 from String
2021-03-12 05:58:34,116 [main:106] - GETTING Kla7 from String
2021-03-12 05:58:34,116 [main:114] - replacement of Kla7() of type Kla7 is Kla7()
2021-03-12 05:58:34,244 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:58:34,246 [main:107] - replacing (continuation, Continuation<Ty4>)
2021-03-12 05:58:34,246 [main:50] - replacing continuation Continuation<Ty4>
2021-03-12 05:58:34,246 [main:54] - Getting value of type Continuation<Ty4>
2021-03-12 05:58:34,370 [main:302] - generating value of type = Continuation<Ty4> false depth = 0
2021-03-12 05:58:34,494 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Ty4>)->kotlin.Unit): Contuation<Ty4> = TODO()
2021-03-12 05:58:34,497 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Ty4>)->kotlin.Unit): Contuation<Ty4> = TODO()
2021-03-12 05:58:34,904 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 05:58:35,027 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:35,031 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:35,298 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 05:58:35,426 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:35,430 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:35,844 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:35,844 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:35,844 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Ty4>)->kotlin.Unit): Contuation<Ty4> = TODO()
2021-03-12 05:58:35,844 [main:58] - GENERATED VALUE OF TYPE Continuation<Ty4> = 
2021-03-12 05:58:35,854 [main:67] - randomType = Kla5
2021-03-12 05:58:35,972 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 05:58:35,975 [main:112] - generating klass Kla5 text = class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}
2021-03-12 05:58:35,990 [main:106] - GETTING Continuation<Ty4> from String
2021-03-12 05:58:36,009 [main:106] - GETTING Continuation<Ty4> from String
2021-03-12 05:58:36,009 [main:111] - Cant find and generate replacement for continuation type Continuation<Ty4>
2021-03-12 05:58:36,009 [main:107] - replacing ("fail 4", String)
2021-03-12 05:58:36,009 [main:50] - replacing "fail 4" String
2021-03-12 05:58:36,009 [main:54] - Getting value of type String
2021-03-12 05:58:36,129 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:58:36,132 [main:58] - GENERATED VALUE OF TYPE String = "oeiap"
2021-03-12 05:58:36,132 [main:61] - GENERATED IS CALL =false
2021-03-12 05:58:36,137 [main:67] - randomType = Char
2021-03-12 05:58:36,256 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:58:36,277 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6969b325]
2021-03-12 05:58:36,278 [main:78] - Generated call from random type = ('팥').plus(Kla0<Char>().fu1())
2021-03-12 05:58:36,278 [main:106] - GETTING String from String
2021-03-12 05:58:36,340 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ab1054]]
2021-03-12 05:58:36,340 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ab1054]
2021-03-12 05:58:36,460 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:36,585 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:58:36,588 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).padStart(-875119967, '禷')
2021-03-12 05:58:36,588 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4196f0ef]]
2021-03-12 05:58:36,588 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4196f0ef]
2021-03-12 05:58:36,711 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 05:58:36,714 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:58:36,717 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).filterIndexed({a: Int, b: Char -> false})
2021-03-12 05:58:36,717 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]]
2021-03-12 05:58:36,717 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:58:36,835 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:36,956 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:36,958 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]
2021-03-12 05:58:37,078 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:58:37,211 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:37,214 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(787988300, 926425119).commonSuffixWith(StringBuilder(), true)
2021-03-12 05:58:37,214 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40b7db4d]]
2021-03-12 05:58:37,214 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40b7db4d]
2021-03-12 05:58:37,215 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).capitalize()
2021-03-12 05:58:37,215 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eba6b09]]
2021-03-12 05:58:37,215 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eba6b09]
2021-03-12 05:58:37,215 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).trimMargin(Kla0<Char>().fu1())
2021-03-12 05:58:37,215 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f7fbd46]]
2021-03-12 05:58:37,215 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f7fbd46]
2021-03-12 05:58:37,215 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).decapitalize()
2021-03-12 05:58:37,215 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@faeda96]]
2021-03-12 05:58:37,215 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:58:37,335 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:37,338 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@faeda96]
2021-03-12 05:58:37,338 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(-2032698663).lowercase()
2021-03-12 05:58:37,338 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e91ca8f]]
2021-03-12 05:58:37,338 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e91ca8f]
2021-03-12 05:58:37,338 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).toLowerCase()
2021-03-12 05:58:37,338 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6969b325]]
2021-03-12 05:58:37,338 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:58:37,456 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:37,459 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6969b325]
2021-03-12 05:58:37,459 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(250671781).plus(fu0<String>({ "bjgag"}))
2021-03-12 05:58:37,459 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5898cc8d]]
2021-03-12 05:58:37,459 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:58:37,577 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:37,579 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5898cc8d]
2021-03-12 05:58:37,580 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(1394970669).uppercase()
2021-03-12 05:58:37,580 [main:114] - replacement of "fail 4" of type String is (Kla0<Char>().fu1()).subSequence(787988300, 926425119).commonSuffixWith(StringBuilder(), true)
2021-03-12 05:58:37,697 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:58:37,697 [main:66] - Compilation checking started
2021-03-12 05:58:38,058 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return (Kla0<Char>().fu1()).subSequence(787988300, 926425119).commonSuffixWith(StringBuilder(), true)
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:58:38,060 [main:107] - replacing (prope5.getOrThrow(), Ty4)
2021-03-12 05:58:38,060 [main:50] - replacing prope5.getOrThrow() Ty4
2021-03-12 05:58:38,060 [main:54] - Getting value of type Ty4
2021-03-12 05:58:38,180 [main:302] - generating value of type = Ty4 false depth = 0
2021-03-12 05:58:38,185 [main:58] - GENERATED VALUE OF TYPE Ty4 = 
2021-03-12 05:58:38,331 [main:67] - randomType = ArrayDeque<Kla8>
2021-03-12 05:58:38,449 [main:302] - generating value of type = ArrayDeque<Kla8> false depth = 0
2021-03-12 05:58:38,572 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Kla8> = TODO()
2021-03-12 05:58:38,576 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Kla8> = TODO()
2021-03-12 05:58:38,834 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:58:38,836 [main:95] - GENERATED = ArrayDeque<Kla8>(268146725)
2021-03-12 05:58:38,962 [main:106] - GETTING Ty4 from String
2021-03-12 05:58:38,980 [main:106] - GETTING Ty4 from String
2021-03-12 05:58:38,980 [main:111] - Cant find and generate replacement for prope5.getOrThrow() type Ty4
2021-03-12 05:58:38,980 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 05:58:38,980 [main:50] - replacing numberOfSuspensions Int
2021-03-12 05:58:38,980 [main:54] - Getting value of type Int
2021-03-12 05:58:39,100 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:39,102 [main:58] - GENERATED VALUE OF TYPE Int = -445743411
2021-03-12 05:58:39,102 [main:61] - GENERATED IS CALL =false
2021-03-12 05:58:39,375 [main:67] - randomType = ArrayDeque<UByte>
2021-03-12 05:58:39,494 [main:302] - generating value of type = ArrayDeque<UByte> false depth = 0
2021-03-12 05:58:39,618 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<UByte>): ArrayDeque<UByte> = TODO()
2021-03-12 05:58:39,621 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<UByte>): ArrayDeque<UByte> = TODO()
2021-03-12 05:58:39,889 [main:302] - generating value of type = Collection<UByte> false depth = 3
2021-03-12 05:58:40,014 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: UByte): Collection<UByte> = TODO()
2021-03-12 05:58:40,018 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: UByte): Collection<UByte> = TODO()
2021-03-12 05:58:40,144 [main:302] - generating value of type = UByte true depth = 6
2021-03-12 05:58:40,147 [main:95] - GENERATED = linkedSetOf<UByte>(71.toUByte())
2021-03-12 05:58:40,147 [main:95] - GENERATED = ArrayDeque<UByte>(linkedSetOf<UByte>(71.toUByte()))
2021-03-12 05:58:40,272 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@44edde1d]
2021-03-12 05:58:40,391 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:58:40,394 [main:78] - Generated call from random type = (ArrayDeque<UByte>(linkedSetOf<UByte>(71.toUByte()))).size.minus(-102)
2021-03-12 05:58:40,395 [main:106] - GETTING Int from String
2021-03-12 05:58:40,413 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b6fee42]]
2021-03-12 05:58:40,413 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b6fee42]
2021-03-12 05:58:40,531 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:58:40,534 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).length.plus(-125)
2021-03-12 05:58:40,534 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7f68a356]]
2021-03-12 05:58:40,534 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:58:40,652 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:40,655 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7f68a356]
2021-03-12 05:58:40,655 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).get(811582907).toInt()
2021-03-12 05:58:40,655 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b6fee42]]
2021-03-12 05:58:40,655 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:58:40,655 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b6fee42]
2021-03-12 05:58:40,820 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:58:40,823 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).compareTo(fu0<String>({ "bjgag"})).plus(17)
2021-03-12 05:58:40,823 [main:113] - Case = [public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ce99614]]
2021-03-12 05:58:40,823 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ce99614]
2021-03-12 05:58:40,941 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 05:58:41,069 [main:43] - GENERATING CALL OF fun CharArray(size: kotlin.Int, init: (kotlin.Int)->kotlin.Char): CharArray = TODO()
2021-03-12 05:58:41,073 [main:61] - WITHOUT TYPE PARAMS = fun CharArray(size: kotlin.Int, init: (kotlin.Int)->kotlin.Char): CharArray = TODO()
2021-03-12 05:58:41,472 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:58:41,475 [main:302] - generating value of type = Function1<Int, Char> false depth = 3
2021-03-12 05:58:41,478 [main:302] - generating value of type = Char true depth = 4
2021-03-12 05:58:41,480 [main:95] - GENERATED = CharArray(365123728, {a: Int -> ''})
2021-03-12 05:58:41,599 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:41,720 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:41,723 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).indexOfAny(CharArray(365123728, {a: Int -> ''}), 481153329, false)
2021-03-12 05:58:41,723 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20c1fe97]]
2021-03-12 05:58:41,723 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20c1fe97]
2021-03-12 05:58:41,842 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:41,845 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).length.xor(-923431292)
2021-03-12 05:58:41,845 [main:113] - Case = [public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9297551]]
2021-03-12 05:58:41,845 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9297551]
2021-03-12 05:58:41,964 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 05:58:41,967 [main:302] - generating value of type = Int true depth = 1
2021-03-12 05:58:41,970 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).sumBy({a: Char -> 513353379})
2021-03-12 05:58:41,970 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f829ef1]]
2021-03-12 05:58:41,970 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:58:41,970 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f829ef1]
2021-03-12 05:58:41,970 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).compareTo(Kla0<Char>().fu1()).countTrailingZeroBits()
2021-03-12 05:58:41,970 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3446f434]]
2021-03-12 05:58:41,970 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3446f434]
2021-03-12 05:58:41,970 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).length.toInt()
2021-03-12 05:58:41,970 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64707e4]]
2021-03-12 05:58:41,970 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:58:42,091 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:42,215 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:42,218 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64707e4]
2021-03-12 05:58:42,218 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(1112017038, 485894577).count()
2021-03-12 05:58:42,218 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30153a85]]
2021-03-12 05:58:42,218 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:58:42,218 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30153a85]
2021-03-12 05:58:42,336 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:42,339 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).compareTo(Kla0<Char>().fu1()).ushr(1560659471)
2021-03-12 05:58:42,339 [main:114] - replacement of numberOfSuspensions of type Int is (fu0<String>({ "bjgag"})).length.plus(-125)
2021-03-12 05:58:42,456 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:58:42,457 [main:66] - Compilation checking started
2021-03-12 05:58:43,015 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:58:43,017 [main:107] - replacing (prope7, Boolean)
2021-03-12 05:58:43,017 [main:50] - replacing prope7 Boolean
2021-03-12 05:58:43,017 [main:54] - Getting value of type Boolean
2021-03-12 05:58:43,141 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:43,144 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:58:43,144 [main:61] - GENERATED IS CALL =false
2021-03-12 05:58:43,155 [main:67] - randomType = Kla4
2021-03-12 05:58:43,280 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 05:58:43,283 [main:112] - generating klass Kla4 text = open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}
2021-03-12 05:58:43,403 [main:194] - Type params = []
2021-03-12 05:58:43,521 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 05:58:43,646 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:43,649 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:43,920 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 05:58:44,048 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:44,052 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:44,468 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:44,468 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:44,481 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@58874019]
2021-03-12 05:58:44,600 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@221d65f3]
2021-03-12 05:58:44,718 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:44,721 [main:78] - Generated call from random type = (Kla4()).equals(null).or(false)
2021-03-12 05:58:44,721 [main:114] - replacement of prope7 of type Boolean is (Kla4()).equals(null).or(false)
2021-03-12 05:58:44,841 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:58:44,841 [main:66] - Compilation checking started
2021-03-12 05:58:45,212 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.(Kla4()).equals(null).or(false) = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:58:45,214 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-12 05:58:45,214 [main:50] - replacing prope8 Function0<Unit>
2021-03-12 05:58:45,214 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:58:45,337 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:58:45,339 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:58:45,509 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:58:45,512 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:58:45,783 [main:302] - generating value of type = Any false depth = 4
2021-03-12 05:58:45,783 [main:95] - GENERATED = print("qtxde")
2021-03-12 05:58:45,783 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("qtxde")}
2021-03-12 05:58:45,783 [main:61] - GENERATED IS CALL =false
2021-03-12 05:58:45,937 [main:67] - randomType = Double?
2021-03-12 05:58:46,055 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:58:46,092 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:58:46,110 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:58:46,110 [main:114] - replacement of prope8 of type Function0<Unit> is { print("qtxde")}
2021-03-12 05:58:46,228 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:58:46,228 [main:66] - Compilation checking started
2021-03-12 05:58:46,579 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        { print("qtxde")} = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:58:46,581 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got ", String)
2021-03-12 05:58:46,582 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " String
2021-03-12 05:58:46,582 [main:54] - Getting value of type String
2021-03-12 05:58:46,701 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:58:46,703 [main:58] - GENERATED VALUE OF TYPE String = "iesqq"
2021-03-12 05:58:46,703 [main:61] - GENERATED IS CALL =false
2021-03-12 05:58:46,843 [main:67] - randomType = Kla2
2021-03-12 05:58:46,962 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 05:58:46,964 [main:112] - generating klass Kla2 text = class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}
2021-03-12 05:58:47,085 [main:194] - Type params = []
2021-03-12 05:58:47,206 [main:302] - generating value of type = Function0<Unit> false depth = 2
2021-03-12 05:58:47,208 [main:302] - generating value of type = Unit false depth = 3
2021-03-12 05:58:47,333 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:58:47,336 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:58:47,733 [main:302] - generating value of type = Boolean true depth = 6
2021-03-12 05:58:47,736 [main:302] - generating value of type = Function0<Any> false depth = 6
2021-03-12 05:58:47,739 [main:302] - generating value of type = Any false depth = 7
2021-03-12 05:58:47,739 [main:95] - GENERATED = require(false, { "xzbif"})
2021-03-12 05:58:47,789 [main:106] - GETTING String from String
2021-03-12 05:58:47,806 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c04dd27]]
2021-03-12 05:58:47,806 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c04dd27]
2021-03-12 05:58:47,806 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).concat(fu0<String>({ "bjgag"}))
2021-03-12 05:58:47,806 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29555276]]
2021-03-12 05:58:47,806 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29555276]
2021-03-12 05:58:47,926 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:58:47,928 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).substringBeforeLast('鍨', Kla0<Char>().fu1())
2021-03-12 05:58:47,928 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eba6b09]]
2021-03-12 05:58:47,929 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eba6b09]
2021-03-12 05:58:48,047 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:58:48,050 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).trimMargin("rlphi")
2021-03-12 05:58:48,050 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@210c047e]]
2021-03-12 05:58:48,050 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@210c047e]
2021-03-12 05:58:48,169 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:58:48,172 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).prependIndent("iuzns")
2021-03-12 05:58:48,172 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@204b97a1]]
2021-03-12 05:58:48,172 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:58:48,291 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:48,293 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@204b97a1]
2021-03-12 05:58:48,294 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).get(50006361).titlecase()
2021-03-12 05:58:48,294 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122af64]]
2021-03-12 05:58:48,294 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122af64]
2021-03-12 05:58:48,412 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:48,415 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).repeat(1912634057)
2021-03-12 05:58:48,415 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@767a278]]
2021-03-12 05:58:48,415 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@767a278]
2021-03-12 05:58:48,534 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 05:58:48,536 [main:302] - generating value of type = Char true depth = 1
2021-03-12 05:58:48,539 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> 'ꂰ'})
2021-03-12 05:58:48,539 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56ac39b8]]
2021-03-12 05:58:48,539 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56ac39b8]
2021-03-12 05:58:48,658 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:58:48,661 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).substringAfterLast('諞', Kla0<Char>().fu1())
2021-03-12 05:58:48,661 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a90b83]]
2021-03-12 05:58:48,661 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a90b83]
2021-03-12 05:58:48,779 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:58:48,782 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:58:48,785 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).dropLastWhile({a: Char -> true})
2021-03-12 05:58:48,785 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]]
2021-03-12 05:58:48,785 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]
2021-03-12 05:58:48,904 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:58:49,029 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:58:49,033 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:58:49,456 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 05:58:49,581 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:58:49,585 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:58:49,846 [main:302] - generating value of type = String true depth = 6
2021-03-12 05:58:49,848 [main:95] - GENERATED = StringBuilder("ivmyn")
2021-03-12 05:58:49,849 [main:95] - GENERATED = StringBuilder(StringBuilder("ivmyn"))
2021-03-12 05:58:49,967 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:49,970 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).commonSuffixWith(StringBuilder(StringBuilder("ivmyn")), false)
2021-03-12 05:58:49,970 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " of type String is (fu0<String>({ "bjgag"})).get(50006361).titlecase()
2021-03-12 05:58:50,091 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:58:50,091 [main:66] - Compilation checking started
2021-03-12 05:58:50,704 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:58:50,706 [main:107] - replacing ("Continuation " + c, String)
2021-03-12 05:58:50,707 [main:50] - replacing "Continuation " + c String
2021-03-12 05:58:50,707 [main:54] - Getting value of type String
2021-03-12 05:58:50,833 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:58:50,835 [main:58] - GENERATED VALUE OF TYPE String = "bhkza"
2021-03-12 05:58:50,836 [main:61] - GENERATED IS CALL =false
2021-03-12 05:58:51,592 [main:67] - randomType = Array<Triple<Kla6<ULong>, ULong, Kla6<String?>?>>
2021-03-12 05:58:51,712 [main:302] - generating value of type = Array<Triple<Kla6<ULong>, ULong, Kla6<String?>?>> false depth = 0
2021-03-12 05:58:51,839 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Triple<Kla6<ULong>, ULong, Kla6<String?>?>): Array<Triple<Kla6<ULong>, ULong, Kla6<Strg?>?>> = TODO()
2021-03-12 05:58:51,843 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Triple<Kla6<ULong>, ULong, Kla6<String?>?>): Array<Triple<Kla6<ULong>, ULong, Kla6<Strg?>?>> = TODO()
2021-03-12 05:58:51,977 [main:302] - generating value of type = Triple<Kla6<ULong>, ULong, Kla6<String?>?> false depth = 3
2021-03-12 05:58:52,106 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla6<ULong>, second: ULong, third: Kla6<String?>?): Triple<Kla6<ULong>, ULong, Kla6<String?>?> = TODO()
2021-03-12 05:58:52,110 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla6<ULong>, second: ULong, third: Kla6<String?>?): Triple<Kla6<ULong>, ULong, Kla6<String?>?> = TODO()
2021-03-12 05:58:52,235 [main:302] - generating value of type = Kla6<ULong> false depth = 6
2021-03-12 05:58:52,238 [main:112] - generating klass Kla6 text = abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}
2021-03-12 05:58:52,638 [main:302] - generating value of type = Kla9 false depth = 8
2021-03-12 05:58:52,641 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}
2021-03-12 05:58:52,641 [main:302] - generating value of type = ULong true depth = 6
2021-03-12 05:58:52,643 [main:302] - generating value of type = Kla6<String?> false depth = 6
2021-03-12 05:58:52,646 [main:112] - generating klass Kla6 text = abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}
2021-03-12 05:58:53,046 [main:302] - generating value of type = Kla9 false depth = 8
2021-03-12 05:58:53,049 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}
2021-03-12 05:58:53,049 [main:95] - GENERATED = Triple<Kla6<ULong>, ULong, Kla6<String?>?>(Kla9, 1989429896674336116.toULong(), Kla9)
2021-03-12 05:58:53,049 [main:95] - GENERATED = arrayOf<Triple<Kla6<ULong>, ULong, Kla6<String?>?>>(Triple<Kla6<ULong>, ULong, Kla6<String?>?>(Kla9, 1989429896674336116.toULong(), Kla9))
2021-03-12 05:58:53,078 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3e4c4911]
2021-03-12 05:58:53,078 [main:78] - Generated call from random type = (arrayOf<Triple<Kla6<ULong>, ULong, Kla6<String?>?>>(Triple<Kla6<ULong>, ULong, Kla6<String?>?>(Kla9, 1989429896674336116.toULong(), Kla9))).contentToString()
2021-03-12 05:58:53,078 [main:106] - GETTING String from String
2021-03-12 05:58:53,095 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e5a611c]]
2021-03-12 05:58:53,096 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:58:53,215 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:53,337 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:53,340 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e5a611c]
2021-03-12 05:58:53,466 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:58:53,590 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 05:58:53,594 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 05:58:54,005 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:58:54,008 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 05:58:54,135 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): Set<RegexOption> = TODO()
2021-03-12 05:58:54,138 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): Set<RegexOption> = TODO()
2021-03-12 05:58:54,265 [main:95] - GENERATED = linkedSetOf<RegexOption>()
2021-03-12 05:58:54,265 [main:95] - GENERATED = Regex("fddsn", linkedSetOf<RegexOption>())
2021-03-12 05:58:54,266 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(-618152951, 145206760).replaceFirst(Regex("fddsn", linkedSetOf<RegexOption>()), fu0<String>({ "bjgag"}))
2021-03-12 05:58:54,266 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5898cc8d]]
2021-03-12 05:58:54,266 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:58:54,386 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:54,389 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5898cc8d]
2021-03-12 05:58:54,389 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).get(2121418422).uppercase()
2021-03-12 05:58:54,389 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f8dedf]]
2021-03-12 05:58:54,389 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:58:54,510 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:54,634 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:54,637 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f8dedf]
2021-03-12 05:58:54,759 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:58:54,884 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 05:58:54,888 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 05:58:55,356 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:58:55,359 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 05:58:55,484 [main:43] - GENERATING CALL OF fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<RegexOption>.()->kotlin.Unit): Set<RegexOption> = TODO()
2021-03-12 05:58:55,487 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<RegexOption>.()->kotlin.Unit): Set<RegexOption> = TODO()
2021-03-12 05:58:55,897 [main:302] - generating value of type = Int true depth = 6
2021-03-12 05:58:55,900 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<RegexOption>, Unit> false depth = 6
2021-03-12 05:58:55,903 [main:302] - generating value of type = Unit false depth = 7
2021-03-12 05:58:55,908 [main:95] - GENERATED = buildSet<RegexOption>(-1314175186, { println()})
2021-03-12 05:58:55,909 [main:95] - GENERATED = Regex("mnrjh", buildSet<RegexOption>(-1314175186, { println()}))
2021-03-12 05:58:56,028 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 05:58:56,031 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:58:56,157 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:58:56,160 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:58:56,423 [main:302] - generating value of type = String true depth = 4
2021-03-12 05:58:56,425 [main:95] - GENERATED = StringBuilder("oqzsm")
2021-03-12 05:58:56,426 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(-285766765, 974942274).replace(Regex("mnrjh", buildSet<RegexOption>(-1314175186, { println()})), {a: MatchResult -> StringBuilder("oqzsm")})
2021-03-12 05:58:56,426 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280ba906]]
2021-03-12 05:58:56,426 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280ba906]
2021-03-12 05:58:56,426 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).trimEnd()
2021-03-12 05:58:56,426 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]]
2021-03-12 05:58:56,426 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:58:56,553 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:56,675 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:56,678 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a4ec3ca]
2021-03-12 05:58:56,796 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:58:56,921 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:56,924 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(248190133, -1655613310).commonSuffixWith(StringBuilder(), true)
2021-03-12 05:58:56,924 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30b7e630]]
2021-03-12 05:58:56,924 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30b7e630]
2021-03-12 05:58:57,043 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:58:57,046 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).substringBefore('ᐱ', Kla0<Char>().fu1())
2021-03-12 05:58:57,046 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f7cab66]]
2021-03-12 05:58:57,046 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f7cab66]
2021-03-12 05:58:57,046 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).toUpperCase()
2021-03-12 05:58:57,046 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43da71d6]]
2021-03-12 05:58:57,046 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43da71d6]
2021-03-12 05:58:57,166 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:58:57,172 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).removeSuffix("vzsif")
2021-03-12 05:58:57,172 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@238f1ef2]]
2021-03-12 05:58:57,172 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:58:57,291 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:57,413 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:58:57,416 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@238f1ef2]
2021-03-12 05:58:57,535 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:58:57,660 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:58:57,663 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(1094939923, 362640954).commonPrefixWith("zdiyv", false)
2021-03-12 05:58:57,663 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56ac39b8]]
2021-03-12 05:58:57,663 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56ac39b8]
2021-03-12 05:58:57,783 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:58:57,786 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).substringAfterLast('硤', fu0<String>({ "bjgag"}))
2021-03-12 05:58:57,786 [main:114] - replacement of "Continuation " + c of type String is (fu0<String>({ "bjgag"})).removeSuffix("vzsif")
2021-03-12 05:58:57,906 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:58:57,906 [main:66] - Compilation checking started
2021-03-12 05:58:58,488 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:58:58,491 [main:107] - replacing (x, Continuation<String>)
2021-03-12 05:58:58,491 [main:50] - replacing x Continuation<String>
2021-03-12 05:58:58,491 [main:54] - Getting value of type Continuation<String>
2021-03-12 05:58:58,641 [main:302] - generating value of type = Continuation<String> false depth = 0
2021-03-12 05:58:58,768 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 05:58:58,772 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 05:58:59,187 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 05:58:59,314 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:59,318 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:58:59,598 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 05:58:59,727 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:58:59,730 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:59:00,209 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 05:59:00,338 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:59:00,341 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:59:00,753 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-12 05:59:00,883 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:59:00,886 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:59:01,303 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 15
2021-03-12 05:59:01,433 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:59:01,436 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:59:01,849 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:59:01,849 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:59:01,849 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:59:01,850 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:59:01,850 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:59:01,850 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 05:59:01,850 [main:58] - GENERATED VALUE OF TYPE Continuation<String> = 
2021-03-12 05:59:02,004 [main:67] - randomType = Pair<Int, Double>
2021-03-12 05:59:02,125 [main:302] - generating value of type = Pair<Int, Double> false depth = 0
2021-03-12 05:59:02,251 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Int, second: Double): Pair<Int, Double> = TODO()
2021-03-12 05:59:02,254 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Int, second: Double): Pair<Int, Double> = TODO()
2021-03-12 05:59:02,381 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:59:02,384 [main:302] - generating value of type = Double true depth = 3
2021-03-12 05:59:02,387 [main:95] - GENERATED = Pair<Int, Double>(-2119364835, 0.35596734232046645)
2021-03-12 05:59:02,399 [main:106] - GETTING Continuation<String> from String
2021-03-12 05:59:02,417 [main:106] - GETTING Continuation<String> from String
2021-03-12 05:59:02,417 [main:111] - Cant find and generate replacement for x type Continuation<String>
2021-03-12 05:59:02,417 [main:107] - replacing (continuation, Continuation<Ty4>)
2021-03-12 05:59:02,417 [main:50] - replacing continuation Continuation<Ty4>
2021-03-12 05:59:02,417 [main:54] - Getting value of type Continuation<Ty4>
2021-03-12 05:59:02,537 [main:302] - generating value of type = Continuation<Ty4> false depth = 0
2021-03-12 05:59:02,663 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Ty4>)->kotlin.Unit): Contuation<Ty4> = TODO()
2021-03-12 05:59:02,666 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Ty4>)->kotlin.Unit): Contuation<Ty4> = TODO()
2021-03-12 05:59:03,076 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 05:59:03,200 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:59:03,204 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:59:03,473 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 05:59:03,602 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:59:03,605 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:59:04,020 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 05:59:04,151 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:59:04,155 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:59:04,648 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:59:04,648 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:59:04,648 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:59:04,648 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Ty4>)->kotlin.Unit): Contuation<Ty4> = TODO()
2021-03-12 05:59:04,649 [main:58] - GENERATED VALUE OF TYPE Continuation<Ty4> = 
2021-03-12 05:59:04,786 [main:67] - randomType = Float
2021-03-12 05:59:04,910 [main:302] - generating value of type = Float true depth = 0
2021-03-12 05:59:04,948 [main:106] - GETTING Continuation<Ty4> from String
2021-03-12 05:59:04,967 [main:106] - GETTING Continuation<Ty4> from String
2021-03-12 05:59:04,967 [main:111] - Cant find and generate replacement for continuation type Continuation<Ty4>
2021-03-12 05:59:04,967 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-12 05:59:04,967 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-12 05:59:04,967 [main:54] - Getting value of type Boolean
2021-03-12 05:59:05,090 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:59:05,093 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:59:05,093 [main:61] - GENERATED IS CALL =false
2021-03-12 05:59:05,098 [main:67] - randomType = Boolean
2021-03-12 05:59:05,219 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:59:05,234 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@f79deff]
2021-03-12 05:59:05,354 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:59:05,354 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6a365511]
2021-03-12 05:59:05,473 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:59:05,476 [main:78] - Generated call from random type = (false).equals("ywuck").xor(false)
2021-03-12 05:59:05,477 [main:106] - GETTING Boolean from String
2021-03-12 05:59:05,495 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f1ffc0]]
2021-03-12 05:59:05,495 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:59:05,615 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:05,618 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f1ffc0]
2021-03-12 05:59:05,618 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(763295185).isISOControl()
2021-03-12 05:59:05,618 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51aeaeb8]]
2021-03-12 05:59:05,618 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:59:05,738 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:05,860 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:05,863 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51aeaeb8]
2021-03-12 05:59:05,982 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:06,106 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:59:06,231 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:06,353 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:06,475 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:59:06,478 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(-97337951, 932544930).regionMatches(-1049349628, "sxgjx", -859034987, 524936770, false)
2021-03-12 05:59:06,478 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5755f025]]
2021-03-12 05:59:06,478 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:59:06,598 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:59:06,598 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5755f025]
2021-03-12 05:59:06,718 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:59:06,721 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).equals("bgroc").and(false)
2021-03-12 05:59:06,721 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@728cebf4]]
2021-03-12 05:59:06,721 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@728cebf4]
2021-03-12 05:59:06,721 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).isNotEmpty()
2021-03-12 05:59:06,721 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d4bdafd]]
2021-03-12 05:59:06,721 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d4bdafd]
2021-03-12 05:59:06,721 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).any()
2021-03-12 05:59:06,721 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b7db3f2]]
2021-03-12 05:59:06,721 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:59:06,841 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:06,844 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b7db3f2]
2021-03-12 05:59:06,844 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(1758401173).isWhitespace()
2021-03-12 05:59:06,844 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@525fcad2]]
2021-03-12 05:59:06,844 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:59:06,964 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:07,089 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:07,092 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@525fcad2]
2021-03-12 05:59:07,212 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:59:07,334 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:59:07,337 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(484775104, 479010813).startsWith('䧳', false)
2021-03-12 05:59:07,337 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@39afea83]]
2021-03-12 05:59:07,337 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:59:07,457 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:07,579 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:07,582 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@39afea83]
2021-03-12 05:59:07,701 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:59:07,701 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(847112386, 2048990706).equals("imrek")
2021-03-12 05:59:07,701 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@314eea13]]
2021-03-12 05:59:07,701 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:59:07,820 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:07,943 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:07,946 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@314eea13]
2021-03-12 05:59:07,946 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(780762373, 1831074510).isBlank()
2021-03-12 05:59:07,946 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5daf7fea]]
2021-03-12 05:59:07,947 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:59:08,067 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:59:08,067 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5daf7fea]
2021-03-12 05:59:08,067 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).equals("bzrke").not()
2021-03-12 05:59:08,067 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (Kla0<Char>().fu1()).subSequence(-97337951, 932544930).regionMatches(-1049349628, "sxgjx", -859034987, 524936770, false)
2021-03-12 05:59:08,187 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:59:08,187 [main:66] - Compilation checking started
2021-03-12 05:59:08,541 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { (Kla0<Char>().fu1()).subSequence(-97337951, 932544930).regionMatches(-1049349628, "sxgjx", -859034987, 524936770, false) } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:08,543 [main:107] - replacing (true, Boolean)
2021-03-12 05:59:08,543 [main:50] - replacing true Boolean
2021-03-12 05:59:08,543 [main:54] - Getting value of type Boolean
2021-03-12 05:59:08,664 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:59:08,666 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:59:08,667 [main:61] - GENERATED IS CALL =false
2021-03-12 05:59:08,813 [main:67] - randomType = Kla8?
2021-03-12 05:59:08,934 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 05:59:08,936 [main:112] - generating klass Kla8 text = class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:59:08,944 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@5ac71562]
2021-03-12 05:59:09,065 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:59:09,066 [main:78] - Generated call from random type = (Kla8())?.prope8.equals("kezsm")
2021-03-12 05:59:09,066 [main:114] - replacement of true of type Boolean is (Kla8())?.prope8.equals("kezsm")
2021-03-12 05:59:09,186 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:59:09,187 [main:66] - Compilation checking started
2021-03-12 05:59:09,797 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:09,800 [main:107] - replacing (method, String)
2021-03-12 05:59:09,800 [main:50] - replacing method String
2021-03-12 05:59:09,800 [main:54] - Getting value of type String
2021-03-12 05:59:09,930 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:59:09,932 [main:58] - GENERATED VALUE OF TYPE String = "ykokg"
2021-03-12 05:59:09,933 [main:61] - GENERATED IS CALL =false
2021-03-12 05:59:10,360 [main:67] - randomType = ArrayList<Float>
2021-03-12 05:59:10,481 [main:302] - generating value of type = ArrayList<Float> false depth = 0
2021-03-12 05:59:10,609 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Float> = TODO()
2021-03-12 05:59:10,612 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Float> = TODO()
2021-03-12 05:59:10,745 [main:95] - GENERATED = arrayListOf<Float>()
2021-03-12 05:59:10,868 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52a8be22]
2021-03-12 05:59:10,990 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:10,993 [main:78] - Generated call from random type = (arrayListOf<Float>()).modCount.toString(998548112)
2021-03-12 05:59:10,993 [main:114] - replacement of method of type String is (arrayListOf<Float>()).modCount.toString(998548112)
2021-03-12 05:59:11,116 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:59:11,117 [main:66] - Compilation checking started
2021-03-12 05:59:11,480 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + (arrayListOf<Float>()).modCount.toString(998548112) + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:11,482 [main:107] - replacing (0, Int)
2021-03-12 05:59:11,482 [main:50] - replacing 0 Int
2021-03-12 05:59:11,482 [main:54] - Getting value of type Int
2021-03-12 05:59:11,607 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:11,610 [main:58] - GENERATED VALUE OF TYPE Int = 1247969154
2021-03-12 05:59:11,610 [main:61] - GENERATED IS CALL =false
2021-03-12 05:59:11,761 [main:67] - randomType = Kla2
2021-03-12 05:59:11,884 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 05:59:11,887 [main:112] - generating klass Kla2 text = class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}
2021-03-12 05:59:12,007 [main:194] - Type params = []
2021-03-12 05:59:12,129 [main:302] - generating value of type = Function0<Unit> false depth = 2
2021-03-12 05:59:12,132 [main:302] - generating value of type = Unit false depth = 3
2021-03-12 05:59:12,259 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:59:12,262 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:59:12,666 [main:302] - generating value of type = Boolean true depth = 6
2021-03-12 05:59:12,668 [main:302] - generating value of type = Function0<Any> false depth = 6
2021-03-12 05:59:12,671 [main:302] - generating value of type = Any false depth = 7
2021-03-12 05:59:12,671 [main:95] - GENERATED = require(true, { "zteft"})
2021-03-12 05:59:12,719 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla2[DeserializedSimpleFunctionDescriptor@5603e7c8]
2021-03-12 05:59:12,840 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:59:12,840 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d2a4ce0]
2021-03-12 05:59:12,961 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:59:12,964 [main:78] - Generated call from random type = (Kla2({ require(true, { "zteft"})})).equals("zyaqg").compareTo(false)
2021-03-12 05:59:12,965 [main:106] - GETTING Int from String
2021-03-12 05:59:12,984 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b6fee42]]
2021-03-12 05:59:12,984 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:59:12,984 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b6fee42]
2021-03-12 05:59:13,106 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:59:13,109 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).compareTo(Kla0<Char>().fu1()).plus(78)
2021-03-12 05:59:13,109 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@34a36498]]
2021-03-12 05:59:13,109 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:59:13,109 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).compareTo(Kla0<Char>().fu1()).sign
2021-03-12 05:59:13,109 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@214ef1e6]]
2021-03-12 05:59:13,109 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@214ef1e6]
2021-03-12 05:59:13,231 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:13,233 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).length.and(2056442881)
2021-03-12 05:59:13,233 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55d8bf33]]
2021-03-12 05:59:13,234 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55d8bf33]
2021-03-12 05:59:13,355 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:59:13,358 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).length.times(-1)
2021-03-12 05:59:13,358 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bf8ec9a]]
2021-03-12 05:59:13,358 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:59:13,480 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:13,604 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:13,607 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bf8ec9a]
2021-03-12 05:59:13,729 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 05:59:13,856 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 05:59:13,859 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 05:59:13,988 [main:302] - generating value of type = Char true depth = 3
2021-03-12 05:59:13,990 [main:95] - GENERATED = charArrayOf('惈')
2021-03-12 05:59:14,113 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:14,235 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:59:14,238 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(565908839, 855450040).lastIndexOfAny(charArrayOf('惈'), 1873293168, true)
2021-03-12 05:59:14,238 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6ca72c12]]
2021-03-12 05:59:14,238 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:59:14,359 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:14,362 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6ca72c12]
2021-03-12 05:59:14,529 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:59:14,532 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(-1631968239).minus('')
2021-03-12 05:59:14,532 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@479c6b24]]
2021-03-12 05:59:14,532 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@479c6b24]
2021-03-12 05:59:14,652 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:14,654 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).length.shl(-513604652)
2021-03-12 05:59:14,654 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b6fee42]]
2021-03-12 05:59:14,655 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b6fee42]
2021-03-12 05:59:14,777 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:59:14,780 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).length.plus(80)
2021-03-12 05:59:14,780 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fbfa545]]
2021-03-12 05:59:14,780 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fbfa545]
2021-03-12 05:59:14,780 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).length.inc()
2021-03-12 05:59:14,780 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@275f738c]]
2021-03-12 05:59:14,780 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@275f738c]
2021-03-12 05:59:14,908 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:15,035 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:15,038 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).length.coerceIn(-1836092990, -53976521)
2021-03-12 05:59:15,038 [main:114] - replacement of 0 of type Int is (Kla0<Char>().fu1()).length.plus(80)
2021-03-12 05:59:15,159 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:59:15,159 [main:66] - Compilation checking started
2021-03-12 05:59:15,517 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = (Kla0<Char>().fu1()).length.plus(80)
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:15,519 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 05:59:15,519 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 05:59:15,519 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 05:59:15,640 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 05:59:15,645 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 05:59:16,822 [main:67] - randomType = Kla0<List<Function2<Map<Kla7?, Kla7>, Array<UByte>, Kla9>>>
2021-03-12 05:59:16,943 [main:302] - generating value of type = Kla0<List<Function2<Map<Kla7?, Kla7>, Array<UByte>, Kla9>>> false depth = 0
2021-03-12 05:59:16,946 [main:112] - generating klass Kla0 text = class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}
2021-03-12 05:59:17,656 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:59:17,673 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:59:17,673 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 05:59:17,674 [main:107] - replacing ("fail 5", String)
2021-03-12 05:59:17,674 [main:50] - replacing "fail 5" String
2021-03-12 05:59:17,674 [main:54] - Getting value of type String
2021-03-12 05:59:17,794 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:59:17,797 [main:58] - GENERATED VALUE OF TYPE String = "ekpbi"
2021-03-12 05:59:17,797 [main:61] - GENERATED IS CALL =false
2021-03-12 05:59:17,938 [main:67] - randomType = Kla2
2021-03-12 05:59:18,058 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 05:59:18,061 [main:112] - generating klass Kla2 text = class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}
2021-03-12 05:59:18,184 [main:194] - Type params = []
2021-03-12 05:59:18,305 [main:302] - generating value of type = Function0<Unit> false depth = 2
2021-03-12 05:59:18,307 [main:302] - generating value of type = Unit false depth = 3
2021-03-12 05:59:18,435 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:59:18,439 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:59:18,705 [main:302] - generating value of type = Boolean true depth = 6
2021-03-12 05:59:18,708 [main:95] - GENERATED = check(false)
2021-03-12 05:59:18,756 [main:106] - GETTING String from String
2021-03-12 05:59:18,773 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5742c619]]
2021-03-12 05:59:18,773 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5742c619]
2021-03-12 05:59:18,895 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:59:18,898 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:59:18,900 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).dropWhile({a: Char -> false})
2021-03-12 05:59:18,901 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29555276]]
2021-03-12 05:59:18,901 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29555276]
2021-03-12 05:59:19,022 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:59:19,025 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).substringBeforeLast('ﴱ', Kla0<Char>().fu1())
2021-03-12 05:59:19,025 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f567b3f]]
2021-03-12 05:59:19,025 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f567b3f]
2021-03-12 05:59:19,146 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:59:19,270 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:59:19,392 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:59:19,395 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).replaceBeforeLast('㰘', "igksv", "fabvi")
2021-03-12 05:59:19,395 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43da71d6]]
2021-03-12 05:59:19,395 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43da71d6]
2021-03-12 05:59:19,563 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:59:19,569 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).removeSuffix(StringBuilder())
2021-03-12 05:59:19,723 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4196f0ef]]
2021-03-12 05:59:19,723 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4196f0ef]
2021-03-12 05:59:19,845 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 05:59:19,848 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:59:19,851 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).filterIndexed({a: Int, b: Char -> false})
2021-03-12 05:59:19,851 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ddb68b3]]
2021-03-12 05:59:19,851 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ddb68b3]
2021-03-12 05:59:19,972 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:20,097 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:20,100 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).removeRange(1607822224, -1581479089)
2021-03-12 05:59:20,100 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@767a278]]
2021-03-12 05:59:20,100 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@767a278]
2021-03-12 05:59:20,220 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 05:59:20,223 [main:302] - generating value of type = Char true depth = 1
2021-03-12 05:59:20,225 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).replaceFirstChar({a: Char -> '娵'})
2021-03-12 05:59:20,226 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@af7c122]]
2021-03-12 05:59:20,226 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@af7c122]
2021-03-12 05:59:20,346 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:20,349 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).substring(-1568211227)
2021-03-12 05:59:20,349 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@238f1ef2]]
2021-03-12 05:59:20,349 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@238f1ef2]
2021-03-12 05:59:20,469 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:59:20,596 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:59:20,599 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).commonPrefixWith(StringBuilder(), false)
2021-03-12 05:59:20,599 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@204b97a1]]
2021-03-12 05:59:20,599 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:59:20,719 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:20,722 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@204b97a1]
2021-03-12 05:59:20,722 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(1714973958).titlecase()
2021-03-12 05:59:20,722 [main:114] - replacement of "fail 5" of type String is (Kla0<Char>().fu1()).removeRange(1607822224, -1581479089)
2021-03-12 05:59:20,846 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:59:20,846 [main:66] - Compilation checking started
2021-03-12 05:59:21,207 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return (Kla0<Char>().fu1()).removeRange(1607822224, -1581479089)

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:21,210 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-12 05:59:21,210 [main:50] - replacing prope8 Function0<Unit>
2021-03-12 05:59:21,210 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:59:21,331 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:59:21,333 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:59:21,460 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:59:21,463 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:59:21,868 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:59:21,870 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 05:59:21,873 [main:302] - generating value of type = Any false depth = 5
2021-03-12 05:59:21,873 [main:95] - GENERATED = check(true, { "krwpm"})
2021-03-12 05:59:21,873 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "krwpm"})}
2021-03-12 05:59:21,873 [main:61] - GENERATED IS CALL =false
2021-03-12 05:59:22,021 [main:67] - randomType = ArrayDeque<Kla5>
2021-03-12 05:59:22,143 [main:302] - generating value of type = ArrayDeque<Kla5> false depth = 0
2021-03-12 05:59:22,271 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Kla5> = TODO()
2021-03-12 05:59:22,274 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Kla5> = TODO()
2021-03-12 05:59:22,401 [main:95] - GENERATED = ArrayDeque<Kla5>()
2021-03-12 05:59:22,543 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:59:22,561 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:59:22,561 [main:114] - replacement of prope8 of type Function0<Unit> is { check(true, { "krwpm"})}
2021-03-12 05:59:22,681 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:59:22,682 [main:66] - Compilation checking started
2021-03-12 05:59:23,050 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        { check(true, { "krwpm"})} = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:23,052 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-12 05:59:23,053 [main:50] - replacing prope8 Function0<Unit>
2021-03-12 05:59:23,053 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:59:23,175 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:59:23,178 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:59:23,304 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:59:23,308 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:59:23,572 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:59:23,575 [main:95] - GENERATED = check(false)
2021-03-12 05:59:23,575 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-12 05:59:23,575 [main:61] - GENERATED IS CALL =false
2021-03-12 05:59:23,851 [main:67] - randomType = Short?
2021-03-12 05:59:23,972 [main:302] - generating value of type = Short true depth = 0
2021-03-12 05:59:24,010 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:59:24,028 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:59:24,028 [main:114] - replacement of prope8 of type Function0<Unit> is { check(false)}
2021-03-12 05:59:24,150 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:59:24,150 [main:66] - Compilation checking started
2021-03-12 05:59:24,562 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        { check(false)}()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:24,564 [main:107] - replacing (x, Function1<Throwable, Unit>)
2021-03-12 05:59:24,564 [main:50] - replacing x Function1<Throwable, Unit>
2021-03-12 05:59:24,564 [main:54] - Getting value of type Function1<Throwable, Unit>
2021-03-12 05:59:24,685 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-12 05:59:24,688 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:59:24,816 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:59:24,819 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:59:25,085 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:59:25,088 [main:95] - GENERATED = check(true)
2021-03-12 05:59:25,088 [main:58] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> check(true)}
2021-03-12 05:59:25,088 [main:61] - GENERATED IS CALL =false
2021-03-12 05:59:26,762 [main:67] - randomType = Function1<HashMap<UByte, Function1<Function1<String, Char>, HashMap<Function1<UShort, Kla8>, Set<Kla8>>>>, Kla3<HashSet<Double>>>
2021-03-12 05:59:26,764 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 05:59:26,783 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 05:59:26,783 [main:114] - replacement of x of type Function1<Throwable, Unit> is {a: Throwable -> check(true)}
2021-03-12 05:59:26,903 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:59:26,904 [main:66] - Compilation checking started
2021-03-12 05:59:27,468 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let({a: Throwable -> check(true)})
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + prope4)
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:27,471 [main:107] - replacing (prope4, Int)
2021-03-12 05:59:27,471 [main:50] - replacing prope4 Int
2021-03-12 05:59:27,471 [main:54] - Getting value of type Int
2021-03-12 05:59:27,597 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:27,599 [main:58] - GENERATED VALUE OF TYPE Int = -348977582
2021-03-12 05:59:27,599 [main:61] - GENERATED IS CALL =false
2021-03-12 05:59:27,737 [main:67] - randomType = UByte
2021-03-12 05:59:27,858 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:59:27,889 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@392e7e7e]
2021-03-12 05:59:27,889 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@44de051c]
2021-03-12 05:59:27,889 [main:78] - Generated call from random type = (54.toUByte()).toShort().countLeadingZeroBits()
2021-03-12 05:59:27,890 [main:106] - GETTING Int from String
2021-03-12 05:59:27,908 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76d940ff]]
2021-03-12 05:59:27,908 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76d940ff]
2021-03-12 05:59:28,029 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:59:28,032 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:59:28,035 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).indexOfLast({a: Char -> true})
2021-03-12 05:59:28,035 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f829ef1]]
2021-03-12 05:59:28,035 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f829ef1]
2021-03-12 05:59:28,035 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).length.countTrailingZeroBits()
2021-03-12 05:59:28,035 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23746f63]]
2021-03-12 05:59:28,035 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23746f63]
2021-03-12 05:59:28,035 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).length.unaryPlus()
2021-03-12 05:59:28,035 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76d940ff]]
2021-03-12 05:59:28,035 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:59:28,157 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:28,281 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:28,284 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76d940ff]
2021-03-12 05:59:28,405 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:59:28,408 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:59:28,411 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(-1547833504, 538416391).indexOfLast({a: Char -> false})
2021-03-12 05:59:28,411 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cbb3894]]
2021-03-12 05:59:28,411 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cbb3894]
2021-03-12 05:59:28,532 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:59:28,535 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).length.rem(45)
2021-03-12 05:59:28,535 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69d0c8cc]]
2021-03-12 05:59:28,535 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69d0c8cc]
2021-03-12 05:59:28,657 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:59:28,659 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:59:28,662 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).indexOfFirst({a: Char -> true})
2021-03-12 05:59:28,662 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7bf61483]]
2021-03-12 05:59:28,662 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:59:28,784 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:59:28,787 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7bf61483]
2021-03-12 05:59:28,909 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:28,911 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).compareTo("qjfga").shr(-597896649)
2021-03-12 05:59:28,912 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7f68a356]]
2021-03-12 05:59:28,912 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:59:29,034 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:29,036 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7f68a356]
2021-03-12 05:59:29,037 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).get(-830948581).toInt()
2021-03-12 05:59:29,037 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@71b11ddb]]
2021-03-12 05:59:29,037 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:59:29,037 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@71b11ddb]
2021-03-12 05:59:29,037 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).compareTo(Kla0<Char>().fu1()).countLeadingZeroBits()
2021-03-12 05:59:29,037 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@34a36498]]
2021-03-12 05:59:29,037 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).length.sign
2021-03-12 05:59:29,037 [main:114] - replacement of prope4 of type Int is (54.toUByte()).toShort().countLeadingZeroBits()
2021-03-12 05:59:29,159 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:59:29,159 [main:66] - Compilation checking started
2021-03-12 05:59:29,885 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3(dispatcher, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let({a: Throwable -> check(true)})
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + (54.toUByte()).toShort().countLeadingZeroBits())
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:29,887 [main:107] - replacing (dispatcher, Function0<Unit>)
2021-03-12 05:59:29,887 [main:50] - replacing dispatcher Function0<Unit>
2021-03-12 05:59:29,887 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:59:30,054 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:59:30,057 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:59:30,185 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:59:30,189 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:59:30,600 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:59:30,602 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 05:59:30,605 [main:302] - generating value of type = Any false depth = 5
2021-03-12 05:59:30,605 [main:95] - GENERATED = check(false, { "cotxx"})
2021-03-12 05:59:30,605 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "cotxx"})}
2021-03-12 05:59:30,605 [main:61] - GENERATED IS CALL =false
2021-03-12 05:59:30,744 [main:67] - randomType = UInt
2021-03-12 05:59:30,867 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 05:59:30,898 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:59:30,916 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:59:30,916 [main:114] - replacement of dispatcher of type Function0<Unit> is { check(false, { "cotxx"})}
2021-03-12 05:59:31,038 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:59:31,039 [main:66] - Compilation checking started
2021-03-12 05:59:31,617 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3({ check(false, { "cotxx"})}, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let({a: Throwable -> check(true)})
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + (54.toUByte()).toShort().countLeadingZeroBits())
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:31,620 [main:107] - replacing (prope5, Result<Ty4>)
2021-03-12 05:59:31,620 [main:50] - replacing prope5 Result<Ty4>
2021-03-12 05:59:31,620 [main:54] - Getting value of type Result<Ty4>
2021-03-12 05:59:31,750 [main:302] - generating value of type = Result<Ty4> false depth = 0
2021-03-12 05:59:31,882 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty4): Result<Ty4> = TODO()
2021-03-12 05:59:31,886 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty4): Result<Ty4> = TODO()
2021-03-12 05:59:32,160 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty4): Result<Ty4> = TODO()
2021-03-12 05:59:32,160 [main:58] - GENERATED VALUE OF TYPE Result<Ty4> = 
2021-03-12 05:59:32,447 [main:67] - randomType = List<UShort>
2021-03-12 05:59:32,449 [main:106] - GETTING Result<Ty4> from String
2021-03-12 05:59:32,468 [main:106] - GETTING Result<Ty4> from String
2021-03-12 05:59:32,468 [main:111] - Cant find and generate replacement for prope5 type Result<Ty4>
2021-03-12 05:59:32,468 [main:107] - replacing (prope5.getOrThrow(), Ty4)
2021-03-12 05:59:32,468 [main:50] - replacing prope5.getOrThrow() Ty4
2021-03-12 05:59:32,468 [main:54] - Getting value of type Ty4
2021-03-12 05:59:32,592 [main:302] - generating value of type = Ty4 false depth = 0
2021-03-12 05:59:32,597 [main:58] - GENERATED VALUE OF TYPE Ty4 = 
2021-03-12 05:59:32,603 [main:67] - randomType = ULong
2021-03-12 05:59:32,726 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 05:59:32,757 [main:106] - GETTING Ty4 from String
2021-03-12 05:59:32,775 [main:106] - GETTING Ty4 from String
2021-03-12 05:59:32,775 [main:111] - Cant find and generate replacement for prope5.getOrThrow() type Ty4
2021-03-12 05:59:32,775 [main:107] - replacing (suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"}, String)
2021-03-12 05:59:32,775 [main:50] - replacing suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"} String
2021-03-12 05:59:32,775 [main:54] - Getting value of type String
2021-03-12 05:59:32,900 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:59:32,902 [main:58] - GENERATED VALUE OF TYPE String = "uhbcg"
2021-03-12 05:59:32,902 [main:61] - GENERATED IS CALL =false
2021-03-12 05:59:33,043 [main:67] - randomType = UInt
2021-03-12 05:59:33,167 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 05:59:33,198 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@258f8f0d]
2021-03-12 05:59:33,322 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:33,325 [main:78] - Generated call from random type = (865563637.toUInt()).toString(586731780)
2021-03-12 05:59:33,325 [main:114] - replacement of suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "fmcpl"} of type String is (865563637.toUInt()).toString(586731780)
2021-03-12 05:59:33,448 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:59:33,449 [main:66] - Compilation checking started
2021-03-12 05:59:34,021 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = (865563637.toUInt()).toString(586731780)

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3({ check(false, { "cotxx"})}, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let({a: Throwable -> check(true)})
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + (54.toUByte()).toShort().countLeadingZeroBits())
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:34,023 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-12 05:59:34,024 [main:50] - replacing prope8 Function0<Unit>
2021-03-12 05:59:34,024 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:59:34,150 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:59:34,152 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:59:34,283 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:59:34,287 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:59:34,704 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:59:34,706 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 05:59:34,709 [main:302] - generating value of type = Any false depth = 5
2021-03-12 05:59:34,709 [main:95] - GENERATED = require(true, { "keail"})
2021-03-12 05:59:34,709 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true, { "keail"})}
2021-03-12 05:59:34,709 [main:61] - GENERATED IS CALL =false
2021-03-12 05:59:34,715 [main:67] - randomType = Long
2021-03-12 05:59:34,838 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:59:34,875 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:59:34,893 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:59:34,893 [main:114] - replacement of prope8 of type Function0<Unit> is { require(true, { "keail"})}
2021-03-12 05:59:35,018 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:59:35,018 [main:66] - Compilation checking started
2021-03-12 05:59:35,440 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = (865563637.toUInt()).toString(586731780)

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3({ check(false, { "cotxx"})}, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let({a: Throwable -> check(true)})
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            { require(true, { "keail"})}()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + (54.toUByte()).toShort().countLeadingZeroBits())
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:35,442 [main:107] - replacing ({
        fu11(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 05:59:35,442 [main:50] - replacing {
        fu11(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-12 05:59:35,442 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 05:59:35,566 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 05:59:35,569 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:59:35,574 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> println()}
2021-03-12 05:59:35,575 [main:61] - GENERATED IS CALL =false
2021-03-12 05:59:35,580 [main:67] - randomType = Boolean
2021-03-12 05:59:35,704 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:59:35,717 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 05:59:35,737 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 05:59:35,737 [main:114] - replacement of {
        fu11(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> println()}
2021-03-12 05:59:35,860 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:59:35,860 [main:66] - Compilation checking started
2021-03-12 05:59:36,429 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = (865563637.toUInt()).toString(586731780)

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3({ check(false, { "cotxx"})}, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let({a: Throwable -> check(true)})
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + (54.toUByte()).toShort().countLeadingZeroBits())
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:36,431 [main:107] - replacing ((fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount, Boolean)
2021-03-12 05:59:36,431 [main:50] - replacing (fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount Boolean
2021-03-12 05:59:36,431 [main:54] - Getting value of type Boolean
2021-03-12 05:59:36,564 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:59:36,566 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:59:36,566 [main:61] - GENERATED IS CALL =false
2021-03-12 05:59:36,572 [main:67] - randomType = UByte
2021-03-12 05:59:36,696 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:59:36,736 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@170ef6bc]
2021-03-12 05:59:36,736 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5ea3f373]
2021-03-12 05:59:36,736 [main:78] - Generated call from random type = (29.toUByte()).toDouble().isInfinite()
2021-03-12 05:59:36,736 [main:114] - replacement of (fu0<String>({ "bjgag"})).get(1469452940).compareTo('ﶒ') != expectedCount of type Boolean is (29.toUByte()).toDouble().isInfinite()
2021-03-12 05:59:36,860 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:59:36,860 [main:66] - Compilation checking started
2021-03-12 05:59:37,426 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = (865563637.toUInt()).toString(586731780)

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((29.toUByte()).toDouble().isInfinite()) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3({ check(false, { "cotxx"})}, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let({a: Throwable -> check(true)})
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + (54.toUByte()).toShort().countLeadingZeroBits())
        if (prope7) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:37,428 [main:107] - replacing (prope7, Boolean)
2021-03-12 05:59:37,428 [main:50] - replacing prope7 Boolean
2021-03-12 05:59:37,429 [main:54] - Getting value of type Boolean
2021-03-12 05:59:37,558 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:59:37,561 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:59:37,561 [main:61] - GENERATED IS CALL =false
2021-03-12 05:59:37,567 [main:67] - randomType = Boolean
2021-03-12 05:59:37,690 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:59:37,702 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@298bfadd]
2021-03-12 05:59:37,826 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:59:37,826 [main:78] - Generated call from random type = (false).equals("anflh")
2021-03-12 05:59:37,827 [main:106] - GETTING Boolean from String
2021-03-12 05:59:37,845 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f7bc479]]
2021-03-12 05:59:37,845 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:59:37,969 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:38,097 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:38,100 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f7bc479]
2021-03-12 05:59:38,100 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(604186770, -10770807).isNotBlank()
2021-03-12 05:59:38,100 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@221d65f3]]
2021-03-12 05:59:38,100 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:59:38,223 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:59:38,223 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@221d65f3]
2021-03-12 05:59:38,346 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:59:38,349 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).equals("qofnz").or(true)
2021-03-12 05:59:38,349 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c068836]]
2021-03-12 05:59:38,349 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:59:38,471 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:38,597 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:38,599 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c068836]
2021-03-12 05:59:38,600 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(1174368158, 2036240632).none()
2021-03-12 05:59:38,600 [main:113] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca1d83b]]
2021-03-12 05:59:38,600 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca1d83b]
2021-03-12 05:59:38,723 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:59:38,725 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).matches("cezmx")
2021-03-12 05:59:38,726 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@488da598]]
2021-03-12 05:59:38,726 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:59:38,849 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:38,851 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@488da598]
2021-03-12 05:59:38,852 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).get(1700973470).isTitleCase()
2021-03-12 05:59:38,852 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@347c5fec]]
2021-03-12 05:59:38,852 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:59:38,976 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:39,103 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:39,106 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@347c5fec]
2021-03-12 05:59:39,229 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:59:39,357 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 05:59:39,361 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 05:59:39,632 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:59:39,635 [main:95] - GENERATED = Regex("ehwnr")
2021-03-12 05:59:39,636 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(2103295574, 565139531).matches(Regex("ehwnr"))
2021-03-12 05:59:39,636 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ea7a2d8]]
2021-03-12 05:59:39,636 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:59:39,760 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:39,763 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ea7a2d8]
2021-03-12 05:59:39,763 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).get(2082815784).isDigit()
2021-03-12 05:59:39,763 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51aeaeb8]]
2021-03-12 05:59:39,763 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:59:39,886 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:40,011 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:40,014 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51aeaeb8]
2021-03-12 05:59:40,139 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:40,310 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:59:40,439 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:59:40,443 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:59:40,713 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:59:40,716 [main:95] - GENERATED = StringBuilder("yfoix")
2021-03-12 05:59:40,839 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:40,966 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:41,095 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:59:41,098 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(-1882838235, 1115429345).regionMatches(1781090681, StringBuilder("yfoix"), 72125421, -603787454, false)
2021-03-12 05:59:41,099 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eb3bad8]]
2021-03-12 05:59:41,099 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:59:41,223 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:41,349 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:41,352 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eb3bad8]
2021-03-12 05:59:41,476 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:59:41,603 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:59:41,606 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(-669901793, 1213417665).contains('ᒄ', true)
2021-03-12 05:59:41,606 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@298bfadd]]
2021-03-12 05:59:41,606 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d1c3ac]
2021-03-12 05:59:41,729 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:59:41,730 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@298bfadd]
2021-03-12 05:59:41,853 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:59:41,853 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).equals("tpyfl").equals("vfhwb")
2021-03-12 05:59:41,853 [main:114] - replacement of prope7 of type Boolean is (fu0<String>({ "bjgag"})).subSequence(-669901793, 1213417665).contains('ᒄ', true)
2021-03-12 05:59:41,977 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:59:41,977 [main:66] - Compilation checking started
2021-03-12 05:59:42,556 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = (865563637.toUInt()).toString(586731780)

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((29.toUByte()).toDouble().isInfinite()) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3({ check(false, { "cotxx"})}, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let({a: Throwable -> check(true)})
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + (54.toUByte()).toShort().countLeadingZeroBits())
        if ((fu0<String>({ "bjgag"})).subSequence(-669901793, 1213417665).contains('ᒄ', true)) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:42,558 [main:107] - replacing (prope2, Kla8)
2021-03-12 05:59:42,558 [main:50] - replacing prope2 Kla8
2021-03-12 05:59:42,558 [main:54] - Getting value of type Kla8
2021-03-12 05:59:42,693 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 05:59:42,696 [main:112] - generating klass Kla8 text = class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + (54.toUByte()).toShort().countLeadingZeroBits())
        if ((fu0<String>({ "bjgag"})).subSequence(-669901793, 1213417665).contains('ᒄ', true)) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:59:42,696 [main:58] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-12 05:59:42,696 [main:61] - GENERATED IS CALL =true
2021-03-12 05:59:43,010 [main:67] - randomType = LinkedHashMap<Char, Kla9>
2021-03-12 05:59:43,139 [main:302] - generating value of type = LinkedHashMap<Char, Kla9> false depth = 0
2021-03-12 05:59:43,273 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): LinkedHashMap<Char, Kla9> = TODO()
2021-03-12 05:59:43,277 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): LinkedHashMap<Char, Kla9> = TODO()
2021-03-12 05:59:43,555 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:59:43,558 [main:95] - GENERATED = LinkedHashMap<Char, Kla9>(486990119)
2021-03-12 05:59:43,673 [main:106] - GETTING Kla8 from String
2021-03-12 05:59:43,691 [main:106] - GETTING Kla8 from String
2021-03-12 05:59:43,691 [main:114] - replacement of prope2 of type Kla8 is Kla8()
2021-03-12 05:59:43,817 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:59:43,817 [main:66] - Compilation checking started
2021-03-12 05:59:44,404 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = (865563637.toUInt()).toString(586731780)

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((29.toUByte()).toDouble().isInfinite()) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3({ check(false, { "cotxx"})}, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let({a: Throwable -> check(true)})
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + (54.toUByte()).toShort().countLeadingZeroBits())
        if ((fu0<String>({ "bjgag"})).subSequence(-669901793, 1213417665).contains('ᒄ', true)) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            Kla8().prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:44,406 [main:107] - replacing (0, Int)
2021-03-12 05:59:44,407 [main:50] - replacing 0 Int
2021-03-12 05:59:44,407 [main:54] - Getting value of type Int
2021-03-12 05:59:44,532 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:44,535 [main:58] - GENERATED VALUE OF TYPE Int = 2043145084
2021-03-12 05:59:44,535 [main:61] - GENERATED IS CALL =false
2021-03-12 05:59:45,636 [main:67] - randomType = ArrayDeque<ArrayList<Function2<HashSet<UInt?>, Set<ULong>, Byte>>>
2021-03-12 05:59:45,761 [main:302] - generating value of type = ArrayDeque<ArrayList<Function2<HashSet<UInt?>, Set<ULong>, Byte>>> false depth = 0
2021-03-12 05:59:45,896 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<ArrayList<Function2<HashSet<UInt?>, Set<ULong>, Byte>>>): ArrayDeque<ArrayList<Function2<HashSet<UInt?>, Set<ULong>, Byte>>> = TODO()
2021-03-12 05:59:45,900 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<ArrayList<Function2<HashSet<UInt?>, Set<ULong>, Byte>>>): ArrayDeque<ArrayList<Function2<HashSet<UInt?>, Set<ULong>, Byte>>> = TODO()
2021-03-12 05:59:46,190 [main:302] - generating value of type = Collection<ArrayList<Function2<HashSet<UInt?>, Set<ULong>, Byte>>> false depth = 3
2021-03-12 05:59:46,326 [main:43] - GENERATING CALL OF fun UByteArray(size: kotlin.Int): Collection<ArrayList<Function2<HashSet<UInt?>, Set<ULong>, Byte>>> = TODO()
2021-03-12 05:59:46,329 [main:61] - WITHOUT TYPE PARAMS = fun UByteArray(size: kotlin.Int): Collection<ArrayList<Function2<HashSet<UInt?>, Set<ULong>, Byte>>> = TODO()
2021-03-12 05:59:46,607 [main:302] - generating value of type = Int true depth = 6
2021-03-12 05:59:46,609 [main:95] - GENERATED = UByteArray(1028885683)
2021-03-12 05:59:46,610 [main:95] - GENERATED = ArrayDeque<ArrayList<Function2<HashSet<UInt?>, Set<ULong>, Byte>>>(UByteArray(1028885683))
2021-03-12 05:59:46,905 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@77f7d461]
2021-03-12 05:59:47,031 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:47,034 [main:78] - Generated call from random type = (ArrayDeque<ArrayList<Function2<HashSet<UInt?>, Set<ULong>, Byte>>>(UByteArray(1028885683))).modCount.coerceAtMost(309221213)
2021-03-12 05:59:47,034 [main:114] - replacement of 0 of type Int is (ArrayDeque<ArrayList<Function2<HashSet<UInt?>, Set<ULong>, Byte>>>(UByteArray(1028885683))).modCount.coerceAtMost(309221213)
2021-03-12 05:59:47,160 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:59:47,160 [main:66] - Compilation checking started
2021-03-12 05:59:47,598 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = (865563637.toUInt()).toString(586731780)

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((29.toUByte()).toDouble().isInfinite()) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3({ check(false, { "cotxx"})}, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let({a: Throwable -> check(true)})
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = (ArrayDeque<ArrayList<Function2<HashSet<UInt?>, Set<ULong>, Byte>>>(UByteArray(1028885683))).modCount.coerceAtMost(309221213)
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + (54.toUByte()).toShort().countLeadingZeroBits())
        if ((fu0<String>({ "bjgag"})).subSequence(-669901793, 1213417665).contains('ᒄ', true)) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            Kla8().prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:47,602 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-12 05:59:47,602 [main:50] - replacing prope8 Function0<Unit>
2021-03-12 05:59:47,602 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:59:47,752 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:59:47,755 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:59:47,892 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:59:47,896 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:59:48,184 [main:302] - generating value of type = Any false depth = 4
2021-03-12 05:59:48,184 [main:95] - GENERATED = println("zafrr")
2021-03-12 05:59:48,184 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("zafrr")}
2021-03-12 05:59:48,184 [main:61] - GENERATED IS CALL =false
2021-03-12 05:59:48,344 [main:67] - randomType = ArrayDeque<UInt>
2021-03-12 05:59:48,480 [main:302] - generating value of type = ArrayDeque<UInt> false depth = 0
2021-03-12 05:59:48,629 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<UInt> = TODO()
2021-03-12 05:59:48,633 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<UInt> = TODO()
2021-03-12 05:59:48,765 [main:95] - GENERATED = ArrayDeque<UInt>()
2021-03-12 05:59:48,898 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:59:48,917 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:59:48,917 [main:114] - replacement of prope8 of type Function0<Unit> is { println("zafrr")}
2021-03-12 05:59:49,043 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:59:49,043 [main:66] - Compilation checking started
2021-03-12 05:59:49,422 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = (865563637.toUInt()).toString(586731780)

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((29.toUByte()).toDouble().isInfinite()) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3({ check(false, { "cotxx"})}, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let({a: Throwable -> check(true)})
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            { println("zafrr")}()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + (54.toUByte()).toShort().countLeadingZeroBits())
        if ((fu0<String>({ "bjgag"})).subSequence(-669901793, 1213417665).contains('ᒄ', true)) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            Kla8().prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:49,425 [main:107] - replacing (this, Kla5)
2021-03-12 05:59:49,425 [main:50] - replacing this Kla5
2021-03-12 05:59:49,425 [main:54] - Getting value of type Kla5
2021-03-12 05:59:49,551 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 05:59:49,554 [main:112] - generating klass Kla5 text = class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "zknqp"
    }

    var prope5: Any? = null
}
2021-03-12 05:59:49,554 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-12 05:59:49,554 [main:61] - GENERATED IS CALL =true
2021-03-12 05:59:49,560 [main:67] - randomType = Boolean
2021-03-12 05:59:49,687 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:59:49,703 [main:106] - GETTING Kla5 from String
2021-03-12 05:59:49,721 [main:106] - GETTING Kla5 from String
2021-03-12 05:59:49,721 [main:114] - replacement of this of type Kla5 is Kla5()
2021-03-12 05:59:49,847 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:59:49,847 [main:66] - Compilation checking started
2021-03-12 05:59:50,440 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = (865563637.toUInt()).toString(586731780)

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((29.toUByte()).toDouble().isInfinite()) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3({ check(false, { "cotxx"})}, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let({a: Throwable -> check(true)})
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla5().prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + (54.toUByte()).toShort().countLeadingZeroBits())
        if ((fu0<String>({ "bjgag"})).subSequence(-669901793, 1213417665).contains('ᒄ', true)) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            Kla8().prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:50,442 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 05:59:50,442 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 05:59:50,442 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 05:59:50,611 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 05:59:50,617 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 05:59:50,622 [main:67] - randomType = String
2021-03-12 05:59:50,749 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:59:50,772 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:59:50,791 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:59:50,791 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 05:59:50,791 [main:107] - replacing (0, Int)
2021-03-12 05:59:50,791 [main:50] - replacing 0 Int
2021-03-12 05:59:50,791 [main:54] - Getting value of type Int
2021-03-12 05:59:50,917 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:50,920 [main:58] - GENERATED VALUE OF TYPE Int = 1588677469
2021-03-12 05:59:50,920 [main:61] - GENERATED IS CALL =false
2021-03-12 05:59:51,544 [main:67] - randomType = Function1<Kla9, Function1<Kla3<Kla4>, Char>>
2021-03-12 05:59:51,545 [main:106] - GETTING Int from String
2021-03-12 05:59:51,572 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20c1fe97]]
2021-03-12 05:59:51,572 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:59:51,699 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:59:51,701 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20c1fe97]
2021-03-12 05:59:51,830 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:51,833 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).compareTo("oyrdj").xor(874239079)
2021-03-12 05:59:51,833 [main:113] - Case = [public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d99c2b4]]
2021-03-12 05:59:51,833 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d99c2b4]
2021-03-12 05:59:51,833 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).toInt()
2021-03-12 05:59:51,833 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7bef169a]]
2021-03-12 05:59:51,833 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:59:51,833 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7bef169a]
2021-03-12 05:59:51,960 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:51,963 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).compareTo(Kla0<Char>().fu1()).rotateLeft(1696836350)
2021-03-12 05:59:51,963 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41172b08]]
2021-03-12 05:59:51,963 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41172b08]
2021-03-12 05:59:52,090 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:59:52,093 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).compareTo(fu0<String>({ "bjgag"}), true)
2021-03-12 05:59:52,094 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6302d9cb]]
2021-03-12 05:59:52,094 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6302d9cb]
2021-03-12 05:59:52,219 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 05:59:52,222 [main:302] - generating value of type = Int true depth = 1
2021-03-12 05:59:52,224 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).sumOf({a: Char -> -695384551})
2021-03-12 05:59:52,224 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6ca72c12]]
2021-03-12 05:59:52,225 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:59:52,350 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:52,353 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6ca72c12]
2021-03-12 05:59:52,479 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:59:52,481 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).get(629789958).minus('ꎄ')
2021-03-12 05:59:52,482 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53c110e4]]
2021-03-12 05:59:52,482 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:59:52,482 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53c110e4]
2021-03-12 05:59:52,612 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:59:52,615 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).compareTo(Kla0<Char>().fu1()).div(93)
2021-03-12 05:59:52,615 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30153a85]]
2021-03-12 05:59:52,615 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:59:52,615 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30153a85]
2021-03-12 05:59:52,742 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:52,745 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).compareTo(fu0<String>({ "bjgag"})).ushr(-1566965918)
2021-03-12 05:59:52,745 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7f68a356]]
2021-03-12 05:59:52,745 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 05:59:52,872 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:52,875 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7f68a356]
2021-03-12 05:59:52,875 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).get(643709165).toInt()
2021-03-12 05:59:52,875 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64da162d]]
2021-03-12 05:59:52,875 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64da162d]
2021-03-12 05:59:53,002 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:59:53,005 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).length.compareTo(73)
2021-03-12 05:59:53,005 [main:114] - replacement of 0 of type Int is (fu0<String>({ "bjgag"})).toInt()
2021-03-12 05:59:53,134 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:59:53,134 [main:66] - Compilation checking started
2021-03-12 05:59:53,720 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = (865563637.toUInt()).toString(586731780)

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((29.toUByte()).toDouble().isInfinite()) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3({ check(false, { "cotxx"})}, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { fu5() } != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let({a: Throwable -> check(true)})
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla5().prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = (fu0<String>({ "bjgag"})).toInt()
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + (54.toUByte()).toShort().countLeadingZeroBits())
        if ((fu0<String>({ "bjgag"})).subSequence(-669901793, 1213417665).contains('ᒄ', true)) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            Kla8().prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:53,722 [main:107] - replacing ({ fu5() }, SuspendFunction0<String>)
2021-03-12 05:59:53,723 [main:50] - replacing { fu5() } SuspendFunction0<String>
2021-03-12 05:59:53,723 [main:54] - Getting value of type SuspendFunction0<String>
2021-03-12 05:59:53,849 [main:302] - generating value of type = SuspendFunction0<String> false depth = 0
2021-03-12 05:59:53,852 [main:302] - generating value of type = String true depth = 1
2021-03-12 05:59:53,855 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<String> = { "rlsrw"}
2021-03-12 05:59:53,855 [main:61] - GENERATED IS CALL =false
2021-03-12 05:59:53,867 [main:67] - randomType = Kla5
2021-03-12 05:59:53,994 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 05:59:53,996 [main:112] - generating klass Kla5 text = class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla5().prope5 = "zknqp"
    }

    var prope5: Any? = null
}
2021-03-12 05:59:54,012 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 05:59:54,034 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 05:59:54,034 [main:114] - replacement of { fu5() } of type SuspendFunction0<String> is { "rlsrw"}
2021-03-12 05:59:54,162 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:59:54,162 [main:66] - Compilation checking started
2021-03-12 05:59:54,738 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = (865563637.toUInt()).toString(586731780)

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((29.toUByte()).toDouble().isInfinite()) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3({ check(false, { "cotxx"})}, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { "rlsrw"} != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let({a: Throwable -> check(true)})
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla5().prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = (fu0<String>({ "bjgag"})).toInt()
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + (54.toUByte()).toShort().countLeadingZeroBits())
        if ((fu0<String>({ "bjgag"})).subSequence(-669901793, 1213417665).contains('ᒄ', true)) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            Kla8().prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:54,740 [main:107] - replacing ({
        prope5.getOrThrow()
    }, Any?)
2021-03-12 05:59:54,741 [main:50] - replacing {
        prope5.getOrThrow()
    } Any?
2021-03-12 05:59:54,741 [main:54] - Getting value of type Any?
2021-03-12 05:59:54,866 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:59:54,866 [main:58] - GENERATED VALUE OF TYPE Any? = "eyqra"
2021-03-12 05:59:54,866 [main:61] - GENERATED IS CALL =false
2021-03-12 05:59:54,872 [main:67] - randomType = Short
2021-03-12 05:59:54,998 [main:302] - generating value of type = Short true depth = 0
2021-03-12 05:59:55,034 [main:106] - GETTING Any? from String
2021-03-12 05:59:55,052 [main:106] - GETTING Any? from String
2021-03-12 05:59:55,052 [main:114] - replacement of {
        prope5.getOrThrow()
    } of type Any? is "eyqra"
2021-03-12 05:59:55,180 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-12 05:59:55,180 [main:66] - Compilation checking started
2021-03-12 05:59:55,186 [main:71] - Wrong syntax or breaks conditions
2021-03-12 05:59:55,186 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = (865563637.toUInt()).toString(586731780)

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = 0

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((29.toUByte()).toDouble().isInfinite()) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3({ check(false, { "cotxx"})}, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { "rlsrw"} != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let({a: Throwable -> check(true)})
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) "eyqra"
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla5().prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = (fu0<String>({ "bjgag"})).toInt()
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + (54.toUByte()).toShort().countLeadingZeroBits())
        if ((fu0<String>({ "bjgag"})).subSequence(-669901793, 1213417665).contains('ᒄ', true)) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            Kla8().prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:55,190 [main:107] - replacing (0, Int)
2021-03-12 05:59:55,190 [main:50] - replacing 0 Int
2021-03-12 05:59:55,190 [main:54] - Getting value of type Int
2021-03-12 05:59:55,329 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:55,332 [main:58] - GENERATED VALUE OF TYPE Int = 673614712
2021-03-12 05:59:55,332 [main:61] - GENERATED IS CALL =false
2021-03-12 05:59:55,343 [main:67] - randomType = Kla8
2021-03-12 05:59:55,469 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 05:59:55,472 [main:112] - generating klass Kla8 text = class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = (fu0<String>({ "bjgag"})).toInt()
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + (54.toUByte()).toShort().countLeadingZeroBits())
        if ((fu0<String>({ "bjgag"})).subSequence(-669901793, 1213417665).contains('ᒄ', true)) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:59:55,479 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2d2a4ce0]
2021-03-12 05:59:55,605 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:59:55,607 [main:78] - Generated call from random type = (Kla8()).prope7.compareTo(false)
2021-03-12 05:59:55,608 [main:106] - GETTING Int from String
2021-03-12 05:59:55,627 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2bd3767f]]
2021-03-12 05:59:55,627 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:59:55,795 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:59:55,798 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2bd3767f]
2021-03-12 05:59:55,924 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:55,927 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).compareTo("wrfxx").coerceAtLeast(-1565039410)
2021-03-12 05:59:55,927 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68d02503]]
2021-03-12 05:59:55,927 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:59:55,927 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68d02503]
2021-03-12 05:59:55,927 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).compareTo(fu0<String>({ "bjgag"})).takeLowestOneBit()
2021-03-12 05:59:55,927 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77a940aa]]
2021-03-12 05:59:55,927 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:59:56,053 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:59:56,056 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77a940aa]
2021-03-12 05:59:56,056 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).compareTo("mxkwl").unaryMinus()
2021-03-12 05:59:56,056 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64707e4]]
2021-03-12 05:59:56,056 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64707e4]
2021-03-12 05:59:56,056 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).count()
2021-03-12 05:59:56,056 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68d02503]]
2021-03-12 05:59:56,056 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68d02503]
2021-03-12 05:59:56,056 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).length.takeLowestOneBit()
2021-03-12 05:59:56,056 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b6fee42]]
2021-03-12 05:59:56,056 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:59:56,184 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:59:56,187 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b6fee42]
2021-03-12 05:59:56,314 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:59:56,317 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).compareTo("zubda").plus(-34)
2021-03-12 05:59:56,317 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53c110e4]]
2021-03-12 05:59:56,317 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:59:56,317 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53c110e4]
2021-03-12 05:59:56,445 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:59:56,448 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).compareTo(fu0<String>({ "bjgag"})).div(29)
2021-03-12 05:59:56,448 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6302d9cb]]
2021-03-12 05:59:56,448 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 05:59:56,575 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:56,705 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:56,708 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6302d9cb]
2021-03-12 05:59:56,834 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 05:59:56,837 [main:302] - generating value of type = Int true depth = 1
2021-03-12 05:59:56,840 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(675646575, 476980310).sumOf({a: Char -> 125488978})
2021-03-12 05:59:56,840 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7bf61483]]
2021-03-12 05:59:56,840 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:59:56,840 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7bf61483]
2021-03-12 05:59:56,967 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:56,970 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).compareTo(fu0<String>({ "bjgag"})).shr(-1977501908)
2021-03-12 05:59:56,970 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@275f738c]]
2021-03-12 05:59:56,970 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 05:59:56,970 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@275f738c]
2021-03-12 05:59:57,099 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:57,227 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:59:57,230 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).compareTo(fu0<String>({ "bjgag"})).coerceIn(329925453, -1097831465)
2021-03-12 05:59:57,230 [main:114] - replacement of 0 of type Int is (fu0<String>({ "bjgag"})).compareTo("mxkwl").unaryMinus()
2021-03-12 05:59:57,355 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:59:57,355 [main:66] - Compilation checking started
2021-03-12 05:59:57,931 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = (865563637.toUInt()).toString(586731780)

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = (fu0<String>({ "bjgag"})).compareTo("mxkwl").unaryMinus()

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((29.toUByte()).toDouble().isInfinite()) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3({ check(false, { "cotxx"})}, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { "rlsrw"} != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let({a: Throwable -> check(true)})
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla5().prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = (fu0<String>({ "bjgag"})).toInt()
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + (54.toUByte()).toShort().countLeadingZeroBits())
        if ((fu0<String>({ "bjgag"})).subSequence(-669901793, 1213417665).contains('ᒄ', true)) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            Kla8().prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 05:59:57,933 [main:107] - replacing (continuation, Continuation<Ty4>)
2021-03-12 05:59:57,933 [main:50] - replacing continuation Continuation<Ty4>
2021-03-12 05:59:57,934 [main:54] - Getting value of type Continuation<Ty4>
2021-03-12 05:59:58,062 [main:302] - generating value of type = Continuation<Ty4> false depth = 0
2021-03-12 05:59:58,195 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Ty4>)->kotlin.Unit): Contuation<Ty4> = TODO()
2021-03-12 05:59:58,198 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Ty4>)->kotlin.Unit): Contuation<Ty4> = TODO()
2021-03-12 05:59:58,631 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 05:59:58,765 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:59:58,768 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:59:59,054 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 05:59:59,192 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:59:59,196 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:59:59,635 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 05:59:59,772 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:59:59,776 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:00:00,215 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:00:00,215 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:00:00,215 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:00:00,215 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Ty4>)->kotlin.Unit): Contuation<Ty4> = TODO()
2021-03-12 06:00:00,216 [main:58] - GENERATED VALUE OF TYPE Continuation<Ty4> = 
2021-03-12 06:00:00,660 [main:67] - randomType = Array<Collection<UShort>>
2021-03-12 06:00:00,788 [main:302] - generating value of type = Array<Collection<UShort>> false depth = 0
2021-03-12 06:00:00,966 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<Collection<UShort>> = TODO()
2021-03-12 06:00:00,970 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<Collection<UShort>> = TODO()
2021-03-12 06:00:01,104 [main:95] - GENERATED = enumValues<Collection<UShort>>()
2021-03-12 06:00:01,120 [main:106] - GETTING Continuation<Ty4> from String
2021-03-12 06:00:01,138 [main:106] - GETTING Continuation<Ty4> from String
2021-03-12 06:00:01,139 [main:111] - Cant find and generate replacement for continuation type Continuation<Ty4>
2021-03-12 06:00:01,139 [main:107] - replacing ((fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions, IntRange)
2021-03-12 06:00:01,139 [main:50] - replacing (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions IntRange
2021-03-12 06:00:01,139 [main:54] - Getting value of type IntRange
2021-03-12 06:00:01,266 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 06:00:01,398 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 06:00:01,401 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 06:00:01,823 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:00:01,826 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:00:01,828 [main:95] - GENERATED = IntRange(-2009877800, -162825426)
2021-03-12 06:00:01,828 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(-2009877800, -162825426)
2021-03-12 06:00:01,828 [main:61] - GENERATED IS CALL =true
2021-03-12 06:00:01,984 [main:67] - randomType = Kla7?
2021-03-12 06:00:02,112 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 06:00:02,115 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}
2021-03-12 06:00:02,121 [main:106] - GETTING IntRange from String
2021-03-12 06:00:02,138 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@33795ac7]]
2021-03-12 06:00:02,138 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 06:00:02,264 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:00:02,267 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@33795ac7]
2021-03-12 06:00:02,393 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:00:02,396 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).compareTo("rgeia").until(-47)
2021-03-12 06:00:02,396 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@22dc3c4]]
2021-03-12 06:00:02,396 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10b3df77]
2021-03-12 06:00:02,396 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@22dc3c4]
2021-03-12 06:00:02,522 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:00:02,525 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).compareTo(Kla0<Char>().fu1()).rangeTo(114)
2021-03-12 06:00:02,525 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@33795ac7]]
2021-03-12 06:00:02,525 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@33795ac7]
2021-03-12 06:00:02,652 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:00:02,654 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).length.until(113)
2021-03-12 06:00:02,655 [main:113] - Case = [public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@5e000b17]]
2021-03-12 06:00:02,655 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).indices
2021-03-12 06:00:02,655 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@5e000b17]]
2021-03-12 06:00:02,655 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 06:00:02,781 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:00:02,910 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:00:02,913 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).subSequence(-2010654293, -194834337).indices
2021-03-12 06:00:02,913 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ae94c5e], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@22dc3c4]]
2021-03-12 06:00:02,913 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@22dc3c4]
2021-03-12 06:00:03,042 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:00:03,045 [main:117] - GENERATED CALL = (Kla0<Char>().fu1()).length.rangeTo(111)
2021-03-12 06:00:03,045 [main:114] - replacement of (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions of type IntRange is (Kla0<Char>().fu1()).length.rangeTo(111)
2021-03-12 06:00:03,171 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:00:03,171 [main:66] - Compilation checking started
2021-03-12 06:00:03,545 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = (865563637.toUInt()).toString(586731780)

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = (fu0<String>({ "bjgag"})).compareTo("mxkwl").unaryMinus()

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((29.toUByte()).toDouble().isInfinite()) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3({ check(false, { "cotxx"})}, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { "rlsrw"} != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let({a: Throwable -> check(true)})
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla5().prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error(fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = (fu0<String>({ "bjgag"})).toInt()
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (Kla0<Char>().fu1()).length.rangeTo(111)) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + (54.toUByte()).toShort().countLeadingZeroBits())
        if ((fu0<String>({ "bjgag"})).subSequence(-669901793, 1213417665).contains('ᒄ', true)) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            Kla8().prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 06:00:03,549 [main:107] - replacing (fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}), String)
2021-03-12 06:00:03,549 [main:50] - replacing fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) String
2021-03-12 06:00:03,549 [main:54] - Getting value of type String
2021-03-12 06:00:03,678 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:00:03,681 [main:58] - GENERATED VALUE OF TYPE String = "zzdvh"
2021-03-12 06:00:03,681 [main:61] - GENERATED IS CALL =false
2021-03-12 06:00:03,687 [main:67] - randomType = Char
2021-03-12 06:00:03,821 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:00:03,853 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7f278d1e]
2021-03-12 06:00:03,987 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:00:03,990 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52a8be22]
2021-03-12 06:00:04,123 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:00:04,126 [main:78] - Generated call from random type = ('ㅚ').compareTo('䛍').toString(-669774513)
2021-03-12 06:00:04,126 [main:106] - GETTING String from String
2021-03-12 06:00:04,147 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43da71d6]]
2021-03-12 06:00:04,147 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43da71d6]
2021-03-12 06:00:04,277 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:00:04,412 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:00:04,416 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:00:04,693 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:00:04,696 [main:95] - GENERATED = StringBuilder(1163328000)
2021-03-12 06:00:04,696 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).removeSuffix(StringBuilder(1163328000))
2021-03-12 06:00:04,696 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9c1180]]
2021-03-12 06:00:04,696 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9c1180]
2021-03-12 06:00:04,823 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:00:04,956 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:00:04,959 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:00:05,238 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 06:00:05,244 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-12 06:00:05,244 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).removePrefix(StringBuilder(StringBuilder()))
2021-03-12 06:00:05,244 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1571a09e]]
2021-03-12 06:00:05,244 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1571a09e]
2021-03-12 06:00:05,370 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:00:05,498 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:00:05,502 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).replaceAfter('', fu0<String>({ "bjgag"}), "rntzx")
2021-03-12 06:00:05,502 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ab1054]]
2021-03-12 06:00:05,502 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ab1054]
2021-03-12 06:00:05,628 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:00:05,757 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:00:05,760 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).padStart(835240756, '젫')
2021-03-12 06:00:05,760 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51f6003c]]
2021-03-12 06:00:05,760 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51f6003c]
2021-03-12 06:00:05,940 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:00:06,070 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:00:06,073 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).replaceBefore('鿘', "gkqum", fu0<String>({ "bjgag"}))
2021-03-12 06:00:06,074 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a190df7]]
2021-03-12 06:00:06,074 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a190df7]
2021-03-12 06:00:06,203 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:00:06,206 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).dropLast(-842418677)
2021-03-12 06:00:06,206 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280ba906]]
2021-03-12 06:00:06,206 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280ba906]
2021-03-12 06:00:06,206 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).trimEnd()
2021-03-12 06:00:06,206 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@204b97a1]]
2021-03-12 06:00:06,206 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 06:00:06,334 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:00:06,337 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@204b97a1]
2021-03-12 06:00:06,337 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).get(270020373).titlecase()
2021-03-12 06:00:06,337 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5898cc8d]]
2021-03-12 06:00:06,337 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27b11d6]
2021-03-12 06:00:06,464 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:00:06,467 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5898cc8d]
2021-03-12 06:00:06,467 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).get(1632835052).uppercase()
2021-03-12 06:00:06,467 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122af64]]
2021-03-12 06:00:06,467 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@37dec705]
2021-03-12 06:00:06,593 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:00:06,722 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:00:06,725 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122af64]
2021-03-12 06:00:06,851 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:00:06,854 [main:117] - GENERATED CALL = (fu0<String>({ "bjgag"})).subSequence(607191815, 1883944738).repeat(717408904)
2021-03-12 06:00:06,854 [main:114] - replacement of fu0<String>({ "bjgag"}) + method + (fu0<String>({ "bjgag"})).replaceFirstChar({a: Char -> '㝈'}) of type String is (fu0<String>({ "bjgag"})).trimEnd()
2021-03-12 06:00:06,981 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:00:06,981 [main:66] - Compilation checking started
2021-03-12 06:00:07,595 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    while (true) break
    return "OK"
}

class Kla0<Ty0> {
    inner class Kla1<Ty2>

    fun <Ty3> fu1(block: Kla1<Ty3>.() -> String) = Kla1<Ty3>().block()
}

fun <Ty1> fu0(block: Kla0<Ty1>.() -> String) = Kla0<Ty1>().block()

fun box659() = fu0<Int> { "qyoon"}

//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
//WITH_RUNTIME
fun box567(): String {
    val prope0 by lazy { "OK" }
    return prope0
}

suspend fun fu2(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "yuwtq"
}

suspend fun fu3(): String = "lcwoy"

suspend fun fu4(): String = (865563637.toUInt()).toString(586731780)

suspend fun fu5(): String = (fu0<String>({ "bjgag"})).commonSuffixWith("yscmp", true)

fun fu6(expectedCount: Int, c: suspend () -> String): String {
    var prope3: String? = null
    var prope4 = (fu0<String>({ "bjgag"})).compareTo("mxkwl").unaryMinus()

    val prope5 = (arrayListOf<Double>(0.14774669294208653)).toArray().get(1829193743)

    if ((29.toUByte()).toDouble().isInfinite()) throw RuntimeException("fail 0")
    return prope3!!
}

class Kla2(val dispatcher: () -> Unit) : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    override fun <Ty4> interceptContinuation(continuation: Continuation<Ty4>): Continuation<Ty4> = Kla3({ check(false, { "cotxx"})}, continuation)
}

private class Kla3<Ty4>(
        val dispatcher: () -> Unit,
        val continuation: Continuation<Ty4>
): Kla6<Ty4>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty4) {
        dispatcher()
        continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        { require(true, { "uzbxk"})}()
        continuation.resumeWithException(exception)
    }
}

fun box994(): String {
    if ((fu0<String>({ "bjgag"})).none()) return "fail 2"
    if ((fu0<String>({ "bjgag"})).toUpperCase() != "vqpqn") return "fail 3"

    if (fu6(0) { "jaokp" } != "Exception: OK") return "fail 4"
    if (fu6(1) { "rlsrw"} != "Exception: OK") return "fail 5"

    return "OK"
}

fun <Ty4> fu7(x: (Ty4) -> Unit): Continuation<Ty4> = object: Continuation<Ty4> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        x(prope5.getOrThrow())
    }
}

fun fu8(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        null?.let({a: Throwable -> check(true)})
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla5().prope5 = "zknqp"
    }

    var prope5: Any? = null
}

abstract class Kla6<in Ty4> : Continuation<Ty4> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty4>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            resumeWithException(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty4)
}

class Kla7 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu0<String>({ "bjgag"})).removeSuffix("vzsif") + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope6.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { (fu0<String>({ "bjgag"})).equals("hgsws").or(true) }?.let { TODO()}
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (Kla8())?.prope8.equals("kezsm") } ?: error((fu0<String>({ "bjgag"})).trimEnd() +
                prope6.joinToString(separator = "\n"))
    }
}

val prope1 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = (fu0<String>({ "bjgag"})).toInt()
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + (54.toUByte()).toShort().countLeadingZeroBits())
        if ((fu0<String>({ "bjgag"})).subSequence(-669901793, 1213417665).contains('ᒄ', true)) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope8 = {
            Kla8().prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw CharacterCodingException()
    }
}


2021-03-12 06:00:07,597 [main:107] - replacing (Kla8(), Kla8)
2021-03-12 06:00:07,597 [main:50] - replacing Kla8() Kla8
2021-03-12 06:00:07,597 [main:54] - Getting value of type Kla8
2021-03-12 06:00:07,724 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 06:00:07,726 [main:112] - generating klass Kla8 text = class Kla8 {
    private var prope4 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu14() {
        prope4 = (fu0<String>({ "bjgag"})).toInt()
        prope7 = false
        prope8 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in (fu0<String>({ "bjgag"})).subSequence(-199319796, -948696001).indexOfAny(charArrayOf('鄺'), -773351489, false)..numberOfSuspensions) {
            if (prope4 != i) error((794901779).toChar().lowercase() + ", got " + prope4)
            prope8()
        }
        if (prope4 != (fu0<String>({ "bjgag"})).length.plus(-125))
            error((fu0<String>({ "bjgag"})).get(50006361).titlecase() + (54.toUByte()).toShort().countLeadingZeroBits())
        if ((fu0<String>({ "bjgag"})).subSequence(-669901793, 1213417665).contains('ᒄ', true)) error((fu0<String>({ "bjgag"})).toUpperCase())
        prope8()
        if ((3776159501904900306.toULong()).toDouble().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 06:00:07,727 [main:58] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-12 06:00:07,727 [main:61] - GENERATED IS CALL =true
2021-03-12 06:00:07,732 [main:67] - randomType = String
2021-03-12 06:00:07,858 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:00:07,881 [main:106] - GETTING Kla8 from String
2021-03-12 06:00:07,899 [main:106] - GETTING Kla8 from String
2021-03-12 06:00:07,899 [main:114] - replacement of Kla8() of type Kla8 is Kla8()
2021-03-12 06:00:08,024 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:00:08,026 [main:107] - replacing (ContinuationInterceptor, Key)
2021-03-12 06:00:08,026 [main:50] - replacing ContinuationInterceptor Key
2021-03-12 06:00:08,026 [main:54] - Getting value of type Key
2021-03-12 06:00:08,152 [main:302] - generating value of type = Key false depth = 0
