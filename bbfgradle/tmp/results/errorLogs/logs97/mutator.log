2021-03-12 08:09:56,551 [main:66] - Compilation checking started
2021-03-12 08:09:57,821 [main:45] - Trying to change 0 nodes
2021-03-12 08:09:57,965 [main:41] - AFTER TRY 0 res = fun test1() {}
2021-03-12 08:09:58,384 [main:43] - Try â„–0
2021-03-12 08:10:00,453 [main:69] - Trying to insert public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()
2021-03-12 08:10:00,585 [main:66] - Compilation checking started
2021-03-12 08:10:01,239 [main:103] - Trying to change 13 nodes
2021-03-12 08:10:01,239 [main:107] - replacing ({
    { { fu1(y) }() }()
}, Function0<String>)
2021-03-12 08:10:01,239 [main:50] - replacing {
    { { fu1(y) }() }()
} Function0<String>
2021-03-12 08:10:01,240 [main:54] - Getting value of type Function0<String>
2021-03-12 08:10:01,346 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-12 08:10:01,347 [main:302] - generating value of type = String true depth = 1
2021-03-12 08:10:01,350 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "uhdyh"}
2021-03-12 08:10:01,350 [main:61] - GENERATED IS CALL =false
2021-03-12 08:10:01,478 [main:67] - randomType = Float
2021-03-12 08:10:01,590 [main:302] - generating value of type = Float true depth = 0
2021-03-12 08:10:01,733 [main:114] - replacement of {
    { { fu1(y) }() }()
} of type Function0<String> is { "uhdyh"}
2021-03-12 08:10:01,815 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:10:01,816 [main:66] - Compilation checking started
2021-03-12 08:10:02,127 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return fu0 {"OK"} ()
}


2021-03-12 08:10:02,128 [main:107] - replacing (f, Function0<Ty0>)
2021-03-12 08:10:02,128 [main:50] - replacing f Function0<Ty0>
2021-03-12 08:10:02,128 [main:54] - Getting value of type Function0<Ty0>
2021-03-12 08:10:02,213 [main:302] - generating value of type = Function0<Ty0> false depth = 0
2021-03-12 08:10:02,213 [main:302] - generating value of type = Ty0 false depth = 1
2021-03-12 08:10:02,228 [main:58] - GENERATED VALUE OF TYPE Function0<Ty0> = { }
2021-03-12 08:10:02,228 [main:61] - GENERATED IS CALL =false
2021-03-12 08:10:02,310 [main:67] - randomType = Boolean
2021-03-12 08:10:02,389 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:10:02,405 [main:114] - replacement of f of type Function0<Ty0> is { }
2021-03-12 08:10:02,486 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:10:02,487 [main:66] - Compilation checking started
2021-03-12 08:10:02,596 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = { }()

fun box897(): String {
    return fu0 {"OK"} ()
}


2021-03-12 08:10:02,596 [main:107] - replacing (f, Function0<Ty0>)
2021-03-12 08:10:02,596 [main:50] - replacing f Function0<Ty0>
2021-03-12 08:10:02,596 [main:54] - Getting value of type Function0<Ty0>
2021-03-12 08:10:02,676 [main:302] - generating value of type = Function0<Ty0> false depth = 0
2021-03-12 08:10:02,676 [main:302] - generating value of type = Ty0 false depth = 1
2021-03-12 08:10:02,682 [main:58] - GENERATED VALUE OF TYPE Function0<Ty0> = { }
2021-03-12 08:10:02,682 [main:61] - GENERATED IS CALL =false
2021-03-12 08:10:02,775 [main:67] - randomType = Long
2021-03-12 08:10:02,872 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:10:02,936 [main:114] - replacement of f of type Function0<Ty0> is { }
2021-03-12 08:10:03,017 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:10:03,018 [main:66] - Compilation checking started
2021-03-12 08:10:03,127 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = { }()

fun box897(): String {
    return fu0 {"OK"} ()
}


2021-03-12 08:10:03,127 [main:107] - replacing (f(), Ty0)
2021-03-12 08:10:03,127 [main:50] - replacing f() Ty0
2021-03-12 08:10:03,127 [main:54] - Getting value of type Ty0
2021-03-12 08:10:03,207 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 08:10:03,212 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 08:10:03,388 [main:67] - randomType = HashSet<Byte>
2021-03-12 08:10:03,461 [main:302] - generating value of type = HashSet<Byte> false depth = 0
2021-03-12 08:10:03,559 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<Byte> = TODO()
2021-03-12 08:10:03,561 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<Byte> = TODO()
2021-03-12 08:10:03,640 [main:95] - GENERATED = hashSetOf<Byte>()
2021-03-12 08:10:03,816 [main:111] - Cant find and generate replacement for f() type Ty0
2021-03-12 08:10:03,816 [main:107] - replacing (fu0 {"OK"} (), String)
2021-03-12 08:10:03,816 [main:50] - replacing fu0 {"OK"} () String
2021-03-12 08:10:03,816 [main:54] - Getting value of type String
2021-03-12 08:10:03,888 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:10:03,888 [main:58] - GENERATED VALUE OF TYPE String = "gucur"
2021-03-12 08:10:03,889 [main:61] - GENERATED IS CALL =false
2021-03-12 08:10:03,966 [main:67] - randomType = Boolean
2021-03-12 08:10:04,038 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:10:04,049 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]
2021-03-12 08:10:04,122 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:10:04,124 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]
2021-03-12 08:10:04,227 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:10:04,229 [main:78] - Generated call from random type = (false).compareTo(true).toString(-637604008)
2021-03-12 08:10:04,229 [main:114] - replacement of fu0 {"OK"} () of type String is (false).compareTo(true).toString(-637604008)
2021-03-12 08:10:04,321 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:04,321 [main:66] - Compilation checking started
2021-03-12 08:10:04,710 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (false).compareTo(true).toString(-637604008)
}


2021-03-12 08:10:04,711 [main:107] - replacing (f, Function0<Ty0>)
2021-03-12 08:10:04,711 [main:50] - replacing f Function0<Ty0>
2021-03-12 08:10:04,711 [main:54] - Getting value of type Function0<Ty0>
2021-03-12 08:10:04,797 [main:302] - generating value of type = Function0<Ty0> false depth = 0
2021-03-12 08:10:04,798 [main:302] - generating value of type = Ty0 false depth = 1
2021-03-12 08:10:04,802 [main:58] - GENERATED VALUE OF TYPE Function0<Ty0> = { }
2021-03-12 08:10:04,802 [main:61] - GENERATED IS CALL =false
2021-03-12 08:10:04,895 [main:67] - randomType = ULong
2021-03-12 08:10:05,007 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:10:05,059 [main:114] - replacement of f of type Function0<Ty0> is { }
2021-03-12 08:10:05,139 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:10:05,139 [main:66] - Compilation checking started
2021-03-12 08:10:05,357 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = { }()

fun box897(): String {
    return (false).compareTo(true).toString(-637604008)
}


2021-03-12 08:10:05,357 [main:107] - replacing (f(), Ty0)
2021-03-12 08:10:05,357 [main:50] - replacing f() Ty0
2021-03-12 08:10:05,357 [main:54] - Getting value of type Ty0
2021-03-12 08:10:05,432 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 08:10:05,436 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 08:10:05,603 [main:67] - randomType = ArrayDeque<Byte>
2021-03-12 08:10:05,695 [main:302] - generating value of type = ArrayDeque<Byte> false depth = 0
2021-03-12 08:10:05,778 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Byte>): ArrayDeque<Byte> = TODO()
2021-03-12 08:10:05,780 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Byte>): ArrayDeque<Byte> = TODO()
2021-03-12 08:10:05,940 [main:302] - generating value of type = Collection<Byte> false depth = 3
2021-03-12 08:10:06,023 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(element: Byte): Collection<Byte> = TODO()
2021-03-12 08:10:06,025 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(element: Byte): Collection<Byte> = TODO()
2021-03-12 08:10:06,104 [main:302] - generating value of type = Byte true depth = 6
2021-03-12 08:10:06,105 [main:95] - GENERATED = setOfNotNull<Byte>(-76)
2021-03-12 08:10:06,105 [main:95] - GENERATED = ArrayDeque<Byte>(setOfNotNull<Byte>(-76))
2021-03-12 08:10:06,356 [main:111] - Cant find and generate replacement for f() type Ty0
2021-03-12 08:10:06,356 [main:107] - replacing (f, Function0<Ty0>)
2021-03-12 08:10:06,356 [main:50] - replacing f Function0<Ty0>
2021-03-12 08:10:06,356 [main:54] - Getting value of type Function0<Ty0>
2021-03-12 08:10:06,441 [main:302] - generating value of type = Function0<Ty0> false depth = 0
2021-03-12 08:10:06,441 [main:302] - generating value of type = Ty0 false depth = 1
2021-03-12 08:10:06,445 [main:58] - GENERATED VALUE OF TYPE Function0<Ty0> = { }
2021-03-12 08:10:06,445 [main:61] - GENERATED IS CALL =false
2021-03-12 08:10:06,533 [main:67] - randomType = Float
2021-03-12 08:10:06,608 [main:302] - generating value of type = Float true depth = 0
2021-03-12 08:10:06,645 [main:114] - replacement of f of type Function0<Ty0> is { }
2021-03-12 08:10:06,721 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:10:06,722 [main:66] - Compilation checking started
2021-03-12 08:10:06,920 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = { }()

fun box897(): String {
    return (false).compareTo(true).toString(-637604008)
}


2021-03-12 08:10:06,920 [main:107] - replacing (f, Function0<Ty0>)
2021-03-12 08:10:06,921 [main:50] - replacing f Function0<Ty0>
2021-03-12 08:10:06,921 [main:54] - Getting value of type Function0<Ty0>
2021-03-12 08:10:06,999 [main:302] - generating value of type = Function0<Ty0> false depth = 0
2021-03-12 08:10:07,000 [main:302] - generating value of type = Ty0 false depth = 1
2021-03-12 08:10:07,003 [main:58] - GENERATED VALUE OF TYPE Function0<Ty0> = { }
2021-03-12 08:10:07,004 [main:61] - GENERATED IS CALL =false
2021-03-12 08:10:07,095 [main:67] - randomType = Long
2021-03-12 08:10:07,186 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:10:07,244 [main:114] - replacement of f of type Function0<Ty0> is { }
2021-03-12 08:10:07,332 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:10:07,332 [main:66] - Compilation checking started
2021-03-12 08:10:07,543 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = { }()

fun box897(): String {
    return (false).compareTo(true).toString(-637604008)
}


2021-03-12 08:10:07,639 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 08:10:07,716 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 08:10:07,716 [main:66] - Compilation checking started
2021-03-12 08:10:07,968 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo(true).toString(-637604008)
}


2021-03-12 08:10:07,968 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 08:10:08,050 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 08:10:08,050 [main:66] - Compilation checking started
2021-03-12 08:10:08,296 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}


2021-03-12 08:10:08,296 [main:141] - TRYING TO REPLACE CONSTANT 637604008
2021-03-12 08:10:08,373 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:10:08,374 [main:66] - Compilation checking started
2021-03-12 08:10:08,547 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(compareTo((true)))
}


2021-03-12 08:10:08,548 [main:41] - AFTER TRY 1 res = fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}


2021-03-12 08:10:08,853 [main:43] - GENERATING CALL OF inline fun fu0(crossinline y: () -> String) = { "uhdyh"}
2021-03-12 08:10:08,853 [main:61] - WITHOUT TYPE PARAMS = inline fun fu0(crossinline y: () -> String) = { "uhdyh"}
2021-03-12 08:10:09,006 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-12 08:10:09,006 [main:302] - generating value of type = String true depth = 2
2021-03-12 08:10:09,006 [main:95] - GENERATED = fu0({ "vpcvv"})
2021-03-12 08:10:09,080 [main:43] - GENERATING CALL OF public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()
2021-03-12 08:10:09,168 [main:61] - WITHOUT TYPE PARAMS = public inline fun <Ty0> fu1(f: () -> Long): Long = f()
2021-03-12 08:10:09,363 [main:302] - generating value of type = Function0<Long> false depth = 1
2021-03-12 08:10:09,364 [main:302] - generating value of type = Long true depth = 2
2021-03-12 08:10:09,364 [main:95] - GENERATED = fu1<Long>({ -2968423655242299893})
2021-03-12 08:10:09,457 [main:43] - Try â„–1
2021-03-12 08:10:10,374 [main:41] - AFTER TRY 2 res = fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}


2021-03-12 08:10:10,705 [main:43] - GENERATING CALL OF inline fun fu0(crossinline y: () -> String) = { "uhdyh"}
2021-03-12 08:10:10,706 [main:61] - WITHOUT TYPE PARAMS = inline fun fu0(crossinline y: () -> String) = { "uhdyh"}
2021-03-12 08:10:10,859 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-12 08:10:10,859 [main:302] - generating value of type = String true depth = 2
2021-03-12 08:10:10,860 [main:95] - GENERATED = fu0({ "gfdvl"})
2021-03-12 08:10:10,937 [main:43] - GENERATING CALL OF public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()
2021-03-12 08:10:11,289 [main:61] - WITHOUT TYPE PARAMS = public inline fun <Ty0> fu1(f: () -> Array<ArrayList<ULong>>?): Array<ArrayList<ULong>>? = f()
2021-03-12 08:10:11,443 [main:302] - generating value of type = Function0<Array<ArrayList<ULong>>?> false depth = 1
2021-03-12 08:10:11,443 [main:302] - generating value of type = Array<ArrayList<ULong>> false depth = 2
2021-03-12 08:10:11,545 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<ArrayList<ULong>> = TODO()
2021-03-12 08:10:11,546 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<ArrayList<ULong>> = TODO()
2021-03-12 08:10:11,723 [main:302] - generating value of type = Int true depth = 5
2021-03-12 08:10:11,724 [main:95] - GENERATED = arrayOfNulls<ArrayList<ULong>>(1740064873)
2021-03-12 08:10:11,724 [main:95] - GENERATED = fu1<Array<ArrayList<ULong>>?>({ arrayOfNulls<ArrayList<ULong>>(1740064873)})
2021-03-12 08:10:11,810 [main:43] - Try â„–2
2021-03-12 08:10:12,903 [main:48] - Already checked
2021-03-12 08:10:13,568 [main:69] - Trying to insert fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "method: $prope2"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return "field should be initialized in clInit"

    val prope4 = javaClass.getEnclosingClass()
    if (prope4?.getName() != "O") return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}
2021-03-12 08:10:13,660 [main:66] - Compilation checking started
2021-03-12 08:10:14,226 [main:103] - Trying to change 14 nodes
2021-03-12 08:10:14,227 [main:107] - replacing (Kla0.prope0, Function0<Unit>)
2021-03-12 08:10:14,227 [main:50] - replacing Kla0.prope0 Function0<Unit>
2021-03-12 08:10:14,227 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:10:14,313 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:10:14,314 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:10:14,422 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:10:14,423 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:10:14,621 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 08:10:14,622 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 08:10:14,714 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:10:14,716 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:10:15,012 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 08:10:15,012 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 08:10:15,012 [main:302] - generating value of type = Any false depth = 9
2021-03-12 08:10:15,013 [main:95] - GENERATED = check(true, { "hsyqo"})
2021-03-12 08:10:15,013 [main:95] - GENERATED = contract({ check(true, { "hsyqo"})})
2021-03-12 08:10:15,013 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ check(true, { "hsyqo"})})}
2021-03-12 08:10:15,014 [main:61] - GENERATED IS CALL =false
2021-03-12 08:10:15,106 [main:67] - randomType = Float
2021-03-12 08:10:15,185 [main:302] - generating value of type = Float true depth = 0
2021-03-12 08:10:15,230 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 08:10:15,248 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:10:15,303 [main:106] - GETTING Function0<Unit> from Function0<String>
2021-03-12 08:10:15,318 [main:106] - GETTING Function0<Unit> from Array<ArrayList<ULong>>?
2021-03-12 08:10:15,348 [main:114] - replacement of Kla0.prope0 of type Function0<Unit> is { contract({ check(true, { "hsyqo"})})}
2021-03-12 08:10:15,433 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:10:15,433 [main:66] - Compilation checking started
2021-03-12 08:10:15,662 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = { contract({ check(true, { "hsyqo"})})}.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "method: $prope2"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return "field should be initialized in clInit"

    val prope4 = javaClass.getEnclosingClass()
    if (prope4?.getName() != "O") return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}


2021-03-12 08:10:15,663 [main:107] - replacing ("method: $prope2", String)
2021-03-12 08:10:15,663 [main:50] - replacing "method: $prope2" String
2021-03-12 08:10:15,663 [main:54] - Getting value of type String
2021-03-12 08:10:15,753 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:10:15,753 [main:58] - GENERATED VALUE OF TYPE String = "tttmz"
2021-03-12 08:10:15,753 [main:61] - GENERATED IS CALL =false
2021-03-12 08:10:15,755 [main:67] - randomType = Kla0
2021-03-12 08:10:15,836 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 08:10:15,836 [main:112] - generating klass Kla0 text = object Kla0 {
    val prope0 = {}
}
2021-03-12 08:10:15,845 [main:106] - GETTING String from Boolean
2021-03-12 08:10:15,854 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]]
2021-03-12 08:10:15,854 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]
2021-03-12 08:10:15,855 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]
2021-03-12 08:10:15,855 [main:117] - GENERATED CALL = ((true)).compareTo((true)).toString((true).compareTo((true)))
2021-03-12 08:10:15,855 [main:114] - replacement of "method: $prope2" of type String is "tttmz"
2021-03-12 08:10:15,936 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:10:15,936 [main:66] - Compilation checking started
2021-03-12 08:10:16,268 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return "field should be initialized in clInit"

    val prope4 = javaClass.getEnclosingClass()
    if (prope4?.getName() != "O") return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}


2021-03-12 08:10:16,269 [main:107] - replacing (Kla0, Kla0)
2021-03-12 08:10:16,269 [main:50] - replacing Kla0 Kla0
2021-03-12 08:10:16,269 [main:54] - Getting value of type Kla0
2021-03-12 08:10:16,350 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 08:10:16,350 [main:112] - generating klass Kla0 text = object Kla0 {
    val prope0 = {}
}
2021-03-12 08:10:16,350 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0
2021-03-12 08:10:16,351 [main:61] - GENERATED IS CALL =false
2021-03-12 08:10:16,438 [main:67] - randomType = Long
2021-03-12 08:10:16,517 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:10:16,554 [main:106] - GETTING Kla0 from Int
2021-03-12 08:10:16,594 [main:106] - GETTING Kla0 from Boolean
2021-03-12 08:10:16,605 [main:106] - GETTING Kla0 from Array<ArrayList<ULong>>?
2021-03-12 08:10:16,625 [main:106] - GETTING Kla0 from Function0<String>
2021-03-12 08:10:16,639 [main:114] - replacement of Kla0 of type Kla0 is Kla0
2021-03-12 08:10:16,722 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:16,723 [main:107] - replacing (prope4?.getName() != "O", Boolean)
2021-03-12 08:10:16,723 [main:50] - replacing prope4?.getName() != "O" Boolean
2021-03-12 08:10:16,723 [main:54] - Getting value of type Boolean
2021-03-12 08:10:16,815 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:10:16,816 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:10:16,816 [main:61] - GENERATED IS CALL =false
2021-03-12 08:10:16,992 [main:67] - randomType = Array<ULong>
2021-03-12 08:10:17,074 [main:302] - generating value of type = Array<ULong> false depth = 0
2021-03-12 08:10:17,198 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: ULong): Array<ULong> = TODO()
2021-03-12 08:10:17,200 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: ULong): Array<ULong> = TODO()
2021-03-12 08:10:17,292 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 08:10:17,293 [main:95] - GENERATED = arrayOf<ULong>(4448816698437333649.toULong())
2021-03-12 08:10:17,311 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@1aed62f]
2021-03-12 08:10:17,391 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:10:17,392 [main:78] - Generated call from random type = (arrayOf<ULong>(4448816698437333649.toULong())).equals("rvxiv")
2021-03-12 08:10:17,393 [main:106] - GETTING Boolean from Int
2021-03-12 08:10:17,457 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e206402]]
2021-03-12 08:10:17,457 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62]
2021-03-12 08:10:17,458 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e206402]
2021-03-12 08:10:17,458 [main:117] - GENERATED CALL = ((true).compareTo((true))).toChar().isWhitespace()
2021-03-12 08:10:17,458 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ad9402f]]
2021-03-12 08:10:17,458 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62]
2021-03-12 08:10:17,459 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ad9402f]
2021-03-12 08:10:17,459 [main:117] - GENERATED CALL = ((true).compareTo((true))).toChar().isDigit()
2021-03-12 08:10:17,459 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@10418c7], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4085420c]]
2021-03-12 08:10:17,459 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@10418c7]
2021-03-12 08:10:17,540 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:10:17,540 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4085420c]
2021-03-12 08:10:17,541 [main:117] - GENERATED CALL = ((true).compareTo((true))).equals("wvyyk").or((true))
2021-03-12 08:10:17,541 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@10418c7]]
2021-03-12 08:10:17,541 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@10418c7]
2021-03-12 08:10:17,624 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:10:17,624 [main:117] - GENERATED CALL = ((true).compareTo((true))).equals("duumo")
2021-03-12 08:10:17,625 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ef3a193], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5bb0de2a]]
2021-03-12 08:10:17,625 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ef3a193]
2021-03-12 08:10:17,625 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5bb0de2a]
2021-03-12 08:10:17,625 [main:117] - GENERATED CALL = ((true).compareTo((true))).toFloat().isNaN()
2021-03-12 08:10:17,625 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2b13fc09], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@193db46d]]
2021-03-12 08:10:17,626 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2b13fc09]
2021-03-12 08:10:17,626 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@193db46d]
2021-03-12 08:10:17,626 [main:117] - GENERATED CALL = ((true).compareTo((true))).toDouble().isNaN()
2021-03-12 08:10:17,626 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189c12c4], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@54362e7f]]
2021-03-12 08:10:17,626 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189c12c4]
2021-03-12 08:10:17,626 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@54362e7f]
2021-03-12 08:10:17,744 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:10:17,744 [main:117] - GENERATED CALL = ((true).compareTo((true))).toByte().equals("ulqrn")
2021-03-12 08:10:17,745 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@317f3713], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@35a40528]]
2021-03-12 08:10:17,745 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@317f3713]
2021-03-12 08:10:17,863 [main:302] - generating value of type = Double true depth = 0
2021-03-12 08:10:17,864 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@35a40528]
2021-03-12 08:10:17,941 [main:117] - GENERATED CALL = ((true).compareTo((true))).div(0.38126287360473876).equals(null)
2021-03-12 08:10:17,941 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3138cd82]]
2021-03-12 08:10:17,941 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62]
2021-03-12 08:10:17,942 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3138cd82]
2021-03-12 08:10:17,942 [main:117] - GENERATED CALL = ((true).compareTo((true))).toChar().isLowerCase()
2021-03-12 08:10:17,942 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75b94138], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@262d94d4]]
2021-03-12 08:10:17,942 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75b94138]
2021-03-12 08:10:18,022 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:10:18,022 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@262d94d4]
2021-03-12 08:10:18,107 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:10:18,108 [main:117] - GENERATED CALL = ((true).compareTo((true))).rangeTo(-28).equals("smspp")
2021-03-12 08:10:18,108 [main:114] - replacement of prope4?.getName() != "O" of type Boolean is ((true).compareTo((true))).equals("duumo")
2021-03-12 08:10:18,217 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:18,218 [main:66] - Compilation checking started
2021-03-12 08:10:18,532 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return "field should be initialized in clInit"

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}


2021-03-12 08:10:18,532 [main:107] - replacing ("field should be initialized in clInit", String)
2021-03-12 08:10:18,532 [main:50] - replacing "field should be initialized in clInit" String
2021-03-12 08:10:18,532 [main:54] - Getting value of type String
2021-03-12 08:10:18,612 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:10:18,612 [main:58] - GENERATED VALUE OF TYPE String = "frbli"
2021-03-12 08:10:18,612 [main:61] - GENERATED IS CALL =false
2021-03-12 08:10:18,696 [main:67] - randomType = Float
2021-03-12 08:10:18,775 [main:302] - generating value of type = Float true depth = 0
2021-03-12 08:10:18,823 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@f79deff]
2021-03-12 08:10:18,824 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d11c1e0]
2021-03-12 08:10:18,824 [main:78] - Generated call from random type = (0.14090937f).toLong().toString((true).compareTo((true)))
2021-03-12 08:10:18,824 [main:114] - replacement of "field should be initialized in clInit" of type String is (0.14090937f).toLong().toString((true).compareTo((true)))
2021-03-12 08:10:18,904 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:18,905 [main:66] - Compilation checking started
2021-03-12 08:10:19,235 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return (0.14090937f).toLong().toString((true).compareTo((true)))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}


2021-03-12 08:10:19,316 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 08:10:19,400 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 08:10:19,400 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 08:10:19,480 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-12 08:10:19,480 [main:66] - Compilation checking started
2021-03-12 08:10:19,710 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return (0.14090937f).toLong().toString((true).compareTo((true)))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((prope5 != null))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}


2021-03-12 08:10:19,710 [main:141] - TRYING TO REPLACE CONSTANT 0.14090937f
2021-03-12 08:10:19,794 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 08:10:19,795 [main:66] - Compilation checking started
2021-03-12 08:10:20,117 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo((true)))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}


2021-03-12 08:10:20,117 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 08:10:20,198 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 08:10:20,198 [main:66] - Compilation checking started
2021-03-12 08:10:20,412 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((equals("duumo")).compareTo((true)))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}


2021-03-12 08:10:20,413 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 08:10:20,494 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 08:10:20,494 [main:66] - Compilation checking started
2021-03-12 08:10:20,794 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}


2021-03-12 08:10:20,794 [main:84] - Final res = fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}


2021-03-12 08:10:20,811 [main:26] - Trying to change some nodes to nodes from other programs 808 times
2021-03-12 08:10:20,811 [main:28] - Try â„–0 of 808
2021-03-12 08:10:20,827 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:20,828 [main:66] - Compilation checking started
2021-03-12 08:10:21,068 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (Problem != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}


2021-03-12 08:10:21,068 [main:28] - Try â„–1 of 808
2021-03-12 08:10:21,084 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:10:21,085 [main:28] - Try â„–2 of 808
2021-03-12 08:10:21,101 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:10:21,101 [main:66] - Compilation checking started
2021-03-12 08:10:21,439 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "OK$prope5"

    return "OK"
}


2021-03-12 08:10:21,439 [main:28] - Try â„–3 of 808
2021-03-12 08:10:21,457 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:10:21,457 [main:66] - Compilation checking started
2021-03-12 08:10:21,773 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "OK$prope5"

    return "OK"
}


2021-03-12 08:10:21,774 [main:28] - Try â„–4 of 808
2021-03-12 08:10:21,786 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:21,786 [main:66] - Compilation checking started
2021-03-12 08:10:22,032 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = localKClass.simpleName
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "OK$prope5"

    return "OK"
}


2021-03-12 08:10:22,033 [main:28] - Try â„–5 of 808
2021-03-12 08:10:22,049 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:10:22,050 [main:66] - Compilation checking started
2021-03-12 08:10:22,271 [main:49] - Result = false
Text:
fun test1(z: Z1) {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "OK$prope5"

    return "OK"
}


2021-03-12 08:10:22,272 [main:28] - Try â„–6 of 808
2021-03-12 08:10:22,292 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:22,292 [main:66] - Compilation checking started
2021-03-12 08:10:22,525 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().bottles((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "OK$prope5"

    return "OK"
}


2021-03-12 08:10:22,526 [main:28] - Try â„–7 of 808
2021-03-12 08:10:22,536 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:22,536 [main:66] - Compilation checking started
2021-03-12 08:10:22,877 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "OK$prope5"

    return "OK"
}


2021-03-12 08:10:22,877 [main:28] - Try â„–8 of 808
2021-03-12 08:10:22,888 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:22,888 [main:66] - Compilation checking started
2021-03-12 08:10:23,115 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals()) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "OK$prope5"

    return "OK"
}


2021-03-12 08:10:23,115 [main:28] - Try â„–9 of 808
2021-03-12 08:10:23,120 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:23,121 [main:66] - Compilation checking started
2021-03-12 08:10:23,348 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (i != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "OK$prope5"

    return "OK"
}


2021-03-12 08:10:23,349 [main:28] - Try â„–10 of 808
2021-03-12 08:10:23,360 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:10:23,361 [main:66] - Compilation checking started
2021-03-12 08:10:23,572 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo(3)).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "OK$prope5"

    return "OK"
}


2021-03-12 08:10:23,572 [main:28] - Try â„–11 of 808
2021-03-12 08:10:23,584 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:10:23,584 [main:66] - Compilation checking started
2021-03-12 08:10:23,837 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().assertEquals(
            Foo::class.members.single { it.name == "nonNull" }.returnType,
            tp.createType()
    )

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "OK$prope5"

    return "OK"
}


2021-03-12 08:10:23,837 [main:28] - Try â„–12 of 808
2021-03-12 08:10:23,841 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:23,842 [main:66] - Compilation checking started
2021-03-12 08:10:24,047 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): IC = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "OK$prope5"

    return "OK"
}


2021-03-12 08:10:24,047 [main:28] - Try â„–13 of 808
2021-03-12 08:10:24,060 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:10:24,061 [main:28] - Try â„–14 of 808
2021-03-12 08:10:24,076 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:10:24,076 [main:28] - Try â„–15 of 808
2021-03-12 08:10:24,089 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:24,090 [main:28] - Try â„–16 of 808
2021-03-12 08:10:24,106 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-12 08:10:24,106 [main:66] - Compilation checking started
2021-03-12 08:10:24,400 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "OK$prope5"

    return "OK"
}


2021-03-12 08:10:24,400 [main:28] - Try â„–17 of 808
2021-03-12 08:10:24,416 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-12 08:10:24,416 [main:66] - Compilation checking started
2021-03-12 08:10:24,751 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:24,751 [main:28] - Try â„–18 of 808
2021-03-12 08:10:24,764 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:24,764 [main:66] - Compilation checking started
2021-03-12 08:10:24,967 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = kotlin.test
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:24,967 [main:28] - Try â„–19 of 808
2021-03-12 08:10:24,971 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:24,971 [main:66] - Compilation checking started
2021-03-12 08:10:25,186 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (JvmStatic != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:25,187 [main:28] - Try â„–20 of 808
2021-03-12 08:10:25,191 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:25,191 [main:66] - Compilation checking started
2021-03-12 08:10:25,403 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).String((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:25,403 [main:28] - Try â„–21 of 808
2021-03-12 08:10:25,414 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:25,414 [main:66] - Compilation checking started
2021-03-12 08:10:25,612 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = name.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:25,612 [main:28] - Try â„–22 of 808
2021-03-12 08:10:25,619 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:10:25,620 [main:66] - Compilation checking started
2021-03-12 08:10:25,816 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: IFoo2): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:25,816 [main:28] - Try â„–23 of 808
2021-03-12 08:10:25,826 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:25,826 [main:66] - Compilation checking started
2021-03-12 08:10:26,028 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = result.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:26,028 [main:28] - Try â„–24 of 808
2021-03-12 08:10:26,047 [main:28] - Try â„–25 of 808
2021-03-12 08:10:26,059 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-12 08:10:26,059 [main:66] - Compilation checking started
2021-03-12 08:10:26,379 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:26,379 [main:28] - Try â„–26 of 808
2021-03-12 08:10:26,400 [main:28] - Try â„–27 of 808
2021-03-12 08:10:26,408 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:10:26,408 [main:28] - Try â„–28 of 808
2021-03-12 08:10:26,412 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:26,413 [main:66] - Compilation checking started
2021-03-12 08:10:26,619 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = foo.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:26,619 [main:28] - Try â„–29 of 808
2021-03-12 08:10:26,630 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:10:26,630 [main:66] - Compilation checking started
2021-03-12 08:10:26,839 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = println("==")

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:26,839 [main:28] - Try â„–30 of 808
2021-03-12 08:10:26,853 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:10:26,854 [main:28] - Try â„–31 of 808
2021-03-12 08:10:26,867 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:26,867 [main:28] - Try â„–32 of 808
2021-03-12 08:10:26,878 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:26,878 [main:66] - Compilation checking started
2021-03-12 08:10:27,117 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.arguments()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:27,117 [main:28] - Try â„–33 of 808
2021-03-12 08:10:27,128 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:27,128 [main:66] - Compilation checking started
2021-03-12 08:10:27,354 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).foo().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:27,354 [main:28] - Try â„–34 of 808
2021-03-12 08:10:27,365 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:10:27,365 [main:28] - Try â„–35 of 808
2021-03-12 08:10:27,373 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:10:27,373 [main:28] - Try â„–36 of 808
2021-03-12 08:10:27,388 [main:33] - Trying to replace Element(SHORT_STRING_TEMPLATE_ENTRY) on Element(SHORT_STRING_TEMPLATE_ENTRY)
2021-03-12 08:10:27,389 [main:28] - Try â„–37 of 808
2021-03-12 08:10:27,389 [main:28] - Try â„–38 of 808
2021-03-12 08:10:27,400 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:27,400 [main:66] - Compilation checking started
2021-03-12 08:10:27,628 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (x != null) "OK"

    return "OK"
}


2021-03-12 08:10:27,629 [main:28] - Try â„–39 of 808
2021-03-12 08:10:27,633 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:27,633 [main:28] - Try â„–40 of 808
2021-03-12 08:10:27,644 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:10:27,645 [main:66] - Compilation checking started
2021-03-12 08:10:27,941 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:27,941 [main:28] - Try â„–41 of 808
2021-03-12 08:10:27,945 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:27,946 [main:66] - Compilation checking started
2021-03-12 08:10:28,135 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().args((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:28,135 [main:28] - Try â„–42 of 808
2021-03-12 08:10:28,159 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 08:10:28,159 [main:28] - Try â„–43 of 808
2021-03-12 08:10:28,190 [main:28] - Try â„–44 of 808
2021-03-12 08:10:28,199 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-12 08:10:28,200 [main:66] - Compilation checking started
2021-03-12 08:10:28,391 [main:49] - Result = false
Text:
fun test1() {}

private fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:28,391 [main:28] - Try â„–45 of 808
2021-03-12 08:10:28,396 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:28,396 [main:66] - Compilation checking started
2021-03-12 08:10:28,590 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val Override = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:28,590 [main:28] - Try â„–46 of 808
2021-03-12 08:10:28,596 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:10:28,597 [main:28] - Try â„–47 of 808
2021-03-12 08:10:28,603 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:10:28,603 [main:66] - Compilation checking started
2021-03-12 08:10:28,783 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).same().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:28,783 [main:28] - Try â„–48 of 808
2021-03-12 08:10:28,794 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:28,795 [main:28] - Try â„–49 of 808
2021-03-12 08:10:28,799 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:10:28,800 [main:28] - Try â„–50 of 808
2021-03-12 08:10:28,811 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-12 08:10:28,811 [main:66] - Compilation checking started
2021-03-12 08:10:29,014 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    var result = "fail"
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:29,015 [main:28] - Try â„–51 of 808
2021-03-12 08:10:29,019 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:29,019 [main:28] - Try â„–52 of 808
2021-03-12 08:10:29,029 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:10:29,029 [main:66] - Compilation checking started
2021-03-12 08:10:29,220 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): String = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:29,220 [main:28] - Try â„–53 of 808
2021-03-12 08:10:29,231 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:29,231 [main:28] - Try â„–54 of 808
2021-03-12 08:10:29,250 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:10:29,250 [main:66] - Compilation checking started
2021-03-12 08:10:29,471 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((it.value as FooHolder).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:29,471 [main:28] - Try â„–55 of 808
2021-03-12 08:10:29,484 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:10:29,485 [main:28] - Try â„–56 of 808
2021-03-12 08:10:29,504 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:10:29,504 [main:66] - Compilation checking started
2021-03-12 08:10:29,701 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((computeContinuation as Continuation<T>)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:29,701 [main:28] - Try â„–57 of 808
2021-03-12 08:10:29,706 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:29,707 [main:66] - Compilation checking started
2021-03-12 08:10:29,896 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> getJavaObjectType10): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:29,896 [main:28] - Try â„–58 of 808
2021-03-12 08:10:29,913 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:10:29,914 [main:66] - Compilation checking started
2021-03-12 08:10:30,092 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return (MaxUB - 2u).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:30,092 [main:28] - Try â„–59 of 808
2021-03-12 08:10:30,108 [main:28] - Try â„–60 of 808
2021-03-12 08:10:30,117 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:10:30,118 [main:28] - Try â„–61 of 808
2021-03-12 08:10:30,124 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:10:30,124 [main:66] - Compilation checking started
2021-03-12 08:10:30,124 [main:68] - Already checked
2021-03-12 08:10:30,124 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): String = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:30,125 [main:28] - Try â„–62 of 808
2021-03-12 08:10:30,130 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:10:30,130 [main:66] - Compilation checking started
2021-03-12 08:10:30,317 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (i + a3) "OK"

    return "OK"
}


2021-03-12 08:10:30,317 [main:28] - Try â„–63 of 808
2021-03-12 08:10:30,323 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:30,323 [main:66] - Compilation checking started
2021-03-12 08:10:30,527 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> s): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:30,527 [main:28] - Try â„–64 of 808
2021-03-12 08:10:30,539 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:30,540 [main:66] - Compilation checking started
2021-03-12 08:10:30,739 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString(realResult)

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:30,740 [main:28] - Try â„–65 of 808
2021-03-12 08:10:30,752 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:10:30,753 [main:28] - Try â„–66 of 808
2021-03-12 08:10:30,760 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:10:30,760 [main:28] - Try â„–67 of 808
2021-03-12 08:10:30,782 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-12 08:10:30,783 [main:66] - Compilation checking started
2021-03-12 08:10:30,990 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (list6 != listOf<Int>()) {
        return "Wrong elements for 0.toShort() until MinS step 3: $list6"
    }

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:30,990 [main:28] - Try â„–68 of 808
2021-03-12 08:10:31,008 [main:28] - Try â„–69 of 808
2021-03-12 08:10:31,023 [main:28] - Try â„–70 of 808
2021-03-12 08:10:31,026 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:31,027 [main:66] - Compilation checking started
2021-03-12 08:10:31,203 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val KTrait = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:31,203 [main:28] - Try â„–71 of 808
2021-03-12 08:10:31,218 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:31,218 [main:66] - Compilation checking started
2021-03-12 08:10:31,383 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = util.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:31,383 [main:28] - Try â„–72 of 808
2021-03-12 08:10:31,400 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-12 08:10:31,400 [main:66] - Compilation checking started
2021-03-12 08:10:31,597 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {
        if (doNonLocal) {
            holder.value = 1000
            return
        }
        10
    }
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:31,597 [main:28] - Try â„–73 of 808
2021-03-12 08:10:31,604 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:10:31,605 [main:66] - Compilation checking started
2021-03-12 08:10:31,809 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.{
    val x: String by E
    x
}()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:31,809 [main:28] - Try â„–74 of 808
2021-03-12 08:10:31,819 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:31,819 [main:28] - Try â„–75 of 808
2021-03-12 08:10:31,834 [main:33] - Trying to replace Element(SHORT_STRING_TEMPLATE_ENTRY) on Element(SHORT_STRING_TEMPLATE_ENTRY)
2021-03-12 08:10:31,834 [main:66] - Compilation checking started
2021-03-12 08:10:32,041 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$PREFIX"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:32,041 [main:28] - Try â„–76 of 808
2021-03-12 08:10:32,061 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:10:32,061 [main:66] - Compilation checking started
2021-03-12 08:10:32,250 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return (Impl as ContentBox<T>).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:32,251 [main:28] - Try â„–77 of 808
2021-03-12 08:10:32,259 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:10:32,259 [main:28] - Try â„–78 of 808
2021-03-12 08:10:32,268 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:32,269 [main:28] - Try â„–79 of 808
2021-03-12 08:10:32,282 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:32,282 [main:66] - Compilation checking started
2021-03-12 08:10:32,479 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> x): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:32,480 [main:28] - Try â„–80 of 808
2021-03-12 08:10:32,491 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:32,491 [main:66] - Compilation checking started
2021-03-12 08:10:32,683 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong(lambda).toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:32,684 [main:28] - Try â„–81 of 808
2021-03-12 08:10:32,702 [main:28] - Try â„–82 of 808
2021-03-12 08:10:32,706 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:32,706 [main:66] - Compilation checking started
2021-03-12 08:10:32,958 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:32,958 [main:28] - Try â„–83 of 808
2021-03-12 08:10:32,965 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:32,965 [main:66] - Compilation checking started
2021-03-12 08:10:33,160 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = builder.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:33,160 [main:28] - Try â„–84 of 808
2021-03-12 08:10:33,171 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:33,171 [main:28] - Try â„–85 of 808
2021-03-12 08:10:33,182 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:10:33,182 [main:66] - Compilation checking started
2021-03-12 08:10:33,365 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): T {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:33,365 [main:28] - Try â„–86 of 808
2021-03-12 08:10:33,375 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:33,375 [main:66] - Compilation checking started
2021-03-12 08:10:33,543 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.assertEquals.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:33,543 [main:28] - Try â„–87 of 808
2021-03-12 08:10:33,559 [main:28] - Try â„–88 of 808
2021-03-12 08:10:33,576 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:10:33,577 [main:66] - Compilation checking started
2021-03-12 08:10:33,778 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((MinUL + 2u))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:33,778 [main:28] - Try â„–89 of 808
2021-03-12 08:10:33,795 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:10:33,796 [main:66] - Compilation checking started
2021-03-12 08:10:33,973 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString(('0' == nx).compareTo(((true))))

    var p = "fail"
    if (((true).compareTo((true))).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:33,973 [main:28] - Try â„–90 of 808
2021-03-12 08:10:33,981 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:10:33,981 [main:28] - Try â„–91 of 808
2021-03-12 08:10:33,993 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:10:33,994 [main:28] - Try â„–92 of 808
2021-03-12 08:10:34,001 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:34,002 [main:66] - Compilation checking started
2021-03-12 08:10:34,240 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:34,240 [main:28] - Try â„–93 of 808
2021-03-12 08:10:34,244 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:34,244 [main:66] - Compilation checking started
2021-03-12 08:10:34,433 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val kt = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:34,433 [main:28] - Try â„–94 of 808
2021-03-12 08:10:34,439 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:10:34,439 [main:28] - Try â„–95 of 808
2021-03-12 08:10:34,443 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:34,443 [main:66] - Compilation checking started
2021-03-12 08:10:34,630 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).Int(((true))))

    var p = "fail"
    if ((0.toByte()).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:34,630 [main:28] - Try â„–96 of 808
2021-03-12 08:10:34,644 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:34,645 [main:28] - Try â„–97 of 808
2021-03-12 08:10:34,653 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:10:34,653 [main:28] - Try â„–98 of 808
2021-03-12 08:10:34,667 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:34,668 [main:66] - Compilation checking started
2021-03-12 08:10:34,844 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).DescriptorBasedProperty("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:34,844 [main:28] - Try â„–99 of 808
2021-03-12 08:10:34,860 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-12 08:10:34,861 [main:66] - Compilation checking started
2021-03-12 08:10:35,046 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: (Result<T>) -> Unit) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:35,046 [main:28] - Try â„–100 of 808
2021-03-12 08:10:35,058 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:35,058 [main:28] - Try â„–101 of 808
2021-03-12 08:10:35,064 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:10:35,064 [main:28] - Try â„–102 of 808
2021-03-12 08:10:35,071 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:10:35,071 [main:66] - Compilation checking started
2021-03-12 08:10:35,256 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.IcInt(3)
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:35,256 [main:28] - Try â„–103 of 808
2021-03-12 08:10:35,269 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:10:35,270 [main:28] - Try â„–104 of 808
2021-03-12 08:10:35,279 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:35,279 [main:66] - Compilation checking started
2021-03-12 08:10:35,461 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).fn(((true))))

    var p = "fail"
    if ((0.toByte()).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:35,462 [main:28] - Try â„–105 of 808
2021-03-12 08:10:35,479 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:10:35,479 [main:28] - Try â„–106 of 808
2021-03-12 08:10:35,484 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:35,484 [main:66] - Compilation checking started
2021-03-12 08:10:35,666 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Result = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:35,666 [main:28] - Try â„–107 of 808
2021-03-12 08:10:35,673 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:10:35,673 [main:66] - Compilation checking started
2021-03-12 08:10:35,846 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).lambda())

    var p = "fail"
    if ((0.toByte()).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:35,846 [main:28] - Try â„–108 of 808
2021-03-12 08:10:35,864 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:10:35,865 [main:28] - Try â„–109 of 808
2021-03-12 08:10:35,870 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:10:35,871 [main:28] - Try â„–110 of 808
2021-03-12 08:10:35,874 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:35,874 [main:66] - Compilation checking started
2021-03-12 08:10:36,045 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (IBar != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:36,045 [main:28] - Try â„–111 of 808
2021-03-12 08:10:36,059 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:10:36,059 [main:66] - Compilation checking started
2021-03-12 08:10:36,298 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:36,298 [main:28] - Try â„–112 of 808
2021-03-12 08:10:36,318 [main:28] - Try â„–113 of 808
2021-03-12 08:10:36,336 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:10:36,336 [main:66] - Compilation checking started
2021-03-12 08:10:36,528 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo((1 == s?.length)))

    var p = "fail"
    if ((0.toByte()).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:36,528 [main:28] - Try â„–114 of 808
2021-03-12 08:10:36,535 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:10:36,535 [main:28] - Try â„–115 of 808
2021-03-12 08:10:36,543 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:36,543 [main:66] - Compilation checking started
2021-03-12 08:10:36,717 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return log.append("<init>")

    var p = "fail"
    if ((0.toByte()).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:36,718 [main:28] - Try â„–116 of 808
2021-03-12 08:10:36,725 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:10:36,725 [main:66] - Compilation checking started
2021-03-12 08:10:36,923 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { {
    val a: T = if (v !is A) v else v
    return a
}}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:36,923 [main:28] - Try â„–117 of 808
2021-03-12 08:10:36,936 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:36,937 [main:28] - Try â„–118 of 808
2021-03-12 08:10:36,949 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:36,949 [main:66] - Compilation checking started
2021-03-12 08:10:37,133 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("duumo")) return "not implemented$String"

    val prope5 = serializable.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:37,134 [main:28] - Try â„–119 of 808
2021-03-12 08:10:37,155 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:37,155 [main:28] - Try â„–120 of 808
2021-03-12 08:10:37,168 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:10:37,168 [main:66] - Compilation checking started
2021-03-12 08:10:37,357 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (shortResult = x) "OK"

    return "OK"
}


2021-03-12 08:10:37,357 [main:28] - Try â„–121 of 808
2021-03-12 08:10:37,360 [main:33] - Trying to replace Element(IMPORT_LIST) on Element(IMPORT_LIST)
2021-03-12 08:10:37,360 [main:66] - Compilation checking started
2021-03-12 08:10:37,360 [main:68] - Already checked
2021-03-12 08:10:37,360 [main:28] - Try â„–122 of 808
2021-03-12 08:10:37,365 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:37,365 [main:66] - Compilation checking started
2021-03-12 08:10:37,538 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).T("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:37,538 [main:28] - Try â„–123 of 808
2021-03-12 08:10:37,544 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:10:37,544 [main:66] - Compilation checking started
2021-03-12 08:10:37,724 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.outer()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:37,724 [main:28] - Try â„–124 of 808
2021-03-12 08:10:37,737 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:10:37,738 [main:28] - Try â„–125 of 808
2021-03-12 08:10:37,738 [main:28] - Try â„–126 of 808
2021-03-12 08:10:37,747 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:37,747 [main:66] - Compilation checking started
2021-03-12 08:10:37,930 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = MutableCollection.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:37,930 [main:28] - Try â„–127 of 808
2021-03-12 08:10:37,933 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:37,934 [main:66] - Compilation checking started
2021-03-12 08:10:38,112 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val box = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:38,112 [main:28] - Try â„–128 of 808
2021-03-12 08:10:38,117 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:38,117 [main:66] - Compilation checking started
2021-03-12 08:10:38,390 [main:53] - Result = true
Text:
fun test1() {}

inline fun A(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("duumo")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:38,390 [main:28] - Try â„–129 of 808
2021-03-12 08:10:38,402 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:10:38,402 [main:66] - Compilation checking started
2021-03-12 08:10:38,659 [main:53] - Result = true
Text:
fun test1() {}

inline fun A(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:38,659 [main:28] - Try â„–130 of 808
2021-03-12 08:10:38,669 [main:33] - Trying to replace Element(OBJECT_DECLARATION) on Element(OBJECT_DECLARATION)
2021-03-12 08:10:38,670 [main:66] - Compilation checking started
2021-03-12 08:10:38,841 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Host {
    class Derived : Base(this.foo())

    fun foo() = "OK"
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "not implemented$String"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:38,841 [main:28] - Try â„–131 of 808
2021-03-12 08:10:38,852 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:10:38,852 [main:28] - Try â„–132 of 808
2021-03-12 08:10:38,857 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:38,857 [main:66] - Compilation checking started
2021-03-12 08:10:39,035 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "not implemented$String"

    val prope5 = Unit.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:39,035 [main:28] - Try â„–133 of 808
2021-03-12 08:10:39,038 [main:33] - Trying to replace Element(IMPORT_LIST) on Element(IMPORT_LIST)
2021-03-12 08:10:39,038 [main:66] - Compilation checking started
2021-03-12 08:10:39,038 [main:68] - Already checked
2021-03-12 08:10:39,038 [main:28] - Try â„–134 of 808
2021-03-12 08:10:39,052 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-12 08:10:39,052 [main:28] - Try â„–135 of 808
2021-03-12 08:10:39,059 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:10:39,060 [main:28] - Try â„–136 of 808
2021-03-12 08:10:39,071 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:10:39,071 [main:66] - Compilation checking started
2021-03-12 08:10:39,323 [main:53] - Result = true
Text:
fun test1() {}

inline fun A(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:39,323 [main:28] - Try â„–137 of 808
2021-03-12 08:10:39,327 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:39,327 [main:28] - Try â„–138 of 808
2021-03-12 08:10:39,331 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:39,331 [main:66] - Compilation checking started
2021-03-12 08:10:39,519 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = coroutines.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:39,519 [main:28] - Try â„–139 of 808
2021-03-12 08:10:39,533 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:10:39,533 [main:28] - Try â„–140 of 808
2021-03-12 08:10:39,543 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:10:39,543 [main:28] - Try â„–141 of 808
2021-03-12 08:10:39,551 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:39,551 [main:28] - Try â„–142 of 808
2021-03-12 08:10:39,593 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:10:39,594 [main:28] - Try â„–143 of 808
2021-03-12 08:10:39,603 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:10:39,604 [main:66] - Compilation checking started
2021-03-12 08:10:39,793 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): Boolean {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:39,793 [main:28] - Try â„–144 of 808
2021-03-12 08:10:39,801 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:39,801 [main:66] - Compilation checking started
2021-03-12 08:10:39,965 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return java.lang.toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:39,965 [main:28] - Try â„–145 of 808
2021-03-12 08:10:39,974 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:39,975 [main:66] - Compilation checking started
2021-03-12 08:10:40,149 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = Int.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:40,149 [main:28] - Try â„–146 of 808
2021-03-12 08:10:40,163 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:10:40,164 [main:66] - Compilation checking started
2021-03-12 08:10:40,322 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return test.p14 + test.p33

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:40,322 [main:28] - Try â„–147 of 808
2021-03-12 08:10:40,329 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:10:40,329 [main:66] - Compilation checking started
2021-03-12 08:10:40,503 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = javaClass.resumeWithException(IllegalStateException("OK"))
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:40,503 [main:28] - Try â„–148 of 808
2021-03-12 08:10:40,517 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:40,517 [main:28] - Try â„–149 of 808
2021-03-12 08:10:40,524 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:40,524 [main:66] - Compilation checking started
2021-03-12 08:10:40,698 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = Outer("O").Inner("K").z
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:40,699 [main:28] - Try â„–150 of 808
2021-03-12 08:10:40,709 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-12 08:10:40,709 [main:66] - Compilation checking started
2021-03-12 08:10:40,895 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    private const val a = "$"
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:40,896 [main:28] - Try â„–151 of 808
2021-03-12 08:10:40,907 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:10:40,908 [main:28] - Try â„–152 of 808
2021-03-12 08:10:40,925 [main:28] - Try â„–153 of 808
2021-03-12 08:10:40,936 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:10:40,936 [main:28] - Try â„–154 of 808
2021-03-12 08:10:40,945 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:40,946 [main:66] - Compilation checking started
2021-03-12 08:10:41,125 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).value(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:41,126 [main:28] - Try â„–155 of 808
2021-03-12 08:10:41,148 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:10:41,148 [main:28] - Try â„–156 of 808
2021-03-12 08:10:41,154 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:10:41,155 [main:28] - Try â„–157 of 808
2021-03-12 08:10:41,158 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:41,159 [main:66] - Compilation checking started
2021-03-12 08:10:41,329 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(crossinline y: () -> String) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): box = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:41,329 [main:28] - Try â„–158 of 808
2021-03-12 08:10:41,343 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:10:41,343 [main:66] - Compilation checking started
2021-03-12 08:10:41,605 [main:53] - Result = true
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:41,605 [main:28] - Try â„–159 of 808
2021-03-12 08:10:41,621 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:41,621 [main:66] - Compilation checking started
2021-03-12 08:10:41,797 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo())

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:41,797 [main:28] - Try â„–160 of 808
2021-03-12 08:10:41,804 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:41,804 [main:66] - Compilation checking started
2021-03-12 08:10:41,956 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Local::class.visibility

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:41,956 [main:28] - Try â„–161 of 808
2021-03-12 08:10:41,963 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:41,964 [main:66] - Compilation checking started
2021-03-12 08:10:42,136 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().value((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:42,136 [main:28] - Try â„–162 of 808
2021-03-12 08:10:42,152 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:42,153 [main:28] - Try â„–163 of 808
2021-03-12 08:10:42,177 [main:28] - Try â„–164 of 808
2021-03-12 08:10:42,189 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:10:42,189 [main:28] - Try â„–165 of 808
2021-03-12 08:10:42,197 [main:33] - Trying to replace Element(TYPE_PARAMETER) on Element(TYPE_PARAMETER)
2021-03-12 08:10:42,197 [main:66] - Compilation checking started
2021-03-12 08:10:42,384 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <R> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:42,384 [main:28] - Try â„–166 of 808
2021-03-12 08:10:42,391 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:10:42,391 [main:28] - Try â„–167 of 808
2021-03-12 08:10:42,396 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:42,397 [main:66] - Compilation checking started
2021-03-12 08:10:42,572 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): String = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:42,572 [main:28] - Try â„–168 of 808
2021-03-12 08:10:42,588 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-12 08:10:42,588 [main:28] - Try â„–169 of 808
2021-03-12 08:10:42,600 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:10:42,601 [main:28] - Try â„–170 of 808
2021-03-12 08:10:42,609 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:10:42,610 [main:28] - Try â„–171 of 808
2021-03-12 08:10:42,615 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:42,615 [main:66] - Compilation checking started
2021-03-12 08:10:42,870 [main:53] - Result = true
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:42,870 [main:28] - Try â„–172 of 808
2021-03-12 08:10:42,874 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:42,874 [main:28] - Try â„–173 of 808
2021-03-12 08:10:42,881 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:10:42,881 [main:66] - Compilation checking started
2021-03-12 08:10:43,068 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Any): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:43,068 [main:28] - Try â„–174 of 808
2021-03-12 08:10:43,079 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:43,079 [main:66] - Compilation checking started
2021-03-12 08:10:43,238 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.intList.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:43,238 [main:28] - Try â„–175 of 808
2021-03-12 08:10:43,250 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:43,251 [main:66] - Compilation checking started
2021-03-12 08:10:43,433 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = Z("Z").test(a = {res += "K"; "K"}(), b = {res+="O"; "O"}(), c = {res += "L"; "L"})
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:43,433 [main:28] - Try â„–176 of 808
2021-03-12 08:10:43,438 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:43,439 [main:28] - Try â„–177 of 808
2021-03-12 08:10:43,457 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:10:43,457 [main:28] - Try â„–178 of 808
2021-03-12 08:10:43,470 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:10:43,471 [main:28] - Try â„–179 of 808
2021-03-12 08:10:43,476 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:43,476 [main:66] - Compilation checking started
2021-03-12 08:10:43,651 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val n = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:43,651 [main:28] - Try â„–180 of 808
2021-03-12 08:10:43,666 [main:28] - Try â„–181 of 808
2021-03-12 08:10:43,680 [main:33] - Trying to replace Element(CONDITION) on Element(CONDITION)
2021-03-12 08:10:43,681 [main:66] - Compilation checking started
2021-03-12 08:10:43,849 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (flag) "OK"

    return "OK"
}


2021-03-12 08:10:43,849 [main:28] - Try â„–182 of 808
2021-03-12 08:10:43,855 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-12 08:10:43,855 [main:28] - Try â„–183 of 808
2021-03-12 08:10:43,869 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-12 08:10:43,869 [main:28] - Try â„–184 of 808
2021-03-12 08:10:43,880 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:43,881 [main:28] - Try â„–185 of 808
2021-03-12 08:10:43,893 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:10:43,893 [main:28] - Try â„–186 of 808
2021-03-12 08:10:43,906 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:10:43,906 [main:28] - Try â„–187 of 808
2021-03-12 08:10:43,910 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:43,910 [main:66] - Compilation checking started
2021-03-12 08:10:44,080 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).x(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:44,081 [main:28] - Try â„–188 of 808
2021-03-12 08:10:44,094 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-12 08:10:44,094 [main:66] - Compilation checking started
2021-03-12 08:10:44,281 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("OK")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (Foo().a != 11) return "fail"

    return "OK"
}


2021-03-12 08:10:44,281 [main:28] - Try â„–189 of 808
2021-03-12 08:10:44,293 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:10:44,293 [main:66] - Compilation checking started
2021-03-12 08:10:44,528 [main:53] - Result = true
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:44,528 [main:28] - Try â„–190 of 808
2021-03-12 08:10:44,538 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:44,539 [main:66] - Compilation checking started
2021-03-12 08:10:44,698 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return Z("OK").r.toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:44,698 [main:28] - Try â„–191 of 808
2021-03-12 08:10:44,702 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:44,702 [main:66] - Compilation checking started
2021-03-12 08:10:44,876 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(AWrapperFabric: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:44,877 [main:28] - Try â„–192 of 808
2021-03-12 08:10:44,883 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:10:44,884 [main:66] - Compilation checking started
2021-03-12 08:10:45,055 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = A("OK")

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:45,055 [main:28] - Try â„–193 of 808
2021-03-12 08:10:45,064 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:45,065 [main:66] - Compilation checking started
2021-03-12 08:10:45,239 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (Any != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:45,239 [main:28] - Try â„–194 of 808
2021-03-12 08:10:45,247 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:10:45,247 [main:28] - Try â„–195 of 808
2021-03-12 08:10:45,247 [main:28] - Try â„–196 of 808
2021-03-12 08:10:45,260 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-12 08:10:45,261 [main:66] - Compilation checking started
2021-03-12 08:10:45,426 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if (test != "OKOK") return "fail $test"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:45,426 [main:28] - Try â„–197 of 808
2021-03-12 08:10:45,429 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:45,429 [main:28] - Try â„–198 of 808
2021-03-12 08:10:45,439 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:45,439 [main:28] - Try â„–199 of 808
2021-03-12 08:10:45,450 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-12 08:10:45,450 [main:66] - Compilation checking started
2021-03-12 08:10:45,615 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    var res = underlying<String>(IC("O")) + "K"
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:45,615 [main:28] - Try â„–200 of 808
2021-03-12 08:10:45,626 [main:33] - Trying to replace Element(OBJECT_DECLARATION) on Element(OBJECT_DECLARATION)
2021-03-12 08:10:45,626 [main:66] - Compilation checking started
2021-03-12 08:10:45,627 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:10:45,627 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

companion object {}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:45,627 [main:28] - Try â„–201 of 808
2021-03-12 08:10:45,630 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:45,631 [main:66] - Compilation checking started
2021-03-12 08:10:45,818 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (box != null) "OK"

    return "OK"
}


2021-03-12 08:10:45,818 [main:28] - Try â„–202 of 808
2021-03-12 08:10:45,832 [main:28] - Try â„–203 of 808
2021-03-12 08:10:45,848 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-12 08:10:45,848 [main:28] - Try â„–204 of 808
2021-03-12 08:10:45,862 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:10:45,862 [main:28] - Try â„–205 of 808
2021-03-12 08:10:45,879 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:10:45,880 [main:66] - Compilation checking started
2021-03-12 08:10:46,048 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((intProgression step 2).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "OK"
}


2021-03-12 08:10:46,048 [main:28] - Try â„–206 of 808
2021-03-12 08:10:46,063 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:10:46,063 [main:66] - Compilation checking started
2021-03-12 08:10:46,299 [main:53] - Result = true
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:46,299 [main:28] - Try â„–207 of 808
2021-03-12 08:10:46,315 [main:28] - Try â„–208 of 808
2021-03-12 08:10:46,330 [main:28] - Try â„–209 of 808
2021-03-12 08:10:46,334 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:10:46,334 [main:28] - Try â„–210 of 808
2021-03-12 08:10:46,345 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:46,345 [main:28] - Try â„–211 of 808
2021-03-12 08:10:46,349 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:46,349 [main:66] - Compilation checking started
2021-03-12 08:10:46,539 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = arr2.getEnclosingMethod()
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:46,540 [main:28] - Try â„–212 of 808
2021-03-12 08:10:46,543 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:46,544 [main:66] - Compilation checking started
2021-03-12 08:10:46,711 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (a != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:46,711 [main:28] - Try â„–213 of 808
2021-03-12 08:10:46,715 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:46,716 [main:66] - Compilation checking started
2021-03-12 08:10:46,876 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).javaField().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:46,876 [main:28] - Try â„–214 of 808
2021-03-12 08:10:46,883 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:46,883 [main:66] - Compilation checking started
2021-03-12 08:10:47,123 [main:53] - Result = true
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:47,124 [main:28] - Try â„–215 of 808
2021-03-12 08:10:47,135 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:47,135 [main:28] - Try â„–216 of 808
2021-03-12 08:10:47,139 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:47,139 [main:28] - Try â„–217 of 808
2021-03-12 08:10:47,143 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:47,143 [main:66] - Compilation checking started
2021-03-12 08:10:47,315 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): list = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:47,316 [main:28] - Try â„–218 of 808
2021-03-12 08:10:47,319 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-12 08:10:47,319 [main:66] - Compilation checking started
2021-03-12 08:10:47,490 [main:49] - Result = false
Text:
override fun test(p: T): Int {
                return toIndex()
            }

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:47,490 [main:28] - Try â„–219 of 808
2021-03-12 08:10:47,505 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-12 08:10:47,505 [main:28] - Try â„–220 of 808
2021-03-12 08:10:47,515 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:47,515 [main:66] - Compilation checking started
2021-03-12 08:10:47,740 [main:53] - Result = true
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:47,740 [main:28] - Try â„–221 of 808
2021-03-12 08:10:47,744 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:10:47,745 [main:28] - Try â„–222 of 808
2021-03-12 08:10:47,762 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-12 08:10:47,762 [main:66] - Compilation checking started
2021-03-12 08:10:47,933 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {
        continuation = { }
        finished = true
    }
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:47,933 [main:28] - Try â„–223 of 808
2021-03-12 08:10:47,948 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-12 08:10:47,948 [main:28] - Try â„–224 of 808
2021-03-12 08:10:47,952 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:47,952 [main:66] - Compilation checking started
2021-03-12 08:10:48,108 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> result): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:48,109 [main:28] - Try â„–225 of 808
2021-03-12 08:10:48,121 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:10:48,121 [main:28] - Try â„–226 of 808
2021-03-12 08:10:48,130 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:48,130 [main:66] - Compilation checking started
2021-03-12 08:10:48,292 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).EmptyContinuation().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:48,293 [main:28] - Try â„–227 of 808
2021-03-12 08:10:48,298 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:48,298 [main:28] - Try â„–228 of 808
2021-03-12 08:10:48,307 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:10:48,307 [main:28] - Try â„–229 of 808
2021-03-12 08:10:48,321 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-12 08:10:48,321 [main:66] - Compilation checking started
2021-03-12 08:10:48,487 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "fail 1: ${test("OK")}"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:48,487 [main:28] - Try â„–230 of 808
2021-03-12 08:10:48,490 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:48,491 [main:28] - Try â„–231 of 808
2021-03-12 08:10:48,500 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:48,500 [main:66] - Compilation checking started
2021-03-12 08:10:48,658 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (a != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:48,658 [main:28] - Try â„–232 of 808
2021-03-12 08:10:48,673 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-12 08:10:48,673 [main:28] - Try â„–233 of 808
2021-03-12 08:10:48,680 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:10:48,680 [main:66] - Compilation checking started
2021-03-12 08:10:48,841 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (b = false) "OK"

    return "fail 1"
}


2021-03-12 08:10:48,841 [main:28] - Try â„–234 of 808
2021-03-12 08:10:48,852 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:10:48,853 [main:28] - Try â„–235 of 808
2021-03-12 08:10:48,860 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:48,860 [main:66] - Compilation checking started
2021-03-12 08:10:49,017 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(z: Byte) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = (::bar).call("OK").javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:49,017 [main:28] - Try â„–236 of 808
2021-03-12 08:10:49,022 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:10:49,022 [main:66] - Compilation checking started
2021-03-12 08:10:49,239 [main:53] - Result = true
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:49,240 [main:28] - Try â„–237 of 808
2021-03-12 08:10:49,252 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:10:49,252 [main:28] - Try â„–238 of 808
2021-03-12 08:10:49,270 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:10:49,270 [main:28] - Try â„–239 of 808
2021-03-12 08:10:49,281 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:49,281 [main:28] - Try â„–240 of 808
2021-03-12 08:10:49,287 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:10:49,287 [main:66] - Compilation checking started
2021-03-12 08:10:49,445 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if ((a as B).foo() != "A") "OK"

    return "fail 1"
}


2021-03-12 08:10:49,445 [main:28] - Try â„–241 of 808
2021-03-12 08:10:49,458 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-12 08:10:49,458 [main:66] - Compilation checking started
2021-03-12 08:10:49,624 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if(i.javaClass.getSimpleName() == "int") "OK" else "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:49,624 [main:28] - Try â„–242 of 808
2021-03-12 08:10:49,631 [main:33] - Trying to replace Element(CLASS_BODY) on Element(CLASS_BODY)
2021-03-12 08:10:49,631 [main:66] - Compilation checking started
2021-03-12 08:10:49,777 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val returnType: String
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:49,777 [main:28] - Try â„–243 of 808
2021-03-12 08:10:49,783 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:10:49,784 [main:66] - Compilation checking started
2021-03-12 08:10:49,962 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    val x = (A::foo).call(A(), 42, 239)
    if (x != 281) return "Fail: $x"

    try {
        (A::foo).call()
        return "Fail: no exception"
    }
    catch (e: Exception) {}

    return "OK"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:49,962 [main:28] - Try â„–244 of 808
2021-03-12 08:10:49,966 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:49,967 [main:66] - Compilation checking started
2021-03-12 08:10:50,139 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): Continuation {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:50,139 [main:28] - Try â„–245 of 808
2021-03-12 08:10:50,143 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:50,143 [main:66] - Compilation checking started
2021-03-12 08:10:50,302 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = V.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:50,302 [main:28] - Try â„–246 of 808
2021-03-12 08:10:50,316 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:10:50,317 [main:28] - Try â„–247 of 808
2021-03-12 08:10:50,324 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:50,324 [main:28] - Try â„–248 of 808
2021-03-12 08:10:50,338 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-12 08:10:50,338 [main:66] - Compilation checking started
2021-03-12 08:10:50,495 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) {
            suspendWithValue("OK")
        }

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:50,495 [main:28] - Try â„–249 of 808
2021-03-12 08:10:50,505 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:50,506 [main:28] - Try â„–250 of 808
2021-03-12 08:10:50,512 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:10:50,512 [main:28] - Try â„–251 of 808
2021-03-12 08:10:50,529 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-12 08:10:50,529 [main:28] - Try â„–252 of 808
2021-03-12 08:10:50,538 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:50,539 [main:28] - Try â„–253 of 808
2021-03-12 08:10:50,548 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:50,548 [main:28] - Try â„–254 of 808
2021-03-12 08:10:50,560 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:10:50,560 [main:28] - Try â„–255 of 808
2021-03-12 08:10:50,577 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:10:50,577 [main:28] - Try â„–256 of 808
2021-03-12 08:10:50,585 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:10:50,586 [main:28] - Try â„–257 of 808
2021-03-12 08:10:50,592 [main:33] - Trying to replace Element(TYPE_PARAMETER) on Element(TYPE_PARAMETER)
2021-03-12 08:10:50,592 [main:66] - Compilation checking started
2021-03-12 08:10:50,750 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <T> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:50,750 [main:28] - Try â„–258 of 808
2021-03-12 08:10:50,754 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:10:50,754 [main:28] - Try â„–259 of 808
2021-03-12 08:10:50,761 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:10:50,761 [main:66] - Compilation checking started
2021-03-12 08:10:50,878 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val f = foo()
    if (f != "bar\$default") return "Fail: $f"
    return "OK"
}


2021-03-12 08:10:50,878 [main:28] - Try â„–260 of 808
2021-03-12 08:10:50,887 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:50,887 [main:66] - Compilation checking started
2021-03-12 08:10:51,044 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (toLong != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:51,044 [main:28] - Try â„–261 of 808
2021-03-12 08:10:51,055 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-12 08:10:51,055 [main:66] - Compilation checking started
2021-03-12 08:10:51,213 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    public abstract val some: T
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:51,213 [main:28] - Try â„–262 of 808
2021-03-12 08:10:51,222 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:51,223 [main:66] - Compilation checking started
2021-03-12 08:10:51,376 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.A()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:51,376 [main:28] - Try â„–263 of 808
2021-03-12 08:10:51,389 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:10:51,390 [main:28] - Try â„–264 of 808
2021-03-12 08:10:51,412 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:10:51,412 [main:66] - Compilation checking started
2021-03-12 08:10:51,588 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { list as? MutableList<*> }

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:51,588 [main:28] - Try â„–265 of 808
2021-03-12 08:10:51,594 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:51,594 [main:66] - Compilation checking started
2021-03-12 08:10:51,752 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.startCoroutine()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:51,753 [main:28] - Try â„–266 of 808
2021-03-12 08:10:51,756 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:51,756 [main:28] - Try â„–267 of 808
2021-03-12 08:10:51,766 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:10:51,766 [main:28] - Try â„–268 of 808
2021-03-12 08:10:51,773 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:51,773 [main:28] - Try â„–269 of 808
2021-03-12 08:10:51,787 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:10:51,788 [main:28] - Try â„–270 of 808
2021-03-12 08:10:51,794 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:51,795 [main:66] - Compilation checking started
2021-03-12 08:10:51,957 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = ::property.annotations
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:51,958 [main:28] - Try â„–271 of 808
2021-03-12 08:10:51,964 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:10:51,964 [main:28] - Try â„–272 of 808
2021-03-12 08:10:51,974 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:51,974 [main:28] - Try â„–273 of 808
2021-03-12 08:10:51,982 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:10:51,982 [main:28] - Try â„–274 of 808
2021-03-12 08:10:51,989 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:51,989 [main:66] - Compilation checking started
2021-03-12 08:10:52,146 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = Test.ok()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:52,146 [main:28] - Try â„–275 of 808
2021-03-12 08:10:52,163 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-12 08:10:52,164 [main:28] - Try â„–276 of 808
2021-03-12 08:10:52,178 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:10:52,178 [main:28] - Try â„–277 of 808
2021-03-12 08:10:52,183 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:52,183 [main:66] - Compilation checking started
2021-03-12 08:10:52,342 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().a()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:52,342 [main:28] - Try â„–278 of 808
2021-03-12 08:10:52,349 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:10:52,349 [main:28] - Try â„–279 of 808
2021-03-12 08:10:52,366 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:10:52,366 [main:28] - Try â„–280 of 808
2021-03-12 08:10:52,377 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:10:52,378 [main:28] - Try â„–281 of 808
2021-03-12 08:10:52,381 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:52,382 [main:28] - Try â„–282 of 808
2021-03-12 08:10:52,386 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:52,386 [main:66] - Compilation checking started
2021-03-12 08:10:52,547 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.ax()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:52,547 [main:28] - Try â„–283 of 808
2021-03-12 08:10:52,557 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:52,558 [main:66] - Compilation checking started
2021-03-12 08:10:52,732 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).x("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:52,732 [main:28] - Try â„–284 of 808
2021-03-12 08:10:52,738 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:10:52,739 [main:28] - Try â„–285 of 808
2021-03-12 08:10:52,743 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:10:52,743 [main:28] - Try â„–286 of 808
2021-03-12 08:10:52,753 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:52,753 [main:28] - Try â„–287 of 808
2021-03-12 08:10:52,769 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-12 08:10:52,769 [main:28] - Try â„–288 of 808
2021-03-12 08:10:52,781 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:10:52,782 [main:28] - Try â„–289 of 808
2021-03-12 08:10:52,785 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:52,785 [main:28] - Try â„–290 of 808
2021-03-12 08:10:52,788 [main:33] - Trying to replace Element(TYPE_PARAMETER_LIST) on Element(TYPE_PARAMETER_LIST)
2021-03-12 08:10:52,789 [main:66] - Compilation checking started
2021-03-12 08:10:52,945 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <reified X> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:52,946 [main:28] - Try â„–291 of 808
2021-03-12 08:10:52,960 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-12 08:10:52,960 [main:28] - Try â„–292 of 808
2021-03-12 08:10:52,964 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:52,964 [main:66] - Compilation checking started
2021-03-12 08:10:53,130 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): c {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:53,130 [main:28] - Try â„–293 of 808
2021-03-12 08:10:53,142 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:53,142 [main:66] - Compilation checking started
2021-03-12 08:10:53,308 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass(names, c.names())
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:53,308 [main:28] - Try â„–294 of 808
2021-03-12 08:10:53,314 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:10:53,314 [main:28] - Try â„–295 of 808
2021-03-12 08:10:53,325 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:53,325 [main:28] - Try â„–296 of 808
2021-03-12 08:10:53,332 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:53,332 [main:28] - Try â„–297 of 808
2021-03-12 08:10:53,339 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:53,339 [main:28] - Try â„–298 of 808
2021-03-12 08:10:53,349 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:10:53,349 [main:66] - Compilation checking started
2021-03-12 08:10:53,626 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 += null) "OK"

    return "fail 1"
}


2021-03-12 08:10:53,626 [main:28] - Try â„–299 of 808
2021-03-12 08:10:53,631 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:53,631 [main:66] - Compilation checking started
2021-03-12 08:10:53,835 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).builder("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:53,835 [main:28] - Try â„–300 of 808
2021-03-12 08:10:53,848 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:10:53,848 [main:28] - Try â„–301 of 808
2021-03-12 08:10:53,856 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:10:53,856 [main:28] - Try â„–302 of 808
2021-03-12 08:10:53,862 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:10:53,862 [main:66] - Compilation checking started
2021-03-12 08:10:54,025 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Int): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:54,025 [main:28] - Try â„–303 of 808
2021-03-12 08:10:54,035 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:10:54,035 [main:66] - Compilation checking started
2021-03-12 08:10:54,036 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:10:54,036 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String ! null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:54,036 [main:28] - Try â„–304 of 808
2021-03-12 08:10:54,053 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:10:54,054 [main:66] - Compilation checking started
2021-03-12 08:10:54,214 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((Obj["foo"]).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:54,214 [main:28] - Try â„–305 of 808
2021-03-12 08:10:54,224 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:54,224 [main:28] - Try â„–306 of 808
2021-03-12 08:10:54,228 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:10:54,228 [main:28] - Try â„–307 of 808
2021-03-12 08:10:54,232 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:54,232 [main:66] - Compilation checking started
2021-03-12 08:10:54,395 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).box().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:54,395 [main:28] - Try â„–308 of 808
2021-03-12 08:10:54,396 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-12 08:10:54,396 [main:66] - Compilation checking started
2021-03-12 08:10:54,396 [main:68] - Already checked
2021-03-12 08:10:54,396 [main:28] - Try â„–309 of 808
2021-03-12 08:10:54,406 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:54,406 [main:66] - Compilation checking started
2021-03-12 08:10:54,626 [main:53] - Result = true
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (String != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:54,626 [main:28] - Try â„–310 of 808
2021-03-12 08:10:54,635 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:10:54,636 [main:66] - Compilation checking started
2021-03-12 08:10:54,798 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): T {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (String != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:54,798 [main:28] - Try â„–311 of 808
2021-03-12 08:10:54,819 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:10:54,819 [main:28] - Try â„–312 of 808
2021-03-12 08:10:54,828 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:10:54,829 [main:28] - Try â„–313 of 808
2021-03-12 08:10:54,847 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-12 08:10:54,847 [main:66] - Compilation checking started
2021-03-12 08:10:55,011 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    @JvmField public var publicField = s1;
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (String != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:55,011 [main:28] - Try â„–314 of 808
2021-03-12 08:10:55,020 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:10:55,020 [main:66] - Compilation checking started
2021-03-12 08:10:55,260 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String + null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (String != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:55,260 [main:28] - Try â„–315 of 808
2021-03-12 08:10:55,273 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:10:55,273 [main:28] - Try â„–316 of 808
2021-03-12 08:10:55,293 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:10:55,294 [main:28] - Try â„–317 of 808
2021-03-12 08:10:55,309 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:55,309 [main:66] - Compilation checking started
2021-03-12 08:10:55,476 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass(239L)
    if (String != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:55,476 [main:28] - Try â„–318 of 808
2021-03-12 08:10:55,479 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-12 08:10:55,479 [main:66] - Compilation checking started
2021-03-12 08:10:55,698 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

// IGNORE_BACKEND_FIR: JVM_IR
fun box(): String {
    for ((outer, iv) in (4..7).withIndex().withIndex()) {
    }

    return "OK"
}

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (String != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:55,699 [main:28] - Try â„–319 of 808
2021-03-12 08:10:55,706 [main:33] - Trying to replace Element(CLASS_BODY) on Element(CLASS_BODY)
2021-03-12 08:10:55,706 [main:66] - Compilation checking started
2021-03-12 08:10:55,887 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    fun initChild(x0: Int): Any {
        var x = x0
        return object {
            override fun toString(): String {
                x = x + y
                return "child" + x
            }
        }
    }

    val child = initChild(x)
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (String != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:55,887 [main:28] - Try â„–320 of 808
2021-03-12 08:10:55,890 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:55,891 [main:66] - Compilation checking started
2021-03-12 08:10:56,045 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val a = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (String != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:56,045 [main:28] - Try â„–321 of 808
2021-03-12 08:10:56,057 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:10:56,057 [main:28] - Try â„–322 of 808
2021-03-12 08:10:56,067 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:10:56,068 [main:66] - Compilation checking started
2021-03-12 08:10:56,229 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Long = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (String != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:56,229 [main:28] - Try â„–323 of 808
2021-03-12 08:10:56,234 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:10:56,234 [main:28] - Try â„–324 of 808
2021-03-12 08:10:56,251 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:10:56,251 [main:28] - Try â„–325 of 808
2021-03-12 08:10:56,255 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:56,255 [main:66] - Compilation checking started
2021-03-12 08:10:56,420 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val MAX_VALUE = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (String != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:56,420 [main:28] - Try â„–326 of 808
2021-03-12 08:10:56,426 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:56,426 [main:28] - Try â„–327 of 808
2021-03-12 08:10:56,440 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:56,441 [main:66] - Compilation checking started
2021-03-12 08:10:56,604 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): c {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if ((0.toByte()).equals("11")) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (String != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:56,604 [main:28] - Try â„–328 of 808
2021-03-12 08:10:56,618 [main:33] - Trying to replace Element(CONDITION) on Element(CONDITION)
2021-03-12 08:10:56,618 [main:66] - Compilation checking started
2021-03-12 08:10:56,827 [main:53] - Result = true
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if (true) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (String != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:56,827 [main:28] - Try â„–329 of 808
2021-03-12 08:10:56,832 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:56,832 [main:66] - Compilation checking started
2021-03-12 08:10:56,989 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Exception = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if (true) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (String != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:56,989 [main:28] - Try â„–330 of 808
2021-03-12 08:10:56,993 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:56,993 [main:28] - Try â„–331 of 808
2021-03-12 08:10:56,996 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:56,997 [main:28] - Try â„–332 of 808
2021-03-12 08:10:57,000 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:57,000 [main:28] - Try â„–333 of 808
2021-03-12 08:10:57,014 [main:33] - Trying to replace Element(CONDITION) on Element(CONDITION)
2021-03-12 08:10:57,015 [main:66] - Compilation checking started
2021-03-12 08:10:57,232 [main:53] - Result = true
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = kotlin.random.Random
    if (String != null) return "fail"

    val prope3 = javaClass.getEnclosingConstructor()
    if (true) return ((0.14090937f)).toLong().toString()

    var p = "fail"
    if (true) return "Fail C"

    val prope5 = javaClass.getDeclaringClass()
    if (String != null) "OK"

    return "fail 1"
}


2021-03-12 08:10:57,232 [main:28] - Try â„–334 of 808
2021-03-12 08:10:57,236 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:57,236 [main:28] - Try â„–335 of 808
2021-03-12 08:10:57,246 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-12 08:10:57,247 [main:28] - Try â„–336 of 808
2021-03-12 08:10:57,263 [main:28] - Try â„–337 of 808
2021-03-12 08:10:57,269 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:10:57,269 [main:66] - Compilation checking started
2021-03-12 08:10:57,451 [main:53] - Result = true
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:10:57,451 [main:28] - Try â„–338 of 808
2021-03-12 08:10:57,456 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:10:57,456 [main:28] - Try â„–339 of 808
2021-03-12 08:10:57,459 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:57,459 [main:28] - Try â„–340 of 808
2021-03-12 08:10:57,468 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:57,468 [main:66] - Compilation checking started
2021-03-12 08:10:57,606 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = nextBoolean()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:10:57,607 [main:28] - Try â„–341 of 808
2021-03-12 08:10:57,620 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:10:57,621 [main:28] - Try â„–342 of 808
2021-03-12 08:10:57,628 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:10:57,628 [main:66] - Compilation checking started
2021-03-12 08:10:57,629 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:10:57,629 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String it.name == "result"

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:10:57,629 [main:28] - Try â„–343 of 808
2021-03-12 08:10:57,649 [main:28] - Try â„–344 of 808
2021-03-12 08:10:57,659 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:57,659 [main:28] - Try â„–345 of 808
2021-03-12 08:10:57,663 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:57,664 [main:28] - Try â„–346 of 808
2021-03-12 08:10:57,667 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:57,668 [main:66] - Compilation checking started
2021-03-12 08:10:57,805 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> mul): Ty0 = f()

fun box897(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:10:57,805 [main:28] - Try â„–347 of 808
2021-03-12 08:10:57,815 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:57,815 [main:28] - Try â„–348 of 808
2021-03-12 08:10:57,825 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:57,825 [main:28] - Try â„–349 of 808
2021-03-12 08:10:57,839 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-12 08:10:57,839 [main:28] - Try â„–350 of 808
2021-03-12 08:10:57,850 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:10:57,850 [main:28] - Try â„–351 of 808
2021-03-12 08:10:57,858 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:10:57,858 [main:28] - Try â„–352 of 808
2021-03-12 08:10:57,875 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:10:57,875 [main:28] - Try â„–353 of 808
2021-03-12 08:10:57,886 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:57,886 [main:28] - Try â„–354 of 808
2021-03-12 08:10:57,886 [main:28] - Try â„–355 of 808
2021-03-12 08:10:57,896 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:10:57,896 [main:28] - Try â„–356 of 808
2021-03-12 08:10:57,900 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:10:57,900 [main:28] - Try â„–357 of 808
2021-03-12 08:10:57,909 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:57,910 [main:28] - Try â„–358 of 808
2021-03-12 08:10:57,915 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:57,915 [main:66] - Compilation checking started
2021-03-12 08:10:58,125 [main:53] - Result = true
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:10:58,125 [main:28] - Try â„–359 of 808
2021-03-12 08:10:58,136 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:10:58,136 [main:28] - Try â„–360 of 808
2021-03-12 08:10:58,141 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:10:58,141 [main:28] - Try â„–361 of 808
2021-03-12 08:10:58,146 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-12 08:10:58,146 [main:66] - Compilation checking started
2021-03-12 08:10:58,283 [main:49] - Result = false
Text:
fun test1() {}

@NotNull fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:10:58,284 [main:28] - Try â„–362 of 808
2021-03-12 08:10:58,301 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:10:58,301 [main:28] - Try â„–363 of 808
2021-03-12 08:10:58,307 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:10:58,307 [main:28] - Try â„–364 of 808
2021-03-12 08:10:58,322 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:10:58,323 [main:28] - Try â„–365 of 808
2021-03-12 08:10:58,329 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:10:58,329 [main:28] - Try â„–366 of 808
2021-03-12 08:10:58,335 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:10:58,336 [main:28] - Try â„–367 of 808
2021-03-12 08:10:58,342 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:10:58,342 [main:28] - Try â„–368 of 808
2021-03-12 08:10:58,346 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:58,346 [main:28] - Try â„–369 of 808
2021-03-12 08:10:58,356 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:58,356 [main:28] - Try â„–370 of 808
2021-03-12 08:10:58,367 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:10:58,367 [main:28] - Try â„–371 of 808
2021-03-12 08:10:58,371 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:58,372 [main:28] - Try â„–372 of 808
2021-03-12 08:10:58,386 [main:33] - Trying to replace Element(SHORT_STRING_TEMPLATE_ENTRY) on Element(SHORT_STRING_TEMPLATE_ENTRY)
2021-03-12 08:10:58,386 [main:28] - Try â„–373 of 808
2021-03-12 08:10:58,401 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-12 08:10:58,402 [main:28] - Try â„–374 of 808
2021-03-12 08:10:58,415 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-12 08:10:58,415 [main:28] - Try â„–375 of 808
2021-03-12 08:10:58,422 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:10:58,423 [main:28] - Try â„–376 of 808
2021-03-12 08:10:58,438 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-12 08:10:58,439 [main:66] - Compilation checking started
2021-03-12 08:10:58,555 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = { return "OK" }
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:10:58,555 [main:28] - Try â„–377 of 808
2021-03-12 08:10:58,563 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:58,563 [main:28] - Try â„–378 of 808
2021-03-12 08:10:58,573 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:58,573 [main:28] - Try â„–379 of 808
2021-03-12 08:10:58,577 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:58,577 [main:66] - Compilation checking started
2021-03-12 08:10:58,703 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): body = f()

fun String(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:10:58,703 [main:28] - Try â„–380 of 808
2021-03-12 08:10:58,719 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-12 08:10:58,720 [main:28] - Try â„–381 of 808
2021-03-12 08:10:58,732 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:10:58,732 [main:28] - Try â„–382 of 808
2021-03-12 08:10:58,739 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:10:58,739 [main:66] - Compilation checking started
2021-03-12 08:10:58,871 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun String(): Zin<TParam>? {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:10:58,871 [main:28] - Try â„–383 of 808
2021-03-12 08:10:58,877 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:10:58,877 [main:66] - Compilation checking started
2021-03-12 08:10:59,009 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> T): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object Kla0 {
    val prope0 = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:10:59,009 [main:28] - Try â„–384 of 808
2021-03-12 08:10:59,021 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:10:59,021 [main:28] - Try â„–385 of 808
2021-03-12 08:10:59,036 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-12 08:10:59,036 [main:28] - Try â„–386 of 808
2021-03-12 08:10:59,053 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:10:59,053 [main:28] - Try â„–387 of 808
2021-03-12 08:10:59,067 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:10:59,067 [main:28] - Try â„–388 of 808
2021-03-12 08:10:59,077 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:59,077 [main:28] - Try â„–389 of 808
2021-03-12 08:10:59,086 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:59,086 [main:28] - Try â„–390 of 808
2021-03-12 08:10:59,089 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:59,090 [main:28] - Try â„–391 of 808
2021-03-12 08:10:59,093 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:59,093 [main:28] - Try â„–392 of 808
2021-03-12 08:10:59,109 [main:28] - Try â„–393 of 808
2021-03-12 08:10:59,112 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:59,113 [main:28] - Try â„–394 of 808
2021-03-12 08:10:59,125 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:10:59,125 [main:28] - Try â„–395 of 808
2021-03-12 08:10:59,136 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:10:59,136 [main:28] - Try â„–396 of 808
2021-03-12 08:10:59,141 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:59,141 [main:28] - Try â„–397 of 808
2021-03-12 08:10:59,150 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:59,150 [main:28] - Try â„–398 of 808
2021-03-12 08:10:59,159 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:59,159 [main:28] - Try â„–399 of 808
2021-03-12 08:10:59,172 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:10:59,172 [main:28] - Try â„–400 of 808
2021-03-12 08:10:59,178 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:10:59,178 [main:28] - Try â„–401 of 808
2021-03-12 08:10:59,190 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:10:59,190 [main:28] - Try â„–402 of 808
2021-03-12 08:10:59,200 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:10:59,200 [main:28] - Try â„–403 of 808
2021-03-12 08:10:59,201 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-12 08:10:59,201 [main:66] - Compilation checking started
2021-03-12 08:10:59,201 [main:68] - Already checked
2021-03-12 08:10:59,201 [main:28] - Try â„–404 of 808
2021-03-12 08:10:59,205 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:59,205 [main:28] - Try â„–405 of 808
2021-03-12 08:10:59,210 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:10:59,210 [main:28] - Try â„–406 of 808
2021-03-12 08:10:59,219 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:59,219 [main:28] - Try â„–407 of 808
2021-03-12 08:10:59,223 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:59,223 [main:66] - Compilation checking started
2021-03-12 08:10:59,393 [main:53] - Result = true
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object Kla0 {
    val Char = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:10:59,393 [main:28] - Try â„–408 of 808
2021-03-12 08:10:59,404 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:10:59,404 [main:28] - Try â„–409 of 808
2021-03-12 08:10:59,414 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:59,414 [main:28] - Try â„–410 of 808
2021-03-12 08:10:59,424 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:10:59,424 [main:28] - Try â„–411 of 808
2021-03-12 08:10:59,433 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:59,433 [main:28] - Try â„–412 of 808
2021-03-12 08:10:59,437 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:10:59,437 [main:28] - Try â„–413 of 808
2021-03-12 08:10:59,441 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:59,441 [main:66] - Compilation checking started
2021-03-12 08:10:59,569 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object Kla0 {
    val Char = {}
}

fun box(): toString {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:10:59,570 [main:28] - Try â„–414 of 808
2021-03-12 08:10:59,573 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:59,573 [main:66] - Compilation checking started
2021-03-12 08:10:59,701 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> MIN_VALUE): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object Kla0 {
    val Char = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:10:59,701 [main:28] - Try â„–415 of 808
2021-03-12 08:10:59,708 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:10:59,708 [main:28] - Try â„–416 of 808
2021-03-12 08:10:59,719 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:10:59,720 [main:28] - Try â„–417 of 808
2021-03-12 08:10:59,735 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-12 08:10:59,735 [main:28] - Try â„–418 of 808
2021-03-12 08:10:59,739 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:59,739 [main:28] - Try â„–419 of 808
2021-03-12 08:10:59,743 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:59,743 [main:28] - Try â„–420 of 808
2021-03-12 08:10:59,753 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:10:59,753 [main:28] - Try â„–421 of 808
2021-03-12 08:10:59,762 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:59,763 [main:28] - Try â„–422 of 808
2021-03-12 08:10:59,772 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:59,772 [main:28] - Try â„–423 of 808
2021-03-12 08:10:59,778 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:10:59,778 [main:28] - Try â„–424 of 808
2021-03-12 08:10:59,785 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:10:59,786 [main:28] - Try â„–425 of 808
2021-03-12 08:10:59,795 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:59,795 [main:28] - Try â„–426 of 808
2021-03-12 08:10:59,802 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:59,802 [main:28] - Try â„–427 of 808
2021-03-12 08:10:59,807 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:10:59,807 [main:28] - Try â„–428 of 808
2021-03-12 08:10:59,816 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:10:59,816 [main:28] - Try â„–429 of 808
2021-03-12 08:10:59,831 [main:33] - Trying to replace Element(CONDITION) on Element(CONDITION)
2021-03-12 08:10:59,831 [main:28] - Try â„–430 of 808
2021-03-12 08:10:59,835 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:10:59,835 [main:66] - Compilation checking started
2021-03-12 08:10:59,963 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> assertEquals): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object Kla0 {
    val Char = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:10:59,963 [main:28] - Try â„–431 of 808
2021-03-12 08:10:59,970 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:10:59,970 [main:28] - Try â„–432 of 808
2021-03-12 08:10:59,983 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:10:59,983 [main:28] - Try â„–433 of 808
2021-03-12 08:11:00,000 [main:28] - Try â„–434 of 808
2021-03-12 08:11:00,005 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:00,005 [main:28] - Try â„–435 of 808
2021-03-12 08:11:00,012 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:11:00,012 [main:28] - Try â„–436 of 808
2021-03-12 08:11:00,021 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:00,022 [main:28] - Try â„–437 of 808
2021-03-12 08:11:00,032 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-12 08:11:00,033 [main:28] - Try â„–438 of 808
2021-03-12 08:11:00,039 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:00,039 [main:28] - Try â„–439 of 808
2021-03-12 08:11:00,043 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:00,043 [main:28] - Try â„–440 of 808
2021-03-12 08:11:00,055 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:00,055 [main:28] - Try â„–441 of 808
2021-03-12 08:11:00,065 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:00,065 [main:28] - Try â„–442 of 808
2021-03-12 08:11:00,069 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:00,069 [main:28] - Try â„–443 of 808
2021-03-12 08:11:00,081 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:11:00,081 [main:28] - Try â„–444 of 808
2021-03-12 08:11:00,089 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:00,089 [main:28] - Try â„–445 of 808
2021-03-12 08:11:00,097 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:00,097 [main:28] - Try â„–446 of 808
2021-03-12 08:11:00,106 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:00,106 [main:28] - Try â„–447 of 808
2021-03-12 08:11:00,118 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:11:00,118 [main:28] - Try â„–448 of 808
2021-03-12 08:11:00,127 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:00,127 [main:28] - Try â„–449 of 808
2021-03-12 08:11:00,142 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:11:00,143 [main:66] - Compilation checking started
2021-03-12 08:11:00,276 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = {
        object {
            val keys = key
        }.keys
    }

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object Kla0 {
    val Char = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:00,277 [main:28] - Try â„–450 of 808
2021-03-12 08:11:00,292 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:11:00,292 [main:66] - Compilation checking started
2021-03-12 08:11:00,425 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object Kla0 {
    val Char = { r }
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:00,425 [main:28] - Try â„–451 of 808
2021-03-12 08:11:00,428 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:00,429 [main:28] - Try â„–452 of 808
2021-03-12 08:11:00,435 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:00,435 [main:28] - Try â„–453 of 808
2021-03-12 08:11:00,444 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:00,444 [main:28] - Try â„–454 of 808
2021-03-12 08:11:00,450 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:00,450 [main:28] - Try â„–455 of 808
2021-03-12 08:11:00,466 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-12 08:11:00,466 [main:28] - Try â„–456 of 808
2021-03-12 08:11:00,471 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:00,471 [main:28] - Try â„–457 of 808
2021-03-12 08:11:00,485 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-12 08:11:00,486 [main:28] - Try â„–458 of 808
2021-03-12 08:11:00,501 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-12 08:11:00,501 [main:28] - Try â„–459 of 808
2021-03-12 08:11:00,508 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:11:00,508 [main:66] - Compilation checking started
2021-03-12 08:11:00,625 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun String(): String {}

object Kla0 {
    val Char = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:00,625 [main:28] - Try â„–460 of 808
2021-03-12 08:11:00,628 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:00,629 [main:66] - Compilation checking started
2021-03-12 08:11:00,762 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <B> fu1(f: () -> Ty0): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object Kla0 {
    val Char = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:00,762 [main:28] - Try â„–461 of 808
2021-03-12 08:11:00,775 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:00,775 [main:28] - Try â„–462 of 808
2021-03-12 08:11:00,786 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:11:00,786 [main:28] - Try â„–463 of 808
2021-03-12 08:11:00,803 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:11:00,803 [main:28] - Try â„–464 of 808
2021-03-12 08:11:00,807 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:00,807 [main:28] - Try â„–465 of 808
2021-03-12 08:11:00,817 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:00,817 [main:28] - Try â„–466 of 808
2021-03-12 08:11:00,828 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:11:00,829 [main:28] - Try â„–467 of 808
2021-03-12 08:11:00,832 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:00,832 [main:28] - Try â„–468 of 808
2021-03-12 08:11:00,837 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:00,837 [main:28] - Try â„–469 of 808
2021-03-12 08:11:00,848 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-12 08:11:00,848 [main:28] - Try â„–470 of 808
2021-03-12 08:11:00,860 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:00,860 [main:28] - Try â„–471 of 808
2021-03-12 08:11:00,879 [main:28] - Try â„–472 of 808
2021-03-12 08:11:00,888 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:00,888 [main:28] - Try â„–473 of 808
2021-03-12 08:11:00,895 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:00,895 [main:28] - Try â„–474 of 808
2021-03-12 08:11:00,909 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:00,909 [main:28] - Try â„–475 of 808
2021-03-12 08:11:00,924 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-12 08:11:00,925 [main:66] - Compilation checking started
2021-03-12 08:11:01,067 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = {
        c = ' '
    }

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object Kla0 {
    val Char = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:01,067 [main:28] - Try â„–476 of 808
2021-03-12 08:11:01,082 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:01,083 [main:28] - Try â„–477 of 808
2021-03-12 08:11:01,089 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:01,089 [main:28] - Try â„–478 of 808
2021-03-12 08:11:01,109 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:01,109 [main:28] - Try â„–479 of 808
2021-03-12 08:11:01,121 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:01,122 [main:28] - Try â„–480 of 808
2021-03-12 08:11:01,126 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:01,126 [main:28] - Try â„–481 of 808
2021-03-12 08:11:01,139 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:01,139 [main:28] - Try â„–482 of 808
2021-03-12 08:11:01,145 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:01,146 [main:28] - Try â„–483 of 808
2021-03-12 08:11:01,154 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:01,154 [main:28] - Try â„–484 of 808
2021-03-12 08:11:01,160 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:01,160 [main:28] - Try â„–485 of 808
2021-03-12 08:11:01,176 [main:28] - Try â„–486 of 808
2021-03-12 08:11:01,182 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:01,182 [main:28] - Try â„–487 of 808
2021-03-12 08:11:01,191 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:01,192 [main:28] - Try â„–488 of 808
2021-03-12 08:11:01,207 [main:28] - Try â„–489 of 808
2021-03-12 08:11:01,214 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:01,215 [main:28] - Try â„–490 of 808
2021-03-12 08:11:01,218 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:01,218 [main:28] - Try â„–491 of 808
2021-03-12 08:11:01,233 [main:33] - Trying to replace PsiElement(FLOAT_CONSTANT) on PsiElement(FLOAT_CONSTANT)
2021-03-12 08:11:01,233 [main:28] - Try â„–492 of 808
2021-03-12 08:11:01,246 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:01,246 [main:28] - Try â„–493 of 808
2021-03-12 08:11:01,250 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:01,250 [main:28] - Try â„–494 of 808
2021-03-12 08:11:01,260 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-12 08:11:01,261 [main:28] - Try â„–495 of 808
2021-03-12 08:11:01,273 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:11:01,273 [main:28] - Try â„–496 of 808
2021-03-12 08:11:01,277 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:01,277 [main:28] - Try â„–497 of 808
2021-03-12 08:11:01,283 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:01,283 [main:28] - Try â„–498 of 808
2021-03-12 08:11:01,289 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:01,290 [main:28] - Try â„–499 of 808
2021-03-12 08:11:01,304 [main:33] - Trying to replace Element(SHORT_STRING_TEMPLATE_ENTRY) on Element(SHORT_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:01,304 [main:28] - Try â„–500 of 808
2021-03-12 08:11:01,316 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:11:01,316 [main:28] - Try â„–501 of 808
2021-03-12 08:11:01,326 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:01,326 [main:66] - Compilation checking started
2021-03-12 08:11:01,444 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

public inline fun <Ty0> fu1(f: () -> String): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object Kla0 {
    val Char = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:01,444 [main:28] - Try â„–502 of 808
2021-03-12 08:11:01,458 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:01,458 [main:28] - Try â„–503 of 808
2021-03-12 08:11:01,469 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-12 08:11:01,469 [main:28] - Try â„–504 of 808
2021-03-12 08:11:01,475 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-12 08:11:01,475 [main:66] - Compilation checking started
2021-03-12 08:11:01,589 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "K"}

override fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object Kla0 {
    val Char = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:01,589 [main:28] - Try â„–505 of 808
2021-03-12 08:11:01,592 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:01,592 [main:28] - Try â„–506 of 808
2021-03-12 08:11:01,605 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:01,606 [main:28] - Try â„–507 of 808
2021-03-12 08:11:01,612 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:01,613 [main:28] - Try â„–508 of 808
2021-03-12 08:11:01,622 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:01,622 [main:28] - Try â„–509 of 808
2021-03-12 08:11:01,634 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:01,635 [main:28] - Try â„–510 of 808
2021-03-12 08:11:01,650 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:11:01,650 [main:28] - Try â„–511 of 808
2021-03-12 08:11:01,664 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 08:11:01,664 [main:28] - Try â„–512 of 808
2021-03-12 08:11:01,677 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:01,677 [main:28] - Try â„–513 of 808
2021-03-12 08:11:01,694 [main:28] - Try â„–514 of 808
2021-03-12 08:11:01,698 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:01,698 [main:28] - Try â„–515 of 808
2021-03-12 08:11:01,711 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:01,711 [main:66] - Compilation checking started
2021-03-12 08:11:01,882 [main:53] - Result = true
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object Kla0 {
    val Char = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:01,883 [main:28] - Try â„–516 of 808
2021-03-12 08:11:01,902 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:11:01,902 [main:28] - Try â„–517 of 808
2021-03-12 08:11:01,918 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-12 08:11:01,918 [main:28] - Try â„–518 of 808
2021-03-12 08:11:01,927 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:01,928 [main:28] - Try â„–519 of 808
2021-03-12 08:11:01,940 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:01,940 [main:28] - Try â„–520 of 808
2021-03-12 08:11:01,951 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:11:01,951 [main:28] - Try â„–521 of 808
2021-03-12 08:11:01,954 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:01,955 [main:66] - Compilation checking started
2021-03-12 08:11:02,119 [main:53] - Result = true
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object contract {
    val Char = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:02,119 [main:28] - Try â„–522 of 808
2021-03-12 08:11:02,130 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:02,130 [main:28] - Try â„–523 of 808
2021-03-12 08:11:02,140 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:02,141 [main:28] - Try â„–524 of 808
2021-03-12 08:11:02,151 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:11:02,151 [main:28] - Try â„–525 of 808
2021-03-12 08:11:02,161 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:02,161 [main:28] - Try â„–526 of 808
2021-03-12 08:11:02,170 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:02,170 [main:28] - Try â„–527 of 808
2021-03-12 08:11:02,176 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:02,176 [main:66] - Compilation checking started
2021-03-12 08:11:02,289 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(f: () -> Ty0): String = f()

fun String(): String {
    return "fail 4"
}

object contract {
    val Char = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:02,289 [main:28] - Try â„–528 of 808
2021-03-12 08:11:02,301 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:11:02,301 [main:28] - Try â„–529 of 808
2021-03-12 08:11:02,304 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-12 08:11:02,304 [main:66] - Compilation checking started
2021-03-12 08:11:02,437 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

{ return null; }

object contract {
    val Char = {}
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:02,437 [main:28] - Try â„–530 of 808
2021-03-12 08:11:02,448 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:11:02,448 [main:28] - Try â„–531 of 808
2021-03-12 08:11:02,457 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:02,457 [main:28] - Try â„–532 of 808
2021-03-12 08:11:02,474 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-12 08:11:02,474 [main:28] - Try â„–533 of 808
2021-03-12 08:11:02,482 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:02,482 [main:28] - Try â„–534 of 808
2021-03-12 08:11:02,492 [main:33] - Trying to replace Element(OBJECT_DECLARATION) on Element(OBJECT_DECLARATION)
2021-03-12 08:11:02,492 [main:66] - Compilation checking started
2021-03-12 08:11:02,493 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:11:02,493 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object : Function0<String> {
    override fun invoke() = "OK"
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:02,493 [main:28] - Try â„–535 of 808
2021-03-12 08:11:02,508 [main:28] - Try â„–536 of 808
2021-03-12 08:11:02,512 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:02,512 [main:28] - Try â„–537 of 808
2021-03-12 08:11:02,523 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:11:02,523 [main:28] - Try â„–538 of 808
2021-03-12 08:11:02,531 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:02,532 [main:28] - Try â„–539 of 808
2021-03-12 08:11:02,538 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:02,538 [main:28] - Try â„–540 of 808
2021-03-12 08:11:02,545 [main:33] - Trying to replace Element(CLASS_BODY) on Element(CLASS_BODY)
2021-03-12 08:11:02,545 [main:66] - Compilation checking started
2021-03-12 08:11:02,707 [main:53] - Result = true
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:02,707 [main:28] - Try â„–541 of 808
2021-03-12 08:11:02,715 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:02,715 [main:28] - Try â„–542 of 808
2021-03-12 08:11:02,723 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:02,723 [main:28] - Try â„–543 of 808
2021-03-12 08:11:02,731 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:02,731 [main:28] - Try â„–544 of 808
2021-03-12 08:11:02,744 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:02,744 [main:28] - Try â„–545 of 808
2021-03-12 08:11:02,758 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-12 08:11:02,758 [main:28] - Try â„–546 of 808
2021-03-12 08:11:02,767 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:02,767 [main:28] - Try â„–547 of 808
2021-03-12 08:11:02,774 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:02,774 [main:28] - Try â„–548 of 808
2021-03-12 08:11:02,781 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:02,781 [main:28] - Try â„–549 of 808
2021-03-12 08:11:02,799 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-12 08:11:02,799 [main:66] - Compilation checking started
2021-03-12 08:11:02,929 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = {
                h.value += ", OK_FINALLY"
                "OK_FINALLY"
            }

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:02,929 [main:28] - Try â„–550 of 808
2021-03-12 08:11:02,946 [main:28] - Try â„–551 of 808
2021-03-12 08:11:02,957 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:11:02,957 [main:28] - Try â„–552 of 808
2021-03-12 08:11:02,966 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:02,966 [main:28] - Try â„–553 of 808
2021-03-12 08:11:02,981 [main:33] - Trying to replace PsiElement(FLOAT_CONSTANT) on PsiElement(FLOAT_CONSTANT)
2021-03-12 08:11:02,981 [main:28] - Try â„–554 of 808
2021-03-12 08:11:02,989 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:02,989 [main:28] - Try â„–555 of 808
2021-03-12 08:11:02,993 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:02,993 [main:28] - Try â„–556 of 808
2021-03-12 08:11:03,006 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 08:11:03,007 [main:28] - Try â„–557 of 808
2021-03-12 08:11:03,013 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:11:03,014 [main:28] - Try â„–558 of 808
2021-03-12 08:11:03,020 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:03,021 [main:28] - Try â„–559 of 808
2021-03-12 08:11:03,022 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-12 08:11:03,022 [main:66] - Compilation checking started
2021-03-12 08:11:03,022 [main:68] - Already checked
2021-03-12 08:11:03,022 [main:28] - Try â„–560 of 808
2021-03-12 08:11:03,032 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:03,032 [main:28] - Try â„–561 of 808
2021-03-12 08:11:03,041 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:03,042 [main:28] - Try â„–562 of 808
2021-03-12 08:11:03,062 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-12 08:11:03,062 [main:28] - Try â„–563 of 808
2021-03-12 08:11:03,075 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:11:03,075 [main:28] - Try â„–564 of 808
2021-03-12 08:11:03,089 [main:33] - Trying to replace PsiElement(FLOAT_CONSTANT) on PsiElement(FLOAT_CONSTANT)
2021-03-12 08:11:03,089 [main:28] - Try â„–565 of 808
2021-03-12 08:11:03,095 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:03,095 [main:28] - Try â„–566 of 808
2021-03-12 08:11:03,098 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:03,098 [main:28] - Try â„–567 of 808
2021-03-12 08:11:03,108 [main:33] - Trying to replace Element(OBJECT_DECLARATION) on Element(OBJECT_DECLARATION)
2021-03-12 08:11:03,108 [main:66] - Compilation checking started
2021-03-12 08:11:03,109 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:11:03,109 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object {
            fun run() {
                lambda()
            }
        }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:03,109 [main:28] - Try â„–568 of 808
2021-03-12 08:11:03,112 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:03,112 [main:28] - Try â„–569 of 808
2021-03-12 08:11:03,128 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:11:03,128 [main:66] - Compilation checking started
2021-03-12 08:11:03,256 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { v += "K" }

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:03,256 [main:28] - Try â„–570 of 808
2021-03-12 08:11:03,267 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:11:03,268 [main:28] - Try â„–571 of 808
2021-03-12 08:11:03,275 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:03,275 [main:28] - Try â„–572 of 808
2021-03-12 08:11:03,279 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:03,280 [main:28] - Try â„–573 of 808
2021-03-12 08:11:03,292 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-12 08:11:03,293 [main:28] - Try â„–574 of 808
2021-03-12 08:11:03,304 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:11:03,304 [main:28] - Try â„–575 of 808
2021-03-12 08:11:03,319 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-12 08:11:03,319 [main:66] - Compilation checking started
2021-03-12 08:11:03,430 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(f: () -> Boolean): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:03,431 [main:28] - Try â„–576 of 808
2021-03-12 08:11:03,438 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:03,438 [main:28] - Try â„–577 of 808
2021-03-12 08:11:03,452 [main:33] - Trying to replace PsiElement(FLOAT_CONSTANT) on PsiElement(FLOAT_CONSTANT)
2021-03-12 08:11:03,452 [main:28] - Try â„–578 of 808
2021-03-12 08:11:03,462 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:03,462 [main:28] - Try â„–579 of 808
2021-03-12 08:11:03,465 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:03,465 [main:28] - Try â„–580 of 808
2021-03-12 08:11:03,475 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:03,475 [main:28] - Try â„–581 of 808
2021-03-12 08:11:03,481 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:03,481 [main:28] - Try â„–582 of 808
2021-03-12 08:11:03,487 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:03,488 [main:66] - Compilation checking started
2021-03-12 08:11:03,624 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = assertTrue(Interface::class.constructors.isEmpty())

fun String(): String {
    return "fail 4"
}

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:03,624 [main:28] - Try â„–583 of 808
2021-03-12 08:11:03,633 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:03,633 [main:28] - Try â„–584 of 808
2021-03-12 08:11:03,639 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:03,639 [main:66] - Compilation checking started
2021-03-12 08:11:03,754 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(f: () -> Long): Ty0 = f()

fun String(): String {
    return "fail 4"
}

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:03,754 [main:28] - Try â„–585 of 808
2021-03-12 08:11:03,759 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:03,759 [main:28] - Try â„–586 of 808
2021-03-12 08:11:03,767 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:03,767 [main:28] - Try â„–587 of 808
2021-03-12 08:11:03,773 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:03,773 [main:28] - Try â„–588 of 808
2021-03-12 08:11:03,778 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:03,778 [main:28] - Try â„–589 of 808
2021-03-12 08:11:03,782 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:03,782 [main:28] - Try â„–590 of 808
2021-03-12 08:11:03,791 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:03,791 [main:28] - Try â„–591 of 808
2021-03-12 08:11:03,800 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:03,800 [main:28] - Try â„–592 of 808
2021-03-12 08:11:03,809 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:03,809 [main:28] - Try â„–593 of 808
2021-03-12 08:11:03,819 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:03,819 [main:28] - Try â„–594 of 808
2021-03-12 08:11:03,824 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:03,824 [main:28] - Try â„–595 of 808
2021-03-12 08:11:03,833 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:03,833 [main:28] - Try â„–596 of 808
2021-03-12 08:11:03,844 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-12 08:11:03,844 [main:28] - Try â„–597 of 808
2021-03-12 08:11:03,847 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:03,847 [main:28] - Try â„–598 of 808
2021-03-12 08:11:03,851 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:03,851 [main:28] - Try â„–599 of 808
2021-03-12 08:11:03,853 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-12 08:11:03,853 [main:66] - Compilation checking started
2021-03-12 08:11:04,012 [main:53] - Result = true
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:04,012 [main:28] - Try â„–600 of 808
2021-03-12 08:11:04,021 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:04,022 [main:28] - Try â„–601 of 808
2021-03-12 08:11:04,030 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:04,031 [main:28] - Try â„–602 of 808
2021-03-12 08:11:04,037 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:04,037 [main:28] - Try â„–603 of 808
2021-03-12 08:11:04,049 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:04,049 [main:28] - Try â„–604 of 808
2021-03-12 08:11:04,066 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:04,066 [main:28] - Try â„–605 of 808
2021-03-12 08:11:04,079 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:04,080 [main:28] - Try â„–606 of 808
2021-03-12 08:11:04,086 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:11:04,086 [main:66] - Compilation checking started
2021-03-12 08:11:04,230 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { {
        if (t.cause != null) return "fail t.cause"
        if (t.message != "OK") return "fail t.message: ${t.message}"
        if (t.x != "O") return "fail t.x: ${t.x}"
        return "OK"
    }}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:04,230 [main:28] - Try â„–607 of 808
2021-03-12 08:11:04,243 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:04,243 [main:28] - Try â„–608 of 808
2021-03-12 08:11:04,246 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:04,246 [main:28] - Try â„–609 of 808
2021-03-12 08:11:04,253 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:04,253 [main:28] - Try â„–610 of 808
2021-03-12 08:11:04,261 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:04,261 [main:28] - Try â„–611 of 808
2021-03-12 08:11:04,276 [main:33] - Trying to replace Element(SHORT_STRING_TEMPLATE_ENTRY) on Element(SHORT_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:04,276 [main:28] - Try â„–612 of 808
2021-03-12 08:11:04,279 [main:33] - Trying to replace Element(TYPE_PARAMETER_LIST) on Element(TYPE_PARAMETER_LIST)
2021-03-12 08:11:04,279 [main:66] - Compilation checking started
2021-03-12 08:11:04,422 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <T> fu1(f: () -> Ty0): Ty0 = f()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:04,422 [main:28] - Try â„–613 of 808
2021-03-12 08:11:04,425 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:04,425 [main:28] - Try â„–614 of 808
2021-03-12 08:11:04,443 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:11:04,443 [main:28] - Try â„–615 of 808
2021-03-12 08:11:04,456 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:04,456 [main:28] - Try â„–616 of 808
2021-03-12 08:11:04,468 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:11:04,468 [main:28] - Try â„–617 of 808
2021-03-12 08:11:04,483 [main:33] - Trying to replace Element(CONDITION) on Element(CONDITION)
2021-03-12 08:11:04,483 [main:28] - Try â„–618 of 808
2021-03-12 08:11:04,492 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:11:04,492 [main:28] - Try â„–619 of 808
2021-03-12 08:11:04,502 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:04,502 [main:28] - Try â„–620 of 808
2021-03-12 08:11:04,513 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:11:04,513 [main:28] - Try â„–621 of 808
2021-03-12 08:11:04,531 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:11:04,531 [main:28] - Try â„–622 of 808
2021-03-12 08:11:04,541 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:04,541 [main:28] - Try â„–623 of 808
2021-03-12 08:11:04,552 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:11:04,553 [main:28] - Try â„–624 of 808
2021-03-12 08:11:04,555 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-12 08:11:04,556 [main:66] - Compilation checking started
2021-03-12 08:11:04,695 [main:49] - Result = false
Text:
fun box(): String {
    val test = Test().test()
    if (test != "simple") return "fail $test"

    val bar = Test().bar()
    if (bar != "simple") return "fail 2 $bar"

    return "OK"
}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:04,695 [main:28] - Try â„–625 of 808
2021-03-12 08:11:04,705 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:11:04,706 [main:28] - Try â„–626 of 808
2021-03-12 08:11:04,719 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-12 08:11:04,719 [main:28] - Try â„–627 of 808
2021-03-12 08:11:04,734 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-12 08:11:04,734 [main:28] - Try â„–628 of 808
2021-03-12 08:11:04,741 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:04,741 [main:66] - Compilation checking started
2021-03-12 08:11:04,867 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(f: () -> Ty0): testAnnotation = f()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:04,867 [main:28] - Try â„–629 of 808
2021-03-12 08:11:04,878 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:11:04,878 [main:28] - Try â„–630 of 808
2021-03-12 08:11:04,891 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:04,891 [main:28] - Try â„–631 of 808
2021-03-12 08:11:04,900 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:04,900 [main:28] - Try â„–632 of 808
2021-03-12 08:11:04,903 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:04,903 [main:28] - Try â„–633 of 808
2021-03-12 08:11:04,920 [main:28] - Try â„–634 of 808
2021-03-12 08:11:04,928 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:04,929 [main:28] - Try â„–635 of 808
2021-03-12 08:11:04,934 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:04,934 [main:28] - Try â„–636 of 808
2021-03-12 08:11:04,946 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:11:04,946 [main:28] - Try â„–637 of 808
2021-03-12 08:11:04,953 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:04,954 [main:28] - Try â„–638 of 808
2021-03-12 08:11:04,957 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:04,957 [main:28] - Try â„–639 of 808
2021-03-12 08:11:04,960 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:04,961 [main:28] - Try â„–640 of 808
2021-03-12 08:11:04,967 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:04,968 [main:28] - Try â„–641 of 808
2021-03-12 08:11:04,982 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-12 08:11:04,982 [main:28] - Try â„–642 of 808
2021-03-12 08:11:04,991 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:11:04,991 [main:28] - Try â„–643 of 808
2021-03-12 08:11:04,994 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-12 08:11:04,994 [main:66] - Compilation checking started
2021-03-12 08:11:04,994 [main:68] - Already checked
2021-03-12 08:11:04,994 [main:28] - Try â„–644 of 808
2021-03-12 08:11:05,002 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:05,003 [main:28] - Try â„–645 of 808
2021-03-12 08:11:05,013 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:05,013 [main:28] - Try â„–646 of 808
2021-03-12 08:11:05,025 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:11:05,025 [main:28] - Try â„–647 of 808
2021-03-12 08:11:05,029 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:05,029 [main:28] - Try â„–648 of 808
2021-03-12 08:11:05,034 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:05,034 [main:66] - Compilation checking started
2021-03-12 08:11:05,165 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(): Ty0 = f()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:05,166 [main:28] - Try â„–649 of 808
2021-03-12 08:11:05,175 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:05,175 [main:66] - Compilation checking started
2021-03-12 08:11:05,306 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = S()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:05,307 [main:28] - Try â„–650 of 808
2021-03-12 08:11:05,321 [main:33] - Trying to replace Element(CONDITION) on Element(CONDITION)
2021-03-12 08:11:05,321 [main:28] - Try â„–651 of 808
2021-03-12 08:11:05,339 [main:28] - Try â„–652 of 808
2021-03-12 08:11:05,355 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:05,355 [main:28] - Try â„–653 of 808
2021-03-12 08:11:05,359 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:05,359 [main:28] - Try â„–654 of 808
2021-03-12 08:11:05,367 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:11:05,367 [main:28] - Try â„–655 of 808
2021-03-12 08:11:05,374 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:11:05,374 [main:66] - Compilation checking started
2021-03-12 08:11:05,374 [main:68] - Already checked
2021-03-12 08:11:05,374 [main:28] - Try â„–656 of 808
2021-03-12 08:11:05,383 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:05,383 [main:28] - Try â„–657 of 808
2021-03-12 08:11:05,391 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:05,391 [main:28] - Try â„–658 of 808
2021-03-12 08:11:05,404 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:05,404 [main:28] - Try â„–659 of 808
2021-03-12 08:11:05,417 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:05,417 [main:28] - Try â„–660 of 808
2021-03-12 08:11:05,426 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:05,426 [main:28] - Try â„–661 of 808
2021-03-12 08:11:05,440 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:05,440 [main:28] - Try â„–662 of 808
2021-03-12 08:11:05,457 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:11:05,457 [main:28] - Try â„–663 of 808
2021-03-12 08:11:05,464 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:05,465 [main:28] - Try â„–664 of 808
2021-03-12 08:11:05,468 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:05,468 [main:28] - Try â„–665 of 808
2021-03-12 08:11:05,479 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:11:05,479 [main:28] - Try â„–666 of 808
2021-03-12 08:11:05,486 [main:33] - Trying to replace Element(TYPE_PARAMETER) on Element(TYPE_PARAMETER)
2021-03-12 08:11:05,486 [main:66] - Compilation checking started
2021-03-12 08:11:05,486 [main:68] - Already checked
2021-03-12 08:11:05,486 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <T> fu1(f: () -> Ty0): Ty0 = f()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:05,487 [main:28] - Try â„–667 of 808
2021-03-12 08:11:05,493 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:05,494 [main:28] - Try â„–668 of 808
2021-03-12 08:11:05,497 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:05,498 [main:28] - Try â„–669 of 808
2021-03-12 08:11:05,501 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:05,501 [main:28] - Try â„–670 of 808
2021-03-12 08:11:05,510 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:05,510 [main:28] - Try â„–671 of 808
2021-03-12 08:11:05,519 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:05,520 [main:28] - Try â„–672 of 808
2021-03-12 08:11:05,531 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:11:05,531 [main:28] - Try â„–673 of 808
2021-03-12 08:11:05,542 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-12 08:11:05,542 [main:28] - Try â„–674 of 808
2021-03-12 08:11:05,550 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:11:05,550 [main:66] - Compilation checking started
2021-03-12 08:11:05,686 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(o: Any): Ty0 = f()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:05,686 [main:28] - Try â„–675 of 808
2021-03-12 08:11:05,693 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:05,693 [main:28] - Try â„–676 of 808
2021-03-12 08:11:05,695 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-12 08:11:05,695 [main:66] - Compilation checking started
2021-03-12 08:11:05,696 [main:68] - Already checked
2021-03-12 08:11:05,696 [main:28] - Try â„–677 of 808
2021-03-12 08:11:05,704 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:05,704 [main:66] - Compilation checking started
2021-03-12 08:11:05,833 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = compare(value1, value2)

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:05,834 [main:28] - Try â„–678 of 808
2021-03-12 08:11:05,848 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-12 08:11:05,848 [main:28] - Try â„–679 of 808
2021-03-12 08:11:05,855 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:05,855 [main:28] - Try â„–680 of 808
2021-03-12 08:11:05,867 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:05,867 [main:28] - Try â„–681 of 808
2021-03-12 08:11:05,876 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:05,876 [main:28] - Try â„–682 of 808
2021-03-12 08:11:05,894 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:11:05,894 [main:28] - Try â„–683 of 808
2021-03-12 08:11:05,897 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:05,897 [main:28] - Try â„–684 of 808
2021-03-12 08:11:05,908 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:11:05,908 [main:28] - Try â„–685 of 808
2021-03-12 08:11:05,917 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:05,917 [main:28] - Try â„–686 of 808
2021-03-12 08:11:05,931 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:05,931 [main:28] - Try â„–687 of 808
2021-03-12 08:11:05,938 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:05,938 [main:28] - Try â„–688 of 808
2021-03-12 08:11:05,946 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:05,946 [main:28] - Try â„–689 of 808
2021-03-12 08:11:05,956 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:05,956 [main:28] - Try â„–690 of 808
2021-03-12 08:11:05,966 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:05,967 [main:28] - Try â„–691 of 808
2021-03-12 08:11:05,970 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:05,970 [main:28] - Try â„–692 of 808
2021-03-12 08:11:05,975 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:05,975 [main:28] - Try â„–693 of 808
2021-03-12 08:11:05,978 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:05,978 [main:66] - Compilation checking started
2021-03-12 08:11:06,105 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(result: () -> Ty0): Ty0 = f()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:06,106 [main:28] - Try â„–694 of 808
2021-03-12 08:11:06,115 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:06,116 [main:28] - Try â„–695 of 808
2021-03-12 08:11:06,129 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-12 08:11:06,129 [main:28] - Try â„–696 of 808
2021-03-12 08:11:06,137 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:06,138 [main:28] - Try â„–697 of 808
2021-03-12 08:11:06,142 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:06,142 [main:66] - Compilation checking started
2021-03-12 08:11:06,270 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(size: () -> Ty0): Ty0 = f()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:06,270 [main:28] - Try â„–698 of 808
2021-03-12 08:11:06,285 [main:28] - Try â„–699 of 808
2021-03-12 08:11:06,290 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:06,290 [main:28] - Try â„–700 of 808
2021-03-12 08:11:06,305 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:06,305 [main:28] - Try â„–701 of 808
2021-03-12 08:11:06,319 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:06,319 [main:28] - Try â„–702 of 808
2021-03-12 08:11:06,329 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:06,329 [main:28] - Try â„–703 of 808
2021-03-12 08:11:06,341 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:06,342 [main:28] - Try â„–704 of 808
2021-03-12 08:11:06,352 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:06,352 [main:28] - Try â„–705 of 808
2021-03-12 08:11:06,361 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:06,361 [main:28] - Try â„–706 of 808
2021-03-12 08:11:06,371 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-12 08:11:06,371 [main:28] - Try â„–707 of 808
2021-03-12 08:11:06,383 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:06,383 [main:28] - Try â„–708 of 808
2021-03-12 08:11:06,394 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:11:06,394 [main:28] - Try â„–709 of 808
2021-03-12 08:11:06,405 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:11:06,406 [main:28] - Try â„–710 of 808
2021-03-12 08:11:06,412 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:06,412 [main:28] - Try â„–711 of 808
2021-03-12 08:11:06,426 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-12 08:11:06,426 [main:28] - Try â„–712 of 808
2021-03-12 08:11:06,429 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:06,430 [main:28] - Try â„–713 of 808
2021-03-12 08:11:06,443 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:06,443 [main:28] - Try â„–714 of 808
2021-03-12 08:11:06,452 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:06,452 [main:28] - Try â„–715 of 808
2021-03-12 08:11:06,456 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:06,456 [main:28] - Try â„–716 of 808
2021-03-12 08:11:06,472 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:11:06,473 [main:28] - Try â„–717 of 808
2021-03-12 08:11:06,479 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:06,479 [main:28] - Try â„–718 of 808
2021-03-12 08:11:06,495 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:11:06,495 [main:66] - Compilation checking started
2021-03-12 08:11:06,639 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { i ->
        Data(Array(4) { j ->
            (i + j).toUInt()
        })
    }

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:06,639 [main:28] - Try â„–719 of 808
2021-03-12 08:11:06,652 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:06,652 [main:28] - Try â„–720 of 808
2021-03-12 08:11:06,657 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:06,657 [main:28] - Try â„–721 of 808
2021-03-12 08:11:06,667 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:06,667 [main:28] - Try â„–722 of 808
2021-03-12 08:11:06,679 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:11:06,679 [main:28] - Try â„–723 of 808
2021-03-12 08:11:06,692 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:06,693 [main:28] - Try â„–724 of 808
2021-03-12 08:11:06,703 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:06,704 [main:28] - Try â„–725 of 808
2021-03-12 08:11:06,713 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:06,713 [main:28] - Try â„–726 of 808
2021-03-12 08:11:06,723 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:11:06,724 [main:28] - Try â„–727 of 808
2021-03-12 08:11:06,735 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:11:06,735 [main:28] - Try â„–728 of 808
2021-03-12 08:11:06,747 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:06,747 [main:28] - Try â„–729 of 808
2021-03-12 08:11:06,757 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:06,757 [main:66] - Compilation checking started
2021-03-12 08:11:06,875 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(f: () -> Ty0): String = f()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:06,875 [main:28] - Try â„–730 of 808
2021-03-12 08:11:06,878 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:06,878 [main:28] - Try â„–731 of 808
2021-03-12 08:11:06,892 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:06,892 [main:28] - Try â„–732 of 808
2021-03-12 08:11:06,902 [main:33] - Trying to replace Element(OBJECT_DECLARATION) on Element(OBJECT_DECLARATION)
2021-03-12 08:11:06,902 [main:66] - Compilation checking started
2021-03-12 08:11:06,903 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:11:06,903 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

private fun foo(s: String) {
    }

object : Base<Unit> {
    override suspend fun generic(): Unit {
        c();
        {}()
    }
}

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:06,903 [main:28] - Try â„–733 of 808
2021-03-12 08:11:06,919 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:11:06,920 [main:28] - Try â„–734 of 808
2021-03-12 08:11:06,923 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:06,923 [main:28] - Try â„–735 of 808
2021-03-12 08:11:06,929 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:06,930 [main:28] - Try â„–736 of 808
2021-03-12 08:11:06,946 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-12 08:11:06,946 [main:28] - Try â„–737 of 808
2021-03-12 08:11:06,955 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:06,955 [main:28] - Try â„–738 of 808
2021-03-12 08:11:06,960 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:06,960 [main:28] - Try â„–739 of 808
2021-03-12 08:11:06,969 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:06,969 [main:28] - Try â„–740 of 808
2021-03-12 08:11:06,980 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:11:06,980 [main:28] - Try â„–741 of 808
2021-03-12 08:11:06,986 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:06,986 [main:28] - Try â„–742 of 808
2021-03-12 08:11:06,994 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:06,994 [main:28] - Try â„–743 of 808
2021-03-12 08:11:06,999 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-12 08:11:07,000 [main:66] - Compilation checking started
2021-03-12 08:11:07,117 [main:49] - Result = false
Text:
fun test1() {}

open fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:07,117 [main:28] - Try â„–744 of 808
2021-03-12 08:11:07,135 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:11:07,136 [main:28] - Try â„–745 of 808
2021-03-12 08:11:07,148 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:07,148 [main:28] - Try â„–746 of 808
2021-03-12 08:11:07,158 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:07,159 [main:28] - Try â„–747 of 808
2021-03-12 08:11:07,169 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:07,169 [main:28] - Try â„–748 of 808
2021-03-12 08:11:07,183 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-12 08:11:07,184 [main:28] - Try â„–749 of 808
2021-03-12 08:11:07,194 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:07,194 [main:28] - Try â„–750 of 808
2021-03-12 08:11:07,198 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:07,198 [main:28] - Try â„–751 of 808
2021-03-12 08:11:07,205 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:07,205 [main:28] - Try â„–752 of 808
2021-03-12 08:11:07,216 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:11:07,216 [main:28] - Try â„–753 of 808
2021-03-12 08:11:07,229 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:07,229 [main:28] - Try â„–754 of 808
2021-03-12 08:11:07,238 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:07,238 [main:28] - Try â„–755 of 808
2021-03-12 08:11:07,241 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:07,242 [main:66] - Compilation checking started
2021-03-12 08:11:07,370 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(Companion: () -> Ty0): Ty0 = f()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:07,370 [main:28] - Try â„–756 of 808
2021-03-12 08:11:07,375 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:07,375 [main:28] - Try â„–757 of 808
2021-03-12 08:11:07,390 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:07,390 [main:28] - Try â„–758 of 808
2021-03-12 08:11:07,401 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:07,401 [main:28] - Try â„–759 of 808
2021-03-12 08:11:07,412 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:11:07,412 [main:28] - Try â„–760 of 808
2021-03-12 08:11:07,427 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:07,427 [main:28] - Try â„–761 of 808
2021-03-12 08:11:07,445 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:11:07,445 [main:28] - Try â„–762 of 808
2021-03-12 08:11:07,459 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-12 08:11:07,459 [main:28] - Try â„–763 of 808
2021-03-12 08:11:07,476 [main:28] - Try â„–764 of 808
2021-03-12 08:11:07,480 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:07,480 [main:28] - Try â„–765 of 808
2021-03-12 08:11:07,487 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:07,487 [main:28] - Try â„–766 of 808
2021-03-12 08:11:07,501 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-12 08:11:07,501 [main:28] - Try â„–767 of 808
2021-03-12 08:11:07,513 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:07,513 [main:28] - Try â„–768 of 808
2021-03-12 08:11:07,526 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:07,526 [main:28] - Try â„–769 of 808
2021-03-12 08:11:07,533 [main:33] - Trying to replace Element(TYPE_PARAMETER) on Element(TYPE_PARAMETER)
2021-03-12 08:11:07,533 [main:66] - Compilation checking started
2021-03-12 08:11:07,533 [main:68] - Already checked
2021-03-12 08:11:07,533 [main:49] - Result = false
Text:
fun test1() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <T> fu1(f: () -> Ty0): Ty0 = f()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:07,533 [main:28] - Try â„–770 of 808
2021-03-12 08:11:07,546 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:07,546 [main:28] - Try â„–771 of 808
2021-03-12 08:11:07,558 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:07,558 [main:28] - Try â„–772 of 808
2021-03-12 08:11:07,564 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:07,565 [main:28] - Try â„–773 of 808
2021-03-12 08:11:07,571 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:07,572 [main:28] - Try â„–774 of 808
2021-03-12 08:11:07,575 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:07,575 [main:66] - Compilation checking started
2021-03-12 08:11:07,745 [main:53] - Result = true
Text:
fun vk() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:07,746 [main:28] - Try â„–775 of 808
2021-03-12 08:11:07,749 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:07,749 [main:28] - Try â„–776 of 808
2021-03-12 08:11:07,756 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:07,756 [main:28] - Try â„–777 of 808
2021-03-12 08:11:07,763 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:07,764 [main:28] - Try â„–778 of 808
2021-03-12 08:11:07,772 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:07,773 [main:28] - Try â„–779 of 808
2021-03-12 08:11:07,782 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:07,783 [main:66] - Compilation checking started
2021-03-12 08:11:07,906 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> fu1(f: () -> Ty0): String = f()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:07,906 [main:28] - Try â„–780 of 808
2021-03-12 08:11:07,913 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:07,913 [main:28] - Try â„–781 of 808
2021-03-12 08:11:07,918 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:07,919 [main:28] - Try â„–782 of 808
2021-03-12 08:11:07,936 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-12 08:11:07,937 [main:28] - Try â„–783 of 808
2021-03-12 08:11:07,939 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-12 08:11:07,939 [main:66] - Compilation checking started
2021-03-12 08:11:07,939 [main:68] - Already checked
2021-03-12 08:11:07,939 [main:28] - Try â„–784 of 808
2021-03-12 08:11:07,946 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:07,946 [main:28] - Try â„–785 of 808
2021-03-12 08:11:07,961 [main:33] - Trying to replace Element(SHORT_STRING_TEMPLATE_ENTRY) on Element(SHORT_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:07,961 [main:28] - Try â„–786 of 808
2021-03-12 08:11:07,971 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:07,971 [main:28] - Try â„–787 of 808
2021-03-12 08:11:07,989 [main:28] - Try â„–788 of 808
2021-03-12 08:11:08,005 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-12 08:11:08,006 [main:28] - Try â„–789 of 808
2021-03-12 08:11:08,015 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:08,015 [main:28] - Try â„–790 of 808
2021-03-12 08:11:08,032 [main:28] - Try â„–791 of 808
2021-03-12 08:11:08,041 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:08,041 [main:28] - Try â„–792 of 808
2021-03-12 08:11:08,045 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:08,045 [main:28] - Try â„–793 of 808
2021-03-12 08:11:08,048 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:08,049 [main:66] - Compilation checking started
2021-03-12 08:11:08,210 [main:53] - Result = true
Text:
fun vk() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Ty0 = f()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:08,210 [main:28] - Try â„–794 of 808
2021-03-12 08:11:08,223 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-12 08:11:08,223 [main:28] - Try â„–795 of 808
2021-03-12 08:11:08,227 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:08,227 [main:28] - Try â„–796 of 808
2021-03-12 08:11:08,238 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-12 08:11:08,238 [main:28] - Try â„–797 of 808
2021-03-12 08:11:08,250 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:08,250 [main:28] - Try â„–798 of 808
2021-03-12 08:11:08,258 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:08,258 [main:28] - Try â„–799 of 808
2021-03-12 08:11:08,268 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:08,268 [main:28] - Try â„–800 of 808
2021-03-12 08:11:08,272 [main:33] - Trying to replace Element(CLASS_BODY) on Element(CLASS_BODY)
2021-03-12 08:11:08,273 [main:28] - Try â„–801 of 808
2021-03-12 08:11:08,289 [main:33] - Trying to replace Element(CONDITION) on Element(CONDITION)
2021-03-12 08:11:08,289 [main:28] - Try â„–802 of 808
2021-03-12 08:11:08,299 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:08,299 [main:28] - Try â„–803 of 808
2021-03-12 08:11:08,312 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:08,313 [main:28] - Try â„–804 of 808
2021-03-12 08:11:08,318 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:08,319 [main:66] - Compilation checking started
2021-03-12 08:11:08,450 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>?) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: String): Ty0 = f()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:08,450 [main:28] - Try â„–805 of 808
2021-03-12 08:11:08,455 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:08,456 [main:28] - Try â„–806 of 808
2021-03-12 08:11:08,459 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:08,459 [main:28] - Try â„–807 of 808
2021-03-12 08:11:08,468 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:08,468 [main:28] - Try â„–808 of 808
2021-03-12 08:11:08,487 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:08,570 [main:50] - replacing coll: Collection<*>? Collection<*>?
2021-03-12 08:11:08,570 [main:54] - Getting value of type Collection<*>?
2021-03-12 08:11:08,639 [main:302] - generating value of type = Collection<*> false depth = 0
2021-03-12 08:11:08,712 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(): Collection<*> = TODO()
2021-03-12 08:11:08,713 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(): Collection<*> = TODO()
2021-03-12 08:11:08,783 [main:95] - GENERATED = mutableSetOf<Any?>()
2021-03-12 08:11:08,784 [main:58] - GENERATED VALUE OF TYPE Collection<*>? = mutableSetOf<Any?>()
2021-03-12 08:11:08,784 [main:61] - GENERATED IS CALL =true
2021-03-12 08:11:09,015 [main:67] - randomType = HashMap<contract, contract>
2021-03-12 08:11:09,084 [main:302] - generating value of type = HashMap<contract, contract> false depth = 0
2021-03-12 08:11:09,157 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<contract, contract> = TODO()
2021-03-12 08:11:09,158 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<contract, contract> = TODO()
2021-03-12 08:11:09,228 [main:95] - GENERATED = linkedMapOf<contract, contract>()
2021-03-12 08:11:09,378 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:11:09,379 [main:66] - Compilation checking started
2021-03-12 08:11:09,656 [main:53] - Result = true
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Any?>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Ty0 = f()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:09,656 [main:302] - generating value of type = Function0<Ty0> false depth = 0
2021-03-12 08:11:09,656 [main:302] - generating value of type = Ty0 false depth = 1
2021-03-12 08:11:09,660 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:11:09,660 [main:66] - Compilation checking started
2021-03-12 08:11:09,827 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Any?>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0 = { }{ }): Ty0 = f()

private fun foo(s: String) {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:09,828 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:11:09,828 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:11:09,828 [main:66] - Compilation checking started
2021-03-12 08:11:10,069 [main:53] - Result = true
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Any?>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:10,076 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:10,077 [main:66] - Compilation checking started
2021-03-12 08:11:10,246 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Any?>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): Byte {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:10,246 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:10,247 [main:66] - Compilation checking started
2021-03-12 08:11:10,428 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Any?>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : UByte
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:10,429 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:10,429 [main:66] - Compilation checking started
2021-03-12 08:11:10,588 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Any?>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: Collection<Boolean>): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:10,589 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:10,590 [main:66] - Compilation checking started
2021-03-12 08:11:10,736 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Any?>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> List<ULong>): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:10,736 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:10,736 [main:66] - Compilation checking started
2021-03-12 08:11:10,737 [main:68] - Already checked
2021-03-12 08:11:10,737 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:10,737 [main:66] - Compilation checking started
2021-03-12 08:11:10,886 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Any?>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: UInt
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:10,886 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:10,886 [main:66] - Compilation checking started
2021-03-12 08:11:11,019 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Any?>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Ty0 = f()

private fun foo(s: Int? = "vdpgp") {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:11,021 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:11,021 [main:66] - Compilation checking started
2021-03-12 08:11:11,191 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Any?>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> HashMap<HashMap<ArrayList<Boolean>, Long>, UByte>): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:11,192 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:11,192 [main:66] - Compilation checking started
2021-03-12 08:11:11,353 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Any?>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Ty0 = f()

private fun foo(s: UInt = "vdpgp") {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:11,355 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:11,355 [main:66] - Compilation checking started
2021-03-12 08:11:11,502 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Any?>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): Sequence<LinkedHashSet<Boolean>> {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:11,504 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:11,504 [main:66] - Compilation checking started
2021-03-12 08:11:11,644 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Any?>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Triple<Char, ULong, Byte>): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:11,646 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:11,646 [main:66] - Compilation checking started
2021-03-12 08:11:11,820 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Any?>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: LinkedHashMap<Collection<String>, HashMap<Long, UByte>>): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:11,820 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:11,821 [main:66] - Compilation checking started
2021-03-12 08:11:11,971 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Any?>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Int? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:11,972 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:11,972 [main:66] - Compilation checking started
2021-03-12 08:11:12,104 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Any?>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: Array<Long>): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:12,104 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:12,104 [main:66] - Compilation checking started
2021-03-12 08:11:12,241 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Any?>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): Int? {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:12,241 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:12,242 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:12,242 [main:66] - Compilation checking started
2021-03-12 08:11:12,395 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Any?>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : LinkedHashSet<List<Boolean>>
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:12,396 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:12,396 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:12,396 [main:66] - Compilation checking started
2021-03-12 08:11:12,628 [main:53] - Result = true
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:12,628 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:12,629 [main:66] - Compilation checking started
2021-03-12 08:11:12,782 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: Ty0): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:12,783 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:12,783 [main:66] - Compilation checking started
2021-03-12 08:11:12,930 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: Byte): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:12,932 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:12,932 [main:66] - Compilation checking started
2021-03-12 08:11:13,087 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): LinkedHashMap<String, HashMap<Boolean, UByte>> = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:13,088 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:13,088 [main:66] - Compilation checking started
2021-03-12 08:11:13,088 [main:68] - Already checked
2021-03-12 08:11:13,088 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:13,088 [main:66] - Compilation checking started
2021-03-12 08:11:13,225 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Ty0 = f()

private fun foo(s: UShort = "vdpgp") {
    }

object contract {
        val p: Int
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:13,225 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:13,225 [main:66] - Compilation checking started
2021-03-12 08:11:13,447 [main:53] - Result = true
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:13,448 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:13,448 [main:66] - Compilation checking started
2021-03-12 08:11:13,587 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Sequence<ArrayDeque<UByte>>): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:13,588 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:13,588 [main:66] - Compilation checking started
2021-03-12 08:11:13,726 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Ty0 = f()

private fun foo(s: HashSet<Array<Collection<String>>> = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:13,726 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:13,726 [main:66] - Compilation checking started
2021-03-12 08:11:13,861 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Int? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:13,861 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:13,861 [main:66] - Compilation checking started
2021-03-12 08:11:14,001 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Ty0 = f()

private fun foo(s: Ty0 = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:14,001 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:14,001 [main:66] - Compilation checking started
2021-03-12 08:11:14,140 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: String = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:14,141 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:14,141 [main:66] - Compilation checking started
2021-03-12 08:11:14,287 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> List<Short>): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:14,287 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:14,287 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:14,287 [main:66] - Compilation checking started
2021-03-12 08:11:14,429 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: () -> Ty0 = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:14,429 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:14,430 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:14,430 [main:66] - Compilation checking started
2021-03-12 08:11:14,569 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: Array<Sequence<MutableMap<Array<ULong>, Array<Long>>>>): Ty0 = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:14,569 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:14,569 [main:66] - Compilation checking started
2021-03-12 08:11:14,790 [main:53] - Result = true
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:14,792 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:14,793 [main:66] - Compilation checking started
2021-03-12 08:11:14,949 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: HashSet<Map<Triple<Map<UByte, Long>, Set<List<LinkedHashSet<HashSet<Char>>>>, Array<Map<Map<Char, ArrayList<Set<Map<MutableMap<Double, Float>, String>>>>, Long>>>, List<Double>>> = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Ty0): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:14,950 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:14,950 [main:66] - Compilation checking started
2021-03-12 08:11:15,172 [main:53] - Result = true
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:15,174 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:15,175 [main:66] - Compilation checking started
2021-03-12 08:11:15,332 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: Triple<List<Triple<MutableMap<Array<Triple<HashSet<Char>, Double, MutableMap<List<Byte>, Collection<Map<ArrayList<Boolean>, Triple<UInt, Int, List<Sequence<MutableMap<Short, Int>>>>>>>>>, Boolean>, Short, ULong>>, Array<Double>, HashMap<Long, UByte>> = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:15,333 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:15,333 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:15,333 [main:66] - Compilation checking started
2021-03-12 08:11:15,497 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Int = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:15,497 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:15,498 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:15,498 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:15,499 [main:66] - Compilation checking started
2021-03-12 08:11:15,638 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: String): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:15,640 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:15,641 [main:66] - Compilation checking started
2021-03-12 08:11:15,805 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : ArrayDeque<Collection<Triple<MutableMap<List<Pair<Sequence<Short>, Byte>>, Boolean>, Long, Triple<Collection<List<UShort>>, Char, Set<MutableMap<Char, Triple<LinkedHashMap<Int, UByte>, UShort, LinkedHashSet<Pair<ULong, UInt>>>>>>>>>
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:15,806 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:15,806 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:15,806 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:15,806 [main:66] - Compilation checking started
2021-03-12 08:11:15,806 [main:68] - Already checked
2021-03-12 08:11:15,806 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:15,806 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:15,806 [main:66] - Compilation checking started
2021-03-12 08:11:15,806 [main:68] - Already checked
2021-03-12 08:11:15,807 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:15,807 [main:66] - Compilation checking started
2021-03-12 08:11:15,966 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : HashMap<HashMap<LinkedHashSet<Array<LinkedHashSet<Sequence<Set<MutableMap<Long, UShort>>>>>>, Short>, Long>
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:15,966 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:15,967 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:15,967 [main:66] - Compilation checking started
2021-03-12 08:11:16,108 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Ty0 = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:16,108 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:16,108 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:16,108 [main:66] - Compilation checking started
2021-03-12 08:11:16,242 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Byte = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:16,242 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:16,242 [main:66] - Compilation checking started
2021-03-12 08:11:16,395 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Long
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:16,395 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:16,395 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:16,395 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:16,396 [main:66] - Compilation checking started
2021-03-12 08:11:16,536 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : () -> Map<List<Map<UInt, ULong>>, Double>
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:16,537 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:16,537 [main:66] - Compilation checking started
2021-03-12 08:11:16,668 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: Any?): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:16,668 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:16,669 [main:66] - Compilation checking started
2021-03-12 08:11:16,817 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: Map<Long, Boolean> = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:16,817 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:16,818 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:16,818 [main:66] - Compilation checking started
2021-03-12 08:11:16,818 [main:68] - Already checked
2021-03-12 08:11:16,818 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: String): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:16,818 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:16,818 [main:66] - Compilation checking started
2021-03-12 08:11:16,950 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: Int): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:16,951 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:16,951 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:16,951 [main:66] - Compilation checking started
2021-03-12 08:11:17,088 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: List<UInt>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:17,089 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:17,089 [main:66] - Compilation checking started
2021-03-12 08:11:17,221 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: String = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:17,221 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:17,222 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:17,222 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:17,222 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:17,222 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:17,222 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:17,222 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:17,222 [main:66] - Compilation checking started
2021-03-12 08:11:17,362 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Byte
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:17,363 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:17,363 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:17,363 [main:66] - Compilation checking started
2021-03-12 08:11:17,505 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: HashMap<Boolean, Double> = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:17,505 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:17,505 [main:66] - Compilation checking started
2021-03-12 08:11:17,638 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Char = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:17,638 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:17,639 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:17,639 [main:66] - Compilation checking started
2021-03-12 08:11:17,789 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Collection<*>?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:17,789 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:17,789 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:17,789 [main:66] - Compilation checking started
2021-03-12 08:11:17,931 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: Int?): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:17,931 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:17,935 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:17,935 [main:66] - Compilation checking started
2021-03-12 08:11:18,108 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: MutableMap<ArrayDeque<Short>, ArrayDeque<Pair<Int, LinkedHashSet<Triple<HashMap<Double, LinkedHashMap<Collection<Short>, Triple<Sequence<LinkedHashMap<Short, ArrayDeque<Char>>>, Pair<UInt, Set<LinkedHashSet<HashSet<ArrayList<List<ArrayList<UInt>>>>>>>, UShort>>>, Short, LinkedHashMap<Byte, Map<LinkedHashSet<Array<Long>>, HashMap<HashSet<Double>, Float>>>>>>>> = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:18,108 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:18,108 [main:66] - Compilation checking started
2021-03-12 08:11:18,108 [main:68] - Already checked
2021-03-12 08:11:18,109 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: Int?): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:18,109 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:18,109 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:18,109 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:18,109 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:18,109 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:18,109 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:18,109 [main:66] - Compilation checking started
2021-03-12 08:11:18,339 [main:53] - Result = true
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:18,339 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:18,340 [main:66] - Compilation checking started
2021-03-12 08:11:18,482 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Array<Short> = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:18,482 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:18,482 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:18,482 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:18,482 [main:66] - Compilation checking started
2021-03-12 08:11:18,614 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: Ty0): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:18,615 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:18,615 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:18,615 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:18,615 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:18,616 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:18,616 [main:66] - Compilation checking started
2021-03-12 08:11:18,774 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: LinkedHashMap<Long, UInt> = "vdpgp") {
    }

object contract {
        val p: Short
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:18,775 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:18,775 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:18,776 [main:66] - Compilation checking started
2021-03-12 08:11:18,986 [main:53] - Result = true
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "fail j = $j i = $i"
}


2021-03-12 08:11:18,986 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:18,994 [main:26] - Trying to change some nodes to nodes from other programs 858 times
2021-03-12 08:11:18,994 [main:28] - Try â„–0 of 858
2021-03-12 08:11:19,002 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:19,002 [main:28] - Try â„–1 of 858
2021-03-12 08:11:19,015 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:19,015 [main:66] - Compilation checking started
2021-03-12 08:11:19,222 [main:53] - Result = true
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "Fail $j i = $i"
}


2021-03-12 08:11:19,222 [main:28] - Try â„–2 of 858
2021-03-12 08:11:19,231 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:19,231 [main:66] - Compilation checking started
2021-03-12 08:11:19,389 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <Ty0> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (A == 10 && 11 == i) "OK" else "Fail $j i = $i"
}


2021-03-12 08:11:19,390 [main:28] - Try â„–3 of 858
2021-03-12 08:11:19,398 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:19,399 [main:28] - Try â„–4 of 858
2021-03-12 08:11:19,402 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:19,402 [main:66] - Compilation checking started
2021-03-12 08:11:19,613 [main:53] - Result = true
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "Fail $j i = $i"
}


2021-03-12 08:11:19,613 [main:28] - Try â„–5 of 858
2021-03-12 08:11:19,622 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:19,622 [main:66] - Compilation checking started
2021-03-12 08:11:19,755 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<List<Map<UInt, ULong>>, Double>): Any? = hashCode()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "Fail $j i = $i"
}


2021-03-12 08:11:19,755 [main:28] - Try â„–6 of 858
2021-03-12 08:11:19,770 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:19,770 [main:28] - Try â„–7 of 858
2021-03-12 08:11:19,786 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-12 08:11:19,787 [main:28] - Try â„–8 of 858
2021-03-12 08:11:19,796 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:19,796 [main:66] - Compilation checking started
2021-03-12 08:11:20,009 [main:53] - Result = true
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<List<Map<CharSequence, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "Fail $j i = $i"
}


2021-03-12 08:11:20,010 [main:28] - Try â„–9 of 858
2021-03-12 08:11:20,013 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:20,013 [main:66] - Compilation checking started
2021-03-12 08:11:20,167 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<List<Map<CharSequence, ULong>>, Double>): Foo? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (j == 10 && 11 == i) "OK" else "Fail $j i = $i"
}


2021-03-12 08:11:20,167 [main:28] - Try â„–10 of 858
2021-03-12 08:11:20,183 [main:33] - Trying to replace PsiElement(QUEST) on PsiElement(QUEST)
2021-03-12 08:11:20,183 [main:28] - Try â„–11 of 858
2021-03-12 08:11:20,187 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:20,187 [main:66] - Compilation checking started
2021-03-12 08:11:20,392 [main:53] - Result = true
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<List<Map<CharSequence, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (i == 10 && 11 == i) "OK" else "Fail $j i = $i"
}


2021-03-12 08:11:20,392 [main:28] - Try â„–12 of 858
2021-03-12 08:11:20,403 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:20,404 [main:66] - Compilation checking started
2021-03-12 08:11:20,542 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<List<Map<CharSequence, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : R
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (i == 10 && 11 == i) "OK" else "Fail $j i = $i"
}


2021-03-12 08:11:20,543 [main:28] - Try â„–13 of 858
2021-03-12 08:11:20,546 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:20,546 [main:66] - Compilation checking started
2021-03-12 08:11:20,693 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<List<Map<CharSequence, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val index = i++

    return if (i == 10 && 11 == i) "OK" else "Fail $j i = $i"
}


2021-03-12 08:11:20,693 [main:28] - Try â„–14 of 858
2021-03-12 08:11:20,703 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:20,703 [main:66] - Compilation checking started
2021-03-12 08:11:20,842 [main:49] - Result = false
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<List<x4<CharSequence, ULong>>, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (i == 10 && 11 == i) "OK" else "Fail $j i = $i"
}


2021-03-12 08:11:20,842 [main:28] - Try â„–15 of 858
2021-03-12 08:11:20,847 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:20,848 [main:66] - Compilation checking started
2021-03-12 08:11:21,076 [main:53] - Result = true
Text:
fun vk() {}

inline fun A(coll: Collection<*>? = mutableSetOf<Int>()) = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (i == 10 && 11 == i) "OK" else "Fail $j i = $i"
}


2021-03-12 08:11:21,076 [main:28] - Try â„–16 of 858
2021-03-12 08:11:21,080 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:21,081 [main:66] - Compilation checking started
2021-03-12 08:11:21,255 [main:53] - Result = true
Text:
fun vk() {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (i == 10 && 11 == i) "OK" else "Fail $j i = $i"
}


2021-03-12 08:11:21,255 [main:28] - Try â„–17 of 858
2021-03-12 08:11:21,261 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:21,261 [main:28] - Try â„–18 of 858
2021-03-12 08:11:21,265 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:21,265 [main:28] - Try â„–19 of 858
2021-03-12 08:11:21,271 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:21,271 [main:28] - Try â„–20 of 858
2021-03-12 08:11:21,278 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:11:21,278 [main:66] - Compilation checking started
2021-03-12 08:11:21,279 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:11:21,279 [main:49] - Result = false
Text:
fun vk() {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun foo(s: String = "vdpgp") it.name == "result"

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (i == 10 && 11 == i) "OK" else "Fail $j i = $i"
}


2021-03-12 08:11:21,279 [main:28] - Try â„–21 of 858
2021-03-12 08:11:21,290 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:21,290 [main:28] - Try â„–22 of 858
2021-03-12 08:11:21,309 [main:28] - Try â„–23 of 858
2021-03-12 08:11:21,325 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-12 08:11:21,325 [main:28] - Try â„–24 of 858
2021-03-12 08:11:21,329 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:21,329 [main:66] - Compilation checking started
2021-03-12 08:11:21,461 [main:49] - Result = false
Text:
fun vk() {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (i == 10 && 11 == i) "OK" else "Fail $Class i = $i"
}


2021-03-12 08:11:21,461 [main:28] - Try â„–25 of 858
2021-03-12 08:11:21,470 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:21,470 [main:28] - Try â„–26 of 858
2021-03-12 08:11:21,479 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:11:21,480 [main:66] - Compilation checking started
2021-03-12 08:11:21,608 [main:49] - Result = false
Text:
fun vk() {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
                result += "O"
            }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (i == 10 && 11 == i) "OK" else "Fail $j i = $i"
}


2021-03-12 08:11:21,608 [main:28] - Try â„–27 of 858
2021-03-12 08:11:21,613 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:21,613 [main:66] - Compilation checking started
2021-03-12 08:11:21,741 [main:49] - Result = false
Text:
fun vk() {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun foo(s: String = "vdpgp") {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (i == 10 && state = 2) "OK" else "Fail $j i = $i"
}


2021-03-12 08:11:21,742 [main:28] - Try â„–28 of 858
2021-03-12 08:11:21,750 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:11:21,751 [main:66] - Compilation checking started
2021-03-12 08:11:21,908 [main:53] - Result = true
Text:
fun vk() {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun foo(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (i == 10 && 11 == i) "OK" else "Fail $j i = $i"
}


2021-03-12 08:11:21,908 [main:28] - Try â„–29 of 858
2021-03-12 08:11:21,915 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:11:21,915 [main:66] - Compilation checking started
2021-03-12 08:11:22,051 [main:49] - Result = false
Text:
fun vk() {}

inline fun A() = { c = java.lang.Integer(1)}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun foo(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (i == 10 && 11 == i) "OK" else "Fail $j i = $i"
}


2021-03-12 08:11:22,051 [main:28] - Try â„–30 of 858
2021-03-12 08:11:22,064 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:22,064 [main:66] - Compilation checking started
2021-03-12 08:11:22,198 [main:49] - Result = false
Text:
fun vk() {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun foo(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (i == 10 && 11 == i) "OK" else "Fail $jK$i"
}


2021-03-12 08:11:22,199 [main:28] - Try â„–31 of 858
2021-03-12 08:11:22,211 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-12 08:11:22,211 [main:28] - Try â„–32 of 858
2021-03-12 08:11:22,217 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:22,218 [main:66] - Compilation checking started
2021-03-12 08:11:22,355 [main:49] - Result = false
Text:
fun vk() {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: UInt): Any? = f()

private fun foo(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (i == 10 && 11 == i) "OK" else "Fail $j i = $i"
}


2021-03-12 08:11:22,355 [main:28] - Try â„–33 of 858
2021-03-12 08:11:22,360 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:22,360 [main:28] - Try â„–34 of 858
2021-03-12 08:11:22,369 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:22,369 [main:28] - Try â„–35 of 858
2021-03-12 08:11:22,378 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:22,379 [main:66] - Compilation checking started
2021-03-12 08:11:22,525 [main:49] - Result = false
Text:
fun vk() {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, AC>): Any? = f()

private fun foo(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (i == 10 && 11 == i) "OK" else "Fail $j i = $i"
}


2021-03-12 08:11:22,526 [main:28] - Try â„–36 of 858
2021-03-12 08:11:22,540 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-12 08:11:22,540 [main:66] - Compilation checking started
2021-03-12 08:11:22,696 [main:53] - Result = true
Text:
fun vk() {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun foo(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (i == 10 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:22,696 [main:28] - Try â„–37 of 858
2021-03-12 08:11:22,700 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:22,700 [main:28] - Try â„–38 of 858
2021-03-12 08:11:22,707 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:22,707 [main:28] - Try â„–39 of 858
2021-03-12 08:11:22,716 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:22,717 [main:66] - Compilation checking started
2021-03-12 08:11:22,854 [main:49] - Result = false
Text:
fun vk() {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun foo(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (i == 10 && 11 == i) return "fail" else "Fail $Content i = $i"
}


2021-03-12 08:11:22,854 [main:28] - Try â„–40 of 858
2021-03-12 08:11:22,868 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:22,868 [main:28] - Try â„–41 of 858
2021-03-12 08:11:22,872 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:22,872 [main:28] - Try â„–42 of 858
2021-03-12 08:11:22,882 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:22,882 [main:66] - Compilation checking started
2021-03-12 08:11:23,008 [main:49] - Result = false
Text:
fun vk() {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): T? = f()

private fun foo(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (i == 10 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:23,009 [main:28] - Try â„–43 of 858
2021-03-12 08:11:23,021 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:23,022 [main:28] - Try â„–44 of 858
2021-03-12 08:11:23,027 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:23,028 [main:66] - Compilation checking started
2021-03-12 08:11:23,152 [main:49] - Result = false
Text:
fun vk() {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun foo(vararg functions: () -> Any) {
    }

object contract {
        val p: JvmStatic
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (i == 10 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:23,152 [main:28] - Try â„–45 of 858
2021-03-12 08:11:23,166 [main:28] - Try â„–46 of 858
2021-03-12 08:11:23,171 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:23,171 [main:66] - Compilation checking started
2021-03-12 08:11:23,282 [main:49] - Result = false
Text:
fun vk() {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun foo(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (this + "K" && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:23,282 [main:28] - Try â„–47 of 858
2021-03-12 08:11:23,291 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:23,292 [main:66] - Compilation checking started
2021-03-12 08:11:23,292 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:11:23,292 [main:49] - Result = false
Text:
fun vk() {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun foo(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Int
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (i as 10 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:23,292 [main:28] - Try â„–48 of 858
2021-03-12 08:11:23,299 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:23,299 [main:66] - Compilation checking started
2021-03-12 08:11:23,465 [main:53] - Result = true
Text:
fun vk() {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun foo(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (i == 10 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:23,465 [main:28] - Try â„–49 of 858
2021-03-12 08:11:23,475 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-12 08:11:23,476 [main:66] - Compilation checking started
2021-03-12 08:11:23,606 [main:49] - Result = false
Text:
fun vk() {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun foo(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val range = left..right

    return if (i == 10 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:23,606 [main:28] - Try â„–50 of 858
2021-03-12 08:11:23,621 [main:33] - Trying to replace Element(SHORT_STRING_TEMPLATE_ENTRY) on Element(SHORT_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:23,621 [main:66] - Compilation checking started
2021-03-12 08:11:23,752 [main:49] - Result = false
Text:
fun vk() {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun foo(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (i == 10 && 11 == i) return "fail" else "Fail $title i = $i"
}


2021-03-12 08:11:23,752 [main:28] - Try â„–51 of 858
2021-03-12 08:11:23,757 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:23,757 [main:66] - Compilation checking started
2021-03-12 08:11:23,923 [main:53] - Result = true
Text:
fun vk() {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun foo(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:23,923 [main:28] - Try â„–52 of 858
2021-03-12 08:11:23,927 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:23,927 [main:66] - Compilation checking started
2021-03-12 08:11:24,062 [main:49] - Result = false
Text:
fun vk() {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun foo(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == String) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:24,062 [main:28] - Try â„–53 of 858
2021-03-12 08:11:24,077 [main:28] - Try â„–54 of 858
2021-03-12 08:11:24,088 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:24,088 [main:28] - Try â„–55 of 858
2021-03-12 08:11:24,096 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:24,096 [main:28] - Try â„–56 of 858
2021-03-12 08:11:24,099 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:24,100 [main:28] - Try â„–57 of 858
2021-03-12 08:11:24,109 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:11:24,109 [main:28] - Try â„–58 of 858
2021-03-12 08:11:24,113 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:24,113 [main:28] - Try â„–59 of 858
2021-03-12 08:11:24,126 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:24,126 [main:28] - Try â„–60 of 858
2021-03-12 08:11:24,139 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:24,140 [main:28] - Try â„–61 of 858
2021-03-12 08:11:24,151 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:11:24,152 [main:28] - Try â„–62 of 858
2021-03-12 08:11:24,161 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:24,161 [main:28] - Try â„–63 of 858
2021-03-12 08:11:24,166 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:24,166 [main:66] - Compilation checking started
2021-03-12 08:11:24,326 [main:53] - Result = true
Text:
fun vk(size: Int) {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun foo(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:24,326 [main:28] - Try â„–64 of 858
2021-03-12 08:11:24,330 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:24,330 [main:28] - Try â„–65 of 858
2021-03-12 08:11:24,345 [main:28] - Try â„–66 of 858
2021-03-12 08:11:24,348 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:24,348 [main:66] - Compilation checking started
2021-03-12 08:11:24,511 [main:53] - Result = true
Text:
fun vk(size: Int) {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:24,511 [main:28] - Try â„–67 of 858
2021-03-12 08:11:24,520 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-12 08:11:24,520 [main:28] - Try â„–68 of 858
2021-03-12 08:11:24,529 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:24,529 [main:66] - Compilation checking started
2021-03-12 08:11:24,530 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:11:24,530 [main:49] - Result = false
Text:
fun vk(size: Int) {}

inline fun A() = { "FAIL"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 !! i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:24,530 [main:28] - Try â„–69 of 858
2021-03-12 08:11:24,541 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:24,541 [main:28] - Try â„–70 of 858
2021-03-12 08:11:24,554 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:24,554 [main:66] - Compilation checking started
2021-03-12 08:11:24,714 [main:53] - Result = true
Text:
fun vk(size: Int) {}

inline fun A() = { "fail 1"}

public inline fun <String> MyJavaClass(f: () -> Map<Nothing, Double>): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:24,715 [main:28] - Try â„–71 of 858
2021-03-12 08:11:24,718 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:24,718 [main:28] - Try â„–72 of 858
2021-03-12 08:11:24,730 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:11:24,730 [main:28] - Try â„–73 of 858
2021-03-12 08:11:24,734 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:24,734 [main:28] - Try â„–74 of 858
2021-03-12 08:11:24,743 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:24,743 [main:28] - Try â„–75 of 858
2021-03-12 08:11:24,746 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:24,747 [main:66] - Compilation checking started
2021-03-12 08:11:24,904 [main:53] - Result = true
Text:
fun vk(size: Int) {}

inline fun A() = { "fail 1"}

public inline fun <String> foo(f: () -> Map<Nothing, Double>): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:24,904 [main:28] - Try â„–76 of 858
2021-03-12 08:11:24,915 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:24,915 [main:28] - Try â„–77 of 858
2021-03-12 08:11:24,919 [main:33] - Trying to replace Element(CLASS_BODY) on Element(CLASS_BODY)
2021-03-12 08:11:24,919 [main:66] - Compilation checking started
2021-03-12 08:11:25,056 [main:49] - Result = false
Text:
fun vk(size: Int) {}

inline fun A() = { "fail 1"}

public inline fun <String> foo(f: () -> Map<Nothing, Double>): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {

    var prop = this

    operator fun inc(): A {
        return A(p+1)
    }


}

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:25,056 [main:28] - Try â„–78 of 858
2021-03-12 08:11:25,069 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:25,069 [main:28] - Try â„–79 of 858
2021-03-12 08:11:25,073 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:25,074 [main:28] - Try â„–80 of 858
2021-03-12 08:11:25,083 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:25,083 [main:66] - Compilation checking started
2021-03-12 08:11:25,221 [main:49] - Result = false
Text:
fun vk(size: Int) {}

inline fun A() = { "fail 1"}

public inline fun <String> foo(f: () -> Map<Nothing, Double>): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $t i = $i"
}


2021-03-12 08:11:25,221 [main:28] - Try â„–81 of 858
2021-03-12 08:11:25,231 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:25,231 [main:28] - Try â„–82 of 858
2021-03-12 08:11:25,244 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:25,244 [main:28] - Try â„–83 of 858
2021-03-12 08:11:25,247 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:25,248 [main:66] - Compilation checking started
2021-03-12 08:11:25,382 [main:49] - Result = false
Text:
fun vk(size: Int) {}

inline fun A() = { "fail 1"}

public inline fun <String> foo(f: () -> Map<Nothing, Double>): Any? = fn()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:25,382 [main:28] - Try â„–84 of 858
2021-03-12 08:11:25,385 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:25,386 [main:28] - Try â„–85 of 858
2021-03-12 08:11:25,399 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:25,399 [main:28] - Try â„–86 of 858
2021-03-12 08:11:25,403 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:25,403 [main:66] - Compilation checking started
2021-03-12 08:11:25,538 [main:49] - Result = false
Text:
fun vk(size: Int) {}

inline fun A() = { "fail 1"}

public inline fun <String> foo(f: () -> Map<Nothing, Double>): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var assertEquals : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:25,538 [main:28] - Try â„–87 of 858
2021-03-12 08:11:25,553 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:25,553 [main:28] - Try â„–88 of 858
2021-03-12 08:11:25,562 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:25,562 [main:66] - Compilation checking started
2021-03-12 08:11:25,702 [main:49] - Result = false
Text:
fun vk(size: Int) {}

inline fun A() = { "fail 1"}

public inline fun <String> foo(f: () -> Map<Nothing, Double>): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    Nothing = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:25,702 [main:28] - Try â„–89 of 858
2021-03-12 08:11:25,708 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:25,708 [main:28] - Try â„–90 of 858
2021-03-12 08:11:25,724 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:11:25,724 [main:66] - Compilation checking started
2021-03-12 08:11:26,002 [main:53] - Result = true
Text:
fun vk(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

public inline fun <String> foo(f: () -> Map<Nothing, Double>): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:26,002 [main:28] - Try â„–91 of 858
2021-03-12 08:11:26,017 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:26,017 [main:28] - Try â„–92 of 858
2021-03-12 08:11:26,031 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:26,032 [main:28] - Try â„–93 of 858
2021-03-12 08:11:26,041 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:26,041 [main:66] - Compilation checking started
2021-03-12 08:11:26,218 [main:49] - Result = false
Text:
fun vk(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

public inline fun <String> foo(f: () -> block<Nothing, Double>): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:26,218 [main:28] - Try â„–94 of 858
2021-03-12 08:11:26,232 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:26,232 [main:28] - Try â„–95 of 858
2021-03-12 08:11:26,246 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:26,247 [main:66] - Compilation checking started
2021-03-12 08:11:26,511 [main:53] - Result = true
Text:
fun vk(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

public inline fun <String> foo(f: () -> Map<*, Double>): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val p: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:26,511 [main:28] - Try â„–96 of 858
2021-03-12 08:11:26,516 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:26,516 [main:66] - Compilation checking started
2021-03-12 08:11:26,770 [main:53] - Result = true
Text:
fun vk(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

public inline fun <String> foo(f: () -> Map<*, Double>): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val x: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:26,770 [main:28] - Try â„–97 of 858
2021-03-12 08:11:26,780 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:26,780 [main:66] - Compilation checking started
2021-03-12 08:11:26,960 [main:49] - Result = false
Text:
fun vk(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

public inline fun <String> foo(f: () -> Map<*, Double>): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val x: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $x i = $i"
}


2021-03-12 08:11:26,960 [main:28] - Try â„–98 of 858
2021-03-12 08:11:26,967 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:26,968 [main:28] - Try â„–99 of 858
2021-03-12 08:11:26,977 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:26,977 [main:66] - Compilation checking started
2021-03-12 08:11:27,127 [main:49] - Result = false
Text:
fun vk(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

public inline fun <String> foo(f: () -> Map<*, Double>): get? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val x: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:27,128 [main:28] - Try â„–100 of 858
2021-03-12 08:11:27,129 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-12 08:11:27,129 [main:66] - Compilation checking started
2021-03-12 08:11:27,129 [main:68] - Already checked
2021-03-12 08:11:27,129 [main:28] - Try â„–101 of 858
2021-03-12 08:11:27,139 [main:33] - Trying to replace Element(OBJECT_DECLARATION) on Element(OBJECT_DECLARATION)
2021-03-12 08:11:27,139 [main:66] - Compilation checking started
2021-03-12 08:11:27,140 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:11:27,140 [main:49] - Result = false
Text:
fun vk(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

public inline fun <String> foo(f: () -> Map<*, Double>): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

companion object : Static(ConcreteWithStatic())

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:27,140 [main:28] - Try â„–102 of 858
2021-03-12 08:11:27,149 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:27,149 [main:66] - Compilation checking started
2021-03-12 08:11:27,309 [main:49] - Result = false
Text:
fun vk(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

public inline fun <String> foo(f: () -> Map<*, Double>): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val x: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $T i = $i"
}


2021-03-12 08:11:27,309 [main:28] - Try â„–103 of 858
2021-03-12 08:11:27,312 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:27,312 [main:66] - Compilation checking started
2021-03-12 08:11:27,470 [main:49] - Result = false
Text:
fun vk(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

public inline fun <String> foo(f: () -> Map<*, Double>): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val x: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val KInterface = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:27,470 [main:28] - Try â„–104 of 858
2021-03-12 08:11:27,485 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-12 08:11:27,485 [main:66] - Compilation checking started
2021-03-12 08:11:27,725 [main:53] - Result = true
Text:
fun vk(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

public inline fun <String> foo(f: () -> String): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val x: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:27,725 [main:28] - Try â„–105 of 858
2021-03-12 08:11:27,728 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:27,729 [main:28] - Try â„–106 of 858
2021-03-12 08:11:27,732 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:27,732 [main:66] - Compilation checking started
2021-03-12 08:11:27,883 [main:49] - Result = false
Text:
fun vk(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

public inline fun <String> foo(f: () -> String): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object String {
        val x: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:27,883 [main:28] - Try â„–107 of 858
2021-03-12 08:11:27,887 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:27,887 [main:66] - Compilation checking started
2021-03-12 08:11:28,037 [main:49] - Result = false
Text:
fun vk(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

public inline fun <String> foo(f: () -> String): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val x: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val K = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:28,037 [main:28] - Try â„–108 of 858
2021-03-12 08:11:28,052 [main:28] - Try â„–109 of 858
2021-03-12 08:11:28,070 [main:33] - Trying to replace Element(PROPERTY_ACCESSOR) on Element(PROPERTY_ACCESSOR)
2021-03-12 08:11:28,070 [main:66] - Compilation checking started
2021-03-12 08:11:28,230 [main:49] - Result = false
Text:
fun vk(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

public inline fun <String> foo(f: () -> String): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val x: Number
            get() = T::class.java.simpleName
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:28,231 [main:28] - Try â„–110 of 858
2021-03-12 08:11:28,243 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:28,243 [main:28] - Try â„–111 of 858
2021-03-12 08:11:28,258 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:28,258 [main:28] - Try â„–112 of 858
2021-03-12 08:11:28,277 [main:33] - Trying to replace PsiElement(QUEST) on PsiElement(QUEST)
2021-03-12 08:11:28,277 [main:28] - Try â„–113 of 858
2021-03-12 08:11:28,288 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:28,288 [main:28] - Try â„–114 of 858
2021-03-12 08:11:28,298 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:28,298 [main:28] - Try â„–115 of 858
2021-03-12 08:11:28,306 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:11:28,307 [main:28] - Try â„–116 of 858
2021-03-12 08:11:28,317 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:28,317 [main:66] - Compilation checking started
2021-03-12 08:11:28,465 [main:49] - Result = false
Text:
fun vk(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

public inline fun <String> foo(f: () -> String): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val x: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == p3) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:28,465 [main:28] - Try â„–117 of 858
2021-03-12 08:11:28,480 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:28,480 [main:28] - Try â„–118 of 858
2021-03-12 08:11:28,483 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:28,483 [main:66] - Compilation checking started
2021-03-12 08:11:28,724 [main:53] - Result = true
Text:
fun foo(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

public inline fun <String> foo(f: () -> String): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val x: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:28,724 [main:28] - Try â„–119 of 858
2021-03-12 08:11:28,733 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:28,734 [main:28] - Try â„–120 of 858
2021-03-12 08:11:28,743 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:28,743 [main:28] - Try â„–121 of 858
2021-03-12 08:11:28,756 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-12 08:11:28,757 [main:28] - Try â„–122 of 858
2021-03-12 08:11:28,758 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-12 08:11:28,758 [main:66] - Compilation checking started
2021-03-12 08:11:28,758 [main:68] - Already checked
2021-03-12 08:11:28,758 [main:28] - Try â„–123 of 858
2021-03-12 08:11:28,762 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:28,763 [main:28] - Try â„–124 of 858
2021-03-12 08:11:28,768 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:28,768 [main:66] - Compilation checking started
2021-03-12 08:11:28,917 [main:49] - Result = false
Text:
fun foo(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

public inline fun <String> foo(f: () -> String): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val x: Number
            get() = 6
    }

fun box(): A {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return if (1 >= 1 && 11 == i) return "fail" else "Fail $j i = $i"
}


2021-03-12 08:11:28,918 [main:28] - Try â„–125 of 858
2021-03-12 08:11:28,930 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:28,930 [main:28] - Try â„–126 of 858
2021-03-12 08:11:28,941 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:11:28,942 [main:66] - Compilation checking started
2021-03-12 08:11:29,173 [main:53] - Result = true
Text:
fun foo(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

public inline fun <String> foo(f: () -> String): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val x: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return "OK"
}


2021-03-12 08:11:29,173 [main:28] - Try â„–127 of 858
2021-03-12 08:11:29,187 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:29,187 [main:28] - Try â„–128 of 858
2021-03-12 08:11:29,191 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:29,191 [main:28] - Try â„–129 of 858
2021-03-12 08:11:29,201 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:29,201 [main:28] - Try â„–130 of 858
2021-03-12 08:11:29,215 [main:33] - Trying to replace Element(SHORT_STRING_TEMPLATE_ENTRY) on Element(SHORT_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:29,216 [main:28] - Try â„–131 of 858
2021-03-12 08:11:29,229 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:29,229 [main:28] - Try â„–132 of 858
2021-03-12 08:11:29,242 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:29,243 [main:28] - Try â„–133 of 858
2021-03-12 08:11:29,256 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:29,256 [main:28] - Try â„–134 of 858
2021-03-12 08:11:29,262 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:29,262 [main:28] - Try â„–135 of 858
2021-03-12 08:11:29,268 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:29,268 [main:28] - Try â„–136 of 858
2021-03-12 08:11:29,272 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:29,273 [main:28] - Try â„–137 of 858
2021-03-12 08:11:29,288 [main:33] - Trying to replace PsiElement(QUEST) on PsiElement(QUEST)
2021-03-12 08:11:29,288 [main:28] - Try â„–138 of 858
2021-03-12 08:11:29,297 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:29,298 [main:28] - Try â„–139 of 858
2021-03-12 08:11:29,304 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:29,304 [main:28] - Try â„–140 of 858
2021-03-12 08:11:29,311 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:29,311 [main:28] - Try â„–141 of 858
2021-03-12 08:11:29,313 [main:33] - Trying to replace Element(IMPORT_LIST) on Element(IMPORT_LIST)
2021-03-12 08:11:29,313 [main:66] - Compilation checking started
2021-03-12 08:11:29,313 [main:68] - Already checked
2021-03-12 08:11:29,313 [main:28] - Try â„–142 of 858
2021-03-12 08:11:29,322 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:29,322 [main:28] - Try â„–143 of 858
2021-03-12 08:11:29,328 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:29,328 [main:28] - Try â„–144 of 858
2021-03-12 08:11:29,343 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-12 08:11:29,343 [main:28] - Try â„–145 of 858
2021-03-12 08:11:29,346 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:29,346 [main:28] - Try â„–146 of 858
2021-03-12 08:11:29,355 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:29,355 [main:28] - Try â„–147 of 858
2021-03-12 08:11:29,369 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:29,370 [main:28] - Try â„–148 of 858
2021-03-12 08:11:29,373 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:29,374 [main:28] - Try â„–149 of 858
2021-03-12 08:11:29,383 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:29,383 [main:28] - Try â„–150 of 858
2021-03-12 08:11:29,397 [main:33] - Trying to replace Element(ELSE) on Element(ELSE)
2021-03-12 08:11:29,397 [main:28] - Try â„–151 of 858
2021-03-12 08:11:29,406 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-12 08:11:29,406 [main:28] - Try â„–152 of 858
2021-03-12 08:11:29,420 [main:33] - Trying to replace Element(SHORT_STRING_TEMPLATE_ENTRY) on Element(SHORT_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:29,420 [main:28] - Try â„–153 of 858
2021-03-12 08:11:29,423 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:29,423 [main:28] - Try â„–154 of 858
2021-03-12 08:11:29,436 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:29,436 [main:28] - Try â„–155 of 858
2021-03-12 08:11:29,445 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:29,445 [main:66] - Compilation checking started
2021-03-12 08:11:29,588 [main:49] - Result = false
Text:
fun foo(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

public inline fun <String> foo(f: () -> String): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val x: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = test1++

    return "OK"
}


2021-03-12 08:11:29,588 [main:28] - Try â„–156 of 858
2021-03-12 08:11:29,607 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:29,608 [main:28] - Try â„–157 of 858
2021-03-12 08:11:29,613 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:29,613 [main:28] - Try â„–158 of 858
2021-03-12 08:11:29,622 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:29,623 [main:28] - Try â„–159 of 858
2021-03-12 08:11:29,629 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:29,629 [main:28] - Try â„–160 of 858
2021-03-12 08:11:29,637 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:29,637 [main:28] - Try â„–161 of 858
2021-03-12 08:11:29,652 [main:33] - Trying to replace Element(NULLABLE_TYPE) on Element(NULLABLE_TYPE)
2021-03-12 08:11:29,653 [main:28] - Try â„–162 of 858
2021-03-12 08:11:29,658 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:29,658 [main:66] - Compilation checking started
2021-03-12 08:11:29,805 [main:49] - Result = false
Text:
fun foo(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

public inline fun <String> foo(f: () -> String): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val x: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    pr.get("123") != "123"
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i++

    return "OK"
}


2021-03-12 08:11:29,805 [main:28] - Try â„–163 of 858
2021-03-12 08:11:29,814 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:29,814 [main:66] - Compilation checking started
2021-03-12 08:11:30,049 [main:53] - Result = true
Text:
fun foo(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

public inline fun <String> foo(f: () -> String): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val x: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i!=

    return "OK"
}


2021-03-12 08:11:30,050 [main:28] - Try â„–164 of 858
2021-03-12 08:11:30,063 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-12 08:11:30,064 [main:66] - Compilation checking started
2021-03-12 08:11:30,224 [main:49] - Result = false
Text:
fun foo(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

fun box(): String {
    inline1 { inline2 { result = "OK" }() }

    return result
}

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val x: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i!=

    return "OK"
}


2021-03-12 08:11:30,224 [main:28] - Try â„–165 of 858
2021-03-12 08:11:30,242 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-12 08:11:30,243 [main:28] - Try â„–166 of 858
2021-03-12 08:11:30,259 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:30,259 [main:28] - Try â„–167 of 858
2021-03-12 08:11:30,273 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:30,273 [main:28] - Try â„–168 of 858
2021-03-12 08:11:30,279 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:30,280 [main:66] - Compilation checking started
2021-03-12 08:11:30,438 [main:49] - Result = false
Text:
fun foo(size: Int) {}

inline fun A() = {
        val uintProgression = 1u..7u
        for (i in uintProgression step 0) {
        }
    }

public inline fun <String> foo(f: () -> String): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val x: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    p5 = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i!=

    return "OK"
}


2021-03-12 08:11:30,438 [main:28] - Try â„–169 of 858
2021-03-12 08:11:30,445 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:30,446 [main:28] - Try â„–170 of 858
2021-03-12 08:11:30,449 [main:33] - Trying to replace Element(IMPORT_LIST) on Element(IMPORT_LIST)
2021-03-12 08:11:30,449 [main:66] - Compilation checking started
2021-03-12 08:11:30,450 [main:68] - Already checked
2021-03-12 08:11:30,450 [main:28] - Try â„–171 of 858
2021-03-12 08:11:30,456 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:30,456 [main:28] - Try â„–172 of 858
2021-03-12 08:11:30,470 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:30,470 [main:28] - Try â„–173 of 858
2021-03-12 08:11:30,484 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:30,484 [main:28] - Try â„–174 of 858
2021-03-12 08:11:30,488 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:30,488 [main:28] - Try â„–175 of 858
2021-03-12 08:11:30,491 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-12 08:11:30,491 [main:66] - Compilation checking started
2021-03-12 08:11:30,628 [main:53] - Result = true
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <String> foo(f: () -> String): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val x: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i!=

    return "OK"
}


2021-03-12 08:11:30,628 [main:28] - Try â„–176 of 858
2021-03-12 08:11:30,654 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:30,655 [main:28] - Try â„–177 of 858
2021-03-12 08:11:30,660 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:30,660 [main:66] - Compilation checking started
2021-03-12 08:11:30,787 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <String> foo(f: () -> String): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val x: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = box!=

    return "OK"
}


2021-03-12 08:11:30,787 [main:28] - Try â„–178 of 858
2021-03-12 08:11:30,793 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:30,793 [main:28] - Try â„–179 of 858
2021-03-12 08:11:30,806 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:30,807 [main:28] - Try â„–180 of 858
2021-03-12 08:11:30,810 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:30,810 [main:28] - Try â„–181 of 858
2021-03-12 08:11:30,813 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:30,813 [main:66] - Compilation checking started
2021-03-12 08:11:30,926 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <String> foo(f: () -> String): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val x: caught
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val j = i!=

    return "OK"
}


2021-03-12 08:11:30,926 [main:28] - Try â„–182 of 858
2021-03-12 08:11:30,933 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:30,933 [main:28] - Try â„–183 of 858
2021-03-12 08:11:30,942 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:30,943 [main:28] - Try â„–184 of 858
2021-03-12 08:11:30,952 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:30,953 [main:28] - Try â„–185 of 858
2021-03-12 08:11:30,964 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:30,964 [main:28] - Try â„–186 of 858
2021-03-12 08:11:30,969 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:30,969 [main:66] - Compilation checking started
2021-03-12 08:11:31,110 [main:53] - Result = true
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <String> foo(f: () -> String): Any? = f()

private fun KProperty(vararg functions: () -> Any) {
    }

object contract {
        val x: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = i!=

    return "OK"
}


2021-03-12 08:11:31,110 [main:28] - Try â„–187 of 858
2021-03-12 08:11:31,114 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:31,114 [main:28] - Try â„–188 of 858
2021-03-12 08:11:31,122 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:31,122 [main:28] - Try â„–189 of 858
2021-03-12 08:11:31,135 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:31,136 [main:28] - Try â„–190 of 858
2021-03-12 08:11:31,141 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:31,141 [main:66] - Compilation checking started
2021-03-12 08:11:31,282 [main:53] - Result = true
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <String> foo(f: () -> String): Any? = f()

private fun KProperty() {
    }

object contract {
        val x: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = i!=

    return "OK"
}


2021-03-12 08:11:31,282 [main:28] - Try â„–191 of 858
2021-03-12 08:11:31,286 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:31,286 [main:28] - Try â„–192 of 858
2021-03-12 08:11:31,292 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:31,292 [main:28] - Try â„–193 of 858
2021-03-12 08:11:31,303 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:31,303 [main:28] - Try â„–194 of 858
2021-03-12 08:11:31,313 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:31,313 [main:66] - Compilation checking started
2021-03-12 08:11:31,449 [main:53] - Result = true
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <String> foo(f: () -> String): String? = f()

private fun KProperty() {
    }

object contract {
        val x: Number
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = i!=

    return "OK"
}


2021-03-12 08:11:31,449 [main:28] - Try â„–195 of 858
2021-03-12 08:11:31,461 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:31,461 [main:28] - Try â„–196 of 858
2021-03-12 08:11:31,474 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:31,474 [main:28] - Try â„–197 of 858
2021-03-12 08:11:31,477 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:31,477 [main:66] - Compilation checking started
2021-03-12 08:11:31,628 [main:53] - Result = true
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <String> foo(f: () -> String): String? = f()

private fun KProperty() {
    }

object contract {
        val x: Byte
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = i!=

    return "OK"
}


2021-03-12 08:11:31,628 [main:28] - Try â„–198 of 858
2021-03-12 08:11:31,642 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:31,642 [main:28] - Try â„–199 of 858
2021-03-12 08:11:31,645 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:31,645 [main:28] - Try â„–200 of 858
2021-03-12 08:11:31,656 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:31,656 [main:28] - Try â„–201 of 858
2021-03-12 08:11:31,670 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:31,670 [main:28] - Try â„–202 of 858
2021-03-12 08:11:31,676 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:31,677 [main:66] - Compilation checking started
2021-03-12 08:11:31,814 [main:53] - Result = true
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <String> foo(f: () -> String): String? = f()

private fun KProperty() {
    }

object contract {
        val x: Int
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = i!=

    return "OK"
}


2021-03-12 08:11:31,814 [main:28] - Try â„–203 of 858
2021-03-12 08:11:31,835 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:31,836 [main:28] - Try â„–204 of 858
2021-03-12 08:11:31,850 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:31,850 [main:28] - Try â„–205 of 858
2021-03-12 08:11:31,869 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-12 08:11:31,869 [main:28] - Try â„–206 of 858
2021-03-12 08:11:31,882 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:31,882 [main:28] - Try â„–207 of 858
2021-03-12 08:11:31,896 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:31,896 [main:28] - Try â„–208 of 858
2021-03-12 08:11:31,900 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:31,900 [main:28] - Try â„–209 of 858
2021-03-12 08:11:31,905 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:31,905 [main:28] - Try â„–210 of 858
2021-03-12 08:11:31,920 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:31,920 [main:28] - Try â„–211 of 858
2021-03-12 08:11:31,937 [main:33] - Trying to replace Element(PROPERTY_ACCESSOR) on Element(PROPERTY_ACCESSOR)
2021-03-12 08:11:31,937 [main:66] - Compilation checking started
2021-03-12 08:11:32,004 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <String> foo(f: () -> String): String? = f()

private fun KProperty() {
    }

object contract {
        val x: Int
            private set
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = i!=

    return "OK"
}


2021-03-12 08:11:32,005 [main:28] - Try â„–212 of 858
2021-03-12 08:11:32,010 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:32,010 [main:28] - Try â„–213 of 858
2021-03-12 08:11:32,020 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:32,020 [main:28] - Try â„–214 of 858
2021-03-12 08:11:32,029 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:32,030 [main:28] - Try â„–215 of 858
2021-03-12 08:11:32,042 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:32,042 [main:28] - Try â„–216 of 858
2021-03-12 08:11:32,058 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:32,058 [main:28] - Try â„–217 of 858
2021-03-12 08:11:32,069 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:32,070 [main:28] - Try â„–218 of 858
2021-03-12 08:11:32,077 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:32,077 [main:28] - Try â„–219 of 858
2021-03-12 08:11:32,081 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:32,081 [main:28] - Try â„–220 of 858
2021-03-12 08:11:32,094 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:32,094 [main:28] - Try â„–221 of 858
2021-03-12 08:11:32,107 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:32,107 [main:28] - Try â„–222 of 858
2021-03-12 08:11:32,122 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-12 08:11:32,122 [main:28] - Try â„–223 of 858
2021-03-12 08:11:32,128 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:32,129 [main:28] - Try â„–224 of 858
2021-03-12 08:11:32,132 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:32,132 [main:28] - Try â„–225 of 858
2021-03-12 08:11:32,141 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:32,141 [main:28] - Try â„–226 of 858
2021-03-12 08:11:32,154 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:32,154 [main:28] - Try â„–227 of 858
2021-03-12 08:11:32,157 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:32,157 [main:28] - Try â„–228 of 858
2021-03-12 08:11:32,166 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:32,166 [main:28] - Try â„–229 of 858
2021-03-12 08:11:32,173 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:32,173 [main:66] - Compilation checking started
2021-03-12 08:11:32,291 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <String> foo(f: () -> String): String? = doInline(this) {
            result += "X"
        }

private fun KProperty() {
    }

object contract {
        val x: Int
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = i!=

    return "OK"
}


2021-03-12 08:11:32,291 [main:28] - Try â„–230 of 858
2021-03-12 08:11:32,295 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:32,295 [main:28] - Try â„–231 of 858
2021-03-12 08:11:32,304 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:32,304 [main:28] - Try â„–232 of 858
2021-03-12 08:11:32,309 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:32,309 [main:66] - Compilation checking started
2021-03-12 08:11:32,427 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <String> foo(f: () -> String): String? = b()

private fun KProperty() {
    }

object contract {
        val x: Int
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = i!=

    return "OK"
}


2021-03-12 08:11:32,427 [main:28] - Try â„–233 of 858
2021-03-12 08:11:32,432 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:32,432 [main:28] - Try â„–234 of 858
2021-03-12 08:11:32,441 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:32,441 [main:28] - Try â„–235 of 858
2021-03-12 08:11:32,445 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:32,445 [main:28] - Try â„–236 of 858
2021-03-12 08:11:32,458 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:32,458 [main:28] - Try â„–237 of 858
2021-03-12 08:11:32,470 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:32,470 [main:28] - Try â„–238 of 858
2021-03-12 08:11:32,474 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:32,474 [main:28] - Try â„–239 of 858
2021-03-12 08:11:32,488 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:32,488 [main:28] - Try â„–240 of 858
2021-03-12 08:11:32,494 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:32,495 [main:28] - Try â„–241 of 858
2021-03-12 08:11:32,507 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:32,507 [main:28] - Try â„–242 of 858
2021-03-12 08:11:32,523 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-12 08:11:32,523 [main:28] - Try â„–243 of 858
2021-03-12 08:11:32,538 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-12 08:11:32,538 [main:28] - Try â„–244 of 858
2021-03-12 08:11:32,547 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:11:32,547 [main:28] - Try â„–245 of 858
2021-03-12 08:11:32,560 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:32,560 [main:28] - Try â„–246 of 858
2021-03-12 08:11:32,573 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-12 08:11:32,573 [main:66] - Compilation checking started
2021-03-12 08:11:32,688 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <String> foo(f: () -> String): String? = f()

private fun KProperty() {
    }

object contract {
        val x: Int
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val x = cast()

    return "OK"
}


2021-03-12 08:11:32,688 [main:28] - Try â„–247 of 858
2021-03-12 08:11:32,701 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:32,701 [main:28] - Try â„–248 of 858
2021-03-12 08:11:32,715 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:32,715 [main:28] - Try â„–249 of 858
2021-03-12 08:11:32,728 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:32,728 [main:28] - Try â„–250 of 858
2021-03-12 08:11:32,733 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-12 08:11:32,734 [main:66] - Compilation checking started
2021-03-12 08:11:32,914 [main:53] - Result = true
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <String> foo(f: () -> String): String? = f()

suspend fun KProperty() {
    }

object contract {
        val x: Int
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = i!=

    return "OK"
}


2021-03-12 08:11:32,914 [main:28] - Try â„–251 of 858
2021-03-12 08:11:32,932 [main:28] - Try â„–252 of 858
2021-03-12 08:11:32,945 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:32,945 [main:28] - Try â„–253 of 858
2021-03-12 08:11:32,949 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:32,950 [main:28] - Try â„–254 of 858
2021-03-12 08:11:32,956 [main:33] - Trying to replace Element(TYPE_PARAMETER) on Element(TYPE_PARAMETER)
2021-03-12 08:11:32,956 [main:66] - Compilation checking started
2021-03-12 08:11:33,122 [main:53] - Result = true
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T> foo(f: () -> String): String? = f()

suspend fun KProperty() {
    }

object contract {
        val x: Int
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // Postfix increment on a smart cast should work
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = i!=

    return "OK"
}


2021-03-12 08:11:33,122 [main:28] - Try â„–255 of 858
2021-03-12 08:11:33,142 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:33,142 [main:28] - Try â„–256 of 858
2021-03-12 08:11:33,157 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:33,157 [main:28] - Try â„–257 of 858
2021-03-12 08:11:33,168 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:33,168 [main:28] - Try â„–258 of 858
2021-03-12 08:11:33,180 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:33,181 [main:28] - Try â„–259 of 858
2021-03-12 08:11:33,184 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:33,184 [main:28] - Try â„–260 of 858
2021-03-12 08:11:33,190 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:33,190 [main:28] - Try â„–261 of 858
2021-03-12 08:11:33,200 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:33,200 [main:28] - Try â„–262 of 858
2021-03-12 08:11:33,209 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:33,209 [main:28] - Try â„–263 of 858
2021-03-12 08:11:33,222 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:33,222 [main:28] - Try â„–264 of 858
2021-03-12 08:11:33,233 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:33,233 [main:28] - Try â„–265 of 858
2021-03-12 08:11:33,239 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:33,239 [main:28] - Try â„–266 of 858
2021-03-12 08:11:33,244 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:33,244 [main:28] - Try â„–267 of 858
2021-03-12 08:11:33,258 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:33,258 [main:28] - Try â„–268 of 858
2021-03-12 08:11:33,272 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:33,272 [main:28] - Try â„–269 of 858
2021-03-12 08:11:33,284 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:11:33,284 [main:28] - Try â„–270 of 858
2021-03-12 08:11:33,293 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:33,293 [main:28] - Try â„–271 of 858
2021-03-12 08:11:33,297 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:33,297 [main:28] - Try â„–272 of 858
2021-03-12 08:11:33,300 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:33,300 [main:28] - Try â„–273 of 858
2021-03-12 08:11:33,309 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:33,309 [main:28] - Try â„–274 of 858
2021-03-12 08:11:33,318 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:33,319 [main:28] - Try â„–275 of 858
2021-03-12 08:11:33,320 [main:33] - Trying to replace PsiComment(EOL_COMMENT) on PsiComment(EOL_COMMENT)
2021-03-12 08:11:33,320 [main:66] - Compilation checking started
2021-03-12 08:11:33,491 [main:53] - Result = true
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T> foo(f: () -> String): String? = f()

suspend fun KProperty() {
    }

object contract {
        val x: Int
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = i!=

    return "OK"
}


2021-03-12 08:11:33,491 [main:28] - Try â„–276 of 858
2021-03-12 08:11:33,510 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-12 08:11:33,510 [main:28] - Try â„–277 of 858
2021-03-12 08:11:33,519 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:33,519 [main:28] - Try â„–278 of 858
2021-03-12 08:11:33,523 [main:33] - Trying to replace Element(TYPE_PARAMETER_LIST) on Element(TYPE_PARAMETER_LIST)
2021-03-12 08:11:33,523 [main:66] - Compilation checking started
2021-03-12 08:11:33,696 [main:53] - Result = true
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): String? = f()

suspend fun KProperty() {
    }

object contract {
        val x: Int
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = i!=

    return "OK"
}


2021-03-12 08:11:33,696 [main:28] - Try â„–279 of 858
2021-03-12 08:11:33,701 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:33,701 [main:28] - Try â„–280 of 858
2021-03-12 08:11:33,713 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:33,713 [main:28] - Try â„–281 of 858
2021-03-12 08:11:33,717 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-12 08:11:33,718 [main:66] - Compilation checking started
2021-03-12 08:11:33,788 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): String? = f()

override fun foo() {
        super.foo()
    }

object contract {
        val x: Int
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = i!=

    return "OK"
}


2021-03-12 08:11:33,788 [main:28] - Try â„–282 of 858
2021-03-12 08:11:33,797 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:33,797 [main:66] - Compilation checking started
2021-03-12 08:11:33,911 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): String? = java()

suspend fun KProperty() {
    }

object contract {
        val x: Int
            get() = 6
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = i!=

    return "OK"
}


2021-03-12 08:11:33,911 [main:28] - Try â„–283 of 858
2021-03-12 08:11:33,923 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:33,923 [main:28] - Try â„–284 of 858
2021-03-12 08:11:33,927 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:33,927 [main:28] - Try â„–285 of 858
2021-03-12 08:11:33,931 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:33,931 [main:28] - Try â„–286 of 858
2021-03-12 08:11:33,932 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-12 08:11:33,932 [main:66] - Compilation checking started
2021-03-12 08:11:33,932 [main:68] - Already checked
2021-03-12 08:11:33,932 [main:28] - Try â„–287 of 858
2021-03-12 08:11:33,946 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:33,947 [main:66] - Compilation checking started
2021-03-12 08:11:34,108 [main:53] - Result = true
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): String? = f()

suspend fun KProperty() {
    }

object contract {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = i!=

    return "OK"
}


2021-03-12 08:11:34,108 [main:28] - Try â„–288 of 858
2021-03-12 08:11:34,113 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:34,114 [main:28] - Try â„–289 of 858
2021-03-12 08:11:34,123 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:34,123 [main:28] - Try â„–290 of 858
2021-03-12 08:11:34,132 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-12 08:11:34,132 [main:28] - Try â„–291 of 858
2021-03-12 08:11:34,146 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:34,146 [main:28] - Try â„–292 of 858
2021-03-12 08:11:34,154 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:34,155 [main:28] - Try â„–293 of 858
2021-03-12 08:11:34,158 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:34,158 [main:66] - Compilation checking started
2021-03-12 08:11:34,159 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:11:34,159 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): String? = f()

suspend fun KProperty() {
    }

object contract {
        val x: Int
            get() = 3
    }

fun an(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = i!=

    return "OK"
}


2021-03-12 08:11:34,159 [main:28] - Try â„–294 of 858
2021-03-12 08:11:34,172 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:34,172 [main:28] - Try â„–295 of 858
2021-03-12 08:11:34,177 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:34,177 [main:28] - Try â„–296 of 858
2021-03-12 08:11:34,182 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:34,182 [main:66] - Compilation checking started
2021-03-12 08:11:34,305 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): String? = f()

suspend fun KProperty() {
    }

object contract {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    "$q" != "fun test.A.(kotlin.Int.)foo(): kotlin.Double"
    // FILE: Foo.kt
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = i!=

    return "OK"
}


2021-03-12 08:11:34,305 [main:28] - Try â„–297 of 858
2021-03-12 08:11:34,325 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:34,325 [main:28] - Try â„–298 of 858
2021-03-12 08:11:34,330 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:34,331 [main:28] - Try â„–299 of 858
2021-03-12 08:11:34,337 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:34,337 [main:28] - Try â„–300 of 858
2021-03-12 08:11:34,354 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:34,354 [main:28] - Try â„–301 of 858
2021-03-12 08:11:34,359 [main:33] - Trying to replace Element(CLASS_BODY) on Element(CLASS_BODY)
2021-03-12 08:11:34,359 [main:66] - Compilation checking started
2021-03-12 08:11:34,477 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): String? = f()

suspend fun KProperty() {
    }

object contract {
    suspend fun consumeZ(z: Z) {}
    suspend fun produceZ(): Z = Z("")
    suspend fun consumeAndProduceZ(z: Z): Z = z
}

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = i!=

    return "OK"
}


2021-03-12 08:11:34,477 [main:28] - Try â„–302 of 858
2021-03-12 08:11:34,490 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:34,491 [main:28] - Try â„–303 of 858
2021-03-12 08:11:34,502 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:34,503 [main:28] - Try â„–304 of 858
2021-03-12 08:11:34,514 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:11:34,514 [main:28] - Try â„–305 of 858
2021-03-12 08:11:34,528 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:34,528 [main:28] - Try â„–306 of 858
2021-03-12 08:11:34,533 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:34,533 [main:28] - Try â„–307 of 858
2021-03-12 08:11:34,535 [main:33] - Trying to replace PsiComment(EOL_COMMENT) on PsiComment(EOL_COMMENT)
2021-03-12 08:11:34,535 [main:28] - Try â„–308 of 858
2021-03-12 08:11:34,549 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:34,549 [main:28] - Try â„–309 of 858
2021-03-12 08:11:34,553 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:34,553 [main:28] - Try â„–310 of 858
2021-03-12 08:11:34,568 [main:28] - Try â„–311 of 858
2021-03-12 08:11:34,573 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:34,573 [main:28] - Try â„–312 of 858
2021-03-12 08:11:34,586 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:34,586 [main:28] - Try â„–313 of 858
2021-03-12 08:11:34,595 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:34,595 [main:28] - Try â„–314 of 858
2021-03-12 08:11:34,602 [main:33] - Trying to replace Element(TYPE_PARAMETER) on Element(TYPE_PARAMETER)
2021-03-12 08:11:34,602 [main:28] - Try â„–315 of 858
2021-03-12 08:11:34,612 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:34,613 [main:28] - Try â„–316 of 858
2021-03-12 08:11:34,625 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:34,625 [main:28] - Try â„–317 of 858
2021-03-12 08:11:34,635 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:34,635 [main:28] - Try â„–318 of 858
2021-03-12 08:11:34,652 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:34,653 [main:28] - Try â„–319 of 858
2021-03-12 08:11:34,656 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:34,656 [main:28] - Try â„–320 of 858
2021-03-12 08:11:34,660 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:34,660 [main:28] - Try â„–321 of 858
2021-03-12 08:11:34,674 [main:28] - Try â„–322 of 858
2021-03-12 08:11:34,690 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-12 08:11:34,690 [main:28] - Try â„–323 of 858
2021-03-12 08:11:34,704 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-12 08:11:34,705 [main:28] - Try â„–324 of 858
2021-03-12 08:11:34,708 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:34,708 [main:28] - Try â„–325 of 858
2021-03-12 08:11:34,711 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:34,711 [main:28] - Try â„–326 of 858
2021-03-12 08:11:34,717 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:34,717 [main:28] - Try â„–327 of 858
2021-03-12 08:11:34,730 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:34,730 [main:28] - Try â„–328 of 858
2021-03-12 08:11:34,732 [main:33] - Trying to replace PsiComment(EOL_COMMENT) on PsiComment(EOL_COMMENT)
2021-03-12 08:11:34,732 [main:28] - Try â„–329 of 858
2021-03-12 08:11:34,740 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:34,741 [main:28] - Try â„–330 of 858
2021-03-12 08:11:34,749 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:34,750 [main:66] - Compilation checking started
2021-03-12 08:11:34,920 [main:53] - Result = true
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): String? = f()

suspend fun KProperty() {
    }

object contract {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = String!=

    return "OK"
}


2021-03-12 08:11:34,921 [main:28] - Try â„–331 of 858
2021-03-12 08:11:34,925 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:34,925 [main:28] - Try â„–332 of 858
2021-03-12 08:11:34,929 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:34,929 [main:28] - Try â„–333 of 858
2021-03-12 08:11:34,937 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:34,937 [main:28] - Try â„–334 of 858
2021-03-12 08:11:34,946 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:34,947 [main:28] - Try â„–335 of 858
2021-03-12 08:11:34,950 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:34,950 [main:28] - Try â„–336 of 858
2021-03-12 08:11:34,962 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:34,963 [main:28] - Try â„–337 of 858
2021-03-12 08:11:34,971 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:34,971 [main:28] - Try â„–338 of 858
2021-03-12 08:11:34,985 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-12 08:11:34,985 [main:28] - Try â„–339 of 858
2021-03-12 08:11:34,991 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:34,991 [main:28] - Try â„–340 of 858
2021-03-12 08:11:34,997 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:34,997 [main:28] - Try â„–341 of 858
2021-03-12 08:11:35,002 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:35,002 [main:28] - Try â„–342 of 858
2021-03-12 08:11:35,006 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:35,006 [main:28] - Try â„–343 of 858
2021-03-12 08:11:35,018 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:35,018 [main:28] - Try â„–344 of 858
2021-03-12 08:11:35,028 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:35,028 [main:28] - Try â„–345 of 858
2021-03-12 08:11:35,037 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:35,037 [main:28] - Try â„–346 of 858
2021-03-12 08:11:35,050 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-12 08:11:35,050 [main:28] - Try â„–347 of 858
2021-03-12 08:11:35,060 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:35,060 [main:28] - Try â„–348 of 858
2021-03-12 08:11:35,070 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:35,070 [main:28] - Try â„–349 of 858
2021-03-12 08:11:35,080 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:35,080 [main:28] - Try â„–350 of 858
2021-03-12 08:11:35,089 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:11:35,089 [main:28] - Try â„–351 of 858
2021-03-12 08:11:35,101 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:11:35,101 [main:28] - Try â„–352 of 858
2021-03-12 08:11:35,106 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:35,106 [main:28] - Try â„–353 of 858
2021-03-12 08:11:35,122 [main:33] - Trying to replace PsiElement(QUEST) on PsiElement(QUEST)
2021-03-12 08:11:35,122 [main:28] - Try â„–354 of 858
2021-03-12 08:11:35,134 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:35,135 [main:28] - Try â„–355 of 858
2021-03-12 08:11:35,137 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-12 08:11:35,137 [main:66] - Compilation checking started
2021-03-12 08:11:35,230 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): String? = f()

// !LANGUAGE: -ProperIeee754Comparisons
fun box(): String {
    val zero: Any = 0.0
    val floatZero: Any = -0.0F
    if (zero is Double && floatZero is Float) {
        if (zero == floatZero) return "fail 1"

        if (zero <= floatZero) return "fail 2"

        return "OK"
    }

    return "fail"
}

object contract {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = String!=

    return "OK"
}


2021-03-12 08:11:35,230 [main:28] - Try â„–356 of 858
2021-03-12 08:11:35,234 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:35,235 [main:28] - Try â„–357 of 858
2021-03-12 08:11:35,238 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:35,238 [main:66] - Compilation checking started
2021-03-12 08:11:35,351 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(value: () -> String): String? = f()

suspend fun KProperty() {
    }

object contract {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = String!=

    return "OK"
}


2021-03-12 08:11:35,351 [main:28] - Try â„–358 of 858
2021-03-12 08:11:35,367 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-12 08:11:35,367 [main:28] - Try â„–359 of 858
2021-03-12 08:11:35,375 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:35,376 [main:28] - Try â„–360 of 858
2021-03-12 08:11:35,390 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:35,391 [main:28] - Try â„–361 of 858
2021-03-12 08:11:35,395 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:35,395 [main:66] - Compilation checking started
2021-03-12 08:11:35,395 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:11:35,396 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): String? = f()

suspend fun KProperty() {
    }

object contract {
        val x: Int
            get() = 3
    }

fun AssertionError(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = String!=

    return "OK"
}


2021-03-12 08:11:35,396 [main:28] - Try â„–362 of 858
2021-03-12 08:11:35,410 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:35,410 [main:28] - Try â„–363 of 858
2021-03-12 08:11:35,414 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:35,414 [main:28] - Try â„–364 of 858
2021-03-12 08:11:35,417 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:35,417 [main:28] - Try â„–365 of 858
2021-03-12 08:11:35,419 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-12 08:11:35,419 [main:66] - Compilation checking started
2021-03-12 08:11:35,419 [main:68] - Already checked
2021-03-12 08:11:35,419 [main:28] - Try â„–366 of 858
2021-03-12 08:11:35,426 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:35,426 [main:28] - Try â„–367 of 858
2021-03-12 08:11:35,430 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:35,430 [main:28] - Try â„–368 of 858
2021-03-12 08:11:35,438 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:35,438 [main:28] - Try â„–369 of 858
2021-03-12 08:11:35,447 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:35,447 [main:28] - Try â„–370 of 858
2021-03-12 08:11:35,466 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-12 08:11:35,466 [main:66] - Compilation checking started
2021-03-12 08:11:35,580 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): String? = f()

suspend fun KProperty() {
    }

object contract {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = e.message!!

    return "OK"
}


2021-03-12 08:11:35,580 [main:28] - Try â„–371 of 858
2021-03-12 08:11:35,583 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:35,584 [main:28] - Try â„–372 of 858
2021-03-12 08:11:35,587 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:35,587 [main:28] - Try â„–373 of 858
2021-03-12 08:11:35,595 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:35,595 [main:28] - Try â„–374 of 858
2021-03-12 08:11:35,598 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:35,599 [main:28] - Try â„–375 of 858
2021-03-12 08:11:35,612 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:35,612 [main:28] - Try â„–376 of 858
2021-03-12 08:11:35,615 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:35,615 [main:28] - Try â„–377 of 858
2021-03-12 08:11:35,625 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:35,625 [main:28] - Try â„–378 of 858
2021-03-12 08:11:35,639 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:35,639 [main:28] - Try â„–379 of 858
2021-03-12 08:11:35,649 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:35,649 [main:28] - Try â„–380 of 858
2021-03-12 08:11:35,652 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:35,653 [main:66] - Compilation checking started
2021-03-12 08:11:35,780 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(z: () -> String): String? = f()

suspend fun KProperty() {
    }

object contract {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = String!=

    return "OK"
}


2021-03-12 08:11:35,781 [main:28] - Try â„–381 of 858
2021-03-12 08:11:35,794 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:35,794 [main:28] - Try â„–382 of 858
2021-03-12 08:11:35,799 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:35,799 [main:28] - Try â„–383 of 858
2021-03-12 08:11:35,800 [main:33] - Trying to replace PsiComment(EOL_COMMENT) on PsiComment(EOL_COMMENT)
2021-03-12 08:11:35,800 [main:28] - Try â„–384 of 858
2021-03-12 08:11:35,809 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:35,810 [main:66] - Compilation checking started
2021-03-12 08:11:35,930 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): String? = Long()

suspend fun KProperty() {
    }

object contract {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = String!=

    return "OK"
}


2021-03-12 08:11:35,930 [main:28] - Try â„–385 of 858
2021-03-12 08:11:35,935 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:35,935 [main:66] - Compilation checking started
2021-03-12 08:11:36,097 [main:53] - Result = true
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): String? = f()

suspend fun KProperty() {
    }

object List {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = String!=

    return "OK"
}


2021-03-12 08:11:36,097 [main:28] - Try â„–386 of 858
2021-03-12 08:11:36,111 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:36,111 [main:28] - Try â„–387 of 858
2021-03-12 08:11:36,112 [main:33] - Trying to replace PsiComment(EOL_COMMENT) on PsiComment(EOL_COMMENT)
2021-03-12 08:11:36,113 [main:28] - Try â„–388 of 858
2021-03-12 08:11:36,117 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-12 08:11:36,117 [main:66] - Compilation checking started
2021-03-12 08:11:36,118 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:11:36,118 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

{
        this.i = i;
        this.s = s;
    }

suspend fun KProperty() {
    }

object List {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = String!=

    return "OK"
}


2021-03-12 08:11:36,118 [main:28] - Try â„–389 of 858
2021-03-12 08:11:36,131 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:11:36,131 [main:28] - Try â„–390 of 858
2021-03-12 08:11:36,140 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:11:36,140 [main:28] - Try â„–391 of 858
2021-03-12 08:11:36,150 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:36,150 [main:28] - Try â„–392 of 858
2021-03-12 08:11:36,159 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:36,159 [main:28] - Try â„–393 of 858
2021-03-12 08:11:36,168 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:36,168 [main:28] - Try â„–394 of 858
2021-03-12 08:11:36,178 [main:33] - Trying to replace Element(OBJECT_DECLARATION) on Element(OBJECT_DECLARATION)
2021-03-12 08:11:36,178 [main:66] - Compilation checking started
2021-03-12 08:11:36,179 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:11:36,179 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): String? = f()

suspend fun KProperty() {
    }

companion object {
        @JvmField
        val o = Bar("O")

        @JvmField
        val k = Bar("K")
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // Specific: i.inc() type is Int but i and j types are both Int?
    val B = String!=

    return "OK"
}


2021-03-12 08:11:36,179 [main:28] - Try â„–395 of 858
2021-03-12 08:11:36,188 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:36,188 [main:28] - Try â„–396 of 858
2021-03-12 08:11:36,191 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:36,192 [main:28] - Try â„–397 of 858
2021-03-12 08:11:36,197 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:36,197 [main:28] - Try â„–398 of 858
2021-03-12 08:11:36,199 [main:33] - Trying to replace PsiComment(EOL_COMMENT) on PsiComment(EOL_COMMENT)
2021-03-12 08:11:36,199 [main:66] - Compilation checking started
2021-03-12 08:11:36,372 [main:53] - Result = true
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): String? = f()

suspend fun KProperty() {
    }

object List {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:36,372 [main:28] - Try â„–399 of 858
2021-03-12 08:11:36,377 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:36,377 [main:66] - Compilation checking started
2021-03-12 08:11:36,501 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): String? = f()

suspend fun KProperty() {
    }

object List {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    1 foo 1000000
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:36,501 [main:28] - Try â„–400 of 858
2021-03-12 08:11:36,505 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:36,505 [main:28] - Try â„–401 of 858
2021-03-12 08:11:36,514 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:36,514 [main:28] - Try â„–402 of 858
2021-03-12 08:11:36,522 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:36,522 [main:28] - Try â„–403 of 858
2021-03-12 08:11:36,528 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:36,528 [main:28] - Try â„–404 of 858
2021-03-12 08:11:36,531 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:36,532 [main:28] - Try â„–405 of 858
2021-03-12 08:11:36,538 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:36,538 [main:28] - Try â„–406 of 858
2021-03-12 08:11:36,541 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:36,541 [main:28] - Try â„–407 of 858
2021-03-12 08:11:36,556 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:36,556 [main:28] - Try â„–408 of 858
2021-03-12 08:11:36,564 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:36,564 [main:28] - Try â„–409 of 858
2021-03-12 08:11:36,571 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:36,571 [main:28] - Try â„–410 of 858
2021-03-12 08:11:36,577 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:36,578 [main:66] - Compilation checking started
2021-03-12 08:11:36,691 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): A = f()

suspend fun KProperty() {
    }

object List {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:36,692 [main:28] - Try â„–411 of 858
2021-03-12 08:11:36,699 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:36,699 [main:28] - Try â„–412 of 858
2021-03-12 08:11:36,702 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:36,703 [main:28] - Try â„–413 of 858
2021-03-12 08:11:36,707 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:36,707 [main:66] - Compilation checking started
2021-03-12 08:11:36,707 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:11:36,707 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): String? = f()

suspend fun KProperty() {
    }

object List {
        val x: Int
            get() = 3
    }

fun S(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:36,708 [main:28] - Try â„–414 of 858
2021-03-12 08:11:36,713 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:36,713 [main:66] - Compilation checking started
2021-03-12 08:11:36,831 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(): String? = f()

suspend fun KProperty() {
    }

object List {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:36,832 [main:28] - Try â„–415 of 858
2021-03-12 08:11:36,835 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:36,835 [main:28] - Try â„–416 of 858
2021-03-12 08:11:36,853 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-12 08:11:36,854 [main:28] - Try â„–417 of 858
2021-03-12 08:11:36,869 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-12 08:11:36,869 [main:28] - Try â„–418 of 858
2021-03-12 08:11:36,878 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:36,878 [main:28] - Try â„–419 of 858
2021-03-12 08:11:36,883 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:36,883 [main:28] - Try â„–420 of 858
2021-03-12 08:11:36,889 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:36,889 [main:28] - Try â„–421 of 858
2021-03-12 08:11:36,902 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:36,902 [main:28] - Try â„–422 of 858
2021-03-12 08:11:36,905 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:36,905 [main:28] - Try â„–423 of 858
2021-03-12 08:11:36,914 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:36,915 [main:28] - Try â„–424 of 858
2021-03-12 08:11:36,918 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:36,918 [main:28] - Try â„–425 of 858
2021-03-12 08:11:36,922 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:36,922 [main:28] - Try â„–426 of 858
2021-03-12 08:11:36,929 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:11:36,929 [main:28] - Try â„–427 of 858
2021-03-12 08:11:36,936 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:11:36,936 [main:66] - Compilation checking started
2021-03-12 08:11:37,049 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): String? = f()

suspend fun KProperty() {
    }

object List {
        val x: Int
            get() = 3
    }

fun box(): String {
        ref = property
        return this
    }


2021-03-12 08:11:37,049 [main:28] - Try â„–428 of 858
2021-03-12 08:11:37,050 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-12 08:11:37,050 [main:66] - Compilation checking started
2021-03-12 08:11:37,050 [main:68] - Already checked
2021-03-12 08:11:37,050 [main:28] - Try â„–429 of 858
2021-03-12 08:11:37,064 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:37,064 [main:28] - Try â„–430 of 858
2021-03-12 08:11:37,069 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:37,070 [main:66] - Compilation checking started
2021-03-12 08:11:37,236 [main:53] - Result = true
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): CharSequence = f()

suspend fun KProperty() {
    }

object List {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:37,236 [main:28] - Try â„–431 of 858
2021-03-12 08:11:37,245 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:37,245 [main:28] - Try â„–432 of 858
2021-03-12 08:11:37,254 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:37,255 [main:28] - Try â„–433 of 858
2021-03-12 08:11:37,269 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:37,270 [main:28] - Try â„–434 of 858
2021-03-12 08:11:37,277 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:37,277 [main:28] - Try â„–435 of 858
2021-03-12 08:11:37,290 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:37,290 [main:28] - Try â„–436 of 858
2021-03-12 08:11:37,294 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:37,294 [main:28] - Try â„–437 of 858
2021-03-12 08:11:37,303 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:37,303 [main:28] - Try â„–438 of 858
2021-03-12 08:11:37,313 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:37,313 [main:28] - Try â„–439 of 858
2021-03-12 08:11:37,322 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:37,323 [main:28] - Try â„–440 of 858
2021-03-12 08:11:37,330 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:37,330 [main:28] - Try â„–441 of 858
2021-03-12 08:11:37,339 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:37,339 [main:28] - Try â„–442 of 858
2021-03-12 08:11:37,347 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:37,347 [main:28] - Try â„–443 of 858
2021-03-12 08:11:37,350 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:37,351 [main:28] - Try â„–444 of 858
2021-03-12 08:11:37,358 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:37,358 [main:28] - Try â„–445 of 858
2021-03-12 08:11:37,361 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:37,361 [main:28] - Try â„–446 of 858
2021-03-12 08:11:37,373 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:37,373 [main:28] - Try â„–447 of 858
2021-03-12 08:11:37,380 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:37,380 [main:28] - Try â„–448 of 858
2021-03-12 08:11:37,384 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:37,384 [main:28] - Try â„–449 of 858
2021-03-12 08:11:37,390 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:37,390 [main:28] - Try â„–450 of 858
2021-03-12 08:11:37,402 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:37,402 [main:28] - Try â„–451 of 858
2021-03-12 08:11:37,405 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:37,405 [main:28] - Try â„–452 of 858
2021-03-12 08:11:37,410 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-12 08:11:37,411 [main:28] - Try â„–453 of 858
2021-03-12 08:11:37,424 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:37,424 [main:28] - Try â„–454 of 858
2021-03-12 08:11:37,430 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:37,430 [main:28] - Try â„–455 of 858
2021-03-12 08:11:37,443 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:37,443 [main:28] - Try â„–456 of 858
2021-03-12 08:11:37,459 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-12 08:11:37,459 [main:28] - Try â„–457 of 858
2021-03-12 08:11:37,473 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-12 08:11:37,474 [main:28] - Try â„–458 of 858
2021-03-12 08:11:37,483 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:37,483 [main:28] - Try â„–459 of 858
2021-03-12 08:11:37,492 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:37,492 [main:66] - Compilation checking started
2021-03-12 08:11:37,560 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): CharSequence = f()

suspend fun KProperty() {
    }

object List {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    Long = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:37,560 [main:28] - Try â„–460 of 858
2021-03-12 08:11:37,574 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:37,574 [main:28] - Try â„–461 of 858
2021-03-12 08:11:37,581 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:37,581 [main:28] - Try â„–462 of 858
2021-03-12 08:11:37,585 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:37,585 [main:28] - Try â„–463 of 858
2021-03-12 08:11:37,587 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-12 08:11:37,587 [main:28] - Try â„–464 of 858
2021-03-12 08:11:37,593 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:37,593 [main:28] - Try â„–465 of 858
2021-03-12 08:11:37,597 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:37,597 [main:28] - Try â„–466 of 858
2021-03-12 08:11:37,611 [main:28] - Try â„–467 of 858
2021-03-12 08:11:37,626 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:37,626 [main:28] - Try â„–468 of 858
2021-03-12 08:11:37,638 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:37,639 [main:28] - Try â„–469 of 858
2021-03-12 08:11:37,650 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:11:37,650 [main:28] - Try â„–470 of 858
2021-03-12 08:11:37,667 [main:33] - Trying to replace Element(PROPERTY_ACCESSOR) on Element(PROPERTY_ACCESSOR)
2021-03-12 08:11:37,667 [main:66] - Compilation checking started
2021-03-12 08:11:37,784 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): CharSequence = f()

suspend fun KProperty() {
    }

object List {
        val x: Int
            get() = EmptyCoroutineContext
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:37,785 [main:28] - Try â„–471 of 858
2021-03-12 08:11:37,797 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:37,797 [main:28] - Try â„–472 of 858
2021-03-12 08:11:37,802 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:37,803 [main:28] - Try â„–473 of 858
2021-03-12 08:11:37,806 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:37,807 [main:28] - Try â„–474 of 858
2021-03-12 08:11:37,820 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:37,820 [main:28] - Try â„–475 of 858
2021-03-12 08:11:37,828 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:37,828 [main:28] - Try â„–476 of 858
2021-03-12 08:11:37,833 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:37,834 [main:28] - Try â„–477 of 858
2021-03-12 08:11:37,843 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-12 08:11:37,843 [main:28] - Try â„–478 of 858
2021-03-12 08:11:37,859 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:37,859 [main:28] - Try â„–479 of 858
2021-03-12 08:11:37,860 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-12 08:11:37,860 [main:66] - Compilation checking started
2021-03-12 08:11:37,860 [main:68] - Already checked
2021-03-12 08:11:37,860 [main:28] - Try â„–480 of 858
2021-03-12 08:11:37,870 [main:33] - Trying to replace Element(OBJECT_DECLARATION) on Element(OBJECT_DECLARATION)
2021-03-12 08:11:37,871 [main:66] - Compilation checking started
2021-03-12 08:11:37,871 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:11:37,872 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

public inline fun <T, R> foo(f: () -> String): CharSequence = f()

suspend fun KProperty() {
    }

object : ContinuationAdapter<Unit>() {
        override fun resume(value: Unit) {
            proceed = {
                log("done")
                finished = true
            }
        }

        override fun resumeWithException(e: Throwable) {
        }

        override val context = EmptyCoroutineContext
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:37,872 [main:28] - Try â„–481 of 858
2021-03-12 08:11:37,877 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-12 08:11:37,877 [main:66] - Compilation checking started
2021-03-12 08:11:37,989 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

@JvmField fun <T, R> foo(f: () -> String): CharSequence = f()

suspend fun KProperty() {
    }

object List {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:37,989 [main:28] - Try â„–482 of 858
2021-03-12 08:11:37,999 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:37,999 [main:28] - Try â„–483 of 858
2021-03-12 08:11:38,003 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:38,003 [main:28] - Try â„–484 of 858
2021-03-12 08:11:38,016 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:38,016 [main:28] - Try â„–485 of 858
2021-03-12 08:11:38,031 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:38,032 [main:28] - Try â„–486 of 858
2021-03-12 08:11:38,034 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-12 08:11:38,034 [main:66] - Compilation checking started
2021-03-12 08:11:38,117 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

fun box(): String {
    val o = "O"
    val ok_L = {o + "K"}
    class OK {
        val ok = ok_L()
    }
    return OK().ok
}

suspend fun KProperty() {
    }

object List {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:38,117 [main:28] - Try â„–487 of 858
2021-03-12 08:11:38,132 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-12 08:11:38,133 [main:28] - Try â„–488 of 858
2021-03-12 08:11:38,138 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-12 08:11:38,139 [main:66] - Compilation checking started
2021-03-12 08:11:38,308 [main:53] - Result = true
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = f()

suspend fun KProperty() {
    }

object List {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:38,308 [main:28] - Try â„–489 of 858
2021-03-12 08:11:38,312 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:38,312 [main:28] - Try â„–490 of 858
2021-03-12 08:11:38,326 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:38,326 [main:28] - Try â„–491 of 858
2021-03-12 08:11:38,339 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:38,339 [main:28] - Try â„–492 of 858
2021-03-12 08:11:38,343 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:38,343 [main:28] - Try â„–493 of 858
2021-03-12 08:11:38,355 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:38,355 [main:28] - Try â„–494 of 858
2021-03-12 08:11:38,371 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-12 08:11:38,372 [main:28] - Try â„–495 of 858
2021-03-12 08:11:38,379 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:38,379 [main:28] - Try â„–496 of 858
2021-03-12 08:11:38,392 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:38,392 [main:28] - Try â„–497 of 858
2021-03-12 08:11:38,398 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:38,398 [main:28] - Try â„–498 of 858
2021-03-12 08:11:38,411 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:38,411 [main:28] - Try â„–499 of 858
2021-03-12 08:11:38,412 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-12 08:11:38,412 [main:66] - Compilation checking started
2021-03-12 08:11:38,412 [main:68] - Already checked
2021-03-12 08:11:38,412 [main:28] - Try â„–500 of 858
2021-03-12 08:11:38,424 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:38,424 [main:28] - Try â„–501 of 858
2021-03-12 08:11:38,430 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-12 08:11:38,430 [main:28] - Try â„–502 of 858
2021-03-12 08:11:38,436 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:38,436 [main:28] - Try â„–503 of 858
2021-03-12 08:11:38,445 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:38,445 [main:28] - Try â„–504 of 858
2021-03-12 08:11:38,448 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:38,449 [main:66] - Compilation checking started
2021-03-12 08:11:38,564 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(A: () -> String): CharSequence = f()

suspend fun KProperty() {
    }

object List {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:38,564 [main:28] - Try â„–505 of 858
2021-03-12 08:11:38,574 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:38,574 [main:28] - Try â„–506 of 858
2021-03-12 08:11:38,582 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:38,582 [main:28] - Try â„–507 of 858
2021-03-12 08:11:38,597 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:38,598 [main:28] - Try â„–508 of 858
2021-03-12 08:11:38,614 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-12 08:11:38,614 [main:66] - Compilation checking started
2021-03-12 08:11:38,729 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = f()

suspend fun KProperty() {
    }

object List {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = a!!

    return "OK"
}


2021-03-12 08:11:38,729 [main:28] - Try â„–509 of 858
2021-03-12 08:11:38,730 [main:28] - Try â„–510 of 858
2021-03-12 08:11:38,741 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:11:38,741 [main:28] - Try â„–511 of 858
2021-03-12 08:11:38,755 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:38,755 [main:28] - Try â„–512 of 858
2021-03-12 08:11:38,758 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:38,758 [main:28] - Try â„–513 of 858
2021-03-12 08:11:38,775 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-12 08:11:38,775 [main:28] - Try â„–514 of 858
2021-03-12 08:11:38,784 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:38,785 [main:28] - Try â„–515 of 858
2021-03-12 08:11:38,798 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:38,798 [main:28] - Try â„–516 of 858
2021-03-12 08:11:38,812 [main:33] - Trying to replace Element(ELSE) on Element(ELSE)
2021-03-12 08:11:38,812 [main:28] - Try â„–517 of 858
2021-03-12 08:11:38,828 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:38,828 [main:28] - Try â„–518 of 858
2021-03-12 08:11:38,835 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:38,836 [main:28] - Try â„–519 of 858
2021-03-12 08:11:38,842 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:38,842 [main:28] - Try â„–520 of 858
2021-03-12 08:11:38,858 [main:33] - Trying to replace PsiElement(QUEST) on PsiElement(QUEST)
2021-03-12 08:11:38,858 [main:28] - Try â„–521 of 858
2021-03-12 08:11:38,861 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:38,862 [main:28] - Try â„–522 of 858
2021-03-12 08:11:38,867 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:38,867 [main:66] - Compilation checking started
2021-03-12 08:11:38,983 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: A): CharSequence = f()

suspend fun KProperty() {
    }

object List {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:38,983 [main:28] - Try â„–523 of 858
2021-03-12 08:11:38,986 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:38,986 [main:28] - Try â„–524 of 858
2021-03-12 08:11:38,999 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-12 08:11:38,999 [main:28] - Try â„–525 of 858
2021-03-12 08:11:39,000 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-12 08:11:39,000 [main:66] - Compilation checking started
2021-03-12 08:11:39,001 [main:68] - Already checked
2021-03-12 08:11:39,001 [main:28] - Try â„–526 of 858
2021-03-12 08:11:39,014 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:39,014 [main:28] - Try â„–527 of 858
2021-03-12 08:11:39,024 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:39,024 [main:28] - Try â„–528 of 858
2021-03-12 08:11:39,032 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-12 08:11:39,032 [main:28] - Try â„–529 of 858
2021-03-12 08:11:39,042 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:39,042 [main:28] - Try â„–530 of 858
2021-03-12 08:11:39,046 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:39,046 [main:28] - Try â„–531 of 858
2021-03-12 08:11:39,055 [main:33] - Trying to replace PsiComment(EOL_COMMENT) on PsiComment(EOL_COMMENT)
2021-03-12 08:11:39,055 [main:28] - Try â„–532 of 858
2021-03-12 08:11:39,072 [main:33] - Trying to replace PsiElement(QUEST) on PsiElement(QUEST)
2021-03-12 08:11:39,072 [main:28] - Try â„–533 of 858
2021-03-12 08:11:39,085 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:39,085 [main:28] - Try â„–534 of 858
2021-03-12 08:11:39,094 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:39,094 [main:28] - Try â„–535 of 858
2021-03-12 08:11:39,108 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:39,108 [main:28] - Try â„–536 of 858
2021-03-12 08:11:39,118 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:39,118 [main:28] - Try â„–537 of 858
2021-03-12 08:11:39,123 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:39,123 [main:28] - Try â„–538 of 858
2021-03-12 08:11:39,132 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:39,132 [main:28] - Try â„–539 of 858
2021-03-12 08:11:39,139 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:39,139 [main:66] - Compilation checking started
2021-03-12 08:11:39,253 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = start()

suspend fun KProperty() {
    }

object List {
        val x: Int
            get() = 3
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:39,254 [main:28] - Try â„–540 of 858
2021-03-12 08:11:39,263 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:39,263 [main:28] - Try â„–541 of 858
2021-03-12 08:11:39,272 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:39,272 [main:28] - Try â„–542 of 858
2021-03-12 08:11:39,275 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:39,275 [main:28] - Try â„–543 of 858
2021-03-12 08:11:39,285 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:39,285 [main:28] - Try â„–544 of 858
2021-03-12 08:11:39,290 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:39,290 [main:28] - Try â„–545 of 858
2021-03-12 08:11:39,298 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:39,298 [main:28] - Try â„–546 of 858
2021-03-12 08:11:39,306 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:11:39,306 [main:28] - Try â„–547 of 858
2021-03-12 08:11:39,318 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:11:39,318 [main:28] - Try â„–548 of 858
2021-03-12 08:11:39,332 [main:28] - Try â„–549 of 858
2021-03-12 08:11:39,341 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:39,341 [main:28] - Try â„–550 of 858
2021-03-12 08:11:39,354 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:39,355 [main:28] - Try â„–551 of 858
2021-03-12 08:11:39,358 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:39,358 [main:28] - Try â„–552 of 858
2021-03-12 08:11:39,363 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-12 08:11:39,363 [main:28] - Try â„–553 of 858
2021-03-12 08:11:39,378 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:39,378 [main:28] - Try â„–554 of 858
2021-03-12 08:11:39,381 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:39,382 [main:28] - Try â„–555 of 858
2021-03-12 08:11:39,395 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:39,395 [main:28] - Try â„–556 of 858
2021-03-12 08:11:39,410 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:39,410 [main:28] - Try â„–557 of 858
2021-03-12 08:11:39,424 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-12 08:11:39,424 [main:28] - Try â„–558 of 858
2021-03-12 08:11:39,438 [main:28] - Try â„–559 of 858
2021-03-12 08:11:39,447 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:39,447 [main:28] - Try â„–560 of 858
2021-03-12 08:11:39,452 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:39,452 [main:28] - Try â„–561 of 858
2021-03-12 08:11:39,466 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:11:39,467 [main:28] - Try â„–562 of 858
2021-03-12 08:11:39,476 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:39,476 [main:28] - Try â„–563 of 858
2021-03-12 08:11:39,491 [main:33] - Trying to replace Element(NULLABLE_TYPE) on Element(NULLABLE_TYPE)
2021-03-12 08:11:39,491 [main:28] - Try â„–564 of 858
2021-03-12 08:11:39,492 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-12 08:11:39,492 [main:66] - Compilation checking started
2021-03-12 08:11:39,492 [main:68] - Already checked
2021-03-12 08:11:39,492 [main:28] - Try â„–565 of 858
2021-03-12 08:11:39,501 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:39,501 [main:28] - Try â„–566 of 858
2021-03-12 08:11:39,504 [main:33] - Trying to replace Element(IMPORT_LIST) on Element(IMPORT_LIST)
2021-03-12 08:11:39,504 [main:66] - Compilation checking started
2021-03-12 08:11:39,504 [main:68] - Already checked
2021-03-12 08:11:39,504 [main:28] - Try â„–567 of 858
2021-03-12 08:11:39,511 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:39,511 [main:28] - Try â„–568 of 858
2021-03-12 08:11:39,515 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:39,515 [main:28] - Try â„–569 of 858
2021-03-12 08:11:39,520 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:39,520 [main:28] - Try â„–570 of 858
2021-03-12 08:11:39,524 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:39,524 [main:28] - Try â„–571 of 858
2021-03-12 08:11:39,529 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:39,529 [main:28] - Try â„–572 of 858
2021-03-12 08:11:39,534 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:39,534 [main:28] - Try â„–573 of 858
2021-03-12 08:11:39,545 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-12 08:11:39,545 [main:66] - Compilation checking started
2021-03-12 08:11:39,712 [main:53] - Result = true
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = f()

suspend fun KProperty() {
    }

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:39,712 [main:28] - Try â„–574 of 858
2021-03-12 08:11:39,719 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:11:39,719 [main:66] - Compilation checking started
2021-03-12 08:11:39,885 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = f()

suspend fun KProperty() {
    }

object List {
        var log = ""
    }

fun box(): String {
    var sum = 0
    for (i in -10 .. 10) {
        sum += try { idiv(100, i) } catch (e: Exception) { continue }
    }
    return sum
}


2021-03-12 08:11:39,885 [main:28] - Try â„–575 of 858
2021-03-12 08:11:39,891 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:39,892 [main:28] - Try â„–576 of 858
2021-03-12 08:11:39,900 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:39,900 [main:28] - Try â„–577 of 858
2021-03-12 08:11:39,906 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:39,907 [main:28] - Try â„–578 of 858
2021-03-12 08:11:39,914 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:39,915 [main:28] - Try â„–579 of 858
2021-03-12 08:11:39,928 [main:33] - Trying to replace Element(SHORT_STRING_TEMPLATE_ENTRY) on Element(SHORT_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:39,929 [main:28] - Try â„–580 of 858
2021-03-12 08:11:39,941 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:39,941 [main:28] - Try â„–581 of 858
2021-03-12 08:11:39,954 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-12 08:11:39,955 [main:28] - Try â„–582 of 858
2021-03-12 08:11:39,959 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:39,959 [main:28] - Try â„–583 of 858
2021-03-12 08:11:39,973 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:11:39,973 [main:28] - Try â„–584 of 858
2021-03-12 08:11:39,979 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:39,980 [main:28] - Try â„–585 of 858
2021-03-12 08:11:39,994 [main:28] - Try â„–586 of 858
2021-03-12 08:11:40,008 [main:33] - Trying to replace Element(CONDITION) on Element(CONDITION)
2021-03-12 08:11:40,008 [main:28] - Try â„–587 of 858
2021-03-12 08:11:40,012 [main:33] - Trying to replace Element(CLASS_BODY) on Element(CLASS_BODY)
2021-03-12 08:11:40,013 [main:66] - Compilation checking started
2021-03-12 08:11:40,013 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:11:40,013 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = f()

suspend fun KProperty() {
    }

object List {
    public static String test(J j) {
        return j.get1() + j.get2();
    }
}

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:40,013 [main:28] - Try â„–588 of 858
2021-03-12 08:11:40,018 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-12 08:11:40,019 [main:28] - Try â„–589 of 858
2021-03-12 08:11:40,028 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:40,028 [main:28] - Try â„–590 of 858
2021-03-12 08:11:40,031 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:40,032 [main:28] - Try â„–591 of 858
2021-03-12 08:11:40,040 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:40,041 [main:66] - Compilation checking started
2021-03-12 08:11:40,206 [main:53] - Result = true
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = String()

suspend fun KProperty() {
    }

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:40,207 [main:28] - Try â„–592 of 858
2021-03-12 08:11:40,222 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-12 08:11:40,222 [main:28] - Try â„–593 of 858
2021-03-12 08:11:40,236 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-12 08:11:40,236 [main:28] - Try â„–594 of 858
2021-03-12 08:11:40,241 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:40,241 [main:28] - Try â„–595 of 858
2021-03-12 08:11:40,254 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:40,254 [main:28] - Try â„–596 of 858
2021-03-12 08:11:40,259 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:40,259 [main:28] - Try â„–597 of 858
2021-03-12 08:11:40,266 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:11:40,266 [main:66] - Compilation checking started
2021-03-12 08:11:40,343 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = String()

suspend fun KProperty() 

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:40,343 [main:28] - Try â„–598 of 858
2021-03-12 08:11:40,351 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:40,351 [main:28] - Try â„–599 of 858
2021-03-12 08:11:40,364 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:40,364 [main:28] - Try â„–600 of 858
2021-03-12 08:11:40,369 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:40,369 [main:66] - Compilation checking started
2021-03-12 08:11:40,450 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(private val foo: String): CharSequence = String()

suspend fun KProperty() {
    }

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:40,450 [main:28] - Try â„–601 of 858
2021-03-12 08:11:40,456 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:40,456 [main:28] - Try â„–602 of 858
2021-03-12 08:11:40,467 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:40,467 [main:28] - Try â„–603 of 858
2021-03-12 08:11:40,472 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:40,473 [main:28] - Try â„–604 of 858
2021-03-12 08:11:40,480 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:40,481 [main:28] - Try â„–605 of 858
2021-03-12 08:11:40,484 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:40,485 [main:28] - Try â„–606 of 858
2021-03-12 08:11:40,490 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:40,490 [main:28] - Try â„–607 of 858
2021-03-12 08:11:40,499 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:40,499 [main:28] - Try â„–608 of 858
2021-03-12 08:11:40,510 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:40,510 [main:28] - Try â„–609 of 858
2021-03-12 08:11:40,519 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:40,520 [main:28] - Try â„–610 of 858
2021-03-12 08:11:40,524 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:40,524 [main:28] - Try â„–611 of 858
2021-03-12 08:11:40,537 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:11:40,538 [main:28] - Try â„–612 of 858
2021-03-12 08:11:40,548 [main:33] - Trying to replace Element(OBJECT_DECLARATION) on Element(OBJECT_DECLARATION)
2021-03-12 08:11:40,548 [main:66] - Compilation checking started
2021-03-12 08:11:40,548 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:11:40,549 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = String()

suspend fun KProperty() {
    }

object: ContinuationAdapter<Unit>() {
        override fun resume(value: Unit) {
        }

        override fun resumeWithException(exception: Throwable) {
            throw exception
        }
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:40,549 [main:28] - Try â„–613 of 858
2021-03-12 08:11:40,562 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:40,562 [main:28] - Try â„–614 of 858
2021-03-12 08:11:40,572 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:40,572 [main:28] - Try â„–615 of 858
2021-03-12 08:11:40,587 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:40,587 [main:28] - Try â„–616 of 858
2021-03-12 08:11:40,593 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:40,593 [main:28] - Try â„–617 of 858
2021-03-12 08:11:40,597 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:40,597 [main:28] - Try â„–618 of 858
2021-03-12 08:11:40,612 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:40,612 [main:28] - Try â„–619 of 858
2021-03-12 08:11:40,621 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:40,621 [main:28] - Try â„–620 of 858
2021-03-12 08:11:40,628 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:11:40,628 [main:66] - Compilation checking started
2021-03-12 08:11:40,754 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = String()

suspend fun KProperty() {
    }

object List {
        var log = ""
    }

fun box(): String {
        val a = {
            protectedFun()
        }
        return a()
    }


2021-03-12 08:11:40,754 [main:28] - Try â„–621 of 858
2021-03-12 08:11:40,764 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:40,764 [main:28] - Try â„–622 of 858
2021-03-12 08:11:40,769 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-12 08:11:40,769 [main:28] - Try â„–623 of 858
2021-03-12 08:11:40,784 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:40,785 [main:28] - Try â„–624 of 858
2021-03-12 08:11:40,791 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:40,791 [main:28] - Try â„–625 of 858
2021-03-12 08:11:40,794 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:40,794 [main:28] - Try â„–626 of 858
2021-03-12 08:11:40,801 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:11:40,801 [main:66] - Compilation checking started
2021-03-12 08:11:40,878 [main:49] - Result = false
Text:
fun foo(size: Int) {
        return "O"
    }

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = String()

suspend fun KProperty() {
    }

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:40,878 [main:28] - Try â„–627 of 858
2021-03-12 08:11:40,887 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:40,887 [main:28] - Try â„–628 of 858
2021-03-12 08:11:40,903 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-12 08:11:40,904 [main:28] - Try â„–629 of 858
2021-03-12 08:11:40,910 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:40,910 [main:28] - Try â„–630 of 858
2021-03-12 08:11:40,915 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-12 08:11:40,915 [main:28] - Try â„–631 of 858
2021-03-12 08:11:40,925 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:40,925 [main:28] - Try â„–632 of 858
2021-03-12 08:11:40,928 [main:33] - Trying to replace Element(TYPE_PARAMETER_LIST) on Element(TYPE_PARAMETER_LIST)
2021-03-12 08:11:40,928 [main:28] - Try â„–633 of 858
2021-03-12 08:11:40,935 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:40,935 [main:28] - Try â„–634 of 858
2021-03-12 08:11:40,941 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:40,941 [main:28] - Try â„–635 of 858
2021-03-12 08:11:40,950 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:40,950 [main:28] - Try â„–636 of 858
2021-03-12 08:11:40,959 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:40,959 [main:66] - Compilation checking started
2021-03-12 08:11:41,035 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = String()

suspend fun KProperty() {
    }

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    String = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:41,035 [main:28] - Try â„–637 of 858
2021-03-12 08:11:41,042 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:41,042 [main:28] - Try â„–638 of 858
2021-03-12 08:11:41,044 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-12 08:11:41,044 [main:28] - Try â„–639 of 858
2021-03-12 08:11:41,050 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-12 08:11:41,050 [main:28] - Try â„–640 of 858
2021-03-12 08:11:41,058 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:41,058 [main:28] - Try â„–641 of 858
2021-03-12 08:11:41,070 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:41,070 [main:28] - Try â„–642 of 858
2021-03-12 08:11:41,084 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:41,084 [main:28] - Try â„–643 of 858
2021-03-12 08:11:41,097 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:41,097 [main:28] - Try â„–644 of 858
2021-03-12 08:11:41,102 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:41,102 [main:28] - Try â„–645 of 858
2021-03-12 08:11:41,108 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:41,108 [main:66] - Compilation checking started
2021-03-12 08:11:41,242 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = map { it.type.javaType }

suspend fun KProperty() {
    }

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:41,243 [main:28] - Try â„–646 of 858
2021-03-12 08:11:41,258 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:41,258 [main:28] - Try â„–647 of 858
2021-03-12 08:11:41,272 [main:28] - Try â„–648 of 858
2021-03-12 08:11:41,285 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:41,286 [main:28] - Try â„–649 of 858
2021-03-12 08:11:41,296 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:41,296 [main:28] - Try â„–650 of 858
2021-03-12 08:11:41,309 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:41,310 [main:28] - Try â„–651 of 858
2021-03-12 08:11:41,316 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:11:41,316 [main:66] - Compilation checking started
2021-03-12 08:11:41,415 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = String()

suspend fun KProperty() {
    true.hashCode()
    1.toByte().hashCode()
    1.toChar().hashCode()
    1.toShort().hashCode()
    1.hashCode()
    1L.hashCode()
    1.0F.hashCode()
    1.0.hashCode()
    "".hashCode()

    return "OK"
}

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:41,415 [main:28] - Try â„–652 of 858
2021-03-12 08:11:41,423 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:11:41,423 [main:28] - Try â„–653 of 858
2021-03-12 08:11:41,427 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:41,427 [main:28] - Try â„–654 of 858
2021-03-12 08:11:41,435 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:41,435 [main:28] - Try â„–655 of 858
2021-03-12 08:11:41,444 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:41,444 [main:28] - Try â„–656 of 858
2021-03-12 08:11:41,453 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:41,453 [main:28] - Try â„–657 of 858
2021-03-12 08:11:41,457 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:41,457 [main:28] - Try â„–658 of 858
2021-03-12 08:11:41,461 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:41,461 [main:28] - Try â„–659 of 858
2021-03-12 08:11:41,477 [main:28] - Try â„–660 of 858
2021-03-12 08:11:41,483 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:11:41,483 [main:66] - Compilation checking started
2021-03-12 08:11:41,609 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = String()

suspend fun KProperty() {
    }

object List {
        var log = ""
    }

fun box(): String {
    prop
}


2021-03-12 08:11:41,609 [main:28] - Try â„–661 of 858
2021-03-12 08:11:41,617 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:41,618 [main:28] - Try â„–662 of 858
2021-03-12 08:11:41,623 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:41,624 [main:28] - Try â„–663 of 858
2021-03-12 08:11:41,638 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:41,638 [main:28] - Try â„–664 of 858
2021-03-12 08:11:41,640 [main:33] - Trying to replace PsiComment(EOL_COMMENT) on PsiComment(EOL_COMMENT)
2021-03-12 08:11:41,640 [main:28] - Try â„–665 of 858
2021-03-12 08:11:41,649 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:41,649 [main:28] - Try â„–666 of 858
2021-03-12 08:11:41,655 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:41,656 [main:28] - Try â„–667 of 858
2021-03-12 08:11:41,669 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:41,669 [main:28] - Try â„–668 of 858
2021-03-12 08:11:41,673 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:41,673 [main:28] - Try â„–669 of 858
2021-03-12 08:11:41,680 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:41,681 [main:28] - Try â„–670 of 858
2021-03-12 08:11:41,696 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-12 08:11:41,696 [main:28] - Try â„–671 of 858
2021-03-12 08:11:41,705 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:41,705 [main:28] - Try â„–672 of 858
2021-03-12 08:11:41,715 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:41,715 [main:28] - Try â„–673 of 858
2021-03-12 08:11:41,721 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:41,721 [main:28] - Try â„–674 of 858
2021-03-12 08:11:41,725 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:41,725 [main:28] - Try â„–675 of 858
2021-03-12 08:11:41,740 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:41,740 [main:28] - Try â„–676 of 858
2021-03-12 08:11:41,745 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-12 08:11:41,745 [main:28] - Try â„–677 of 858
2021-03-12 08:11:41,753 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:41,753 [main:28] - Try â„–678 of 858
2021-03-12 08:11:41,767 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-12 08:11:41,767 [main:28] - Try â„–679 of 858
2021-03-12 08:11:41,774 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:41,774 [main:28] - Try â„–680 of 858
2021-03-12 08:11:41,789 [main:33] - Trying to replace Element(NULLABLE_TYPE) on Element(NULLABLE_TYPE)
2021-03-12 08:11:41,789 [main:28] - Try â„–681 of 858
2021-03-12 08:11:41,796 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:41,796 [main:28] - Try â„–682 of 858
2021-03-12 08:11:41,796 [main:28] - Try â„–683 of 858
2021-03-12 08:11:41,806 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-12 08:11:41,806 [main:28] - Try â„–684 of 858
2021-03-12 08:11:41,822 [main:33] - Trying to replace Element(PROPERTY_ACCESSOR) on Element(PROPERTY_ACCESSOR)
2021-03-12 08:11:41,822 [main:28] - Try â„–685 of 858
2021-03-12 08:11:41,831 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:41,831 [main:28] - Try â„–686 of 858
2021-03-12 08:11:41,835 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:41,835 [main:28] - Try â„–687 of 858
2021-03-12 08:11:41,848 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-12 08:11:41,848 [main:28] - Try â„–688 of 858
2021-03-12 08:11:41,861 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:41,861 [main:28] - Try â„–689 of 858
2021-03-12 08:11:41,870 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:41,870 [main:28] - Try â„–690 of 858
2021-03-12 08:11:41,886 [main:33] - Trying to replace PsiElement(QUEST) on PsiElement(QUEST)
2021-03-12 08:11:41,886 [main:28] - Try â„–691 of 858
2021-03-12 08:11:41,900 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-12 08:11:41,901 [main:28] - Try â„–692 of 858
2021-03-12 08:11:41,916 [main:28] - Try â„–693 of 858
2021-03-12 08:11:41,929 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:41,929 [main:28] - Try â„–694 of 858
2021-03-12 08:11:41,935 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:41,935 [main:28] - Try â„–695 of 858
2021-03-12 08:11:41,944 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:41,944 [main:28] - Try â„–696 of 858
2021-03-12 08:11:41,954 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-12 08:11:41,954 [main:28] - Try â„–697 of 858
2021-03-12 08:11:41,963 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:41,963 [main:28] - Try â„–698 of 858
2021-03-12 08:11:41,970 [main:33] - Trying to replace Element(TYPE_PARAMETER) on Element(TYPE_PARAMETER)
2021-03-12 08:11:41,970 [main:28] - Try â„–699 of 858
2021-03-12 08:11:41,975 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:41,975 [main:28] - Try â„–700 of 858
2021-03-12 08:11:41,985 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:41,985 [main:28] - Try â„–701 of 858
2021-03-12 08:11:41,988 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:41,988 [main:28] - Try â„–702 of 858
2021-03-12 08:11:42,003 [main:33] - Trying to replace Element(NULLABLE_TYPE) on Element(NULLABLE_TYPE)
2021-03-12 08:11:42,003 [main:28] - Try â„–703 of 858
2021-03-12 08:11:42,007 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:42,007 [main:66] - Compilation checking started
2021-03-12 08:11:42,007 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:11:42,008 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = String()

suspend fun KProperty() {
    }

object List {
        var log = ""
    }

fun CLASS(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:42,008 [main:28] - Try â„–704 of 858
2021-03-12 08:11:42,017 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:42,017 [main:28] - Try â„–705 of 858
2021-03-12 08:11:42,026 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:42,026 [main:66] - Compilation checking started
2021-03-12 08:11:42,026 [main:68] - Already checked
2021-03-12 08:11:42,026 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = String()

suspend fun KProperty() {
    }

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    String = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:42,026 [main:28] - Try â„–706 of 858
2021-03-12 08:11:42,036 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:42,037 [main:66] - Compilation checking started
2021-03-12 08:11:42,161 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = String()

suspend fun KProperty() {
    }

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    test = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:42,161 [main:28] - Try â„–707 of 858
2021-03-12 08:11:42,176 [main:28] - Try â„–708 of 858
2021-03-12 08:11:42,179 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:42,180 [main:28] - Try â„–709 of 858
2021-03-12 08:11:42,191 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:42,192 [main:28] - Try â„–710 of 858
2021-03-12 08:11:42,195 [main:33] - Trying to replace Element(TYPE_PARAMETER_LIST) on Element(TYPE_PARAMETER_LIST)
2021-03-12 08:11:42,195 [main:28] - Try â„–711 of 858
2021-03-12 08:11:42,204 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:42,204 [main:28] - Try â„–712 of 858
2021-03-12 08:11:42,207 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:42,208 [main:28] - Try â„–713 of 858
2021-03-12 08:11:42,217 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:42,217 [main:28] - Try â„–714 of 858
2021-03-12 08:11:42,231 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:42,231 [main:28] - Try â„–715 of 858
2021-03-12 08:11:42,234 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:42,234 [main:28] - Try â„–716 of 858
2021-03-12 08:11:42,249 [main:33] - Trying to replace Element(NULLABLE_TYPE) on Element(NULLABLE_TYPE)
2021-03-12 08:11:42,249 [main:28] - Try â„–717 of 858
2021-03-12 08:11:42,253 [main:33] - Trying to replace Element(TYPE_PARAMETER_LIST) on Element(TYPE_PARAMETER_LIST)
2021-03-12 08:11:42,253 [main:28] - Try â„–718 of 858
2021-03-12 08:11:42,262 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:42,262 [main:28] - Try â„–719 of 858
2021-03-12 08:11:42,269 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:42,269 [main:28] - Try â„–720 of 858
2021-03-12 08:11:42,281 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:11:42,281 [main:28] - Try â„–721 of 858
2021-03-12 08:11:42,285 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:42,285 [main:66] - Compilation checking started
2021-03-12 08:11:42,424 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = String()

suspend fun KProperty() {
    }

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    toInt = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:42,424 [main:28] - Try â„–722 of 858
2021-03-12 08:11:42,433 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:42,433 [main:28] - Try â„–723 of 858
2021-03-12 08:11:42,437 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:42,437 [main:28] - Try â„–724 of 858
2021-03-12 08:11:42,439 [main:33] - Trying to replace Element(IMPORT_LIST) on Element(IMPORT_LIST)
2021-03-12 08:11:42,439 [main:66] - Compilation checking started
2021-03-12 08:11:42,439 [main:68] - Already checked
2021-03-12 08:11:42,439 [main:28] - Try â„–725 of 858
2021-03-12 08:11:42,448 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:42,448 [main:28] - Try â„–726 of 858
2021-03-12 08:11:42,452 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:42,452 [main:28] - Try â„–727 of 858
2021-03-12 08:11:42,455 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:42,455 [main:28] - Try â„–728 of 858
2021-03-12 08:11:42,460 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:42,460 [main:28] - Try â„–729 of 858
2021-03-12 08:11:42,463 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-12 08:11:42,463 [main:66] - Compilation checking started
2021-03-12 08:11:42,596 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

fun box(): String {
    var count = 0

    for ((_, _) in arr.withIndex()) {
        count++
    }

    return if (count == 4) "OK" else "fail: '$count'"
}

suspend fun KProperty() {
    }

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:42,596 [main:28] - Try â„–730 of 858
2021-03-12 08:11:42,605 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:42,605 [main:28] - Try â„–731 of 858
2021-03-12 08:11:42,621 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-12 08:11:42,621 [main:28] - Try â„–732 of 858
2021-03-12 08:11:42,624 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:42,624 [main:28] - Try â„–733 of 858
2021-03-12 08:11:42,632 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:11:42,632 [main:66] - Compilation checking started
2021-03-12 08:11:42,761 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = String()

suspend fun KProperty() {
    if (flag) doStuff1()
}

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:42,762 [main:28] - Try â„–734 of 858
2021-03-12 08:11:42,778 [main:28] - Try â„–735 of 858
2021-03-12 08:11:42,783 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:42,783 [main:28] - Try â„–736 of 858
2021-03-12 08:11:42,796 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:42,796 [main:28] - Try â„–737 of 858
2021-03-12 08:11:42,799 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:42,800 [main:28] - Try â„–738 of 858
2021-03-12 08:11:42,804 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:42,804 [main:28] - Try â„–739 of 858
2021-03-12 08:11:42,807 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:42,807 [main:28] - Try â„–740 of 858
2021-03-12 08:11:42,821 [main:33] - Trying to replace Element(SHORT_STRING_TEMPLATE_ENTRY) on Element(SHORT_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:42,822 [main:28] - Try â„–741 of 858
2021-03-12 08:11:42,826 [main:33] - Trying to replace Element(CLASS_BODY) on Element(CLASS_BODY)
2021-03-12 08:11:42,827 [main:66] - Compilation checking started
2021-03-12 08:11:42,947 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = String()

suspend fun KProperty() {
    }

object List {
    suspend fun bar(): IC?
}

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:42,947 [main:28] - Try â„–742 of 858
2021-03-12 08:11:42,956 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:42,956 [main:28] - Try â„–743 of 858
2021-03-12 08:11:42,972 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-12 08:11:42,972 [main:28] - Try â„–744 of 858
2021-03-12 08:11:42,978 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:42,978 [main:28] - Try â„–745 of 858
2021-03-12 08:11:42,984 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:42,984 [main:28] - Try â„–746 of 858
2021-03-12 08:11:42,995 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-12 08:11:42,995 [main:28] - Try â„–747 of 858
2021-03-12 08:11:43,005 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:43,005 [main:28] - Try â„–748 of 858
2021-03-12 08:11:43,008 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:43,008 [main:28] - Try â„–749 of 858
2021-03-12 08:11:43,014 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:43,014 [main:28] - Try â„–750 of 858
2021-03-12 08:11:43,018 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:43,018 [main:28] - Try â„–751 of 858
2021-03-12 08:11:43,025 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:11:43,025 [main:28] - Try â„–752 of 858
2021-03-12 08:11:43,034 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:43,035 [main:28] - Try â„–753 of 858
2021-03-12 08:11:43,043 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:43,043 [main:28] - Try â„–754 of 858
2021-03-12 08:11:43,060 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-12 08:11:43,060 [main:28] - Try â„–755 of 858
2021-03-12 08:11:43,074 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:43,074 [main:28] - Try â„–756 of 858
2021-03-12 08:11:43,077 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:43,077 [main:66] - Compilation checking started
2021-03-12 08:11:43,203 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = String()

suspend fun KProperty() {
    }

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    x = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:43,204 [main:28] - Try â„–757 of 858
2021-03-12 08:11:43,210 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:43,210 [main:28] - Try â„–758 of 858
2021-03-12 08:11:43,220 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:43,220 [main:28] - Try â„–759 of 858
2021-03-12 08:11:43,233 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:43,233 [main:28] - Try â„–760 of 858
2021-03-12 08:11:43,238 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:43,238 [main:28] - Try â„–761 of 858
2021-03-12 08:11:43,247 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:43,247 [main:28] - Try â„–762 of 858
2021-03-12 08:11:43,255 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:43,255 [main:28] - Try â„–763 of 858
2021-03-12 08:11:43,262 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:43,262 [main:28] - Try â„–764 of 858
2021-03-12 08:11:43,271 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:43,271 [main:66] - Compilation checking started
2021-03-12 08:11:43,271 [main:68] - Already checked
2021-03-12 08:11:43,271 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = String()

suspend fun KProperty() {
    }

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    String = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:43,271 [main:28] - Try â„–765 of 858
2021-03-12 08:11:43,274 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-12 08:11:43,274 [main:66] - Compilation checking started
2021-03-12 08:11:43,428 [main:53] - Result = true
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = String()

// DONT_TARGET_EXACT_BACKEND: WASM
// WASM_MUTE_REASON: EXCEPTIONS_NOT_IMPLEMENTED
fun <T> castToString(t: T) {
    t as String
}

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:43,428 [main:28] - Try â„–766 of 858
2021-03-12 08:11:43,438 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:43,438 [main:28] - Try â„–767 of 858
2021-03-12 08:11:43,442 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:43,443 [main:28] - Try â„–768 of 858
2021-03-12 08:11:43,453 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:43,453 [main:28] - Try â„–769 of 858
2021-03-12 08:11:43,457 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:43,457 [main:28] - Try â„–770 of 858
2021-03-12 08:11:43,462 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:43,462 [main:28] - Try â„–771 of 858
2021-03-12 08:11:43,462 [main:28] - Try â„–772 of 858
2021-03-12 08:11:43,470 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:43,470 [main:28] - Try â„–773 of 858
2021-03-12 08:11:43,479 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-12 08:11:43,479 [main:28] - Try â„–774 of 858
2021-03-12 08:11:43,491 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:43,491 [main:28] - Try â„–775 of 858
2021-03-12 08:11:43,506 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:43,506 [main:28] - Try â„–776 of 858
2021-03-12 08:11:43,516 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:43,516 [main:28] - Try â„–777 of 858
2021-03-12 08:11:43,525 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:43,525 [main:28] - Try â„–778 of 858
2021-03-12 08:11:43,538 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:43,539 [main:28] - Try â„–779 of 858
2021-03-12 08:11:43,542 [main:33] - Trying to replace Element(TYPE_PARAMETER_LIST) on Element(TYPE_PARAMETER_LIST)
2021-03-12 08:11:43,542 [main:28] - Try â„–780 of 858
2021-03-12 08:11:43,551 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:43,551 [main:28] - Try â„–781 of 858
2021-03-12 08:11:43,564 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-12 08:11:43,564 [main:28] - Try â„–782 of 858
2021-03-12 08:11:43,577 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:43,577 [main:28] - Try â„–783 of 858
2021-03-12 08:11:43,581 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:43,581 [main:28] - Try â„–784 of 858
2021-03-12 08:11:43,588 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:43,588 [main:28] - Try â„–785 of 858
2021-03-12 08:11:43,597 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:43,597 [main:28] - Try â„–786 of 858
2021-03-12 08:11:43,603 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:43,603 [main:28] - Try â„–787 of 858
2021-03-12 08:11:43,618 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:43,618 [main:28] - Try â„–788 of 858
2021-03-12 08:11:43,622 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:43,622 [main:28] - Try â„–789 of 858
2021-03-12 08:11:43,628 [main:33] - Trying to replace Element(CLASS_BODY) on Element(CLASS_BODY)
2021-03-12 08:11:43,628 [main:66] - Compilation checking started
2021-03-12 08:11:43,781 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = String()

// DONT_TARGET_EXACT_BACKEND: WASM
// WASM_MUTE_REASON: EXCEPTIONS_NOT_IMPLEMENTED
fun <T> castToString(t: T) {
    t as String
}

object List {
    override fun checkTrue(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkFalse(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l())
        }
        return hit
    }

    override fun checkTrueWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; true }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }

    override fun checkFalseWithMessage(): Boolean {
        var hit = false
        val l = { hit = true; false }
        call {
            assert(l()) { "BOOYA" }
        }
        return hit
    }
}

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:43,781 [main:28] - Try â„–790 of 858
2021-03-12 08:11:43,795 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:43,795 [main:28] - Try â„–791 of 858
2021-03-12 08:11:43,805 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:43,805 [main:28] - Try â„–792 of 858
2021-03-12 08:11:43,811 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:43,811 [main:28] - Try â„–793 of 858
2021-03-12 08:11:43,818 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:43,819 [main:28] - Try â„–794 of 858
2021-03-12 08:11:43,834 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:43,834 [main:28] - Try â„–795 of 858
2021-03-12 08:11:43,840 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:43,840 [main:28] - Try â„–796 of 858
2021-03-12 08:11:43,844 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:43,845 [main:28] - Try â„–797 of 858
2021-03-12 08:11:43,860 [main:33] - Trying to replace Element(NULLABLE_TYPE) on Element(NULLABLE_TYPE)
2021-03-12 08:11:43,860 [main:28] - Try â„–798 of 858
2021-03-12 08:11:43,874 [main:33] - Trying to replace PsiElement(SHORT_TEMPLATE_ENTRY_START) on PsiElement(SHORT_TEMPLATE_ENTRY_START)
2021-03-12 08:11:43,874 [main:28] - Try â„–799 of 858
2021-03-12 08:11:43,883 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:43,883 [main:28] - Try â„–800 of 858
2021-03-12 08:11:43,892 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:43,892 [main:28] - Try â„–801 of 858
2021-03-12 08:11:43,907 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:43,907 [main:28] - Try â„–802 of 858
2021-03-12 08:11:43,916 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:43,916 [main:28] - Try â„–803 of 858
2021-03-12 08:11:43,919 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:43,920 [main:66] - Compilation checking started
2021-03-12 08:11:44,051 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(f: () -> String): CharSequence = String()

// DONT_TARGET_EXACT_BACKEND: WASM
// WASM_MUTE_REASON: EXCEPTIONS_NOT_IMPLEMENTED
fun <T> castToString(t: T) {
    t as String
}

object List {
        var log = ""
    }

fun box(): String {
    var I : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:44,051 [main:28] - Try â„–804 of 858
2021-03-12 08:11:44,055 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-12 08:11:44,056 [main:28] - Try â„–805 of 858
2021-03-12 08:11:44,065 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:44,065 [main:28] - Try â„–806 of 858
2021-03-12 08:11:44,078 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:44,078 [main:28] - Try â„–807 of 858
2021-03-12 08:11:44,091 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:44,091 [main:28] - Try â„–808 of 858
2021-03-12 08:11:44,103 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:44,103 [main:28] - Try â„–809 of 858
2021-03-12 08:11:44,106 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:44,106 [main:28] - Try â„–810 of 858
2021-03-12 08:11:44,120 [main:28] - Try â„–811 of 858
2021-03-12 08:11:44,132 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:44,133 [main:28] - Try â„–812 of 858
2021-03-12 08:11:44,146 [main:33] - Trying to replace Element(CONDITION) on Element(CONDITION)
2021-03-12 08:11:44,147 [main:28] - Try â„–813 of 858
2021-03-12 08:11:44,160 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:44,160 [main:28] - Try â„–814 of 858
2021-03-12 08:11:44,166 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:44,166 [main:66] - Compilation checking started
2021-03-12 08:11:44,335 [main:53] - Result = true
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(z: () -> String): CharSequence = String()

// DONT_TARGET_EXACT_BACKEND: WASM
// WASM_MUTE_REASON: EXCEPTIONS_NOT_IMPLEMENTED
fun <T> castToString(t: T) {
    t as String
}

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:44,335 [main:28] - Try â„–815 of 858
2021-03-12 08:11:44,345 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:44,345 [main:28] - Try â„–816 of 858
2021-03-12 08:11:44,359 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-12 08:11:44,359 [main:28] - Try â„–817 of 858
2021-03-12 08:11:44,373 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-12 08:11:44,374 [main:28] - Try â„–818 of 858
2021-03-12 08:11:44,381 [main:33] - Trying to replace Element(TYPE_PARAMETER) on Element(TYPE_PARAMETER)
2021-03-12 08:11:44,381 [main:28] - Try â„–819 of 858
2021-03-12 08:11:44,390 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:44,390 [main:28] - Try â„–820 of 858
2021-03-12 08:11:44,401 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:44,401 [main:28] - Try â„–821 of 858
2021-03-12 08:11:44,416 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-12 08:11:44,416 [main:28] - Try â„–822 of 858
2021-03-12 08:11:44,423 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:11:44,423 [main:66] - Compilation checking started
2021-03-12 08:11:44,539 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(z: () -> String): CharSequence = check(M::class)

// DONT_TARGET_EXACT_BACKEND: WASM
// WASM_MUTE_REASON: EXCEPTIONS_NOT_IMPLEMENTED
fun <T> castToString(t: T) {
    t as String
}

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:44,540 [main:28] - Try â„–823 of 858
2021-03-12 08:11:44,552 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:44,552 [main:28] - Try â„–824 of 858
2021-03-12 08:11:44,555 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:44,556 [main:66] - Compilation checking started
2021-03-12 08:11:44,677 [main:49] - Result = false
Text:
fun foo(size: Int) {}

fun foo(a: Any) {}

inline fun <T, R> foo(z: () -> String): CharSequence = String()

// DONT_TARGET_EXACT_BACKEND: WASM
// WASM_MUTE_REASON: EXCEPTIONS_NOT_IMPLEMENTED
fun <T> castToString(t: T) {
    t as String
}

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    s = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:44,677 [main:28] - Try â„–825 of 858
2021-03-12 08:11:44,681 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-12 08:11:44,681 [main:28] - Try â„–826 of 858
2021-03-12 08:11:44,691 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-12 08:11:44,692 [main:28] - Try â„–827 of 858
2021-03-12 08:11:44,706 [main:28] - Try â„–828 of 858
2021-03-12 08:11:44,716 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:44,716 [main:28] - Try â„–829 of 858
2021-03-12 08:11:44,719 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:44,719 [main:28] - Try â„–830 of 858
2021-03-12 08:11:44,731 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:44,731 [main:28] - Try â„–831 of 858
2021-03-12 08:11:44,746 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-12 08:11:44,746 [main:28] - Try â„–832 of 858
2021-03-12 08:11:44,760 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:44,760 [main:28] - Try â„–833 of 858
2021-03-12 08:11:44,764 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:44,764 [main:28] - Try â„–834 of 858
2021-03-12 08:11:44,771 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-12 08:11:44,772 [main:28] - Try â„–835 of 858
2021-03-12 08:11:44,775 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:44,775 [main:28] - Try â„–836 of 858
2021-03-12 08:11:44,784 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:44,784 [main:28] - Try â„–837 of 858
2021-03-12 08:11:44,796 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:11:44,796 [main:28] - Try â„–838 of 858
2021-03-12 08:11:44,799 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:44,800 [main:28] - Try â„–839 of 858
2021-03-12 08:11:44,809 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:44,809 [main:28] - Try â„–840 of 858
2021-03-12 08:11:44,818 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-12 08:11:44,818 [main:28] - Try â„–841 of 858
2021-03-12 08:11:44,833 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-12 08:11:44,834 [main:28] - Try â„–842 of 858
2021-03-12 08:11:44,837 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-12 08:11:44,837 [main:28] - Try â„–843 of 858
2021-03-12 08:11:44,849 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-12 08:11:44,849 [main:28] - Try â„–844 of 858
2021-03-12 08:11:44,853 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:44,853 [main:28] - Try â„–845 of 858
2021-03-12 08:11:44,865 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:11:44,865 [main:28] - Try â„–846 of 858
2021-03-12 08:11:44,868 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-12 08:11:44,868 [main:28] - Try â„–847 of 858
2021-03-12 08:11:44,881 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-12 08:11:44,881 [main:28] - Try â„–848 of 858
2021-03-12 08:11:44,888 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-12 08:11:44,888 [main:66] - Compilation checking started
2021-03-12 08:11:45,013 [main:49] - Result = false
Text:
fun foo(size: Int) {
    c.startCoroutine(EmptyContinuation)
}

fun foo(a: Any) {}

inline fun <T, R> foo(z: () -> String): CharSequence = String()

// DONT_TARGET_EXACT_BACKEND: WASM
// WASM_MUTE_REASON: EXCEPTIONS_NOT_IMPLEMENTED
fun <T> castToString(t: T) {
    t as String
}

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:45,014 [main:28] - Try â„–849 of 858
2021-03-12 08:11:45,022 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:11:45,023 [main:28] - Try â„–850 of 858
2021-03-12 08:11:45,029 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-12 08:11:45,029 [main:28] - Try â„–851 of 858
2021-03-12 08:11:45,043 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:45,043 [main:28] - Try â„–852 of 858
2021-03-12 08:11:45,056 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-12 08:11:45,057 [main:28] - Try â„–853 of 858
2021-03-12 08:11:45,070 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-12 08:11:45,071 [main:28] - Try â„–854 of 858
2021-03-12 08:11:45,087 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:11:45,087 [main:28] - Try â„–855 of 858
2021-03-12 08:11:45,103 [main:33] - Trying to replace PsiElement(QUEST) on PsiElement(QUEST)
2021-03-12 08:11:45,103 [main:28] - Try â„–856 of 858
2021-03-12 08:11:45,114 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-12 08:11:45,114 [main:28] - Try â„–857 of 858
2021-03-12 08:11:45,119 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:11:45,119 [main:28] - Try â„–858 of 858
2021-03-12 08:11:45,130 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-12 08:11:45,203 [main:50] - replacing size: Int Int
2021-03-12 08:11:45,203 [main:54] - Getting value of type Int
2021-03-12 08:11:45,275 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:11:45,275 [main:58] - GENERATED VALUE OF TYPE Int = -815171309
2021-03-12 08:11:45,275 [main:61] - GENERATED IS CALL =false
2021-03-12 08:11:45,345 [main:67] - randomType = List
2021-03-12 08:11:45,412 [main:302] - generating value of type = List false depth = 0
2021-03-12 08:11:45,413 [main:112] - generating klass List text = object List {
        var log = ""
    }
2021-03-12 08:11:45,420 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.List<T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3f9e00de]
2021-03-12 08:11:45,488 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 08:11:45,488 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:11:45,488 [main:78] - Generated call from random type = (List).indexOfLast({a: T -> true})
2021-03-12 08:11:45,488 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:11:45,489 [main:66] - Compilation checking started
2021-03-12 08:11:45,672 [main:53] - Result = true
Text:
fun foo(size: Int = -815171309) {}

fun foo(a: Any) {}

inline fun <T, R> foo(z: () -> String): CharSequence = String()

// DONT_TARGET_EXACT_BACKEND: WASM
// WASM_MUTE_REASON: EXCEPTIONS_NOT_IMPLEMENTED
fun <T> castToString(t: T) {
    t as String
}

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:45,672 [main:50] - replacing a: Any Any
2021-03-12 08:11:45,672 [main:54] - Getting value of type Any
2021-03-12 08:11:45,740 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:11:45,740 [main:58] - GENERATED VALUE OF TYPE Any = "qbdgs"
2021-03-12 08:11:45,740 [main:61] - GENERATED IS CALL =false
2021-03-12 08:11:47,028 [main:67] - randomType = Triple<LinkedHashMap<ArrayList<List>, Array<List>>, LinkedHashMap<MutableMap<List, List>, List?>?, List?>
2021-03-12 08:11:47,122 [main:302] - generating value of type = Triple<LinkedHashMap<ArrayList<List>, Array<List>>, LinkedHashMap<MutableMap<List, List>, List?>?, List?> false depth = 0
2021-03-12 08:11:47,200 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: LinkedHashMap<ArrayList<List>, Array<List>>, second: LinkedHashMap<MutableMap<List, List>, List?>?, third: List?): Triple<LinkedHashMap<ArrayList<List>, Array<List>>, LinkedHashMap<MutableMap<List, List>, List?>?, List?> = TODO()
2021-03-12 08:11:47,201 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: LinkedHashMap<ArrayList<List>, Array<List>>, second: LinkedHashMap<MutableMap<List, List>, List?>?, third: List?): Triple<LinkedHashMap<ArrayList<List>, Array<List>>, LinkedHashMap<MutableMap<List, List>, List?>?, List?> = TODO()
2021-03-12 08:11:47,310 [main:302] - generating value of type = LinkedHashMap<ArrayList<List>, Array<List>> false depth = 3
2021-03-12 08:11:47,394 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<ArrayList<List>, Array<List>>): LkedHashMap<ArrayList<List>, Array<List>> = TODO()
2021-03-12 08:11:47,395 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<ArrayList<List>, Array<List>>): LkedHashMap<ArrayList<List>, Array<List>> = TODO()
2021-03-12 08:11:47,465 [main:302] - generating value of type = Pair<ArrayList<List>, Array<List>> false depth = 6
2021-03-12 08:11:47,568 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ArrayList<List>, second: Array<List>): Pair<ArrayList<List>, Array<List>> = TODO()
2021-03-12 08:11:47,569 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ArrayList<List>, second: Array<List>): Pair<ArrayList<List>, Array<List>> = TODO()
2021-03-12 08:11:47,667 [main:302] - generating value of type = ArrayList<List> false depth = 9
2021-03-12 08:11:47,759 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<List> = TODO()
2021-03-12 08:11:47,760 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<List> = TODO()
2021-03-12 08:11:47,849 [main:95] - GENERATED = arrayListOf<List>()
2021-03-12 08:11:47,849 [main:302] - generating value of type = Array<List> false depth = 9
2021-03-12 08:11:47,931 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<List> = TODO()
2021-03-12 08:11:47,932 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<List> = TODO()
2021-03-12 08:11:48,003 [main:95] - GENERATED = emptyArray<List>()
2021-03-12 08:11:48,003 [main:95] - GENERATED = Pair<ArrayList<List>, Array<List>>(arrayListOf<List>(), emptyArray<List>())
2021-03-12 08:11:48,003 [main:95] - GENERATED = linkedMapOf<ArrayList<List>, Array<List>>(Pair<ArrayList<List>, Array<List>>(arrayListOf<List>(), emptyArray<List>()))
2021-03-12 08:11:48,003 [main:302] - generating value of type = LinkedHashMap<MutableMap<List, List>, List?> false depth = 3
2021-03-12 08:11:48,089 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<MutableMap<List, List>, List?>): LkedHashMap<MutableMap<List, List>, List?> = TODO()
2021-03-12 08:11:48,090 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<MutableMap<List, List>, List?>): LkedHashMap<MutableMap<List, List>, List?> = TODO()
2021-03-12 08:11:48,176 [main:302] - generating value of type = Pair<MutableMap<List, List>, List?> false depth = 6
2021-03-12 08:11:48,266 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: MutableMap<List, List>, second: List?): Pair<MutableMap<List, List>, List?> = TODO()
2021-03-12 08:11:48,267 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: MutableMap<List, List>, second: List?): Pair<MutableMap<List, List>, List?> = TODO()
2021-03-12 08:11:48,352 [main:302] - generating value of type = MutableMap<List, List> false depth = 9
2021-03-12 08:11:48,436 [main:43] - GENERATING CALL OF fun <K, V> mutableMapOf(pairs: Pair<List, List>): MutableMap<List, List> = TODO()
2021-03-12 08:11:48,437 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mutableMapOf(pairs: Pair<List, List>): MutableMap<List, List> = TODO()
2021-03-12 08:11:48,510 [main:302] - generating value of type = Pair<List, List> false depth = 12
2021-03-12 08:11:48,597 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: List, second: List): Pair<List, List> = TODO()
2021-03-12 08:11:48,598 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: List, second: List): Pair<List, List> = TODO()
2021-03-12 08:11:48,679 [main:302] - generating value of type = List false depth = 15
2021-03-12 08:11:48,680 [main:112] - generating klass List text = object List {
        var log = ""
    }
2021-03-12 08:11:48,680 [main:302] - generating value of type = List false depth = 15
2021-03-12 08:11:48,680 [main:112] - generating klass List text = object List {
        var log = ""
    }
2021-03-12 08:11:48,680 [main:95] - GENERATED = Pair<List, List>(List, List)
2021-03-12 08:11:48,680 [main:95] - GENERATED = mutableMapOf<List, List>(Pair<List, List>(List, List))
2021-03-12 08:11:48,680 [main:302] - generating value of type = List false depth = 9
2021-03-12 08:11:48,680 [main:112] - generating klass List text = object List {
        var log = ""
    }
2021-03-12 08:11:48,681 [main:95] - GENERATED = Pair<MutableMap<List, List>, List?>(mutableMapOf<List, List>(Pair<List, List>(List, List)), List)
2021-03-12 08:11:48,681 [main:95] - GENERATED = linkedMapOf<MutableMap<List, List>, List?>(Pair<MutableMap<List, List>, List?>(mutableMapOf<List, List>(Pair<List, List>(List, List)), List))
2021-03-12 08:11:48,681 [main:302] - generating value of type = List false depth = 3
2021-03-12 08:11:48,681 [main:112] - generating klass List text = object List {
        var log = ""
    }
2021-03-12 08:11:48,681 [main:95] - GENERATED = Triple<LinkedHashMap<ArrayList<List>, Array<List>>, LinkedHashMap<MutableMap<List, List>, List?>?, List?>(linkedMapOf<ArrayList<List>, Array<List>>(Pair<ArrayList<List>, Array<List>>(arrayListOf<List>(), emptyArray<List>())), linkedMapOf<MutableMap<List, List>, List?>(Pair<MutableMap<List, List>, List?>(mutableMapOf<List, List>(Pair<List, List>(List, List)), List)), List)
2021-03-12 08:11:48,733 [main:106] - GETTING Any from Int
2021-03-12 08:11:48,787 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:11:48,787 [main:66] - Compilation checking started
2021-03-12 08:11:48,926 [main:49] - Result = false
Text:
fun foo(size: Int = -815171309) {}

fun foo(a: Any = size) {}

inline fun <T, R> foo(z: () -> String): CharSequence = String()

// DONT_TARGET_EXACT_BACKEND: WASM
// WASM_MUTE_REASON: EXCEPTIONS_NOT_IMPLEMENTED
fun <T> castToString(t: T) {
    t as String
}

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:48,927 [main:50] - replacing z: () -> String Function0<String>
2021-03-12 08:11:48,927 [main:54] - Getting value of type Function0<String>
2021-03-12 08:11:49,002 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-12 08:11:49,002 [main:302] - generating value of type = String true depth = 1
2021-03-12 08:11:49,002 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "rgcpt"}
2021-03-12 08:11:49,002 [main:61] - GENERATED IS CALL =false
2021-03-12 08:11:49,763 [main:67] - randomType = Triple<List, MutableMap<List, Double?>?, List>?
2021-03-12 08:11:49,832 [main:302] - generating value of type = Triple<List, MutableMap<List, Double?>?, List> false depth = 0
2021-03-12 08:11:49,916 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: List, second: MutableMap<List, Double?>?, third: List): Triple<List, MutableMap<List, Double?>?, List> = TODO()
2021-03-12 08:11:49,917 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: List, second: MutableMap<List, Double?>?, third: List): Triple<List, MutableMap<List, Double?>?, List> = TODO()
2021-03-12 08:11:50,011 [main:302] - generating value of type = List false depth = 3
2021-03-12 08:11:50,011 [main:112] - generating klass List text = object List {
        var log = ""
    }
2021-03-12 08:11:50,011 [main:302] - generating value of type = MutableMap<List, Double?> false depth = 3
2021-03-12 08:11:50,084 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): MutableMap<List, Double?> = TODO()
2021-03-12 08:11:50,085 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): MutableMap<List, Double?> = TODO()
2021-03-12 08:11:50,173 [main:95] - GENERATED = hashMapOf<List, Double?>()
2021-03-12 08:11:50,173 [main:302] - generating value of type = List false depth = 3
2021-03-12 08:11:50,174 [main:112] - generating klass List text = object List {
        var log = ""
    }
2021-03-12 08:11:50,174 [main:95] - GENERATED = Triple<List, MutableMap<List, Double?>?, List>(List, hashMapOf<List, Double?>(), List)
2021-03-12 08:11:50,216 [main:106] - GETTING Function0<String> from Int
2021-03-12 08:11:50,287 [main:106] - GETTING Function0<String> from Any
2021-03-12 08:11:50,291 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:11:50,291 [main:66] - Compilation checking started
2021-03-12 08:11:50,474 [main:53] - Result = true
Text:
fun foo(size: Int = -815171309) {}

fun foo(a: Any) {}

inline fun <T, R> foo(z: () -> String = { "rgcpt"}): CharSequence = String()

// DONT_TARGET_EXACT_BACKEND: WASM
// WASM_MUTE_REASON: EXCEPTIONS_NOT_IMPLEMENTED
fun <T> castToString(t: T) {
    t as String
}

object List {
        var log = ""
    }

fun box(): String {
    var i : Any?
    i = 10
    // FILE: Foo.kt
    // IGNORE_BACKEND_FIR: JVM_IR
    val B = String!=

    return "OK"
}


2021-03-12 08:11:50,796 [main:45] - Trying to change 0 nodes
2021-03-12 08:11:50,910 [main:41] - AFTER TRY 0 res = fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}


2021-03-12 08:11:51,102 [main:112] - generating klass Kla0 text = object Kla0 {
    val prope0 = {}
}
2021-03-12 08:11:51,265 [main:43] - GENERATING CALL OF inline fun fu0(crossinline y: () -> String) = { "uhdyh"}
2021-03-12 08:11:51,266 [main:61] - WITHOUT TYPE PARAMS = inline fun fu0(crossinline y: () -> String) = { "uhdyh"}
2021-03-12 08:11:51,435 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-12 08:11:51,435 [main:302] - generating value of type = String true depth = 2
2021-03-12 08:11:51,436 [main:95] - GENERATED = fu0({ "hlygk"})
2021-03-12 08:11:51,509 [main:43] - GENERATING CALL OF public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()
2021-03-12 08:11:51,603 [main:61] - WITHOUT TYPE PARAMS = public inline fun <Ty0> fu1(f: () -> Byte): Byte = f()
2021-03-12 08:11:51,768 [main:302] - generating value of type = Function0<Byte> false depth = 1
2021-03-12 08:11:51,768 [main:302] - generating value of type = Byte true depth = 2
2021-03-12 08:11:51,769 [main:95] - GENERATED = fu1<Byte>({ 38})
2021-03-12 08:11:51,862 [main:43] - Try â„–0
2021-03-12 08:11:53,068 [main:69] - Trying to insert fun fu3(f: Int.() -> Int) = 2.f()
2021-03-12 08:11:53,177 [main:66] - Compilation checking started
2021-03-12 08:11:53,708 [main:103] - Trying to change 64 nodes
2021-03-12 08:11:53,708 [main:107] - replacing (2, Int)
2021-03-12 08:11:53,708 [main:50] - replacing 2 Int
2021-03-12 08:11:53,708 [main:54] - Getting value of type Int
2021-03-12 08:11:53,812 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:11:53,813 [main:58] - GENERATED VALUE OF TYPE Int = 1891399836
2021-03-12 08:11:53,813 [main:61] - GENERATED IS CALL =false
2021-03-12 08:11:53,815 [main:67] - randomType = Kla0
2021-03-12 08:11:53,922 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 08:11:53,923 [main:112] - generating klass Kla0 text = object Kla0 {
    val prope0 = {}
}
2021-03-12 08:11:53,931 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7429d43f]
2021-03-12 08:11:54,048 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:11:54,048 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]
2021-03-12 08:11:54,187 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:11:54,188 [main:78] - Generated call from random type = (Kla0).equals("blmmq").compareTo(false)
2021-03-12 08:11:54,189 [main:106] - GETTING Int from Boolean
2021-03-12 08:11:54,219 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18bca8c2]]
2021-03-12 08:11:54,220 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]
2021-03-12 08:11:54,220 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18bca8c2]
2021-03-12 08:11:54,220 [main:117] - GENERATED CALL = ((true)).compareTo((true)).unaryPlus()
2021-03-12 08:11:54,220 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]]
2021-03-12 08:11:54,220 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]
2021-03-12 08:11:54,305 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:11:54,306 [main:117] - GENERATED CALL = ((true)).compareTo(false)
2021-03-12 08:11:54,306 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19a97c2f]]
2021-03-12 08:11:54,307 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]
2021-03-12 08:11:54,407 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:11:54,408 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19a97c2f]
2021-03-12 08:11:54,409 [main:117] - GENERATED CALL = ((true)).compareTo(true).shr(((true).compareTo((true))))
2021-03-12 08:11:54,409 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@261bfdd6]]
2021-03-12 08:11:54,409 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]
2021-03-12 08:11:54,409 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@261bfdd6]
2021-03-12 08:11:54,409 [main:117] - GENERATED CALL = ((true)).compareTo((true)).ushr((true).compareTo((true)))
2021-03-12 08:11:54,409 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@22e0a633]]
2021-03-12 08:11:54,409 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]
2021-03-12 08:11:54,509 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:11:54,509 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@22e0a633]
2021-03-12 08:11:54,510 [main:117] - GENERATED CALL = ((true)).compareTo(true).inc()
2021-03-12 08:11:54,510 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e01a901]]
2021-03-12 08:11:54,510 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]
2021-03-12 08:11:54,618 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:11:54,619 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-12 08:11:54,719 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:11:54,720 [main:117] - GENERATED CALL = ((true)).compareTo(true).rem(72)
2021-03-12 08:11:54,720 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20f27d34]]
2021-03-12 08:11:54,720 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]
2021-03-12 08:11:54,720 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@20f27d34]
2021-03-12 08:11:54,720 [main:117] - GENERATED CALL = ((true)).compareTo((true)).countOneBits()
2021-03-12 08:11:54,720 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5742402f]]
2021-03-12 08:11:54,721 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]
2021-03-12 08:11:54,828 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:11:54,830 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5742402f]
2021-03-12 08:11:54,830 [main:117] - GENERATED CALL = ((true)).compareTo(true).countTrailingZeroBits()
2021-03-12 08:11:54,830 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5e8e40e8]]
2021-03-12 08:11:54,830 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]
2021-03-12 08:11:54,830 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5e8e40e8]
2021-03-12 08:11:54,831 [main:117] - GENERATED CALL = ((true)).compareTo((true)).coerceIn((true).compareTo((true)), (true).compareTo((true)))
2021-03-12 08:11:54,831 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cebeb7d]]
2021-03-12 08:11:54,831 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]
2021-03-12 08:11:54,831 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cebeb7d]
2021-03-12 08:11:54,832 [main:117] - GENERATED CALL = ((true)).compareTo((true)).inv()
2021-03-12 08:11:54,832 [main:114] - replacement of 2 of type Int is ((true)).compareTo(true).inc()
2021-03-12 08:11:54,949 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:54,950 [main:66] - Compilation checking started
2021-03-12 08:11:55,258 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}

fun fu2(f: (Int) -> Int) = f(1)

fun fu3(f: Int.() -> Int) = 2.f()

class Kla1(val foo: Int.() -> Int)

fun box397(): String {
    val prope6: (Int) -> Int = { it }
    val prope7: Int.() -> Int = { this }

    if (fu2(prope6) != 1) return "fail 1a"
    if (fu2(prope7) != 1) return "fail 1b"
    if (fu3(prope6) != 2) return "fail 2a"
    if (fu3(prope7) != ((true)).compareTo(true).inc()) return "fail 2b"

    val prope8 = Kla1({ this })

    if (prope8.foo(3) != 3) return "fail 3"
    if (with(prope8) { foo(4) } != 4) return "fail 4"
    if (with(prope8) { 5.foo() } != 5) return "fail 5"

    return "OK"
}


2021-03-12 08:11:55,259 [main:107] - replacing (with(prope8) { 5.foo() }, Int)
2021-03-12 08:11:55,260 [main:50] - replacing with(prope8) { 5.foo() } Int
2021-03-12 08:11:55,260 [main:54] - Getting value of type Int
2021-03-12 08:11:55,387 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:11:55,388 [main:58] - GENERATED VALUE OF TYPE Int = -766016203
2021-03-12 08:11:55,388 [main:61] - GENERATED IS CALL =false
2021-03-12 08:11:55,495 [main:67] - randomType = Long?
2021-03-12 08:11:55,626 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:11:55,703 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@512e87d]
2021-03-12 08:11:55,704 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4738ca3a]
2021-03-12 08:11:55,704 [main:78] - Generated call from random type = (139430158734000433)?.toLong().countLeadingZeroBits()
2021-03-12 08:11:55,706 [main:106] - GETTING Int from Byte
2021-03-12 08:11:55,778 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7575f0a4], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d881407]]
2021-03-12 08:11:55,778 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7575f0a4]
2021-03-12 08:11:55,778 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d881407]
2021-03-12 08:11:55,779 [main:117] - GENERATED CALL = (fu1<Byte>({ 38})).toInt().minus(fu1<Byte>({ 38}))
2021-03-12 08:11:55,779 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7575f0a4], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6783409c]]
2021-03-12 08:11:55,779 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7575f0a4]
2021-03-12 08:11:55,779 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6783409c]
2021-03-12 08:11:55,779 [main:117] - GENERATED CALL = (fu1<Byte>({ 38})).toInt().or(((true).compareTo((true))))
2021-03-12 08:11:55,780 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5daf7fea], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@4e98736c]]
2021-03-12 08:11:55,780 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5daf7fea]
2021-03-12 08:11:55,915 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:11:55,916 [main:117] - GENERATED CALL = (fu1<Byte>({ 38})).div(-379037036631748081).sign
2021-03-12 08:11:55,917 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@60e5c1ca], public final val first: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@5d3c9a94]]
2021-03-12 08:11:55,917 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@60e5c1ca]
2021-03-12 08:11:56,043 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:11:56,044 [main:117] - GENERATED CALL = (fu1<Byte>({ 38})).rangeTo(105).first
2021-03-12 08:11:56,044 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@60e5c1ca], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@3be60cf8]]
2021-03-12 08:11:56,044 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@60e5c1ca]
2021-03-12 08:11:56,045 [main:117] - GENERATED CALL = (fu1<Byte>({ 38})).rangeTo(fu1<Byte>({ 38})).start
2021-03-12 08:11:56,045 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7575f0a4], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5742402f]]
2021-03-12 08:11:56,045 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7575f0a4]
2021-03-12 08:11:56,045 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5742402f]
2021-03-12 08:11:56,045 [main:117] - GENERATED CALL = (fu1<Byte>({ 38})).toInt().countTrailingZeroBits()
2021-03-12 08:11:56,045 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7fa0e13a], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6920c264]]
2021-03-12 08:11:56,045 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7fa0e13a]
2021-03-12 08:11:56,045 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6920c264]
2021-03-12 08:11:56,046 [main:117] - GENERATED CALL = (fu1<Byte>({ 38})).toShort().unaryPlus()
2021-03-12 08:11:56,046 [main:113] - Case = [public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@50b9fe7b], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@44261f25]]
2021-03-12 08:11:56,046 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@50b9fe7b]
2021-03-12 08:11:56,046 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@44261f25]
2021-03-12 08:11:56,142 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:11:56,144 [main:117] - GENERATED CALL = (fu1<Byte>({ 38})).compareTo(fu1<Byte>({ 38})).coerceAtLeast(1345291969)
2021-03-12 08:11:56,144 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7575f0a4], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef13ba2]]
2021-03-12 08:11:56,144 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7575f0a4]
2021-03-12 08:11:56,144 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef13ba2]
2021-03-12 08:11:56,284 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:11:56,286 [main:117] - GENERATED CALL = (fu1<Byte>({ 38})).toInt().compareTo(70)
2021-03-12 08:11:56,286 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5daf7fea], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@38fa54b2]]
2021-03-12 08:11:56,286 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5daf7fea]
2021-03-12 08:11:56,287 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@38fa54b2]
2021-03-12 08:11:56,287 [main:117] - GENERATED CALL = (fu1<Byte>({ 38})).div(((0.14090937f)).toLong()).countOneBits()
2021-03-12 08:11:56,287 [main:114] - replacement of with(prope8) { 5.foo() } of type Int is -766016203
2021-03-12 08:11:56,417 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 08:11:56,418 [main:66] - Compilation checking started
2021-03-12 08:11:56,721 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}

fun fu2(f: (Int) -> Int) = f(1)

fun fu3(f: Int.() -> Int) = 2.f()

class Kla1(val foo: Int.() -> Int)

fun box397(): String {
    val prope6: (Int) -> Int = { it }
    val prope7: Int.() -> Int = { this }

    if (fu2(prope6) != 1) return "fail 1a"
    if (fu2(prope7) != 1) return "fail 1b"
    if (fu3(prope6) != 2) return "fail 2a"
    if (fu3(prope7) != ((true)).compareTo(true).inc()) return "fail 2b"

    val prope8 = Kla1({ this })

    if (prope8.foo(3) != 3) return "fail 3"
    if (with(prope8) { foo(4) } != 4) return "fail 4"
    if (-766016203 != 5) return "fail 5"

    return "OK"
}


2021-03-12 08:11:56,722 [main:107] - replacing ("OK", String)
2021-03-12 08:11:56,722 [main:50] - replacing "OK" String
2021-03-12 08:11:56,722 [main:54] - Getting value of type String
2021-03-12 08:11:56,820 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:11:56,821 [main:58] - GENERATED VALUE OF TYPE String = "znbfq"
2021-03-12 08:11:56,821 [main:61] - GENERATED IS CALL =false
2021-03-12 08:11:56,823 [main:67] - randomType = Boolean
2021-03-12 08:11:56,922 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:11:56,942 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]
2021-03-12 08:11:56,942 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]
2021-03-12 08:11:56,943 [main:78] - Generated call from random type = (false).compareTo((true)).toString((true).compareTo((true)))
2021-03-12 08:11:56,945 [main:106] - GETTING String from Int
2021-03-12 08:11:57,007 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@247e9d28]]
2021-03-12 08:11:57,008 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62]
2021-03-12 08:11:57,008 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@247e9d28]
2021-03-12 08:11:57,008 [main:117] - GENERATED CALL = (((true).compareTo((true)))).toChar().titlecase()
2021-03-12 08:11:57,008 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406c5786]]
2021-03-12 08:11:57,008 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62]
2021-03-12 08:11:57,008 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406c5786]
2021-03-12 08:11:57,009 [main:117] - GENERATED CALL = (((true).compareTo((true)))).toChar().uppercase()
2021-03-12 08:11:57,009 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@124d184c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]]
2021-03-12 08:11:57,009 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@124d184c]
2021-03-12 08:11:57,153 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:11:57,154 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]
2021-03-12 08:11:57,155 [main:117] - GENERATED CALL = (((true).compareTo((true)))).compareTo(2015159734).toString((true).compareTo((true)))
2021-03-12 08:11:57,155 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@512e87d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d11c1e0]]
2021-03-12 08:11:57,155 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@512e87d]
2021-03-12 08:11:57,155 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d11c1e0]
2021-03-12 08:11:57,275 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:11:57,276 [main:117] - GENERATED CALL = (((true).compareTo((true)))).toLong().toString(1713680244)
2021-03-12 08:11:57,276 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d3b0688]]
2021-03-12 08:11:57,276 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62]
2021-03-12 08:11:57,276 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d3b0688]
2021-03-12 08:11:57,276 [main:117] - GENERATED CALL = (((true).compareTo((true)))).toChar().lowercase()
2021-03-12 08:11:57,276 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@dae0597], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d11c1e0]]
2021-03-12 08:11:57,276 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@dae0597]
2021-03-12 08:11:57,378 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:11:57,379 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d11c1e0]
2021-03-12 08:11:57,472 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:11:57,473 [main:117] - GENERATED CALL = (((true).compareTo((true)))).div(7335141348667738533).toString(-1888596312)
2021-03-12 08:11:57,473 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e7afcc], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2351a861]]
2021-03-12 08:11:57,473 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e7afcc]
2021-03-12 08:11:57,473 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2351a861]
2021-03-12 08:11:57,473 [main:117] - GENERATED CALL = (((true).compareTo((true)))).toShort().toString(((true).compareTo((true))))
2021-03-12 08:11:57,473 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7575f0a4], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]]
2021-03-12 08:11:57,473 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7575f0a4]
2021-03-12 08:11:57,473 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]
2021-03-12 08:11:57,474 [main:117] - GENERATED CALL = (((true).compareTo((true)))).toInt().toString(((true).compareTo((true))))
2021-03-12 08:11:57,474 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189c12c4], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@af313af]]
2021-03-12 08:11:57,474 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189c12c4]
2021-03-12 08:11:57,474 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@af313af]
2021-03-12 08:11:57,583 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:11:57,584 [main:117] - GENERATED CALL = (((true).compareTo((true)))).toByte().toString(1441095384)
2021-03-12 08:11:57,584 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]]
2021-03-12 08:11:57,584 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]
2021-03-12 08:11:57,584 [main:117] - GENERATED CALL = (((true).compareTo((true)))).toString(((true).compareTo((true))))
2021-03-12 08:11:57,585 [main:114] - replacement of "OK" of type String is (((true).compareTo((true)))).toChar().titlecase()
2021-03-12 08:11:57,693 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:57,694 [main:66] - Compilation checking started
2021-03-12 08:11:58,017 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}

fun fu2(f: (Int) -> Int) = f(1)

fun fu3(f: Int.() -> Int) = 2.f()

class Kla1(val foo: Int.() -> Int)

fun box397(): String {
    val prope6: (Int) -> Int = { it }
    val prope7: Int.() -> Int = { this }

    if (fu2(prope6) != 1) return "fail 1a"
    if (fu2(prope7) != 1) return "fail 1b"
    if (fu3(prope6) != 2) return "fail 2a"
    if (fu3(prope7) != ((true)).compareTo(true).inc()) return "fail 2b"

    val prope8 = Kla1({ this })

    if (prope8.foo(3) != 3) return "fail 3"
    if (with(prope8) { foo(4) } != 4) return "fail 4"
    if (-766016203 != 5) return "fail 5"

    return (((true).compareTo((true)))).toChar().titlecase()
}


2021-03-12 08:11:58,018 [main:107] - replacing (this, Int)
2021-03-12 08:11:58,018 [main:50] - replacing this Int
2021-03-12 08:11:58,018 [main:54] - Getting value of type Int
2021-03-12 08:11:58,159 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:11:58,160 [main:58] - GENERATED VALUE OF TYPE Int = 588359065
2021-03-12 08:11:58,160 [main:61] - GENERATED IS CALL =false
2021-03-12 08:11:58,294 [main:67] - randomType = ULong
2021-03-12 08:11:58,377 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:11:58,424 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@594026c0]
2021-03-12 08:11:58,424 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@78497d8e]
2021-03-12 08:11:58,425 [main:78] - Generated call from random type = (516958823324473091.toULong()).toShort().div(fu1<Byte>({ 38}))
2021-03-12 08:11:58,425 [main:106] - GETTING Int from Int
2021-03-12 08:11:58,484 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e7afcc], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7973195e]]
2021-03-12 08:11:58,484 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e7afcc]
2021-03-12 08:11:58,485 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7973195e]
2021-03-12 08:11:58,485 [main:117] - GENERATED CALL = ((true).compareTo((true))).toShort().unaryMinus()
2021-03-12 08:11:58,485 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@10418c7], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]]
2021-03-12 08:11:58,485 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@10418c7]
2021-03-12 08:11:58,572 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:11:58,572 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]
2021-03-12 08:11:58,572 [main:117] - GENERATED CALL = ((true).compareTo((true))).equals("dkfob").compareTo((true))
2021-03-12 08:11:58,572 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e7afcc], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@a483b2c]]
2021-03-12 08:11:58,572 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e7afcc]
2021-03-12 08:11:58,572 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@a483b2c]
2021-03-12 08:11:58,658 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:11:58,659 [main:117] - GENERATED CALL = ((true).compareTo((true))).toShort().minus(25)
2021-03-12 08:11:58,659 [main:113] - Case = [public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2de76568]]
2021-03-12 08:11:58,659 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2de76568]
2021-03-12 08:11:58,659 [main:117] - GENERATED CALL = ((true).compareTo((true))).plus(fu1<Byte>({ 38}))
2021-03-12 08:11:58,659 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@124d184c], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36d7b762]]
2021-03-12 08:11:58,659 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@124d184c]
2021-03-12 08:11:58,660 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36d7b762]
2021-03-12 08:11:58,660 [main:117] - GENERATED CALL = ((true).compareTo((true))).compareTo(((true).compareTo((true)))).xor((true).compareTo((true)))
2021-03-12 08:11:58,660 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@799f23e6]]
2021-03-12 08:11:58,660 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@799f23e6]
2021-03-12 08:11:58,660 [main:117] - GENERATED CALL = ((true).compareTo((true))).rotateRight(((true).compareTo((true))))
2021-03-12 08:11:58,660 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@124d184c], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@470dd6a4]]
2021-03-12 08:11:58,660 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@124d184c]
2021-03-12 08:11:58,660 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@470dd6a4]
2021-03-12 08:11:58,661 [main:117] - GENERATED CALL = ((true).compareTo((true))).compareTo((true).compareTo((true))).div(fu1<Byte>({ 38}))
2021-03-12 08:11:58,661 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@124d184c], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4777d135]]
2021-03-12 08:11:58,661 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@124d184c]
2021-03-12 08:11:58,661 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4777d135]
2021-03-12 08:11:58,661 [main:117] - GENERATED CALL = ((true).compareTo((true))).compareTo(((true).compareTo((true)))).and((true).compareTo((true)))
2021-03-12 08:11:58,661 [main:113] - Case = [public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a18b490]]
2021-03-12 08:11:58,661 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a18b490]
2021-03-12 08:11:58,661 [main:117] - GENERATED CALL = ((true).compareTo((true))).unaryMinus()
2021-03-12 08:11:58,661 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7575f0a4], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@246380e5]]
2021-03-12 08:11:58,661 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7575f0a4]
2021-03-12 08:11:58,662 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@246380e5]
2021-03-12 08:11:58,662 [main:117] - GENERATED CALL = ((true).compareTo((true))).toInt().takeHighestOneBit()
2021-03-12 08:11:58,662 [main:114] - replacement of this of type Int is ((true).compareTo((true))).compareTo((true).compareTo((true))).div(fu1<Byte>({ 38}))
2021-03-12 08:11:58,746 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:58,746 [main:66] - Compilation checking started
2021-03-12 08:11:59,039 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}

fun fu2(f: (Int) -> Int) = f(1)

fun fu3(f: Int.() -> Int) = 2.f()

class Kla1(val foo: Int.() -> Int)

fun box397(): String {
    val prope6: (Int) -> Int = { it }
    val prope7: Int.() -> Int = { ((true).compareTo((true))).compareTo((true).compareTo((true))).div(fu1<Byte>({ 38})) }

    if (fu2(prope6) != 1) return "fail 1a"
    if (fu2(prope7) != 1) return "fail 1b"
    if (fu3(prope6) != 2) return "fail 2a"
    if (fu3(prope7) != ((true)).compareTo(true).inc()) return "fail 2b"

    val prope8 = Kla1({ this })

    if (prope8.foo(3) != 3) return "fail 3"
    if (with(prope8) { foo(4) } != 4) return "fail 4"
    if (-766016203 != 5) return "fail 5"

    return (((true).compareTo((true)))).toChar().titlecase()
}


2021-03-12 08:11:59,040 [main:107] - replacing (prope8.foo(3) != 3, Boolean)
2021-03-12 08:11:59,040 [main:50] - replacing prope8.foo(3) != 3 Boolean
2021-03-12 08:11:59,040 [main:54] - Getting value of type Boolean
2021-03-12 08:11:59,141 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:11:59,141 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:11:59,141 [main:61] - GENERATED IS CALL =false
2021-03-12 08:11:59,283 [main:67] - randomType = HashSet<Boolean>
2021-03-12 08:11:59,368 [main:302] - generating value of type = HashSet<Boolean> false depth = 0
2021-03-12 08:11:59,454 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<Boolean> = TODO()
2021-03-12 08:11:59,456 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<Boolean> = TODO()
2021-03-12 08:11:59,539 [main:95] - GENERATED = linkedSetOf<Boolean>()
2021-03-12 08:11:59,721 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@10418c7]
2021-03-12 08:11:59,809 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:11:59,810 [main:78] - Generated call from random type = (linkedSetOf<Boolean>()).size.equals("zzzyp")
2021-03-12 08:11:59,810 [main:114] - replacement of prope8.foo(3) != 3 of type Boolean is (linkedSetOf<Boolean>()).size.equals("zzzyp")
2021-03-12 08:11:59,893 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:11:59,893 [main:66] - Compilation checking started
2021-03-12 08:12:00,247 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}

fun fu2(f: (Int) -> Int) = f(1)

fun fu3(f: Int.() -> Int) = 2.f()

class Kla1(val foo: Int.() -> Int)

fun box397(): String {
    val prope6: (Int) -> Int = { it }
    val prope7: Int.() -> Int = { ((true).compareTo((true))).compareTo((true).compareTo((true))).div(fu1<Byte>({ 38})) }

    if (fu2(prope6) != 1) return "fail 1a"
    if (fu2(prope7) != 1) return "fail 1b"
    if (fu3(prope6) != 2) return "fail 2a"
    if (fu3(prope7) != ((true)).compareTo(true).inc()) return "fail 2b"

    val prope8 = Kla1({ this })

    if ((linkedSetOf<Boolean>()).size.equals("zzzyp")) return "fail 3"
    if (with(prope8) { foo(4) } != 4) return "fail 4"
    if (-766016203 != 5) return "fail 5"

    return (((true).compareTo((true)))).toChar().titlecase()
}


2021-03-12 08:12:00,248 [main:107] - replacing ("fail 1b", String)
2021-03-12 08:12:00,249 [main:50] - replacing "fail 1b" String
2021-03-12 08:12:00,249 [main:54] - Getting value of type String
2021-03-12 08:12:00,356 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:12:00,357 [main:58] - GENERATED VALUE OF TYPE String = "osnsz"
2021-03-12 08:12:00,357 [main:61] - GENERATED IS CALL =false
2021-03-12 08:12:00,360 [main:67] - randomType = Kla0
2021-03-12 08:12:00,451 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 08:12:00,452 [main:112] - generating klass Kla0 text = object Kla0 {
    val prope0 = {}
}
2021-03-12 08:12:00,471 [main:106] - GETTING String from Function0<Unit>
2021-03-12 08:12:00,484 [main:106] - GETTING String from Int
2021-03-12 08:12:00,536 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@247e9d28]]
2021-03-12 08:12:00,536 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62]
2021-03-12 08:12:00,536 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@247e9d28]
2021-03-12 08:12:00,536 [main:117] - GENERATED CALL = ((true).compareTo((true))).toChar().titlecase()
2021-03-12 08:12:00,536 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]]
2021-03-12 08:12:00,537 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]
2021-03-12 08:12:00,621 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:12:00,622 [main:117] - GENERATED CALL = ((true).compareTo((true))).toString(-689172956)
2021-03-12 08:12:00,622 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@124d184c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]]
2021-03-12 08:12:00,622 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@124d184c]
2021-03-12 08:12:00,622 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]
2021-03-12 08:12:00,720 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:12:00,722 [main:117] - GENERATED CALL = ((true).compareTo((true))).compareTo(((true).compareTo((true)))).toString(-1897815426)
2021-03-12 08:12:00,722 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e7afcc], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2351a861]]
2021-03-12 08:12:00,722 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e7afcc]
2021-03-12 08:12:00,722 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2351a861]
2021-03-12 08:12:00,722 [main:117] - GENERATED CALL = ((true).compareTo((true))).toShort().toString((true).compareTo((true)))
2021-03-12 08:12:00,722 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7575f0a4], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]]
2021-03-12 08:12:00,722 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7575f0a4]
2021-03-12 08:12:00,722 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]
2021-03-12 08:12:00,723 [main:117] - GENERATED CALL = ((true).compareTo((true))).toInt().toString(((true).compareTo((true))))
2021-03-12 08:12:00,723 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189c12c4], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@af313af]]
2021-03-12 08:12:00,723 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189c12c4]
2021-03-12 08:12:00,723 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@af313af]
2021-03-12 08:12:00,723 [main:117] - GENERATED CALL = ((true).compareTo((true))).toByte().toString((true).compareTo((true)))
2021-03-12 08:12:00,723 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@512e87d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d11c1e0]]
2021-03-12 08:12:00,723 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@512e87d]
2021-03-12 08:12:00,723 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d11c1e0]
2021-03-12 08:12:00,724 [main:117] - GENERATED CALL = ((true).compareTo((true))).toLong().toString((true).compareTo((true)))
2021-03-12 08:12:00,724 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@dae0597], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d11c1e0]]
2021-03-12 08:12:00,724 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@dae0597]
2021-03-12 08:12:00,831 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:12:00,832 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d11c1e0]
2021-03-12 08:12:00,833 [main:117] - GENERATED CALL = ((true).compareTo((true))).div(681798352354501448).toString(((true).compareTo((true))))
2021-03-12 08:12:00,833 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@603ff61f]]
2021-03-12 08:12:00,833 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62]
2021-03-12 08:12:00,833 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@603ff61f]
2021-03-12 08:12:00,921 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:12:00,923 [main:117] - GENERATED CALL = ((true).compareTo((true))).toChar().plus("uctus")
2021-03-12 08:12:00,923 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d3b0688]]
2021-03-12 08:12:00,923 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62]
2021-03-12 08:12:00,923 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d3b0688]
2021-03-12 08:12:00,924 [main:117] - GENERATED CALL = ((true).compareTo((true))).toChar().lowercase()
2021-03-12 08:12:00,924 [main:114] - replacement of "fail 1b" of type String is ((true).compareTo((true))).toString(-689172956)
2021-03-12 08:12:01,027 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:12:01,028 [main:66] - Compilation checking started
2021-03-12 08:12:01,386 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}

fun fu2(f: (Int) -> Int) = f(1)

fun fu3(f: Int.() -> Int) = 2.f()

class Kla1(val foo: Int.() -> Int)

fun box397(): String {
    val prope6: (Int) -> Int = { it }
    val prope7: Int.() -> Int = { ((true).compareTo((true))).compareTo((true).compareTo((true))).div(fu1<Byte>({ 38})) }

    if (fu2(prope6) != 1) return "fail 1a"
    if (fu2(prope7) != 1) return ((true).compareTo((true))).toString(-689172956)
    if (fu3(prope6) != 2) return "fail 2a"
    if (fu3(prope7) != ((true)).compareTo(true).inc()) return "fail 2b"

    val prope8 = Kla1({ this })

    if ((linkedSetOf<Boolean>()).size.equals("zzzyp")) return "fail 3"
    if (with(prope8) { foo(4) } != 4) return "fail 4"
    if (-766016203 != 5) return "fail 5"

    return (((true).compareTo((true)))).toChar().titlecase()
}


2021-03-12 08:12:01,387 [main:107] - replacing (prope6, Function1<Int, Int>)
2021-03-12 08:12:01,387 [main:50] - replacing prope6 Function1<Int, Int>
2021-03-12 08:12:01,387 [main:54] - Getting value of type Function1<Int, Int>
2021-03-12 08:12:01,494 [main:302] - generating value of type = Function1<Int, Int> false depth = 0
2021-03-12 08:12:01,495 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:12:01,496 [main:58] - GENERATED VALUE OF TYPE Function1<Int, Int> = {a: Int -> 1569883080}
2021-03-12 08:12:01,496 [main:61] - GENERATED IS CALL =false
2021-03-12 08:12:01,656 [main:67] - randomType = Set<Int>
2021-03-12 08:12:01,659 [main:106] - GETTING Function1<Int, Int> from Boolean
2021-03-12 08:12:01,678 [main:106] - GETTING Function1<Int, Int> from Function0<Unit>
2021-03-12 08:12:01,694 [main:106] - GETTING Function1<Int, Int> from Long
2021-03-12 08:12:01,738 [main:106] - GETTING Function1<Int, Int> from Function0<Unit>
2021-03-12 08:12:01,739 [main:106] - GETTING Function1<Int, Int> from Kla0
2021-03-12 08:12:01,745 [main:106] - GETTING Function1<Int, Int> from Float
2021-03-12 08:12:01,773 [main:106] - GETTING Function1<Int, Int> from Function0<String>
2021-03-12 08:12:01,783 [main:106] - GETTING Function1<Int, Int> from Int
2021-03-12 08:12:01,816 [main:106] - GETTING Function1<Int, Int> from Int
2021-03-12 08:12:01,817 [main:106] - GETTING Function1<Int, Int> from Float
2021-03-12 08:12:01,818 [main:106] - GETTING Function1<Int, Int> from Byte
2021-03-12 08:12:01,853 [main:114] - replacement of prope6 of type Function1<Int, Int> is {a: Int -> 1569883080}
2021-03-12 08:12:01,962 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:12:01,963 [main:66] - Compilation checking started
2021-03-12 08:12:02,251 [main:49] - Result = false
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}

fun fu2(f: (Int) -> Int) = f(1)

fun fu3(f: Int.() -> Int) = 2.f()

class Kla1(val foo: Int.() -> Int)

fun box397(): String {
    val prope6: (Int) -> Int = { it }
    val prope7: Int.() -> Int = { ((true).compareTo((true))).compareTo((true).compareTo((true))).div(fu1<Byte>({ 38})) }

    if (fu2(prope6) != 1) return "fail 1a"
    if (fu2(prope7) != 1) return ((true).compareTo((true))).toString(-689172956)
    if (fu3({a: Int -> 1569883080}) != 2) return "fail 2a"
    if (fu3(prope7) != ((true)).compareTo(true).inc()) return "fail 2b"

    val prope8 = Kla1({ this })

    if ((linkedSetOf<Boolean>()).size.equals("zzzyp")) return "fail 3"
    if (with(prope8) { foo(4) } != 4) return "fail 4"
    if (-766016203 != 5) return "fail 5"

    return (((true).compareTo((true)))).toChar().titlecase()
}


2021-03-12 08:12:02,252 [main:107] - replacing (4, Int)
2021-03-12 08:12:02,253 [main:50] - replacing 4 Int
2021-03-12 08:12:02,253 [main:54] - Getting value of type Int
2021-03-12 08:12:02,350 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:12:02,351 [main:58] - GENERATED VALUE OF TYPE Int = 1056757548
2021-03-12 08:12:02,351 [main:61] - GENERATED IS CALL =false
2021-03-12 08:12:02,454 [main:67] - randomType = UByte
2021-03-12 08:12:02,540 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:12:02,580 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3db3b6b1]
2021-03-12 08:12:02,682 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:12:02,684 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UInt.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@53e23286]
2021-03-12 08:12:02,684 [main:78] - Generated call from random type = (111.toUByte()).div(42.toUByte()).countOneBits()
2021-03-12 08:12:02,685 [main:114] - replacement of 4 of type Int is (111.toUByte()).div(42.toUByte()).countOneBits()
2021-03-12 08:12:02,809 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:12:02,809 [main:66] - Compilation checking started
2021-03-12 08:12:03,172 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}

fun fu2(f: (Int) -> Int) = f(1)

fun fu3(f: Int.() -> Int) = 2.f()

class Kla1(val foo: Int.() -> Int)

fun box397(): String {
    val prope6: (Int) -> Int = { it }
    val prope7: Int.() -> Int = { ((true).compareTo((true))).compareTo((true).compareTo((true))).div(fu1<Byte>({ 38})) }

    if (fu2(prope6) != 1) return "fail 1a"
    if (fu2(prope7) != 1) return ((true).compareTo((true))).toString(-689172956)
    if (fu3(prope6) != 2) return "fail 2a"
    if (fu3(prope7) != ((true)).compareTo(true).inc()) return "fail 2b"

    val prope8 = Kla1({ this })

    if ((linkedSetOf<Boolean>()).size.equals("zzzyp")) return "fail 3"
    if (with(prope8) { foo((111.toUByte()).div(42.toUByte()).countOneBits()) } != 4) return "fail 4"
    if (-766016203 != 5) return "fail 5"

    return (((true).compareTo((true)))).toChar().titlecase()
}


2021-03-12 08:12:03,173 [main:107] - replacing (with(prope8) { foo((111.toUByte()).div(42.toUByte()).countOneBits()) }, Int)
2021-03-12 08:12:03,173 [main:50] - replacing with(prope8) { foo((111.toUByte()).div(42.toUByte()).countOneBits()) } Int
2021-03-12 08:12:03,173 [main:54] - Getting value of type Int
2021-03-12 08:12:03,298 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:12:03,299 [main:58] - GENERATED VALUE OF TYPE Int = 2055587347
2021-03-12 08:12:03,299 [main:61] - GENERATED IS CALL =false
2021-03-12 08:12:03,644 [main:67] - randomType = Set<Double>
2021-03-12 08:12:03,645 [main:106] - GETTING Int from Kla0
2021-03-12 08:12:03,654 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@156339a9], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]]
2021-03-12 08:12:03,654 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@156339a9]
2021-03-12 08:12:03,765 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:12:03,765 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]
2021-03-12 08:12:03,765 [main:117] - GENERATED CALL = (Kla0).equals("edbjo").compareTo((true))
2021-03-12 08:12:03,765 [main:114] - replacement of with(prope8) { foo((111.toUByte()).div(42.toUByte()).countOneBits()) } of type Int is (Kla0).equals("edbjo").compareTo((true))
2021-03-12 08:12:03,868 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:12:03,869 [main:66] - Compilation checking started
2021-03-12 08:12:04,183 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}

fun fu2(f: (Int) -> Int) = f(1)

fun fu3(f: Int.() -> Int) = 2.f()

class Kla1(val foo: Int.() -> Int)

fun box397(): String {
    val prope6: (Int) -> Int = { it }
    val prope7: Int.() -> Int = { ((true).compareTo((true))).compareTo((true).compareTo((true))).div(fu1<Byte>({ 38})) }

    if (fu2(prope6) != 1) return "fail 1a"
    if (fu2(prope7) != 1) return ((true).compareTo((true))).toString(-689172956)
    if (fu3(prope6) != 2) return "fail 2a"
    if (fu3(prope7) != ((true)).compareTo(true).inc()) return "fail 2b"

    val prope8 = Kla1({ this })

    if ((linkedSetOf<Boolean>()).size.equals("zzzyp")) return "fail 3"
    if ((Kla0).equals("edbjo").compareTo((true)) != 4) return "fail 4"
    if (-766016203 != 5) return "fail 5"

    return (((true).compareTo((true)))).toChar().titlecase()
}


2021-03-12 08:12:04,184 [main:107] - replacing (2, Int)
2021-03-12 08:12:04,184 [main:50] - replacing 2 Int
2021-03-12 08:12:04,184 [main:54] - Getting value of type Int
2021-03-12 08:12:04,293 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:12:04,293 [main:58] - GENERATED VALUE OF TYPE Int = 1638619147
2021-03-12 08:12:04,294 [main:61] - GENERATED IS CALL =false
2021-03-12 08:12:04,812 [main:67] - randomType = HashSet<Function1<Float?, LinkedHashSet<ArrayDeque<Int>>>>
2021-03-12 08:12:04,907 [main:302] - generating value of type = HashSet<Function1<Float?, LinkedHashSet<ArrayDeque<Int>>>> false depth = 0
2021-03-12 08:12:04,996 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Function1<Float?, LinkedHashSet<ArrayDeque<Int>>>): HashSet<Function1<Float?, LkedHashSet<ArrayDeque<Int>>>> = TODO()
2021-03-12 08:12:04,997 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Function1<Float?, LinkedHashSet<ArrayDeque<Int>>>): HashSet<Function1<Float?, LkedHashSet<ArrayDeque<Int>>>> = TODO()
2021-03-12 08:12:05,102 [main:302] - generating value of type = Function1<Float?, LinkedHashSet<ArrayDeque<Int>>> false depth = 3
2021-03-12 08:12:05,103 [main:302] - generating value of type = LinkedHashSet<ArrayDeque<Int>> false depth = 4
2021-03-12 08:12:05,204 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<ArrayDeque<Int>> = TODO()
2021-03-12 08:12:05,205 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<ArrayDeque<Int>> = TODO()
2021-03-12 08:12:05,293 [main:95] - GENERATED = linkedSetOf<ArrayDeque<Int>>()
2021-03-12 08:12:05,294 [main:95] - GENERATED = hashSetOf<Function1<Float?, LinkedHashSet<ArrayDeque<Int>>>>({a: Float? -> linkedSetOf<ArrayDeque<Int>>()})
2021-03-12 08:12:05,482 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef13ba2]
2021-03-12 08:12:05,483 [main:78] - Generated call from random type = (hashSetOf<Function1<Float?, LinkedHashSet<ArrayDeque<Int>>>>({a: Float? -> linkedSetOf<ArrayDeque<Int>>()})).size.compareTo(fu1<Byte>({ 38}))
2021-03-12 08:12:05,484 [main:106] - GETTING Int from Function0<Unit>
2021-03-12 08:12:05,492 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@43410c83], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]]
2021-03-12 08:12:05,492 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@43410c83]
2021-03-12 08:12:05,588 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:12:05,588 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]
2021-03-12 08:12:05,683 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:12:05,684 [main:117] - GENERATED CALL = (Kla0.prope0).equals("jysfk").compareTo(true)
2021-03-12 08:12:05,684 [main:114] - replacement of 2 of type Int is (Kla0.prope0).equals("jysfk").compareTo(true)
2021-03-12 08:12:05,770 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:12:05,770 [main:66] - Compilation checking started
2021-03-12 08:12:06,078 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}

fun fu2(f: (Int) -> Int) = f(1)

fun fu3(f: Int.() -> Int) = (Kla0.prope0).equals("jysfk").compareTo(true).f()

class Kla1(val foo: Int.() -> Int)

fun box397(): String {
    val prope6: (Int) -> Int = { it }
    val prope7: Int.() -> Int = { ((true).compareTo((true))).compareTo((true).compareTo((true))).div(fu1<Byte>({ 38})) }

    if (fu2(prope6) != 1) return "fail 1a"
    if (fu2(prope7) != 1) return ((true).compareTo((true))).toString(-689172956)
    if (fu3(prope6) != 2) return "fail 2a"
    if (fu3(prope7) != ((true)).compareTo(true).inc()) return "fail 2b"

    val prope8 = Kla1({ this })

    if ((linkedSetOf<Boolean>()).size.equals("zzzyp")) return "fail 3"
    if ((Kla0).equals("edbjo").compareTo((true)) != 4) return "fail 4"
    if (-766016203 != 5) return "fail 5"

    return (((true).compareTo((true)))).toChar().titlecase()
}


2021-03-12 08:12:06,080 [main:107] - replacing (f, Function1<Int, Int>)
2021-03-12 08:12:06,080 [main:50] - replacing f Function1<Int, Int>
2021-03-12 08:12:06,080 [main:54] - Getting value of type Function1<Int, Int>
2021-03-12 08:12:06,198 [main:302] - generating value of type = Function1<Int, Int> false depth = 0
2021-03-12 08:12:06,199 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:12:06,200 [main:58] - GENERATED VALUE OF TYPE Function1<Int, Int> = {a: Int -> -1363778349}
2021-03-12 08:12:06,200 [main:61] - GENERATED IS CALL =false
2021-03-12 08:12:06,302 [main:67] - randomType = Byte?
2021-03-12 08:12:06,386 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:12:06,445 [main:106] - GETTING Function1<Int, Int> from Long
2021-03-12 08:12:06,498 [main:106] - GETTING Function1<Int, Int> from Float
2021-03-12 08:12:06,551 [main:106] - GETTING Function1<Int, Int> from Boolean
2021-03-12 08:12:06,565 [main:106] - GETTING Function1<Int, Int> from Byte
2021-03-12 08:12:06,606 [main:106] - GETTING Function1<Int, Int> from Function0<String>
2021-03-12 08:12:06,617 [main:106] - GETTING Function1<Int, Int> from Float
2021-03-12 08:12:06,618 [main:106] - GETTING Function1<Int, Int> from Function0<Unit>
2021-03-12 08:12:06,630 [main:106] - GETTING Function1<Int, Int> from Kla0
2021-03-12 08:12:06,638 [main:106] - GETTING Function1<Int, Int> from Function0<Unit>
2021-03-12 08:12:06,639 [main:106] - GETTING Function1<Int, Int> from Int
2021-03-12 08:12:06,673 [main:106] - GETTING Function1<Int, Int> from Int
2021-03-12 08:12:06,674 [main:114] - replacement of f of type Function1<Int, Int> is {a: Int -> -1363778349}
2021-03-12 08:12:06,768 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:12:06,768 [main:66] - Compilation checking started
2021-03-12 08:12:07,085 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}

fun fu2(f: (Int) -> Int) = {a: Int -> -1363778349}(1)

fun fu3(f: Int.() -> Int) = (Kla0.prope0).equals("jysfk").compareTo(true).f()

class Kla1(val foo: Int.() -> Int)

fun box397(): String {
    val prope6: (Int) -> Int = { it }
    val prope7: Int.() -> Int = { ((true).compareTo((true))).compareTo((true).compareTo((true))).div(fu1<Byte>({ 38})) }

    if (fu2(prope6) != 1) return "fail 1a"
    if (fu2(prope7) != 1) return ((true).compareTo((true))).toString(-689172956)
    if (fu3(prope6) != 2) return "fail 2a"
    if (fu3(prope7) != ((true)).compareTo(true).inc()) return "fail 2b"

    val prope8 = Kla1({ this })

    if ((linkedSetOf<Boolean>()).size.equals("zzzyp")) return "fail 3"
    if ((Kla0).equals("edbjo").compareTo((true)) != 4) return "fail 4"
    if (-766016203 != 5) return "fail 5"

    return (((true).compareTo((true)))).toChar().titlecase()
}


2021-03-12 08:12:07,086 [main:107] - replacing ("fail 3", String)
2021-03-12 08:12:07,086 [main:50] - replacing "fail 3" String
2021-03-12 08:12:07,087 [main:54] - Getting value of type String
2021-03-12 08:12:07,182 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:12:07,183 [main:58] - GENERATED VALUE OF TYPE String = "knxgb"
2021-03-12 08:12:07,183 [main:61] - GENERATED IS CALL =false
2021-03-12 08:12:07,186 [main:67] - randomType = Kla1
2021-03-12 08:12:07,280 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 08:12:07,281 [main:112] - generating klass Kla1 text = class Kla1(val foo: Int.() -> Int)
2021-03-12 08:12:07,364 [main:194] - Type params = []
2021-03-12 08:12:07,460 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Int, Int> false depth = 2
2021-03-12 08:12:07,460 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:12:07,479 [main:106] - GETTING String from Int
2021-03-12 08:12:07,520 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189c12c4], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@af313af]]
2021-03-12 08:12:07,521 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189c12c4]
2021-03-12 08:12:07,521 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@af313af]
2021-03-12 08:12:07,521 [main:117] - GENERATED CALL = ((true).compareTo((true))).toByte().toString(((true).compareTo((true))))
2021-03-12 08:12:07,521 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406c5786]]
2021-03-12 08:12:07,521 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62]
2021-03-12 08:12:07,521 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406c5786]
2021-03-12 08:12:07,521 [main:117] - GENERATED CALL = ((true).compareTo((true))).toChar().uppercase()
2021-03-12 08:12:07,521 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7575f0a4], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]]
2021-03-12 08:12:07,521 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7575f0a4]
2021-03-12 08:12:07,522 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]
2021-03-12 08:12:07,530 [main:117] - GENERATED CALL = ((true).compareTo((true))).toInt().toString((true).compareTo((true)))
2021-03-12 08:12:07,531 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@dae0597], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d11c1e0]]
2021-03-12 08:12:07,531 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@dae0597]
2021-03-12 08:12:07,531 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d11c1e0]
2021-03-12 08:12:07,531 [main:117] - GENERATED CALL = ((true).compareTo((true))).div(((0.14090937f)).toLong()).toString(((true).compareTo((true))))
2021-03-12 08:12:07,531 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@124d184c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]]
2021-03-12 08:12:07,531 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@124d184c]
2021-03-12 08:12:07,531 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]
2021-03-12 08:12:07,617 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:12:07,618 [main:117] - GENERATED CALL = ((true).compareTo((true))).compareTo((true).compareTo((true))).toString(612304556)
2021-03-12 08:12:07,618 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@247e9d28]]
2021-03-12 08:12:07,618 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62]
2021-03-12 08:12:07,618 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@247e9d28]
2021-03-12 08:12:07,619 [main:117] - GENERATED CALL = ((true).compareTo((true))).toChar().titlecase()
2021-03-12 08:12:07,619 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d3b0688]]
2021-03-12 08:12:07,619 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62]
2021-03-12 08:12:07,619 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d3b0688]
2021-03-12 08:12:07,619 [main:117] - GENERATED CALL = ((true).compareTo((true))).toChar().lowercase()
2021-03-12 08:12:07,619 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@603ff61f]]
2021-03-12 08:12:07,619 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bba2e62]
2021-03-12 08:12:07,619 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@603ff61f]
2021-03-12 08:12:07,717 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:12:07,718 [main:117] - GENERATED CALL = ((true).compareTo((true))).toChar().plus("huuyb")
2021-03-12 08:12:07,718 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]]
2021-03-12 08:12:07,718 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@195cb879]
2021-03-12 08:12:07,818 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:12:07,819 [main:117] - GENERATED CALL = ((true).compareTo((true))).toString(-978889099)
2021-03-12 08:12:07,819 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e7afcc], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2351a861]]
2021-03-12 08:12:07,819 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e7afcc]
2021-03-12 08:12:07,819 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2351a861]
2021-03-12 08:12:07,819 [main:117] - GENERATED CALL = ((true).compareTo((true))).toShort().toString((true).compareTo((true)))
2021-03-12 08:12:07,819 [main:114] - replacement of "fail 3" of type String is ((true).compareTo((true))).compareTo((true).compareTo((true))).toString(612304556)
2021-03-12 08:12:07,907 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:12:07,907 [main:66] - Compilation checking started
2021-03-12 08:12:08,225 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}

fun fu2(f: (Int) -> Int) = {a: Int -> -1363778349}(1)

fun fu3(f: Int.() -> Int) = (Kla0.prope0).equals("jysfk").compareTo(true).f()

class Kla1(val foo: Int.() -> Int)

fun box397(): String {
    val prope6: (Int) -> Int = { it }
    val prope7: Int.() -> Int = { ((true).compareTo((true))).compareTo((true).compareTo((true))).div(fu1<Byte>({ 38})) }

    if (fu2(prope6) != 1) return "fail 1a"
    if (fu2(prope7) != 1) return ((true).compareTo((true))).toString(-689172956)
    if (fu3(prope6) != 2) return "fail 2a"
    if (fu3(prope7) != ((true)).compareTo(true).inc()) return "fail 2b"

    val prope8 = Kla1({ this })

    if ((linkedSetOf<Boolean>()).size.equals("zzzyp")) return ((true).compareTo((true))).compareTo((true).compareTo((true))).toString(612304556)
    if ((Kla0).equals("edbjo").compareTo((true)) != 4) return "fail 4"
    if (-766016203 != 5) return "fail 5"

    return (((true).compareTo((true)))).toChar().titlecase()
}


2021-03-12 08:12:08,227 [main:107] - replacing (-766016203 != 5, Boolean)
2021-03-12 08:12:08,228 [main:50] - replacing -766016203 != 5 Boolean
2021-03-12 08:12:08,228 [main:54] - Getting value of type Boolean
2021-03-12 08:12:08,376 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:12:08,378 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:12:08,378 [main:61] - GENERATED IS CALL =false
2021-03-12 08:12:08,381 [main:67] - randomType = Boolean
2021-03-12 08:12:08,498 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:12:08,510 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@22b97fe2]
2021-03-12 08:12:08,608 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:12:08,608 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32aca0cd]
2021-03-12 08:12:08,705 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:12:08,706 [main:78] - Generated call from random type = (false).equals("ozftw").equals("uehpy")
2021-03-12 08:12:08,707 [main:114] - replacement of -766016203 != 5 of type Boolean is (false).equals("ozftw").equals("uehpy")
2021-03-12 08:12:08,791 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:12:08,791 [main:66] - Compilation checking started
2021-03-12 08:12:09,093 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}

fun fu2(f: (Int) -> Int) = {a: Int -> -1363778349}(1)

fun fu3(f: Int.() -> Int) = (Kla0.prope0).equals("jysfk").compareTo(true).f()

class Kla1(val foo: Int.() -> Int)

fun box397(): String {
    val prope6: (Int) -> Int = { it }
    val prope7: Int.() -> Int = { ((true).compareTo((true))).compareTo((true).compareTo((true))).div(fu1<Byte>({ 38})) }

    if (fu2(prope6) != 1) return "fail 1a"
    if (fu2(prope7) != 1) return ((true).compareTo((true))).toString(-689172956)
    if (fu3(prope6) != 2) return "fail 2a"
    if (fu3(prope7) != ((true)).compareTo(true).inc()) return "fail 2b"

    val prope8 = Kla1({ this })

    if ((linkedSetOf<Boolean>()).size.equals("zzzyp")) return ((true).compareTo((true))).compareTo((true).compareTo((true))).toString(612304556)
    if ((Kla0).equals("edbjo").compareTo((true)) != 4) return "fail 4"
    if ((false).equals("ozftw").equals("uehpy")) return "fail 5"

    return (((true).compareTo((true)))).toChar().titlecase()
}


2021-03-12 08:12:09,094 [main:107] - replacing (this, Int)
2021-03-12 08:12:09,094 [main:50] - replacing this Int
2021-03-12 08:12:09,094 [main:54] - Getting value of type Int
2021-03-12 08:12:09,229 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:12:09,230 [main:58] - GENERATED VALUE OF TYPE Int = -1356085022
2021-03-12 08:12:09,231 [main:61] - GENERATED IS CALL =false
2021-03-12 08:12:09,350 [main:67] - randomType = Short
2021-03-12 08:12:09,450 [main:302] - generating value of type = Short true depth = 0
2021-03-12 08:12:09,489 [main:149] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3155bf62]
2021-03-12 08:12:09,489 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3d7081f4]
2021-03-12 08:12:09,591 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:12:09,592 [main:78] - Generated call from random type = (2932).toShort().times(79)
2021-03-12 08:12:09,593 [main:106] - GETTING Int from Kla0
2021-03-12 08:12:09,600 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@156339a9], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]]
2021-03-12 08:12:09,600 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@156339a9]
2021-03-12 08:12:09,702 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:12:09,702 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7794503a]
2021-03-12 08:12:09,703 [main:117] - GENERATED CALL = (Kla0).equals("fvcjd").compareTo((true))
2021-03-12 08:12:09,703 [main:114] - replacement of this of type Int is (Kla0).equals("fvcjd").compareTo((true))
2021-03-12 08:12:09,810 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:12:09,810 [main:66] - Compilation checking started
2021-03-12 08:12:10,135 [main:53] - Result = true
Text:
fun test1() {}

inline fun fu0(crossinline y: () -> String) = { "uhdyh"}

public inline fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

fun box897(): String {
    return (true).compareTo((true)).toString(-637604008)
}

object Kla0 {
    val prope0 = {}
}

fun box551(): String {
    val javaClass = Kla0.prope0.javaClass

    val prope2 = javaClass.getEnclosingMethod()
    if (prope2 != null) return "tttmz"

    val prope3 = javaClass.getEnclosingConstructor()
    if (prope3 != null) return ((0.14090937f)).toLong().toString((true).compareTo(((true))))

    val prope4 = javaClass.getEnclosingClass()
    if (((true).compareTo((true))).equals("duumo")) return "enclosing class: $prope4"

    val prope5 = javaClass.getDeclaringClass()
    if (prope5 != null) return "anonymous function has a declaring class: $prope5"

    return "OK"
}

fun fu2(f: (Int) -> Int) = {a: Int -> -1363778349}(1)

fun fu3(f: Int.() -> Int) = (Kla0.prope0).equals("jysfk").compareTo(true).f()

class Kla1(val foo: Int.() -> Int)

fun box397(): String {
    val prope6: (Int) -> Int = { it }
    val prope7: Int.() -> Int = { ((true).compareTo((true))).compareTo((true).compareTo((true))).div(fu1<Byte>({ 38})) }

    if (fu2(prope6) != 1) return "fail 1a"
    if (fu2(prope7) != 1) return ((true).compareTo((true))).toString(-689172956)
    if (fu3(prope6) != 2) return "fail 2a"
    if (fu3(prope7) != ((true)).compareTo(true).inc()) return "fail 2b"

    val prope8 = Kla1({ (Kla0).equals("fvcjd").compareTo((true)) })

    if ((linkedSetOf<Boolean>()).size.equals("zzzyp")) return ((true).compareTo((true))).compareTo((true).compareTo((true))).toString(612304556)
    if ((Kla0).equals("edbjo").compareTo((true)) != 4) return "fail 4"
    if ((false).equals("ozftw").equals("uehpy")) return "fail 5"

    return (((true).compareTo((true)))).toChar().titlecase()
}


2021-03-12 08:12:10,136 [main:107] - replacing (prope7, [@kotlin.ExtensionFunctionType] Function1<Int, Int>)
2021-03-12 08:12:10,136 [main:50] - replacing prope7 [@kotlin.ExtensionFunctionType] Function1<Int, Int>
2021-03-12 08:12:10,136 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Int, Int>
