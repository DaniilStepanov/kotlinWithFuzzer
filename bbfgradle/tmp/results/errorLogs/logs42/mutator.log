2021-03-11 22:37:34,325 [main:66] - Compilation checking started
2021-03-11 22:37:36,885 [main:45] - Trying to change 49 nodes
2021-03-11 22:37:36,890 [main:53] - replacing ('a', Char)
2021-03-11 22:37:36,890 [main:50] - replacing 'a' Char
2021-03-11 22:37:36,890 [main:54] - Getting value of type Char
2021-03-11 22:37:37,076 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:37:37,078 [main:58] - GENERATED VALUE OF TYPE Char = '㉗'
2021-03-11 22:37:37,079 [main:61] - GENERATED IS CALL =false
2021-03-11 22:37:38,247 [main:67] - randomType = LinkedHashMap<Pair<Byte?, UByte>, String>
2021-03-11 22:37:38,431 [main:302] - generating value of type = LinkedHashMap<Pair<Byte?, UByte>, String> false depth = 0
2021-03-11 22:37:38,621 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Pair<Byte?, UByte>, String>): LkedHashMap<Pair<Byte?, UByte>, Strg> = TODO()
2021-03-11 22:37:38,624 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Pair<Byte?, UByte>, String>): LkedHashMap<Pair<Byte?, UByte>, Strg> = TODO()
2021-03-11 22:37:38,806 [main:302] - generating value of type = Pair<Pair<Byte?, UByte>, String> false depth = 3
2021-03-11 22:37:38,990 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Pair<Byte?, UByte>, second: String): Pair<Pair<Byte?, UByte>, String> = TODO()
2021-03-11 22:37:38,994 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Pair<Byte?, UByte>, second: String): Pair<Pair<Byte?, UByte>, String> = TODO()
2021-03-11 22:37:39,145 [main:302] - generating value of type = Pair<Byte?, UByte> false depth = 6
2021-03-11 22:37:39,324 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Byte?, second: UByte): Pair<Byte?, UByte> = TODO()
2021-03-11 22:37:39,327 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Byte?, second: UByte): Pair<Byte?, UByte> = TODO()
2021-03-11 22:37:39,479 [main:302] - generating value of type = Byte true depth = 9
2021-03-11 22:37:39,480 [main:302] - generating value of type = UByte true depth = 9
2021-03-11 22:37:39,481 [main:95] - GENERATED = Pair<Byte?, UByte>(13, 65.toUByte())
2021-03-11 22:37:39,481 [main:302] - generating value of type = String true depth = 6
2021-03-11 22:37:39,483 [main:95] - GENERATED = Pair<Pair<Byte?, UByte>, String>(Pair<Byte?, UByte>(13, 65.toUByte()), "goiwv")
2021-03-11 22:37:39,484 [main:95] - GENERATED = linkedMapOf<Pair<Byte?, UByte>, String>(Pair<Pair<Byte?, UByte>, String>(Pair<Byte?, UByte>(13, 65.toUByte()), "goiwv"))
2021-03-11 22:37:39,794 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Int.digitToChar(): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6376394a]
2021-03-11 22:37:39,795 [main:78] - Generated call from random type = (linkedMapOf<Pair<Byte?, UByte>, String>(Pair<Pair<Byte?, UByte>, String>(Pair<Byte?, UByte>(13, 65.toUByte()), "goiwv"))).size.digitToChar()
2021-03-11 22:37:39,796 [main:106] - GETTING Char from LongRange
2021-03-11 22:37:39,832 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@66366fb3], public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2809e8ea]]
2021-03-11 22:37:39,832 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2809e8ea]
2021-03-11 22:37:39,833 [main:117] - GENERATED CALL = (longProgression).first.toChar()
2021-03-11 22:37:39,833 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@292f1c41], public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2809e8ea]]
2021-03-11 22:37:39,833 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2809e8ea]
2021-03-11 22:37:39,834 [main:117] - GENERATED CALL = (longProgression).endInclusive.toChar()
2021-03-11 22:37:39,834 [main:61] - replacement of 'a' of type Char is (longProgression).endInclusive.toChar()
2021-03-11 22:37:39,964 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:37:39,965 [main:66] - Compilation checking started
2021-03-11 22:37:40,643 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', (longProgression).endInclusive.toChar()), charList)

    return "OK"
}


2021-03-11 22:37:40,647 [main:53] - replacing ((charProgression step 2).reversed(), CharProgression)
2021-03-11 22:37:40,648 [main:50] - replacing (charProgression step 2).reversed() CharProgression
2021-03-11 22:37:40,648 [main:54] - Getting value of type CharProgression
2021-03-11 22:37:40,797 [main:302] - generating value of type = CharProgression false depth = 0
2021-03-11 22:37:40,930 [main:43] - GENERATING CALL OF fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): CharProgression = TODO()
2021-03-11 22:37:40,932 [main:61] - WITHOUT TYPE PARAMS = fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): CharProgression = TODO()
2021-03-11 22:37:41,401 [main:302] - generating value of type = Char true depth = 3
2021-03-11 22:37:41,401 [main:302] - generating value of type = Char true depth = 3
2021-03-11 22:37:41,402 [main:95] - GENERATED = CharRange('ᒯ', '駝')
2021-03-11 22:37:41,402 [main:58] - GENERATED VALUE OF TYPE CharProgression = CharRange('ᒯ', '駝')
2021-03-11 22:37:41,403 [main:61] - GENERATED IS CALL =true
2021-03-11 22:37:41,403 [main:67] - randomType = Char
2021-03-11 22:37:41,528 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:37:41,579 [main:149] - GENERATING call of type public infix fun kotlin.Char.downTo(to: kotlin.Char): kotlin.ranges.CharProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@71c90ddf]
2021-03-11 22:37:41,706 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:37:41,707 [main:78] - Generated call from random type = ('᫻').downTo('镣')
2021-03-11 22:37:41,707 [main:61] - replacement of (charProgression step 2).reversed() of type CharProgression is ('᫻').downTo('镣')
2021-03-11 22:37:41,821 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:37:41,822 [main:66] - Compilation checking started
2021-03-11 22:37:42,460 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ('᫻').downTo('镣')) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', (longProgression).endInclusive.toChar()), charList)

    return "OK"
}


2021-03-11 22:37:42,463 [main:53] - replacing ('c', Char)
2021-03-11 22:37:42,464 [main:50] - replacing 'c' Char
2021-03-11 22:37:42,464 [main:54] - Getting value of type Char
2021-03-11 22:37:42,574 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:37:42,574 [main:58] - GENERATED VALUE OF TYPE Char = '딜'
2021-03-11 22:37:42,574 [main:61] - GENERATED IS CALL =false
2021-03-11 22:37:42,698 [main:67] - randomType = ULong
2021-03-11 22:37:42,813 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 22:37:42,861 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@160a9672]
2021-03-11 22:37:42,862 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@38dee549]
2021-03-11 22:37:42,862 [main:78] - Generated call from random type = (8010188009786448346.toULong()).toFloat().toChar()
2021-03-11 22:37:42,863 [main:106] - GETTING Char from MutableList<Int>
2021-03-11 22:37:42,952 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@5e1f7c80], public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]]
2021-03-11 22:37:42,953 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]
2021-03-11 22:37:42,953 [main:117] - GENERATED CALL = (intList).size.toChar()
2021-03-11 22:37:42,954 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@5e1f7c80], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Int.digitToChar(): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6376394a]]
2021-03-11 22:37:42,954 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Int.digitToChar(): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6376394a]
2021-03-11 22:37:42,954 [main:117] - GENERATED CALL = (intList).size.digitToChar()
2021-03-11 22:37:42,954 [main:61] - replacement of 'c' of type Char is '딜'
2021-03-11 22:37:43,064 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-11 22:37:43,064 [main:66] - Compilation checking started
2021-03-11 22:37:43,578 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ('᫻').downTo('镣')) {
        charList += i
    }
    assertEquals(listOf('g', 'e', '딜', (longProgression).endInclusive.toChar()), charList)

    return "OK"
}


2021-03-11 22:37:43,580 [main:53] - replacing (mutableListOf<Long>(), MutableList<Long>)
2021-03-11 22:37:43,580 [main:50] - replacing mutableListOf<Long>() MutableList<Long>
2021-03-11 22:37:43,580 [main:54] - Getting value of type MutableList<Long>
2021-03-11 22:37:43,690 [main:302] - generating value of type = MutableList<Long> false depth = 0
2021-03-11 22:37:43,805 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): MutableList<Long> = TODO()
2021-03-11 22:37:43,807 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): MutableList<Long> = TODO()
2021-03-11 22:37:43,916 [main:95] - GENERATED = ArrayDeque<Long>()
2021-03-11 22:37:43,916 [main:58] - GENERATED VALUE OF TYPE MutableList<Long> = ArrayDeque<Long>()
2021-03-11 22:37:43,916 [main:61] - GENERATED IS CALL =true
2021-03-11 22:37:44,046 [main:67] - randomType = Long?
2021-03-11 22:37:44,151 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:37:44,301 [main:106] - GETTING MutableList<Long> from MutableList<Int>
2021-03-11 22:37:44,352 [main:106] - GETTING MutableList<Long> from MutableList<Long>
2021-03-11 22:37:44,403 [main:113] - Case = [@kotlin.jvm.JvmName public fun <T> kotlin.collections.MutableList<T>.asReversed(): kotlin.collections.MutableList<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@57c97ec8]]
2021-03-11 22:37:44,403 [main:149] - GENERATING call of type @kotlin.jvm.JvmName public fun <T> kotlin.collections.MutableList<T>.asReversed(): kotlin.collections.MutableList<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@57c97ec8]
2021-03-11 22:37:44,404 [main:117] - GENERATED CALL = (longList).asReversed()
2021-03-11 22:37:44,404 [main:113] - Case = [public fun <T> kotlin.collections.Collection<T>.toMutableList(): kotlin.collections.MutableList<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@c882b6a]]
2021-03-11 22:37:44,404 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Collection<T>.toMutableList(): kotlin.collections.MutableList<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@c882b6a]
2021-03-11 22:37:44,404 [main:117] - GENERATED CALL = (longList).toMutableList()
2021-03-11 22:37:44,405 [main:113] - Case = [public abstract fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.Long> defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@918d98b]]
2021-03-11 22:37:44,405 [main:149] - GENERATING call of type public abstract fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.Long> defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@918d98b]
2021-03-11 22:37:44,512 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:37:44,621 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:37:44,622 [main:117] - GENERATED CALL = (longList).subList(-150182637, 420165231)
2021-03-11 22:37:44,622 [main:61] - replacement of mutableListOf<Long>() of type MutableList<Long> is (longList).asReversed()
2021-03-11 22:37:44,753 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:37:44,754 [main:66] - Compilation checking started
2021-03-11 22:37:45,115 [main:49] - Result = false
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = (longList).asReversed()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ('᫻').downTo('镣')) {
        charList += i
    }
    assertEquals(listOf('g', 'e', '딜', (longProgression).endInclusive.toChar()), charList)

    return "OK"
}


2021-03-11 22:37:45,118 [main:53] - replacing (longProgression step 2L, LongProgression)
2021-03-11 22:37:45,118 [main:50] - replacing longProgression step 2L LongProgression
2021-03-11 22:37:45,119 [main:54] - Getting value of type LongProgression
2021-03-11 22:37:45,236 [main:302] - generating value of type = LongProgression false depth = 0
2021-03-11 22:37:45,365 [main:43] - GENERATING CALL OF fun LongRange(start: kotlin.Long, endInclusive: kotlin.Long): LongProgression = TODO()
2021-03-11 22:37:45,367 [main:61] - WITHOUT TYPE PARAMS = fun LongRange(start: kotlin.Long, endInclusive: kotlin.Long): LongProgression = TODO()
2021-03-11 22:37:45,713 [main:302] - generating value of type = Long true depth = 3
2021-03-11 22:37:45,713 [main:302] - generating value of type = Long true depth = 3
2021-03-11 22:37:45,714 [main:95] - GENERATED = LongRange(-6084899719474898402, 7043725267060898852)
2021-03-11 22:37:45,714 [main:58] - GENERATED VALUE OF TYPE LongProgression = LongRange(-6084899719474898402, 7043725267060898852)
2021-03-11 22:37:45,714 [main:61] - GENERATED IS CALL =true
2021-03-11 22:37:45,962 [main:67] - randomType = Array<UInt>
2021-03-11 22:37:46,066 [main:302] - generating value of type = Array<UInt> false depth = 0
2021-03-11 22:37:46,179 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<UInt> = TODO()
2021-03-11 22:37:46,181 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<UInt> = TODO()
2021-03-11 22:37:46,294 [main:95] - GENERATED = emptyArray<UInt>()
2021-03-11 22:37:46,315 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Long): kotlin.ranges.LongProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6576eba4]
2021-03-11 22:37:46,422 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:37:46,423 [main:78] - Generated call from random type = (emptyArray<UInt>()).size.downTo(-352137360307008850)
2021-03-11 22:37:46,426 [main:106] - GETTING LongProgression from MutableList<Int>
2021-03-11 22:37:46,487 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@5e1f7c80], public infix fun kotlin.Int.downTo(to: kotlin.Long): kotlin.ranges.LongProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6576eba4]]
2021-03-11 22:37:46,488 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Long): kotlin.ranges.LongProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6576eba4]
2021-03-11 22:37:46,590 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:37:46,591 [main:117] - GENERATED CALL = (intList).size.downTo(7365126293719716419)
2021-03-11 22:37:46,591 [main:61] - replacement of longProgression step 2L of type LongProgression is (emptyArray<UInt>()).size.downTo(-352137360307008850)
2021-03-11 22:37:46,741 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:37:46,742 [main:66] - Compilation checking started
2021-03-11 22:37:47,288 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in ((emptyArray<UInt>()).size.downTo(-352137360307008850)).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ('᫻').downTo('镣')) {
        charList += i
    }
    assertEquals(listOf('g', 'e', '딜', (longProgression).endInclusive.toChar()), charList)

    return "OK"
}


2021-03-11 22:37:47,290 [main:53] - replacing (intProgression step 2, IntProgression)
2021-03-11 22:37:47,290 [main:50] - replacing intProgression step 2 IntProgression
2021-03-11 22:37:47,290 [main:54] - Getting value of type IntProgression
2021-03-11 22:37:47,393 [main:302] - generating value of type = IntProgression false depth = 0
2021-03-11 22:37:47,508 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-11 22:37:47,510 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-11 22:37:47,850 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:37:47,850 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:37:47,851 [main:95] - GENERATED = IntRange(-1617443315, 1008168877)
2021-03-11 22:37:47,851 [main:58] - GENERATED VALUE OF TYPE IntProgression = IntRange(-1617443315, 1008168877)
2021-03-11 22:37:47,851 [main:61] - GENERATED IS CALL =true
2021-03-11 22:37:48,055 [main:67] - randomType = Float?
2021-03-11 22:37:48,162 [main:302] - generating value of type = Float true depth = 0
2021-03-11 22:37:48,206 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@78042608]
2021-03-11 22:37:48,207 [main:149] - GENERATING call of type public infix fun kotlin.Byte.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@20679cbe]
2021-03-11 22:37:48,305 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:37:48,306 [main:78] - Generated call from random type = (0.58532727f)?.toByte().downTo(40)
2021-03-11 22:37:48,307 [main:106] - GETTING IntProgression from MutableList<Int>
2021-03-11 22:37:48,378 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@5e1f7c80], public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6bac8bd9]]
2021-03-11 22:37:48,378 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6bac8bd9]
2021-03-11 22:37:48,475 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:37:48,476 [main:117] - GENERATED CALL = (intList).size.downTo(0)
2021-03-11 22:37:48,476 [main:61] - replacement of intProgression step 2 of type IntProgression is IntRange(-1617443315, 1008168877)
2021-03-11 22:37:48,595 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:37:48,595 [main:66] - Compilation checking started
2021-03-11 22:37:49,065 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (IntRange(-1617443315, 1008168877)).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in ((emptyArray<UInt>()).size.downTo(-352137360307008850)).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ('᫻').downTo('镣')) {
        charList += i
    }
    assertEquals(listOf('g', 'e', '딜', (longProgression).endInclusive.toChar()), charList)

    return "OK"
}


2021-03-11 22:37:49,067 [main:53] - replacing (1L, Long)
2021-03-11 22:37:49,067 [main:50] - replacing 1L Long
2021-03-11 22:37:49,067 [main:54] - Getting value of type Long
2021-03-11 22:37:49,167 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:37:49,168 [main:58] - GENERATED VALUE OF TYPE Long = -4842159819987719505
2021-03-11 22:37:49,168 [main:61] - GENERATED IS CALL =false
2021-03-11 22:37:49,664 [main:67] - randomType = MutableMap<String?, Short>?
2021-03-11 22:37:49,666 [main:106] - GETTING Long from IntRange
2021-03-11 22:37:49,705 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@7373c033], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@e8e5cfe]]
2021-03-11 22:37:49,705 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@e8e5cfe]
2021-03-11 22:37:49,818 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:37:49,818 [main:117] - GENERATED CALL = (intProgression).endInclusive.plus(-9111791224855568535)
2021-03-11 22:37:49,819 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@7373c033], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1dcf7c57]]
2021-03-11 22:37:49,819 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1dcf7c57]
2021-03-11 22:37:49,936 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:37:49,937 [main:117] - GENERATED CALL = (intProgression).endInclusive.div(-6410642706663436125)
2021-03-11 22:37:49,937 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@1947aa4a], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1dcf7c57]]
2021-03-11 22:37:49,938 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1dcf7c57]
2021-03-11 22:37:50,045 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:37:50,046 [main:117] - GENERATED CALL = (intProgression).first.div(4501003188802054160)
2021-03-11 22:37:50,046 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@1947aa4a], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@556c4d05]]
2021-03-11 22:37:50,046 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@556c4d05]
2021-03-11 22:37:50,138 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:37:50,139 [main:117] - GENERATED CALL = (intProgression).first.times(-8623325647488760846)
2021-03-11 22:37:50,139 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@7373c033], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a6410bb]]
2021-03-11 22:37:50,139 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a6410bb]
2021-03-11 22:37:50,233 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:37:50,233 [main:117] - GENERATED CALL = (intProgression).endInclusive.rem(2670928483878672071)
2021-03-11 22:37:50,234 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@7373c033], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@423223d2]]
2021-03-11 22:37:50,234 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@423223d2]
2021-03-11 22:37:50,234 [main:117] - GENERATED CALL = (intProgression).endInclusive.toLong()
2021-03-11 22:37:50,234 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@7373c033], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@556c4d05]]
2021-03-11 22:37:50,234 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@556c4d05]
2021-03-11 22:37:50,329 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:37:50,330 [main:117] - GENERATED CALL = (intProgression).endInclusive.times(9080124253575016661)
2021-03-11 22:37:50,330 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@7373c033], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5796196b]]
2021-03-11 22:37:50,330 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5796196b]
2021-03-11 22:37:50,433 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:37:50,434 [main:117] - GENERATED CALL = (intProgression).endInclusive.minus(-5873332456453404982)
2021-03-11 22:37:50,434 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@1947aa4a], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5796196b]]
2021-03-11 22:37:50,434 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5796196b]
2021-03-11 22:37:50,550 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:37:50,551 [main:117] - GENERATED CALL = (intProgression).first.minus(-9003938958256250021)
2021-03-11 22:37:50,552 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.Long): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@79a5db78]]
2021-03-11 22:37:50,552 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.Long): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@79a5db78]
2021-03-11 22:37:50,657 [main:302] - generating value of type = Function1<T, Long> false depth = 0
2021-03-11 22:37:50,658 [main:302] - generating value of type = Long true depth = 1
2021-03-11 22:37:50,660 [main:117] - GENERATED CALL = (intProgression).sumOf({a: T -> 8306537382064417833})
2021-03-11 22:37:50,660 [main:61] - replacement of 1L of type Long is (intProgression).first.div(4501003188802054160)
2021-03-11 22:37:50,753 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:37:50,754 [main:66] - Compilation checking started
2021-03-11 22:37:51,173 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (IntRange(-1617443315, 1008168877)).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(4501003188802054160) until 9L
    for (i in ((emptyArray<UInt>()).size.downTo(-352137360307008850)).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ('᫻').downTo('镣')) {
        charList += i
    }
    assertEquals(listOf('g', 'e', '딜', (longProgression).endInclusive.toChar()), charList)

    return "OK"
}


2021-03-11 22:37:51,173 [main:53] - replacing (intProgression, IntRange)
2021-03-11 22:37:51,174 [main:50] - replacing intProgression IntRange
2021-03-11 22:37:51,174 [main:54] - Getting value of type IntRange
2021-03-11 22:37:51,283 [main:302] - generating value of type = IntRange false depth = 0
2021-03-11 22:37:51,378 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-11 22:37:51,380 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-11 22:37:51,680 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:37:51,681 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:37:51,681 [main:95] - GENERATED = IntRange(1578125556, -869836104)
2021-03-11 22:37:51,681 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(1578125556, -869836104)
2021-03-11 22:37:51,682 [main:61] - GENERATED IS CALL =true
2021-03-11 22:37:51,777 [main:67] - randomType = Boolean
2021-03-11 22:37:51,871 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:37:51,885 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4bec43d4]
2021-03-11 22:37:51,982 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:37:51,983 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@64ad2ba9]
2021-03-11 22:37:52,085 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:37:52,086 [main:78] - Generated call from random type = (true).compareTo(true).until(108)
2021-03-11 22:37:52,086 [main:61] - replacement of intProgression of type IntRange is (true).compareTo(true).until(108)
2021-03-11 22:37:52,200 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:37:52,201 [main:53] - replacing (longProgression, LongRange)
2021-03-11 22:37:52,201 [main:50] - replacing longProgression LongRange
2021-03-11 22:37:52,201 [main:54] - Getting value of type LongRange
2021-03-11 22:37:52,293 [main:302] - generating value of type = LongRange false depth = 0
2021-03-11 22:37:52,412 [main:43] - GENERATING CALL OF fun LongRange(start: kotlin.Long, endInclusive: kotlin.Long): LongRange = TODO()
2021-03-11 22:37:52,413 [main:61] - WITHOUT TYPE PARAMS = fun LongRange(start: kotlin.Long, endInclusive: kotlin.Long): LongRange = TODO()
2021-03-11 22:37:52,725 [main:302] - generating value of type = Long true depth = 3
2021-03-11 22:37:52,726 [main:302] - generating value of type = Long true depth = 3
2021-03-11 22:37:52,726 [main:95] - GENERATED = LongRange(1763282550850636552, -2340124252781509928)
2021-03-11 22:37:52,726 [main:58] - GENERATED VALUE OF TYPE LongRange = LongRange(1763282550850636552, -2340124252781509928)
2021-03-11 22:37:52,727 [main:61] - GENERATED IS CALL =true
2021-03-11 22:37:52,840 [main:67] - randomType = Double
2021-03-11 22:37:52,939 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:37:52,988 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@9fa9d4c]
2021-03-11 22:37:52,988 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Long): kotlin.ranges.LongRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@430915ce]
2021-03-11 22:37:53,088 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:37:53,089 [main:78] - Generated call from random type = (0.23161290532344203).toInt().until(-7083338957359088586)
2021-03-11 22:37:53,089 [main:61] - replacement of longProgression of type LongRange is LongRange(1763282550850636552, -2340124252781509928)
2021-03-11 22:37:53,185 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:37:53,186 [main:53] - replacing (1, Int)
2021-03-11 22:37:53,187 [main:50] - replacing 1 Int
2021-03-11 22:37:53,187 [main:54] - Getting value of type Int
2021-03-11 22:37:53,298 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:37:53,299 [main:58] - GENERATED VALUE OF TYPE Int = -2077890683
2021-03-11 22:37:53,299 [main:61] - GENERATED IS CALL =false
2021-03-11 22:37:53,648 [main:67] - randomType = Function2<Boolean, String, UShort>
2021-03-11 22:37:53,650 [main:106] - GETTING Int from IntRange
2021-03-11 22:37:53,688 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@1947aa4a], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13331927]]
2021-03-11 22:37:53,688 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13331927]
2021-03-11 22:37:53,794 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:37:53,795 [main:117] - GENERATED CALL = (intProgression).first.xor(-1525596723)
2021-03-11 22:37:53,795 [main:113] - Case = [@kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.maxByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@69396a1c]]
2021-03-11 22:37:53,795 [main:149] - GENERATING call of type @kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.maxByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@69396a1c]
2021-03-11 22:37:53,893 [main:302] - generating value of type = Function1<T, R> false depth = 0
2021-03-11 22:37:53,894 [main:302] - generating value of type = R false depth = 1
2021-03-11 22:37:54,669 [main:43] - GENERATING CALL OF fun <R> run(block: ()->Map<ULong?, List<ULong>>): R = TODO()
2021-03-11 22:37:54,670 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->Map<ULong?, List<ULong>>): R = TODO()
2021-03-11 22:37:54,856 [main:302] - generating value of type = Function0<Map<ULong?, List<ULong>>> false depth = 4
2021-03-11 22:37:54,856 [main:302] - generating value of type = Map<ULong?, List<ULong>> false depth = 5
2021-03-11 22:37:54,955 [main:43] - GENERATING CALL OF fun <K, V> mutableMapOf(): Map<ULong?, List<ULong>> = TODO()
2021-03-11 22:37:54,957 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mutableMapOf(): Map<ULong?, List<ULong>> = TODO()
2021-03-11 22:37:55,055 [main:95] - GENERATED = mutableMapOf<ULong?, List<ULong>>()
2021-03-11 22:37:55,055 [main:95] - GENERATED = run<Map<ULong?, List<ULong>>>({ mutableMapOf<ULong?, List<ULong>>()})
2021-03-11 22:37:55,056 [main:117] - GENERATED CALL = (intProgression).maxByOrNull({a: T -> run<Map<ULong?, List<ULong>>>({ mutableMapOf<ULong?, List<ULong>>()})})
2021-03-11 22:37:55,056 [main:113] - Case = [public open fun iterator(): kotlin.collections.IntIterator defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@341e23ea], public final fun next(): kotlin.Int defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@32122ad3]]
2021-03-11 22:37:55,056 [main:149] - GENERATING call of type public open fun iterator(): kotlin.collections.IntIterator defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@341e23ea]
2021-03-11 22:37:55,057 [main:149] - GENERATING call of type public final fun next(): kotlin.Int defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@32122ad3]
2021-03-11 22:37:55,057 [main:117] - GENERATED CALL = (intProgression).iterator().next()
2021-03-11 22:37:55,057 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@7373c033], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c96bdd8]]
2021-03-11 22:37:55,057 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c96bdd8]
2021-03-11 22:37:55,057 [main:117] - GENERATED CALL = (intProgression).endInclusive.toInt()
2021-03-11 22:37:55,057 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3df8a0d8]]
2021-03-11 22:37:55,058 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3df8a0d8]
2021-03-11 22:37:55,058 [main:117] - GENERATED CALL = (intProgression).random()
2021-03-11 22:37:55,058 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.firstOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1641ee27]]
2021-03-11 22:37:55,058 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.firstOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1641ee27]
2021-03-11 22:37:55,058 [main:117] - GENERATED CALL = (intProgression).firstOrNull()
2021-03-11 22:37:55,058 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@7373c033], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13331927]]
2021-03-11 22:37:55,058 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13331927]
2021-03-11 22:37:55,167 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:37:55,168 [main:117] - GENERATED CALL = (intProgression).endInclusive.xor(-28969028)
2021-03-11 22:37:55,168 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@1947aa4a], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@40574edf]]
2021-03-11 22:37:55,168 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@40574edf]
2021-03-11 22:37:55,168 [main:117] - GENERATED CALL = (intProgression).first.takeHighestOneBit()
2021-03-11 22:37:55,169 [main:113] - Case = [public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1badd75d]]
2021-03-11 22:37:55,169 [main:149] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1badd75d]
2021-03-11 22:37:55,278 [main:302] - generating value of type = T false depth = 0
2021-03-11 22:37:55,399 [main:43] - GENERATING CALL OF fun <T> minOf(a: Short, other: Short): T = TODO()
2021-03-11 22:37:55,401 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Short, other: Short): T = TODO()
2021-03-11 22:37:55,498 [main:302] - generating value of type = Short true depth = 3
2021-03-11 22:37:55,498 [main:302] - generating value of type = Short true depth = 3
2021-03-11 22:37:55,499 [main:95] - GENERATED = minOf<Short>(-25097, -12240)
2021-03-11 22:37:55,499 [main:117] - GENERATED CALL = (intProgression).lastIndexOf(minOf<Short>(-25097, -12240))
2021-03-11 22:37:55,500 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@7373c033], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62d8a9f7]]
2021-03-11 22:37:55,500 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62d8a9f7]
2021-03-11 22:37:55,598 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:37:55,599 [main:117] - GENERATED CALL = (intProgression).endInclusive.and(-671251329)
2021-03-11 22:37:55,599 [main:61] - replacement of 1 of type Int is (intProgression).iterator().next()
2021-03-11 22:37:55,713 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:37:55,713 [main:66] - Compilation checking started
2021-03-11 22:37:56,147 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (IntRange(-1617443315, 1008168877)).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, (intProgression).iterator().next()), intList)

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(4501003188802054160) until 9L
    for (i in ((emptyArray<UInt>()).size.downTo(-352137360307008850)).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ('᫻').downTo('镣')) {
        charList += i
    }
    assertEquals(listOf('g', 'e', '딜', (longProgression).endInclusive.toChar()), charList)

    return "OK"
}


2021-03-11 22:37:56,148 [main:53] - replacing (9, Int)
2021-03-11 22:37:56,149 [main:50] - replacing 9 Int
2021-03-11 22:37:56,149 [main:54] - Getting value of type Int
2021-03-11 22:37:56,243 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:37:56,244 [main:58] - GENERATED VALUE OF TYPE Int = -345316429
2021-03-11 22:37:56,244 [main:61] - GENERATED IS CALL =false
2021-03-11 22:37:56,335 [main:67] - randomType = UByte
2021-03-11 22:37:56,434 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:37:56,478 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@a0148e1]
2021-03-11 22:37:56,478 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toInt(): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@1125d984]
2021-03-11 22:37:56,478 [main:78] - Generated call from random type = (102.toUByte()).toUShort().toInt()
2021-03-11 22:37:56,480 [main:106] - GETTING Int from MutableList<Int>
2021-03-11 22:37:56,536 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.lastOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@61606066]]
2021-03-11 22:37:56,536 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.lastOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@61606066]
2021-03-11 22:37:56,537 [main:117] - GENERATED CALL = (intList).lastOrNull()
2021-03-11 22:37:56,537 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@5e1f7c80], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4b7217a2]]
2021-03-11 22:37:56,537 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4b7217a2]
2021-03-11 22:37:56,634 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:37:56,720 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:37:56,721 [main:117] - GENERATED CALL = (intList).size.coerceIn(-1062922055, 1002340532)
2021-03-11 22:37:56,721 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@5e1f7c80], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@237f66a0]]
2021-03-11 22:37:56,721 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@237f66a0]
2021-03-11 22:37:56,809 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:37:56,810 [main:117] - GENERATED CALL = (intList).size.times(-13)
2021-03-11 22:37:56,810 [main:113] - Case = [public abstract fun listIterator(): kotlin.collections.MutableListIterator<kotlin.Int> defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7de43042], public abstract fun previous(): kotlin.Int defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@65d19a5]]
2021-03-11 22:37:56,810 [main:149] - GENERATING call of type public abstract fun listIterator(): kotlin.collections.MutableListIterator<kotlin.Int> defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7de43042]
2021-03-11 22:37:56,810 [main:149] - GENERATING call of type public abstract fun previous(): kotlin.Int defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@65d19a5]
2021-03-11 22:37:56,810 [main:117] - GENERATED CALL = (intList).listIterator().previous()
2021-03-11 22:37:56,810 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.getOrNull(index: kotlin.Int): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2528c5eb]]
2021-03-11 22:37:56,810 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.getOrNull(index: kotlin.Int): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2528c5eb]
2021-03-11 22:37:56,897 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:37:56,898 [main:117] - GENERATED CALL = (intList).getOrNull(36628074)
2021-03-11 22:37:56,898 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@5e1f7c80], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270ed861]]
2021-03-11 22:37:56,898 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@270ed861]
2021-03-11 22:37:56,898 [main:117] - GENERATED CALL = (intList).size.unaryMinus()
2021-03-11 22:37:56,898 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.firstOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6971e091]]
2021-03-11 22:37:56,898 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.firstOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6971e091]
2021-03-11 22:37:56,898 [main:117] - GENERATED CALL = (intList).firstOrNull()
2021-03-11 22:37:56,899 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@69c6fc5a]]
2021-03-11 22:37:56,899 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@69c6fc5a]
2021-03-11 22:37:56,985 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-11 22:37:57,078 [main:43] - GENERATING CALL OF fun <T> compareByDescending(selector: (T)->kotlin.Comparable<*>?): Comparator<T> = TODO()
2021-03-11 22:37:57,079 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareByDescending(selector: (T)->kotlin.Comparable<*>?): Comparator<T> = TODO()
2021-03-11 22:37:57,305 [main:385] - Cant generate call of fun <T> compareByDescending(selector: (T)->kotlin.Comparable<*>?): Comparator<T> = TODO()
2021-03-11 22:37:57,305 [main:158] - CANT GENERATE PARAMS FOR @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@69c6fc5a]
2021-03-11 22:37:57,305 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.randomOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@585b81c1]]
2021-03-11 22:37:57,305 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.randomOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@585b81c1]
2021-03-11 22:37:57,306 [main:117] - GENERATED CALL = (intList).randomOrNull()
2021-03-11 22:37:57,306 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.find(predicate: (T) -> kotlin.Boolean): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2922bf92]]
2021-03-11 22:37:57,306 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.find(predicate: (T) -> kotlin.Boolean): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2922bf92]
2021-03-11 22:37:57,404 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 22:37:57,405 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:37:57,406 [main:117] - GENERATED CALL = (intList).find({a: T -> false})
2021-03-11 22:37:57,406 [main:61] - replacement of 9 of type Int is (intList).find({a: T -> false})
2021-03-11 22:37:57,492 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:37:57,492 [main:66] - Compilation checking started
2021-03-11 22:37:57,807 [main:49] - Result = false
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until (intList).find({a: T -> false})
    for (i in (IntRange(-1617443315, 1008168877)).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, (intProgression).iterator().next()), intList)

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(4501003188802054160) until 9L
    for (i in ((emptyArray<UInt>()).size.downTo(-352137360307008850)).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ('᫻').downTo('镣')) {
        charList += i
    }
    assertEquals(listOf('g', 'e', '딜', (longProgression).endInclusive.toChar()), charList)

    return "OK"
}


2021-03-11 22:37:57,807 [main:53] - replacing (charProgression step 2, CharProgression)
2021-03-11 22:37:57,808 [main:50] - replacing charProgression step 2 CharProgression
2021-03-11 22:37:57,808 [main:54] - Getting value of type CharProgression
2021-03-11 22:37:57,903 [main:302] - generating value of type = CharProgression false depth = 0
2021-03-11 22:37:58,002 [main:43] - GENERATING CALL OF fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): CharProgression = TODO()
2021-03-11 22:37:58,004 [main:61] - WITHOUT TYPE PARAMS = fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): CharProgression = TODO()
2021-03-11 22:37:58,319 [main:302] - generating value of type = Char true depth = 3
2021-03-11 22:37:58,320 [main:302] - generating value of type = Char true depth = 3
2021-03-11 22:37:58,320 [main:95] - GENERATED = CharRange('軗', '讐')
2021-03-11 22:37:58,320 [main:58] - GENERATED VALUE OF TYPE CharProgression = CharRange('軗', '讐')
2021-03-11 22:37:58,321 [main:61] - GENERATED IS CALL =true
2021-03-11 22:37:58,508 [main:67] - randomType = ULong?
2021-03-11 22:37:58,600 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 22:37:58,648 [main:61] - replacement of charProgression step 2 of type CharProgression is CharRange('軗', '讐')
2021-03-11 22:37:58,744 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:37:58,744 [main:53] - replacing (charProgression, CharRange)
2021-03-11 22:37:58,744 [main:50] - replacing charProgression CharRange
2021-03-11 22:37:58,744 [main:54] - Getting value of type CharRange
2021-03-11 22:37:58,899 [main:302] - generating value of type = CharRange false depth = 0
2021-03-11 22:37:59,026 [main:43] - GENERATING CALL OF fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): CharRange = TODO()
2021-03-11 22:37:59,027 [main:61] - WITHOUT TYPE PARAMS = fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): CharRange = TODO()
2021-03-11 22:37:59,313 [main:302] - generating value of type = Char true depth = 3
2021-03-11 22:37:59,314 [main:302] - generating value of type = Char true depth = 3
2021-03-11 22:37:59,315 [main:95] - GENERATED = CharRange('糅', '䭦')
2021-03-11 22:37:59,315 [main:58] - GENERATED VALUE OF TYPE CharRange = CharRange('糅', '䭦')
2021-03-11 22:37:59,315 [main:61] - GENERATED IS CALL =true
2021-03-11 22:37:59,457 [main:67] - randomType = Int?
2021-03-11 22:37:59,568 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:37:59,607 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]
2021-03-11 22:37:59,607 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@53bf6412]
2021-03-11 22:37:59,697 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:37:59,698 [main:78] - Generated call from random type = (26975178)?.toChar().rangeTo('㈑')
2021-03-11 22:37:59,698 [main:61] - replacement of charProgression of type CharRange is (26975178)?.toChar().rangeTo('㈑')
2021-03-11 22:37:59,787 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:37:59,788 [main:53] - replacing (2, Int)
2021-03-11 22:37:59,788 [main:50] - replacing 2 Int
2021-03-11 22:37:59,788 [main:54] - Getting value of type Int
2021-03-11 22:37:59,877 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:37:59,878 [main:58] - GENERATED VALUE OF TYPE Int = 755066822
2021-03-11 22:37:59,878 [main:61] - GENERATED IS CALL =false
2021-03-11 22:37:59,975 [main:67] - randomType = UShort
2021-03-11 22:38:00,093 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 22:38:00,163 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@329f7599]
2021-03-11 22:38:00,278 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:38:00,279 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72e9940f]
2021-03-11 22:38:00,279 [main:78] - Generated call from random type = (24380.toUShort()).compareTo(36.toUByte()).takeLowestOneBit()
2021-03-11 22:38:00,279 [main:61] - replacement of 2 of type Int is (24380.toUShort()).compareTo(36.toUByte()).takeLowestOneBit()
2021-03-11 22:38:00,365 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:38:00,367 [main:53] - replacing ('e', Char)
2021-03-11 22:38:00,367 [main:50] - replacing 'e' Char
2021-03-11 22:38:00,367 [main:54] - Getting value of type Char
2021-03-11 22:38:00,454 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:38:00,454 [main:58] - GENERATED VALUE OF TYPE Char = '儸'
2021-03-11 22:38:00,454 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:00,648 [main:67] - randomType = Set<UByte>
2021-03-11 22:38:00,649 [main:106] - GETTING Char from IntRange
2021-03-11 22:38:00,677 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@1947aa4a], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Int.digitToChar(): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6376394a]]
2021-03-11 22:38:00,678 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Int.digitToChar(): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6376394a]
2021-03-11 22:38:00,678 [main:117] - GENERATED CALL = (intProgression).first.digitToChar()
2021-03-11 22:38:00,678 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@7373c033], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Int.digitToChar(): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6376394a]]
2021-03-11 22:38:00,678 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Int.digitToChar(): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6376394a]
2021-03-11 22:38:00,678 [main:117] - GENERATED CALL = (intProgression).endInclusive.digitToChar()
2021-03-11 22:38:00,678 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@1947aa4a], public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]]
2021-03-11 22:38:00,678 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]
2021-03-11 22:38:00,679 [main:117] - GENERATED CALL = (intProgression).first.toChar()
2021-03-11 22:38:00,679 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@7373c033], public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]]
2021-03-11 22:38:00,679 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]
2021-03-11 22:38:00,679 [main:117] - GENERATED CALL = (intProgression).endInclusive.toChar()
2021-03-11 22:38:00,679 [main:61] - replacement of 'e' of type Char is (intProgression).first.digitToChar()
2021-03-11 22:38:00,770 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:38:00,771 [main:66] - Compilation checking started
2021-03-11 22:38:01,151 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (IntRange(-1617443315, 1008168877)).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, (intProgression).iterator().next()), intList)

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(4501003188802054160) until 9L
    for (i in ((emptyArray<UInt>()).size.downTo(-352137360307008850)).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ('᫻').downTo('镣')) {
        charList += i
    }
    assertEquals(listOf('g', (intProgression).first.digitToChar(), '딜', (longProgression).endInclusive.toChar()), charList)

    return "OK"
}


2021-03-11 22:38:01,153 [main:53] - replacing ('a' until 'i', CharRange)
2021-03-11 22:38:01,154 [main:50] - replacing 'a' until 'i' CharRange
2021-03-11 22:38:01,154 [main:54] - Getting value of type CharRange
2021-03-11 22:38:01,245 [main:302] - generating value of type = CharRange false depth = 0
2021-03-11 22:38:01,350 [main:43] - GENERATING CALL OF fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): CharRange = TODO()
2021-03-11 22:38:01,352 [main:61] - WITHOUT TYPE PARAMS = fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): CharRange = TODO()
2021-03-11 22:38:01,639 [main:302] - generating value of type = Char true depth = 3
2021-03-11 22:38:01,640 [main:302] - generating value of type = Char true depth = 3
2021-03-11 22:38:01,640 [main:95] - GENERATED = CharRange('冔', 'လ')
2021-03-11 22:38:01,640 [main:58] - GENERATED VALUE OF TYPE CharRange = CharRange('冔', 'လ')
2021-03-11 22:38:01,641 [main:61] - GENERATED IS CALL =true
2021-03-11 22:38:01,731 [main:67] - randomType = Double
2021-03-11 22:38:01,820 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:38:01,863 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3ea14e1d]
2021-03-11 22:38:01,863 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@53bf6412]
2021-03-11 22:38:01,947 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:38:01,947 [main:78] - Generated call from random type = (0.32244855831475605).toChar().rangeTo('梙')
2021-03-11 22:38:01,949 [main:106] - GETTING CharRange from LongRange
2021-03-11 22:38:01,970 [main:106] - GETTING CharRange from CharRange
2021-03-11 22:38:02,000 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@2eddc6c5], public final operator fun rangeTo(other: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@53bf6412]]
2021-03-11 22:38:02,000 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@53bf6412]
2021-03-11 22:38:02,109 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:38:02,110 [main:117] - GENERATED CALL = (charProgression).first.rangeTo('撈')
2021-03-11 22:38:02,110 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@278e8072], public final operator fun rangeTo(other: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@53bf6412]]
2021-03-11 22:38:02,110 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@53bf6412]
2021-03-11 22:38:02,248 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:38:02,249 [main:117] - GENERATED CALL = (charProgression).endInclusive.rangeTo('')
2021-03-11 22:38:02,249 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@278e8072], public infix fun kotlin.Char.until(to: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@27f3b5ba]]
2021-03-11 22:38:02,249 [main:149] - GENERATING call of type public infix fun kotlin.Char.until(to: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@27f3b5ba]
2021-03-11 22:38:02,338 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:38:02,339 [main:117] - GENERATED CALL = (charProgression).endInclusive.until('')
2021-03-11 22:38:02,339 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@2eddc6c5], public infix fun kotlin.Char.until(to: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@27f3b5ba]]
2021-03-11 22:38:02,339 [main:149] - GENERATING call of type public infix fun kotlin.Char.until(to: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@27f3b5ba]
2021-03-11 22:38:02,428 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:38:02,429 [main:117] - GENERATED CALL = (charProgression).first.until('跕')
2021-03-11 22:38:02,429 [main:61] - replacement of 'a' until 'i' of type CharRange is (charProgression).endInclusive.rangeTo('')
2021-03-11 22:38:02,515 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:38:02,516 [main:66] - Compilation checking started
2021-03-11 22:38:02,762 [main:49] - Result = false
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (IntRange(-1617443315, 1008168877)).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, (intProgression).iterator().next()), intList)

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(4501003188802054160) until 9L
    for (i in ((emptyArray<UInt>()).size.downTo(-352137360307008850)).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = (charProgression).endInclusive.rangeTo('')
    for (i in ('᫻').downTo('镣')) {
        charList += i
    }
    assertEquals(listOf('g', (intProgression).first.digitToChar(), '딜', (longProgression).endInclusive.toChar()), charList)

    return "OK"
}


2021-03-11 22:38:02,763 [main:53] - replacing ("OK", String)
2021-03-11 22:38:02,764 [main:50] - replacing "OK" String
2021-03-11 22:38:02,764 [main:54] - Getting value of type String
2021-03-11 22:38:02,864 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:38:02,865 [main:58] - GENERATED VALUE OF TYPE String = "zhcoy"
2021-03-11 22:38:02,865 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:03,131 [main:67] - randomType = Map<UShort, Float>
2021-03-11 22:38:03,132 [main:106] - GETTING String from LongRange
2021-03-11 22:38:03,154 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@66366fb3], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]]
2021-03-11 22:38:03,154 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:38:03,238 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:03,239 [main:117] - GENERATED CALL = (longProgression).first.toString(-1497888855)
2021-03-11 22:38:03,239 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:38:03,239 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:38:03,324 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:03,412 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:38:03,413 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:38:03,647 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:38:03,648 [main:95] - GENERATED = StringBuilder(-106305003)
2021-03-11 22:38:03,733 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:03,820 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:38:03,821 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:38:03,995 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:38:03,995 [main:95] - GENERATED = StringBuilder(-993810023)
2021-03-11 22:38:04,120 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:04,222 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:04,313 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:04,409 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:38:04,410 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:38:04,502 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:38:04,503 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:38:04,682 [main:302] - generating value of type = String true depth = 4
2021-03-11 22:38:04,683 [main:95] - GENERATED = StringBuilder("avkwg")
2021-03-11 22:38:04,684 [main:117] - GENERATED CALL = (longProgression).joinToString(StringBuilder(-106305003), StringBuilder(-993810023), "rgkwa", -2128549758, StringBuilder(), {a: T -> StringBuilder("avkwg")})
2021-03-11 22:38:04,684 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@292f1c41], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]]
2021-03-11 22:38:04,684 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:38:04,793 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:04,794 [main:117] - GENERATED CALL = (longProgression).endInclusive.toString(-2099659805)
2021-03-11 22:38:04,794 [main:61] - replacement of "OK" of type String is "zhcoy"
2021-03-11 22:38:04,888 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 22:38:04,889 [main:66] - Compilation checking started
2021-03-11 22:38:05,229 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (IntRange(-1617443315, 1008168877)).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, (intProgression).iterator().next()), intList)

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(4501003188802054160) until 9L
    for (i in ((emptyArray<UInt>()).size.downTo(-352137360307008850)).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ('᫻').downTo('镣')) {
        charList += i
    }
    assertEquals(listOf('g', (intProgression).first.digitToChar(), '딜', (longProgression).endInclusive.toChar()), charList)

    return "zhcoy"
}


2021-03-11 22:38:05,230 [main:53] - replacing (2L, Long)
2021-03-11 22:38:05,230 [main:50] - replacing 2L Long
2021-03-11 22:38:05,230 [main:54] - Getting value of type Long
2021-03-11 22:38:05,315 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:38:05,315 [main:58] - GENERATED VALUE OF TYPE Long = 6914721800799686317
2021-03-11 22:38:05,316 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:05,404 [main:67] - randomType = Short
2021-03-11 22:38:05,487 [main:302] - generating value of type = Short true depth = 0
2021-03-11 22:38:05,523 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7404d32b]
2021-03-11 22:38:05,619 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:38:05,619 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a6410bb]
2021-03-11 22:38:05,708 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:38:05,709 [main:78] - Generated call from random type = (6842).compareTo(-77).rem(-6028880361657861546)
2021-03-11 22:38:05,709 [main:61] - replacement of 2L of type Long is 6914721800799686317
2021-03-11 22:38:05,795 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 22:38:05,796 [main:53] - replacing (mutableListOf<Int>(), MutableList<Int>)
2021-03-11 22:38:05,796 [main:50] - replacing mutableListOf<Int>() MutableList<Int>
2021-03-11 22:38:05,796 [main:54] - Getting value of type MutableList<Int>
2021-03-11 22:38:05,884 [main:302] - generating value of type = MutableList<Int> false depth = 0
2021-03-11 22:38:05,974 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): MutableList<Int> = TODO()
2021-03-11 22:38:05,975 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): MutableList<Int> = TODO()
2021-03-11 22:38:06,062 [main:95] - GENERATED = arrayListOf<Int>()
2021-03-11 22:38:06,062 [main:58] - GENERATED VALUE OF TYPE MutableList<Int> = arrayListOf<Int>()
2021-03-11 22:38:06,062 [main:61] - GENERATED IS CALL =true
2021-03-11 22:38:06,063 [main:67] - randomType = UInt
2021-03-11 22:38:06,150 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 22:38:06,190 [main:106] - GETTING MutableList<Int> from MutableList<Int>
2021-03-11 22:38:06,239 [main:113] - Case = [public fun <T> kotlin.collections.Collection<T>.toMutableList(): kotlin.collections.MutableList<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@c882b6a]]
2021-03-11 22:38:06,239 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Collection<T>.toMutableList(): kotlin.collections.MutableList<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@c882b6a]
2021-03-11 22:38:06,239 [main:117] - GENERATED CALL = (intList).toMutableList()
2021-03-11 22:38:06,239 [main:113] - Case = [public abstract fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.Int> defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@6416b89d]]
2021-03-11 22:38:06,239 [main:149] - GENERATING call of type public abstract fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.Int> defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@6416b89d]
2021-03-11 22:38:06,339 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:06,432 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:06,432 [main:117] - GENERATED CALL = (intList).subList(-1665627810, 692906752)
2021-03-11 22:38:06,432 [main:113] - Case = [@kotlin.jvm.JvmName public fun <T> kotlin.collections.MutableList<T>.asReversed(): kotlin.collections.MutableList<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@57c97ec8]]
2021-03-11 22:38:06,432 [main:149] - GENERATING call of type @kotlin.jvm.JvmName public fun <T> kotlin.collections.MutableList<T>.asReversed(): kotlin.collections.MutableList<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@57c97ec8]
2021-03-11 22:38:06,433 [main:117] - GENERATED CALL = (intList).asReversed()
2021-03-11 22:38:06,433 [main:61] - replacement of mutableListOf<Int>() of type MutableList<Int> is arrayListOf<Int>()
2021-03-11 22:38:06,518 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:38:06,518 [main:66] - Compilation checking started
2021-03-11 22:38:06,942 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = arrayListOf<Int>()
    val intProgression = 1 until 9
    for (i in (IntRange(-1617443315, 1008168877)).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, (intProgression).iterator().next()), intList)

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(4501003188802054160) until 9L
    for (i in ((emptyArray<UInt>()).size.downTo(-352137360307008850)).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ('᫻').downTo('镣')) {
        charList += i
    }
    assertEquals(listOf('g', (intProgression).first.digitToChar(), '딜', (longProgression).endInclusive.toChar()), charList)

    return "zhcoy"
}


2021-03-11 22:38:06,943 [main:53] - replacing (intList, MutableList<Int>)
2021-03-11 22:38:06,944 [main:50] - replacing intList MutableList<Int>
2021-03-11 22:38:06,944 [main:54] - Getting value of type MutableList<Int>
2021-03-11 22:38:07,043 [main:302] - generating value of type = MutableList<Int> false depth = 0
2021-03-11 22:38:07,136 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): MutableList<Int> = TODO()
2021-03-11 22:38:07,137 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): MutableList<Int> = TODO()
2021-03-11 22:38:07,227 [main:95] - GENERATED = ArrayDeque<Int>()
2021-03-11 22:38:07,227 [main:58] - GENERATED VALUE OF TYPE MutableList<Int> = ArrayDeque<Int>()
2021-03-11 22:38:07,227 [main:61] - GENERATED IS CALL =true
2021-03-11 22:38:07,228 [main:67] - randomType = String
2021-03-11 22:38:07,326 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:38:07,360 [main:106] - GETTING MutableList<Int> from IntRange
2021-03-11 22:38:07,397 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.toMutableList(): kotlin.collections.MutableList<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e56b7c0]]
2021-03-11 22:38:07,397 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.toMutableList(): kotlin.collections.MutableList<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e56b7c0]
2021-03-11 22:38:07,397 [main:117] - GENERATED CALL = (intProgression).toMutableList()
2021-03-11 22:38:07,397 [main:61] - replacement of intList of type MutableList<Int> is ArrayDeque<Int>()
2021-03-11 22:38:07,485 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:38:07,485 [main:66] - Compilation checking started
2021-03-11 22:38:07,859 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = arrayListOf<Int>()
    val intProgression = 1 until 9
    for (i in (IntRange(-1617443315, 1008168877)).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, (intProgression).iterator().next()), ArrayDeque<Int>())

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(4501003188802054160) until 9L
    for (i in ((emptyArray<UInt>()).size.downTo(-352137360307008850)).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ('᫻').downTo('镣')) {
        charList += i
    }
    assertEquals(listOf('g', (intProgression).first.digitToChar(), '딜', (longProgression).endInclusive.toChar()), charList)

    return "zhcoy"
}


2021-03-11 22:38:07,860 [main:53] - replacing (2L, Long)
2021-03-11 22:38:07,860 [main:50] - replacing 2L Long
2021-03-11 22:38:07,860 [main:54] - Getting value of type Long
2021-03-11 22:38:07,959 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:38:07,959 [main:58] - GENERATED VALUE OF TYPE Long = 2348838131327456141
2021-03-11 22:38:07,959 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:08,051 [main:67] - randomType = HashSet<UInt>
2021-03-11 22:38:08,137 [main:302] - generating value of type = HashSet<UInt> false depth = 0
2021-03-11 22:38:08,227 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: UInt): HashSet<UInt> = TODO()
2021-03-11 22:38:08,228 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: UInt): HashSet<UInt> = TODO()
2021-03-11 22:38:08,337 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 22:38:08,338 [main:95] - GENERATED = hashSetOf<UInt>(303343749.toUInt())
2021-03-11 22:38:08,515 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1dcf7c57]
2021-03-11 22:38:08,611 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:38:08,611 [main:78] - Generated call from random type = (hashSetOf<UInt>(303343749.toUInt())).size.div(6997567650104063125)
2021-03-11 22:38:08,612 [main:61] - replacement of 2L of type Long is 2348838131327456141
2021-03-11 22:38:08,700 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 22:38:08,701 [main:53] - replacing (mutableListOf<Int>(), MutableList<Int>)
2021-03-11 22:38:08,701 [main:50] - replacing mutableListOf<Int>() MutableList<Int>
2021-03-11 22:38:08,701 [main:54] - Getting value of type MutableList<Int>
2021-03-11 22:38:08,793 [main:302] - generating value of type = MutableList<Int> false depth = 0
2021-03-11 22:38:08,888 [main:43] - GENERATING CALL OF fun <T> mutableListOf(elements: Int): MutableList<Int> = TODO()
2021-03-11 22:38:08,889 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(elements: Int): MutableList<Int> = TODO()
2021-03-11 22:38:08,985 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:38:08,985 [main:95] - GENERATED = mutableListOf<Int>(2019285331)
2021-03-11 22:38:08,985 [main:58] - GENERATED VALUE OF TYPE MutableList<Int> = mutableListOf<Int>(2019285331)
2021-03-11 22:38:08,986 [main:61] - GENERATED IS CALL =true
2021-03-11 22:38:09,175 [main:67] - randomType = UByte?
2021-03-11 22:38:09,290 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:38:09,371 [main:61] - replacement of mutableListOf<Int>() of type MutableList<Int> is mutableListOf<Int>(2019285331)
2021-03-11 22:38:09,466 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:38:09,467 [main:53] - replacing (listOf(7L, 5L, 3L, 1L), List<Long>)
2021-03-11 22:38:09,467 [main:50] - replacing listOf(7L, 5L, 3L, 1L) List<Long>
2021-03-11 22:38:09,467 [main:54] - Getting value of type List<Long>
2021-03-11 22:38:09,563 [main:302] - generating value of type = List<Long> false depth = 0
2021-03-11 22:38:09,662 [main:43] - GENERATING CALL OF fun <T> mutableListOf(elements: Long): List<Long> = TODO()
2021-03-11 22:38:09,663 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(elements: Long): List<Long> = TODO()
2021-03-11 22:38:09,758 [main:302] - generating value of type = Long true depth = 3
2021-03-11 22:38:09,759 [main:95] - GENERATED = mutableListOf<Long>(3579951531497014580)
2021-03-11 22:38:09,759 [main:58] - GENERATED VALUE OF TYPE List<Long> = mutableListOf<Long>(3579951531497014580)
2021-03-11 22:38:09,759 [main:61] - GENERATED IS CALL =true
2021-03-11 22:38:11,050 [main:67] - randomType = Function2<Float, ArrayList<UShort?>, Function2<String, Short?, HashMap<Function1<Function1<UInt, Long>, String>, Array<String?>>>>
2021-03-11 22:38:11,054 [main:106] - GETTING List<Long> from IntRange
2021-03-11 22:38:11,092 [main:106] - GETTING List<Long> from LongRange
2021-03-11 22:38:11,125 [main:113] - Case = [public operator fun <T> kotlin.collections.Iterable<T>.minus(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6de3442f]]
2021-03-11 22:38:11,125 [main:149] - GENERATING call of type public operator fun <T> kotlin.collections.Iterable<T>.minus(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6de3442f]
2021-03-11 22:38:11,210 [main:117] - GENERATED CALL = (longProgression).minus(null)
2021-03-11 22:38:11,210 [main:113] - Case = [public inline fun <T, K> kotlin.collections.Iterable<T>.distinctBy(selector: (T) -> K): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7003891]]
2021-03-11 22:38:11,210 [main:149] - GENERATING call of type public inline fun <T, K> kotlin.collections.Iterable<T>.distinctBy(selector: (T) -> K): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7003891]
2021-03-11 22:38:11,298 [main:302] - generating value of type = Function1<T, K> false depth = 0
2021-03-11 22:38:11,299 [main:302] - generating value of type = K false depth = 1
2021-03-11 22:38:11,303 [main:117] - GENERATED CALL = (longProgression).distinctBy({a: T -> })
2021-03-11 22:38:11,303 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.take(n: kotlin.Int): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e871bce]]
2021-03-11 22:38:11,303 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.take(n: kotlin.Int): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e871bce]
2021-03-11 22:38:11,427 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:11,428 [main:117] - GENERATED CALL = (longProgression).take(187344845)
2021-03-11 22:38:11,428 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.plusElement(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@55f2111b]]
2021-03-11 22:38:11,428 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.plusElement(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@55f2111b]
2021-03-11 22:38:11,524 [main:302] - generating value of type = T false depth = 0
2021-03-11 22:38:11,701 [main:43] - GENERATING CALL OF fun <T> requireNotNull(value: UShort, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 22:38:11,702 [main:61] - WITHOUT TYPE PARAMS = fun <T> requireNotNull(value: UShort, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 22:38:11,884 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 22:38:11,884 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-11 22:38:11,885 [main:302] - generating value of type = Any false depth = 4
2021-03-11 22:38:11,885 [main:95] - GENERATED = requireNotNull<UShort>(31595.toUShort(), { "tglyr"})
2021-03-11 22:38:11,886 [main:117] - GENERATED CALL = (longProgression).plusElement(requireNotNull<UShort>(31595.toUShort(), { "tglyr"}))
2021-03-11 22:38:11,886 [main:113] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.sorted(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@19a2b4c7]]
2021-03-11 22:38:11,886 [main:149] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.sorted(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@19a2b4c7]
2021-03-11 22:38:11,886 [main:117] - GENERATED CALL = (longProgression).sorted()
2021-03-11 22:38:11,887 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.filterNot(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40d35e50]]
2021-03-11 22:38:11,887 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.filterNot(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40d35e50]
2021-03-11 22:38:11,991 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 22:38:11,992 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:38:11,993 [main:117] - GENERATED CALL = (longProgression).filterNot({a: T -> false})
2021-03-11 22:38:11,993 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.drop(n: kotlin.Int): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@61e4f1cb]]
2021-03-11 22:38:11,993 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.drop(n: kotlin.Int): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@61e4f1cb]
2021-03-11 22:38:12,092 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:12,093 [main:117] - GENERATED CALL = (longProgression).drop(545721885)
2021-03-11 22:38:12,093 [main:113] - Case = [public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.sortedBy(crossinline selector: (T) -> R?): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@70bf2681]]
2021-03-11 22:38:12,093 [main:149] - GENERATING call of type public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.sortedBy(crossinline selector: (T) -> R?): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@70bf2681]
2021-03-11 22:38:12,182 [main:302] - generating value of type = Function1<T, R?> false depth = 0
2021-03-11 22:38:12,183 [main:302] - generating value of type = R false depth = 1
2021-03-11 22:38:12,551 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->HashMap<UShort, UByte>): R = TODO()
2021-03-11 22:38:12,553 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->HashMap<UShort, UByte>): R = TODO()
2021-03-11 22:38:12,848 [main:302] - generating value of type = Any false depth = 4
2021-03-11 22:38:12,849 [main:302] - generating value of type = Function0<HashMap<UShort, UByte>> false depth = 4
2021-03-11 22:38:12,849 [main:302] - generating value of type = HashMap<UShort, UByte> false depth = 5
2021-03-11 22:38:12,949 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<UShort, UByte>): HashMap<UShort, UByte> = TODO()
2021-03-11 22:38:12,950 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<UShort, UByte>): HashMap<UShort, UByte> = TODO()
2021-03-11 22:38:13,036 [main:302] - generating value of type = Pair<UShort, UByte> false depth = 8
2021-03-11 22:38:13,124 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UShort, second: UByte): Pair<UShort, UByte> = TODO()
2021-03-11 22:38:13,125 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UShort, second: UByte): Pair<UShort, UByte> = TODO()
2021-03-11 22:38:13,240 [main:302] - generating value of type = UShort true depth = 11
2021-03-11 22:38:13,240 [main:302] - generating value of type = UByte true depth = 11
2021-03-11 22:38:13,241 [main:95] - GENERATED = Pair<UShort, UByte>(32210.toUShort(), 43.toUByte())
2021-03-11 22:38:13,241 [main:95] - GENERATED = linkedMapOf<UShort, UByte>(Pair<UShort, UByte>(32210.toUShort(), 43.toUByte()))
2021-03-11 22:38:13,241 [main:95] - GENERATED = synchronized<HashMap<UShort, UByte>>("lowhj", { linkedMapOf<UShort, UByte>(Pair<UShort, UByte>(32210.toUShort(), 43.toUByte()))})
2021-03-11 22:38:13,242 [main:117] - GENERATED CALL = (longProgression).sortedBy({a: T -> synchronized<HashMap<UShort, UByte>>("lowhj", { linkedMapOf<UShort, UByte>(Pair<UShort, UByte>(32210.toUShort(), 43.toUByte()))})})
2021-03-11 22:38:13,242 [main:113] - Case = [public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@21e660a2]]
2021-03-11 22:38:13,242 [main:149] - GENERATING call of type public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@21e660a2]
2021-03-11 22:38:13,337 [main:302] - generating value of type = Function1<T, R?> false depth = 0
2021-03-11 22:38:13,337 [main:302] - generating value of type = R false depth = 1
2021-03-11 22:38:13,425 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->Int): R = TODO()
2021-03-11 22:38:13,426 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->Int): R = TODO()
2021-03-11 22:38:13,684 [main:302] - generating value of type = Any false depth = 4
2021-03-11 22:38:13,684 [main:302] - generating value of type = Function0<Int> false depth = 4
2021-03-11 22:38:13,685 [main:302] - generating value of type = Int true depth = 5
2021-03-11 22:38:13,685 [main:95] - GENERATED = synchronized<Int>("xxags", { -773357497})
2021-03-11 22:38:13,686 [main:117] - GENERATED CALL = (longProgression).sortedByDescending({a: T -> synchronized<Int>("xxags", { -773357497})})
2021-03-11 22:38:13,686 [main:113] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.sortedDescending(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3926be0d]]
2021-03-11 22:38:13,686 [main:149] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.sortedDescending(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3926be0d]
2021-03-11 22:38:13,686 [main:117] - GENERATED CALL = (longProgression).sortedDescending()
2021-03-11 22:38:13,686 [main:61] - replacement of listOf(7L, 5L, 3L, 1L) of type List<Long> is (longProgression).drop(545721885)
2021-03-11 22:38:13,788 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:38:13,788 [main:66] - Compilation checking started
2021-03-11 22:38:14,149 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = arrayListOf<Int>()
    val intProgression = 1 until 9
    for (i in (IntRange(-1617443315, 1008168877)).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, (intProgression).iterator().next()), ArrayDeque<Int>())

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(4501003188802054160) until 9L
    for (i in ((emptyArray<UInt>()).size.downTo(-352137360307008850)).reversed()) {
        longList += i
    }
    assertEquals((longProgression).drop(545721885), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ('᫻').downTo('镣')) {
        charList += i
    }
    assertEquals(listOf('g', (intProgression).first.digitToChar(), '딜', (longProgression).endInclusive.toChar()), charList)

    return "zhcoy"
}


2021-03-11 22:38:14,149 [main:53] - replacing (intList, MutableList<Int>)
2021-03-11 22:38:14,149 [main:50] - replacing intList MutableList<Int>
2021-03-11 22:38:14,149 [main:54] - Getting value of type MutableList<Int>
2021-03-11 22:38:14,236 [main:302] - generating value of type = MutableList<Int> false depth = 0
2021-03-11 22:38:14,327 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Int): MutableList<Int> = TODO()
2021-03-11 22:38:14,328 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Int): MutableList<Int> = TODO()
2021-03-11 22:38:14,417 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:38:14,417 [main:95] - GENERATED = arrayListOf<Int>(-320996090)
2021-03-11 22:38:14,418 [main:58] - GENERATED VALUE OF TYPE MutableList<Int> = arrayListOf<Int>(-320996090)
2021-03-11 22:38:14,418 [main:61] - GENERATED IS CALL =true
2021-03-11 22:38:14,507 [main:67] - randomType = Float
2021-03-11 22:38:14,591 [main:302] - generating value of type = Float true depth = 0
2021-03-11 22:38:14,631 [main:61] - replacement of intList of type MutableList<Int> is arrayListOf<Int>(-320996090)
2021-03-11 22:38:14,719 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:38:14,720 [main:53] - replacing (9L, Long)
2021-03-11 22:38:14,720 [main:50] - replacing 9L Long
2021-03-11 22:38:14,720 [main:54] - Getting value of type Long
2021-03-11 22:38:14,806 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:38:14,806 [main:58] - GENERATED VALUE OF TYPE Long = -6147963667562701906
2021-03-11 22:38:14,806 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:14,988 [main:67] - randomType = Array<UShort>
2021-03-11 22:38:15,072 [main:302] - generating value of type = Array<UShort> false depth = 0
2021-03-11 22:38:15,159 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<UShort> = TODO()
2021-03-11 22:38:15,160 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<UShort> = TODO()
2021-03-11 22:38:15,266 [main:95] - GENERATED = emptyArray<UShort>()
2021-03-11 22:38:15,282 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1dcf7c57]
2021-03-11 22:38:15,374 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:38:15,375 [main:78] - Generated call from random type = (emptyArray<UShort>()).size.div(-5618812733371731858)
2021-03-11 22:38:15,376 [main:106] - GETTING Long from MutableList<Long>
2021-03-11 22:38:15,433 [main:113] - Case = [@kotlin.SinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.maxOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1df95cb]]
2021-03-11 22:38:15,433 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.maxOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1df95cb]
2021-03-11 22:38:15,434 [main:117] - GENERATED CALL = (longList).maxOrNull()
2021-03-11 22:38:15,434 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.Long defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@48c253ac], public final operator fun div(other: kotlin.Byte): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@177a48bb]]
2021-03-11 22:38:15,434 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.Long defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@48c253ac]
2021-03-11 22:38:15,517 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:15,517 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@177a48bb]
2021-03-11 22:38:15,600 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:38:15,600 [main:117] - GENERATED CALL = (longList).get(888907088).div(-36)
2021-03-11 22:38:15,600 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.randomOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@585b81c1]]
2021-03-11 22:38:15,600 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.randomOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@585b81c1]
2021-03-11 22:38:15,601 [main:117] - GENERATED CALL = (longList).randomOrNull()
2021-03-11 22:38:15,601 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@79683cc8], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a6410bb]]
2021-03-11 22:38:15,601 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a6410bb]
2021-03-11 22:38:15,689 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:38:15,690 [main:117] - GENERATED CALL = (longList).size.rem(6774130108005105709)
2021-03-11 22:38:15,690 [main:113] - Case = [public abstract fun listIterator(): kotlin.collections.MutableListIterator<kotlin.Long> defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@1fd6c7eb], public abstract fun next(): kotlin.Long defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@4c507ac6]]
2021-03-11 22:38:15,690 [main:149] - GENERATING call of type public abstract fun listIterator(): kotlin.collections.MutableListIterator<kotlin.Long> defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@1fd6c7eb]
2021-03-11 22:38:15,690 [main:149] - GENERATING call of type public abstract fun next(): kotlin.Long defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@4c507ac6]
2021-03-11 22:38:15,690 [main:117] - GENERATED CALL = (longList).listIterator().next()
2021-03-11 22:38:15,690 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.Long defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@48c253ac], public final operator fun inc(): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@112261ce]]
2021-03-11 22:38:15,690 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.Long defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@48c253ac]
2021-03-11 22:38:15,777 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:15,778 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@112261ce]
2021-03-11 22:38:15,778 [main:117] - GENERATED CALL = (longList).get(-347340564).inc()
2021-03-11 22:38:15,778 [main:113] - Case = [public abstract fun get(index: kotlin.Int): kotlin.Long defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@48c253ac], public final infix fun xor(other: kotlin.Long): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@48424baa]]
2021-03-11 22:38:15,778 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.Long defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@48c253ac]
2021-03-11 22:38:15,882 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:15,882 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Long): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@48424baa]
2021-03-11 22:38:15,976 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:38:15,977 [main:117] - GENERATED CALL = (longList).get(452300291).xor(-5956382920207090392)
2021-03-11 22:38:15,977 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.Long): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@79a5db78]]
2021-03-11 22:38:15,977 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.Long): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@79a5db78]
2021-03-11 22:38:16,064 [main:302] - generating value of type = Function1<T, Long> false depth = 0
2021-03-11 22:38:16,065 [main:302] - generating value of type = Long true depth = 1
2021-03-11 22:38:16,069 [main:117] - GENERATED CALL = (longList).sumOf({a: T -> -1697700367757560518})
2021-03-11 22:38:16,070 [main:113] - Case = [public abstract operator fun set(index: kotlin.Int, element: kotlin.Long): kotlin.Long defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@78a173d0]]
2021-03-11 22:38:16,070 [main:149] - GENERATING call of type public abstract operator fun set(index: kotlin.Int, element: kotlin.Long): kotlin.Long defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@78a173d0]
2021-03-11 22:38:16,155 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:16,238 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:38:16,239 [main:117] - GENERATED CALL = (longList).set(-909535171, 2691508717317696980)
2021-03-11 22:38:16,239 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.singleOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@9cb9484]]
2021-03-11 22:38:16,239 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.singleOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@9cb9484]
2021-03-11 22:38:16,239 [main:117] - GENERATED CALL = (longList).singleOrNull()
2021-03-11 22:38:16,239 [main:61] - replacement of 9L of type Long is (longList).sumOf({a: T -> -1697700367757560518})
2021-03-11 22:38:16,322 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:38:16,322 [main:66] - Compilation checking started
2021-03-11 22:38:16,650 [main:49] - Result = false
Text:
import kotlin.test.*

fun box(): String {
    val intList = arrayListOf<Int>()
    val intProgression = 1 until 9
    for (i in (IntRange(-1617443315, 1008168877)).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, (intProgression).iterator().next()), ArrayDeque<Int>())

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(4501003188802054160) until (longList).sumOf({a: T -> -1697700367757560518})
    for (i in ((emptyArray<UInt>()).size.downTo(-352137360307008850)).reversed()) {
        longList += i
    }
    assertEquals((longProgression).drop(545721885), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ('᫻').downTo('镣')) {
        charList += i
    }
    assertEquals(listOf('g', (intProgression).first.digitToChar(), '딜', (longProgression).endInclusive.toChar()), charList)

    return "zhcoy"
}


2021-03-11 22:38:16,651 [main:53] - replacing (listOf(7L, 5L, 3L, 1L), List<Long>)
2021-03-11 22:38:16,651 [main:50] - replacing listOf(7L, 5L, 3L, 1L) List<Long>
2021-03-11 22:38:16,651 [main:54] - Getting value of type List<Long>
2021-03-11 22:38:16,756 [main:302] - generating value of type = List<Long> false depth = 0
2021-03-11 22:38:16,850 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): List<Long> = TODO()
2021-03-11 22:38:16,851 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): List<Long> = TODO()
2021-03-11 22:38:16,943 [main:95] - GENERATED = ArrayDeque<Long>()
2021-03-11 22:38:16,943 [main:58] - GENERATED VALUE OF TYPE List<Long> = ArrayDeque<Long>()
2021-03-11 22:38:16,943 [main:61] - GENERATED IS CALL =true
2021-03-11 22:38:17,043 [main:67] - randomType = Short
2021-03-11 22:38:17,129 [main:302] - generating value of type = Short true depth = 0
2021-03-11 22:38:17,190 [main:61] - replacement of listOf(7L, 5L, 3L, 1L) of type List<Long> is ArrayDeque<Long>()
2021-03-11 22:38:17,280 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:38:17,280 [main:53] - replacing (longProgression, LongRange)
2021-03-11 22:38:17,280 [main:50] - replacing longProgression LongRange
2021-03-11 22:38:17,280 [main:54] - Getting value of type LongRange
2021-03-11 22:38:17,389 [main:302] - generating value of type = LongRange false depth = 0
2021-03-11 22:38:17,493 [main:43] - GENERATING CALL OF fun LongRange(start: kotlin.Long, endInclusive: kotlin.Long): LongRange = TODO()
2021-03-11 22:38:17,494 [main:61] - WITHOUT TYPE PARAMS = fun LongRange(start: kotlin.Long, endInclusive: kotlin.Long): LongRange = TODO()
2021-03-11 22:38:17,756 [main:302] - generating value of type = Long true depth = 3
2021-03-11 22:38:17,756 [main:302] - generating value of type = Long true depth = 3
2021-03-11 22:38:17,757 [main:95] - GENERATED = LongRange(-3333451420578148908, -3957303982139125138)
2021-03-11 22:38:17,757 [main:58] - GENERATED VALUE OF TYPE LongRange = LongRange(-3333451420578148908, -3957303982139125138)
2021-03-11 22:38:17,757 [main:61] - GENERATED IS CALL =true
2021-03-11 22:38:17,757 [main:67] - randomType = Int
2021-03-11 22:38:17,841 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:17,881 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@9fa9d4c]
2021-03-11 22:38:17,881 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Long): kotlin.ranges.LongRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c255eb9]
2021-03-11 22:38:17,979 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:38:17,979 [main:78] - Generated call from random type = (-1566447394).toInt().rangeTo(8394532581432508014)
2021-03-11 22:38:17,979 [main:61] - replacement of longProgression of type LongRange is (-1566447394).toInt().rangeTo(8394532581432508014)
2021-03-11 22:38:18,084 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:38:18,085 [main:53] - replacing (i, Int)
2021-03-11 22:38:18,086 [main:50] - replacing i Int
2021-03-11 22:38:18,086 [main:54] - Getting value of type Int
2021-03-11 22:38:18,180 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:18,180 [main:58] - GENERATED VALUE OF TYPE Int = 1904680903
2021-03-11 22:38:18,180 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:18,270 [main:67] - randomType = UShort
2021-03-11 22:38:18,358 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 22:38:18,400 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@519f8dd]
2021-03-11 22:38:18,400 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4fbfb7d1]
2021-03-11 22:38:18,488 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:38:18,489 [main:78] - Generated call from random type = (30049.toUShort()).toByte().rem(98)
2021-03-11 22:38:18,490 [main:106] - GETTING Int from IntRange
2021-03-11 22:38:18,523 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.min(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@74899df1]]
2021-03-11 22:38:18,524 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.min(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@74899df1]
2021-03-11 22:38:18,524 [main:117] - GENERATED CALL = (intProgression).min()
2021-03-11 22:38:18,524 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@7373c033], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@290a9500]]
2021-03-11 22:38:18,524 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@290a9500]
2021-03-11 22:38:18,524 [main:117] - GENERATED CALL = (intProgression).endInclusive.countOneBits()
2021-03-11 22:38:18,524 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@1947aa4a], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72e9940f]]
2021-03-11 22:38:18,524 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72e9940f]
2021-03-11 22:38:18,524 [main:117] - GENERATED CALL = (intProgression).first.takeLowestOneBit()
2021-03-11 22:38:18,524 [main:113] - Case = [public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@4da20780]]
2021-03-11 22:38:18,525 [main:117] - GENERATED CALL = (intProgression).start
2021-03-11 22:38:18,525 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@7373c033], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@211c4251]]
2021-03-11 22:38:18,525 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@211c4251]
2021-03-11 22:38:18,617 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:38:18,618 [main:117] - GENERATED CALL = (intProgression).endInclusive.rem(-66)
2021-03-11 22:38:18,618 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@1516a77b]]
2021-03-11 22:38:18,618 [main:117] - GENERATED CALL = (intProgression).step
2021-03-11 22:38:18,618 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@1947aa4a], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6178eb74]]
2021-03-11 22:38:18,618 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6178eb74]
2021-03-11 22:38:18,619 [main:117] - GENERATED CALL = (intProgression).first.inv()
2021-03-11 22:38:18,619 [main:113] - Case = [@kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@22f6ff13]]
2021-03-11 22:38:18,619 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@22f6ff13]
2021-03-11 22:38:18,718 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-11 22:38:18,830 [main:43] - GENERATING CALL OF fun <T> reverseOrder(): Comparator<T> = TODO()
2021-03-11 22:38:18,832 [main:61] - WITHOUT TYPE PARAMS = fun <T> reverseOrder(): Comparator<T> = TODO()
2021-03-11 22:38:18,920 [main:95] - GENERATED = reverseOrder<T>()
2021-03-11 22:38:18,920 [main:117] - GENERATED CALL = (intProgression).minWithOrNull(reverseOrder<T>())
2021-03-11 22:38:18,921 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.minBy(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3d349564]]
2021-03-11 22:38:18,921 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.minBy(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3d349564]
2021-03-11 22:38:19,007 [main:302] - generating value of type = Function1<T, R> false depth = 0
2021-03-11 22:38:19,007 [main:302] - generating value of type = R false depth = 1
2021-03-11 22:38:19,187 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->ULong): R = TODO()
2021-03-11 22:38:19,188 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->ULong): R = TODO()
2021-03-11 22:38:19,490 [main:302] - generating value of type = Any false depth = 4
2021-03-11 22:38:19,490 [main:302] - generating value of type = Function0<ULong> false depth = 4
2021-03-11 22:38:19,490 [main:302] - generating value of type = ULong true depth = 5
2021-03-11 22:38:19,491 [main:95] - GENERATED = synchronized<ULong>("nrrau", { 2815063227285468076.toULong()})
2021-03-11 22:38:19,491 [main:117] - GENERATED CALL = (intProgression).minBy({a: T -> synchronized<ULong>("nrrau", { 2815063227285468076.toULong()})})
2021-03-11 22:38:19,492 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@1947aa4a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@440d1117]]
2021-03-11 22:38:19,492 [main:117] - GENERATED CALL = (intProgression).first.absoluteValue
2021-03-11 22:38:19,492 [main:61] - replacement of i of type Int is (intProgression).step
2021-03-11 22:38:19,578 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:38:19,579 [main:66] - Compilation checking started
2021-03-11 22:38:19,925 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = arrayListOf<Int>()
    val intProgression = 1 until 9
    for (i in (IntRange(-1617443315, 1008168877)).reversed()) {
        intList += (intProgression).step
    }
    assertEquals(listOf(7, 5, 3, (intProgression).iterator().next()), ArrayDeque<Int>())

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(4501003188802054160) until 9L
    for (i in ((emptyArray<UInt>()).size.downTo(-352137360307008850)).reversed()) {
        longList += i
    }
    assertEquals((longProgression).drop(545721885), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ('᫻').downTo('镣')) {
        charList += i
    }
    assertEquals(listOf('g', (intProgression).first.digitToChar(), '딜', (longProgression).endInclusive.toChar()), charList)

    return "zhcoy"
}


2021-03-11 22:38:19,926 [main:53] - replacing (mutableListOf<Int>(), MutableList<Int>)
2021-03-11 22:38:19,926 [main:50] - replacing mutableListOf<Int>() MutableList<Int>
2021-03-11 22:38:19,926 [main:54] - Getting value of type MutableList<Int>
2021-03-11 22:38:20,020 [main:302] - generating value of type = MutableList<Int> false depth = 0
2021-03-11 22:38:20,123 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): MutableList<Int> = TODO()
2021-03-11 22:38:20,124 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): MutableList<Int> = TODO()
2021-03-11 22:38:20,223 [main:95] - GENERATED = arrayListOf<Int>()
2021-03-11 22:38:20,224 [main:58] - GENERATED VALUE OF TYPE MutableList<Int> = arrayListOf<Int>()
2021-03-11 22:38:20,224 [main:61] - GENERATED IS CALL =true
2021-03-11 22:38:20,401 [main:67] - randomType = LinkedHashSet<Double>
2021-03-11 22:38:20,485 [main:302] - generating value of type = LinkedHashSet<Double> false depth = 0
2021-03-11 22:38:20,572 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Double> = TODO()
2021-03-11 22:38:20,573 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Double> = TODO()
2021-03-11 22:38:20,659 [main:95] - GENERATED = linkedSetOf<Double>()
2021-03-11 22:38:20,794 [main:61] - replacement of mutableListOf<Int>() of type MutableList<Int> is arrayListOf<Int>()
2021-03-11 22:38:20,877 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:38:20,879 [main:53] - replacing (longList, MutableList<Long>)
2021-03-11 22:38:20,879 [main:50] - replacing longList MutableList<Long>
2021-03-11 22:38:20,879 [main:54] - Getting value of type MutableList<Long>
2021-03-11 22:38:20,989 [main:302] - generating value of type = MutableList<Long> false depth = 0
2021-03-11 22:38:21,125 [main:43] - GENERATING CALL OF fun <E> ArrayList(elements: kotlin.collections.Collection<Long>): MutableList<Long> = TODO()
2021-03-11 22:38:21,126 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(elements: kotlin.collections.Collection<Long>): MutableList<Long> = TODO()
2021-03-11 22:38:21,301 [main:302] - generating value of type = Collection<Long> false depth = 3
2021-03-11 22:38:21,391 [main:43] - GENERATING CALL OF fun <T> listOf(): Collection<Long> = TODO()
2021-03-11 22:38:21,392 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(): Collection<Long> = TODO()
2021-03-11 22:38:21,478 [main:95] - GENERATED = listOf<Long>()
2021-03-11 22:38:21,478 [main:95] - GENERATED = ArrayList<Long>(listOf<Long>())
2021-03-11 22:38:21,478 [main:58] - GENERATED VALUE OF TYPE MutableList<Long> = ArrayList<Long>(listOf<Long>())
2021-03-11 22:38:21,478 [main:61] - GENERATED IS CALL =true
2021-03-11 22:38:21,679 [main:67] - randomType = LinkedHashSet<Byte>
2021-03-11 22:38:21,764 [main:302] - generating value of type = LinkedHashSet<Byte> false depth = 0
2021-03-11 22:38:21,851 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Byte> = TODO()
2021-03-11 22:38:21,852 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Byte> = TODO()
2021-03-11 22:38:21,937 [main:95] - GENERATED = linkedSetOf<Byte>()
2021-03-11 22:38:22,062 [main:106] - GETTING MutableList<Long> from LongRange
2021-03-11 22:38:22,085 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.toMutableList(): kotlin.collections.MutableList<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e56b7c0]]
2021-03-11 22:38:22,085 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.toMutableList(): kotlin.collections.MutableList<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e56b7c0]
2021-03-11 22:38:22,085 [main:117] - GENERATED CALL = (longProgression).toMutableList()
2021-03-11 22:38:22,085 [main:61] - replacement of longList of type MutableList<Long> is ArrayList<Long>(listOf<Long>())
2021-03-11 22:38:22,168 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:38:22,168 [main:66] - Compilation checking started
2021-03-11 22:38:22,567 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = arrayListOf<Int>()
    val intProgression = 1 until 9
    for (i in (IntRange(-1617443315, 1008168877)).reversed()) {
        intList += (intProgression).step
    }
    assertEquals(listOf(7, 5, 3, (intProgression).iterator().next()), ArrayDeque<Int>())

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(4501003188802054160) until 9L
    for (i in ((emptyArray<UInt>()).size.downTo(-352137360307008850)).reversed()) {
        longList += i
    }
    assertEquals((longProgression).drop(545721885), ArrayList<Long>(listOf<Long>()))

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ('᫻').downTo('镣')) {
        charList += i
    }
    assertEquals(listOf('g', (intProgression).first.digitToChar(), '딜', (longProgression).endInclusive.toChar()), charList)

    return "zhcoy"
}


2021-03-11 22:38:22,569 [main:53] - replacing ('g', Char)
2021-03-11 22:38:22,570 [main:50] - replacing 'g' Char
2021-03-11 22:38:22,570 [main:54] - Getting value of type Char
2021-03-11 22:38:22,674 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:38:22,674 [main:58] - GENERATED VALUE OF TYPE Char = '䬰'
2021-03-11 22:38:22,675 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:23,156 [main:67] - randomType = Pair<Array<ULong>, Short>
2021-03-11 22:38:23,250 [main:302] - generating value of type = Pair<Array<ULong>, Short> false depth = 0
2021-03-11 22:38:23,369 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Array<ULong>, second: Short): Pair<Array<ULong>, Short> = TODO()
2021-03-11 22:38:23,371 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Array<ULong>, second: Short): Pair<Array<ULong>, Short> = TODO()
2021-03-11 22:38:23,466 [main:302] - generating value of type = Array<ULong> false depth = 3
2021-03-11 22:38:23,565 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->ULong): Array<ULong> = TODO()
2021-03-11 22:38:23,566 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->ULong): Array<ULong> = TODO()
2021-03-11 22:38:23,833 [main:302] - generating value of type = Int true depth = 6
2021-03-11 22:38:23,834 [main:302] - generating value of type = Function1<Int, ULong> false depth = 6
2021-03-11 22:38:23,834 [main:302] - generating value of type = ULong true depth = 7
2021-03-11 22:38:23,834 [main:95] - GENERATED = Array<ULong>(379399159, {a: Int -> 324173493330208114.toULong()})
2021-03-11 22:38:23,835 [main:302] - generating value of type = Short true depth = 3
2021-03-11 22:38:23,835 [main:95] - GENERATED = Pair<Array<ULong>, Short>(Array<ULong>(379399159, {a: Int -> 324173493330208114.toULong()}), 19961)
2021-03-11 22:38:23,850 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1b46bba1]
2021-03-11 22:38:23,851 [main:78] - Generated call from random type = (Pair<Array<ULong>, Short>(Array<ULong>(379399159, {a: Int -> 324173493330208114.toULong()}), 19961)).second.toChar()
2021-03-11 22:38:23,851 [main:61] - replacement of 'g' of type Char is (Pair<Array<ULong>, Short>(Array<ULong>(379399159, {a: Int -> 324173493330208114.toULong()}), 19961)).second.toChar()
2021-03-11 22:38:23,935 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:38:23,935 [main:66] - Compilation checking started
2021-03-11 22:38:24,432 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = arrayListOf<Int>()
    val intProgression = 1 until 9
    for (i in (IntRange(-1617443315, 1008168877)).reversed()) {
        intList += (intProgression).step
    }
    assertEquals(listOf(7, 5, 3, (intProgression).iterator().next()), ArrayDeque<Int>())

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(4501003188802054160) until 9L
    for (i in ((emptyArray<UInt>()).size.downTo(-352137360307008850)).reversed()) {
        longList += i
    }
    assertEquals((longProgression).drop(545721885), ArrayList<Long>(listOf<Long>()))

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ('᫻').downTo('镣')) {
        charList += i
    }
    assertEquals(listOf((Pair<Array<ULong>, Short>(Array<ULong>(379399159, {a: Int -> 324173493330208114.toULong()}), 19961)).second.toChar(), (intProgression).first.digitToChar(), '딜', (longProgression).endInclusive.toChar()), charList)

    return "zhcoy"
}


2021-03-11 22:38:24,434 [main:53] - replacing (9, Int)
2021-03-11 22:38:24,434 [main:50] - replacing 9 Int
2021-03-11 22:38:24,434 [main:54] - Getting value of type Int
2021-03-11 22:38:24,548 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:24,549 [main:58] - GENERATED VALUE OF TYPE Int = 866299143
2021-03-11 22:38:24,549 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:24,662 [main:67] - randomType = UByte
2021-03-11 22:38:24,761 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:38:24,804 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5c3ced20]
2021-03-11 22:38:24,898 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:38:24,899 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46cdb02c]
2021-03-11 22:38:24,899 [main:78] - Generated call from random type = (15.toUByte()).compareTo(33.toUByte()).dec()
2021-03-11 22:38:24,900 [main:106] - GETTING Int from IntRange
2021-03-11 22:38:24,925 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@7373c033], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5f21e898]]
2021-03-11 22:38:24,926 [main:117] - GENERATED CALL = (intProgression).endInclusive.sign
2021-03-11 22:38:24,926 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@7373c033], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74f143e1]]
2021-03-11 22:38:24,926 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74f143e1]
2021-03-11 22:38:24,926 [main:117] - GENERATED CALL = (intProgression).endInclusive.unaryPlus()
2021-03-11 22:38:24,926 [main:113] - Case = [@kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@15b4f6b3]]
2021-03-11 22:38:24,926 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@15b4f6b3]
2021-03-11 22:38:25,019 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-11 22:38:25,121 [main:43] - GENERATING CALL OF fun <T> nullsLast(): Comparator<T> = TODO()
2021-03-11 22:38:25,123 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsLast(): Comparator<T> = TODO()
2021-03-11 22:38:25,220 [main:95] - GENERATED = nullsLast<T>()
2021-03-11 22:38:25,220 [main:117] - GENERATED CALL = (intProgression).maxWithOrNull(nullsLast<T>())
2021-03-11 22:38:25,220 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@7373c033], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d7006d3]]
2021-03-11 22:38:25,221 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d7006d3]
2021-03-11 22:38:25,221 [main:117] - GENERATED CALL = (intProgression).endInclusive.inc()
2021-03-11 22:38:25,221 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@1947aa4a], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@33ac4ea9]]
2021-03-11 22:38:25,221 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@33ac4ea9]
2021-03-11 22:38:25,344 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:25,345 [main:117] - GENERATED CALL = (intProgression).first.ushr(-1060052280)
2021-03-11 22:38:25,345 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.elementAt(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@78e62cf2]]
2021-03-11 22:38:25,345 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.elementAt(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@78e62cf2]
2021-03-11 22:38:25,452 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:25,453 [main:117] - GENERATED CALL = (intProgression).elementAt(-574901504)
2021-03-11 22:38:25,453 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@1947aa4a], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74f143e1]]
2021-03-11 22:38:25,454 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74f143e1]
2021-03-11 22:38:25,454 [main:117] - GENERATED CALL = (intProgression).first.unaryPlus()
2021-03-11 22:38:25,454 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@7373c033], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@73fbe2ce]]
2021-03-11 22:38:25,454 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@73fbe2ce]
2021-03-11 22:38:25,454 [main:117] - GENERATED CALL = (intProgression).endInclusive.countLeadingZeroBits()
2021-03-11 22:38:25,454 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@1947aa4a], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@290a9500]]
2021-03-11 22:38:25,454 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@290a9500]
2021-03-11 22:38:25,454 [main:117] - GENERATED CALL = (intProgression).first.countOneBits()
2021-03-11 22:38:25,454 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@1947aa4a], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@24e97319]]
2021-03-11 22:38:25,454 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@24e97319]
2021-03-11 22:38:25,545 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:25,545 [main:117] - GENERATED CALL = (intProgression).first.coerceAtMost(-1329459313)
2021-03-11 22:38:25,546 [main:61] - replacement of 9 of type Int is (intProgression).maxWithOrNull(nullsLast<T>())
2021-03-11 22:38:25,635 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:38:25,635 [main:66] - Compilation checking started
2021-03-11 22:38:26,012 [main:49] - Result = false
Text:
import kotlin.test.*

fun box(): String {
    val intList = arrayListOf<Int>()
    val intProgression = 1 until (intProgression).maxWithOrNull(nullsLast<T>())
    for (i in (IntRange(-1617443315, 1008168877)).reversed()) {
        intList += (intProgression).step
    }
    assertEquals(listOf(7, 5, 3, (intProgression).iterator().next()), ArrayDeque<Int>())

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(4501003188802054160) until 9L
    for (i in ((emptyArray<UInt>()).size.downTo(-352137360307008850)).reversed()) {
        longList += i
    }
    assertEquals((longProgression).drop(545721885), ArrayList<Long>(listOf<Long>()))

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ('᫻').downTo('镣')) {
        charList += i
    }
    assertEquals(listOf((Pair<Array<ULong>, Short>(Array<ULong>(379399159, {a: Int -> 324173493330208114.toULong()}), 19961)).second.toChar(), (intProgression).first.digitToChar(), '딜', (longProgression).endInclusive.toChar()), charList)

    return "zhcoy"
}


2021-03-11 22:38:26,013 [main:53] - replacing ("OK", String)
2021-03-11 22:38:26,013 [main:50] - replacing "OK" String
2021-03-11 22:38:26,013 [main:54] - Getting value of type String
2021-03-11 22:38:26,127 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:38:26,128 [main:58] - GENERATED VALUE OF TYPE String = "ndcth"
2021-03-11 22:38:26,128 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:26,129 [main:67] - randomType = UInt
2021-03-11 22:38:26,224 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 22:38:26,268 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@415da3f]
2021-03-11 22:38:26,268 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bb0fa2e]
2021-03-11 22:38:26,369 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:26,369 [main:78] - Generated call from random type = (1893881946.toUInt()).toUByte().toString(-901237403)
2021-03-11 22:38:26,369 [main:61] - replacement of "OK" of type String is (1893881946.toUInt()).toUByte().toString(-901237403)
2021-03-11 22:38:26,495 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:38:26,495 [main:53] - replacing ('c', Char)
2021-03-11 22:38:26,495 [main:50] - replacing 'c' Char
2021-03-11 22:38:26,495 [main:54] - Getting value of type Char
2021-03-11 22:38:26,584 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:38:26,585 [main:58] - GENERATED VALUE OF TYPE Char = '뽅'
2021-03-11 22:38:26,585 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:27,157 [main:67] - randomType = LinkedHashMap<Function2<Char?, Array<Float>, Int>, ULong>
2021-03-11 22:38:27,268 [main:302] - generating value of type = LinkedHashMap<Function2<Char?, Array<Float>, Int>, ULong> false depth = 0
2021-03-11 22:38:27,372 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): LinkedHashMap<Function2<Char?, Array<Float>, Int>, ULong> = TODO()
2021-03-11 22:38:27,373 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): LinkedHashMap<Function2<Char?, Array<Float>, Int>, ULong> = TODO()
2021-03-11 22:38:27,584 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:38:27,584 [main:95] - GENERATED = LinkedHashMap<Function2<Char?, Array<Float>, Int>, ULong>(-1172800725)
2021-03-11 22:38:27,817 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]
2021-03-11 22:38:27,817 [main:78] - Generated call from random type = (LinkedHashMap<Function2<Char?, Array<Float>, Int>, ULong>(-1172800725)).size.toChar()
2021-03-11 22:38:27,817 [main:61] - replacement of 'c' of type Char is '뽅'
2021-03-11 22:38:27,911 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-11 22:38:28,003 [main:119] - TRYING TO REPLACE CONSTANT '᫻'
2021-03-11 22:38:28,089 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:38:28,089 [main:66] - Compilation checking started
2021-03-11 22:38:28,525 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = arrayListOf<Int>()
    val intProgression = 1 until 9
    for (i in (IntRange(-1617443315, 1008168877)).reversed()) {
        intList += (intProgression).step
    }
    assertEquals(listOf(7, 5, 3, (intProgression).iterator().next()), ArrayDeque<Int>())

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(4501003188802054160) until 9L
    for (i in ((emptyArray<UInt>()).size.downTo(-352137360307008850)).reversed()) {
        longList += i
    }
    assertEquals((longProgression).drop(545721885), ArrayList<Long>(listOf<Long>()))

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ((intProgression).first.digitToChar()).downTo('镣')) {
        charList += i
    }
    assertEquals(listOf((Pair<Array<ULong>, Short>(Array<ULong>(379399159, {a: Int -> 324173493330208114.toULong()}), 19961)).second.toChar(), (intProgression).first.digitToChar(), '딜', (longProgression).endInclusive.toChar()), charList)

    return "zhcoy"
}


2021-03-11 22:38:28,526 [main:119] - TRYING TO REPLACE CONSTANT '镣'
2021-03-11 22:38:28,616 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-11 22:38:28,616 [main:66] - Compilation checking started
2021-03-11 22:38:28,986 [main:119] - TRYING TO REPLACE CONSTANT 352137360307008850
2021-03-11 22:38:29,079 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:38:29,079 [main:66] - Compilation checking started
2021-03-11 22:38:29,493 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = arrayListOf<Int>()
    val intProgression = 1 until 9
    for (i in (IntRange(-1617443315, 1008168877)).reversed()) {
        intList += (intProgression).step
    }
    assertEquals(listOf(7, 5, 3, (intProgression).iterator().next()), ArrayDeque<Int>())

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(4501003188802054160) until 9L
    for (i in ((emptyArray<UInt>()).size.downTo((longProgression).endInclusive)).reversed()) {
        longList += i
    }
    assertEquals((longProgression).drop(545721885), ArrayList<Long>(listOf<Long>()))

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ((intProgression).first.digitToChar()).downTo('镣')) {
        charList += i
    }
    assertEquals(listOf((Pair<Array<ULong>, Short>(Array<ULong>(379399159, {a: Int -> 324173493330208114.toULong()}), 19961)).second.toChar(), (intProgression).first.digitToChar(), '딜', (longProgression).endInclusive.toChar()), charList)

    return "zhcoy"
}


2021-03-11 22:38:29,493 [main:119] - TRYING TO REPLACE CONSTANT 1008168877
2021-03-11 22:38:29,592 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 22:38:29,592 [main:66] - Compilation checking started
2021-03-11 22:38:30,038 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = arrayListOf<Int>()
    val intProgression = 1 until 9
    for (i in (IntRange(-1617443315, 1617443315)).reversed()) {
        intList += (intProgression).step
    }
    assertEquals(listOf(7, 5, 3, (intProgression).iterator().next()), ArrayDeque<Int>())

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(4501003188802054160) until 9L
    for (i in ((emptyArray<UInt>()).size.downTo((longProgression).endInclusive)).reversed()) {
        longList += i
    }
    assertEquals((longProgression).drop(545721885), ArrayList<Long>(listOf<Long>()))

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ((intProgression).first.digitToChar()).downTo('镣')) {
        charList += i
    }
    assertEquals(listOf((Pair<Array<ULong>, Short>(Array<ULong>(379399159, {a: Int -> 324173493330208114.toULong()}), 19961)).second.toChar(), (intProgression).first.digitToChar(), '딜', (longProgression).endInclusive.toChar()), charList)

    return "zhcoy"
}


2021-03-11 22:38:30,038 [main:119] - TRYING TO REPLACE CONSTANT 1617443315
2021-03-11 22:38:30,140 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 22:38:30,140 [main:66] - Compilation checking started
2021-03-11 22:38:30,378 [main:49] - Result = false
Text:
import kotlin.test.*

fun box(): String {
    val intList = arrayListOf<Int>()
    val intProgression = 1 until 9
    for (i in (IntRange(step, 1617443315)).reversed()) {
        intList += (intProgression).step
    }
    assertEquals(listOf(7, 5, 3, (intProgression).iterator().next()), ArrayDeque<Int>())

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(4501003188802054160) until 9L
    for (i in ((emptyArray<UInt>()).size.downTo((longProgression).endInclusive)).reversed()) {
        longList += i
    }
    assertEquals((longProgression).drop(545721885), ArrayList<Long>(listOf<Long>()))

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ((intProgression).first.digitToChar()).downTo('镣')) {
        charList += i
    }
    assertEquals(listOf((Pair<Array<ULong>, Short>(Array<ULong>(379399159, {a: Int -> 324173493330208114.toULong()}), 19961)).second.toChar(), (intProgression).first.digitToChar(), '딜', (longProgression).endInclusive.toChar()), charList)

    return "zhcoy"
}


2021-03-11 22:38:30,378 [main:119] - TRYING TO REPLACE CONSTANT 4501003188802054160
2021-03-11 22:38:30,466 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 22:38:30,466 [main:66] - Compilation checking started
2021-03-11 22:38:30,791 [main:49] - Result = false
Text:
import kotlin.test.*

fun box(): String {
    val intList = arrayListOf<Int>()
    val intProgression = 1 until 9
    for (i in (IntRange(-1617443315, 1617443315)).reversed()) {
        intList += (intProgression).step
    }
    assertEquals(listOf(7, 5, 3, (intProgression).iterator().next()), ArrayDeque<Int>())

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(i) until 9L
    for (i in ((emptyArray<UInt>()).size.downTo((longProgression).endInclusive)).reversed()) {
        longList += i
    }
    assertEquals((longProgression).drop(545721885), ArrayList<Long>(listOf<Long>()))

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ((intProgression).first.digitToChar()).downTo('镣')) {
        charList += i
    }
    assertEquals(listOf((Pair<Array<ULong>, Short>(Array<ULong>(379399159, {a: Int -> 324173493330208114.toULong()}), 19961)).second.toChar(), (intProgression).first.digitToChar(), '딜', (longProgression).endInclusive.toChar()), charList)

    return "zhcoy"
}


2021-03-11 22:38:30,791 [main:119] - TRYING TO REPLACE CONSTANT 545721885
2021-03-11 22:38:30,922 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:38:30,923 [main:66] - Compilation checking started
2021-03-11 22:38:31,321 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = arrayListOf<Int>()
    val intProgression = 1 until 9
    for (i in (IntRange(-1617443315, 1617443315)).reversed()) {
        intList += (intProgression).step
    }
    assertEquals(listOf(7, 5, 3, (intProgression).iterator().next()), ArrayDeque<Int>())

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(4501003188802054160) until 9L
    for (i in ((emptyArray<UInt>()).size.downTo((longProgression).endInclusive)).reversed()) {
        longList += i
    }
    assertEquals((longProgression).drop((intProgression).step), ArrayList<Long>(listOf<Long>()))

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ((intProgression).first.digitToChar()).downTo('镣')) {
        charList += i
    }
    assertEquals(listOf((Pair<Array<ULong>, Short>(Array<ULong>(379399159, {a: Int -> 324173493330208114.toULong()}), 19961)).second.toChar(), (intProgression).first.digitToChar(), '딜', (longProgression).endInclusive.toChar()), charList)

    return "zhcoy"
}


2021-03-11 22:38:31,322 [main:119] - TRYING TO REPLACE CONSTANT 19961
2021-03-11 22:38:31,460 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 22:38:31,460 [main:66] - Compilation checking started
2021-03-11 22:38:31,725 [main:49] - Result = false
Text:
import kotlin.test.*

fun box(): String {
    val intList = arrayListOf<Int>()
    val intProgression = 1 until 9
    for (i in (IntRange(-1617443315, 1617443315)).reversed()) {
        intList += (intProgression).step
    }
    assertEquals(listOf(7, 5, 3, (intProgression).iterator().next()), ArrayDeque<Int>())

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(4501003188802054160) until 9L
    for (i in ((emptyArray<UInt>()).size.downTo((longProgression).endInclusive)).reversed()) {
        longList += i
    }
    assertEquals((longProgression).drop((intProgression).step), ArrayList<Long>(listOf<Long>()))

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ((intProgression).first.digitToChar()).downTo('镣')) {
        charList += i
    }
    assertEquals(listOf((Pair<Array<ULong>, Short>(Array<ULong>(379399159, {a: Int -> 324173493330208114.toULong()}), second)).second.toChar(), (intProgression).first.digitToChar(), '딜', (longProgression).endInclusive.toChar()), charList)

    return "zhcoy"
}


2021-03-11 22:38:31,726 [main:119] - TRYING TO REPLACE CONSTANT 379399159
2021-03-11 22:38:31,824 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 22:38:31,824 [main:66] - Compilation checking started
2021-03-11 22:38:32,174 [main:119] - TRYING TO REPLACE CONSTANT 324173493330208114
2021-03-11 22:38:32,281 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 22:38:32,282 [main:66] - Compilation checking started
2021-03-11 22:38:32,613 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = arrayListOf<Int>()
    val intProgression = 1 until 9
    for (i in (IntRange(-1617443315, 1617443315)).reversed()) {
        intList += (intProgression).step
    }
    assertEquals(listOf(7, 5, 3, (intProgression).iterator().next()), ArrayDeque<Int>())

    val longList = mutableListOf<Long>()
    val longProgression = (intProgression).first.div(4501003188802054160) until 9L
    for (i in ((emptyArray<UInt>()).size.downTo((longProgression).endInclusive)).reversed()) {
        longList += i
    }
    assertEquals((longProgression).drop((intProgression).step), ArrayList<Long>(listOf<Long>()))

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in ((intProgression).first.digitToChar()).downTo('镣')) {
        charList += i
    }
    assertEquals(listOf((Pair<Array<ULong>, Short>(Array<ULong>(379399159, {a: Int -> 9L.toULong()}), 19961)).second.toChar(), (intProgression).first.digitToChar(), '딜', (longProgression).endInclusive.toChar()), charList)

    return "zhcoy"
}


2021-03-11 22:38:32,641 [main:41] - AFTER TRY 0 res = import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}
2021-03-11 22:38:32,967 [main:43] - Try №0
2021-03-11 22:38:35,600 [main:69] - Trying to insert inline fun fu5(crossinline param: () -> String): String {
    var prope0 = "fail1"
    fu1("stub") { a ->
        fu0(param()) {
            prope0 = fu2(param()).toString()
        }
    }

    return prope0
}
2021-03-11 22:38:35,732 [main:66] - Compilation checking started
2021-03-11 22:38:36,461 [main:103] - Trying to change 89 nodes
2021-03-11 22:38:36,461 [main:107] - replacing ("start", String)
2021-03-11 22:38:36,464 [main:50] - replacing "start" String
2021-03-11 22:38:36,464 [main:54] - Getting value of type String
2021-03-11 22:38:36,568 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:38:36,569 [main:58] - GENERATED VALUE OF TYPE String = "xmner"
2021-03-11 22:38:36,569 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:36,572 [main:67] - randomType = Long
2021-03-11 22:38:36,677 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:38:36,708 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2809e8ea]
2021-03-11 22:38:36,709 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]
2021-03-11 22:38:36,709 [main:78] - Generated call from random type = (-1284760056610165126).toChar().titlecase()
2021-03-11 22:38:36,710 [main:106] - GETTING String from CharProgression
2021-03-11 22:38:36,724 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]]
2021-03-11 22:38:36,724 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:38:36,725 [main:117] - GENERATED CALL = (charProgression step 2).first.uppercase()
2021-03-11 22:38:36,725 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]]
2021-03-11 22:38:36,725 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]
2021-03-11 22:38:36,725 [main:117] - GENERATED CALL = (charProgression step 2).first.lowercase()
2021-03-11 22:38:36,725 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:38:36,725 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:38:36,832 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:36,943 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:37,075 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:37,194 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:37,306 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:37,419 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:38:37,420 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:38:37,532 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:38:37,534 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:38:37,776 [main:302] - generating value of type = String true depth = 4
2021-03-11 22:38:37,777 [main:95] - GENERATED = StringBuilder("geppj")
2021-03-11 22:38:37,777 [main:117] - GENERATED CALL = (charProgression step 2).joinToString(StringBuilder(), "gqlzf", StringBuilder(), -779142789, "ilrbp", {a: T -> StringBuilder("geppj")})
2021-03-11 22:38:37,778 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:38:37,778 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:38:37,890 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:38:37,891 [main:117] - GENERATED CALL = (charProgression step 2).first.plus("kzssz")
2021-03-11 22:38:37,891 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]]
2021-03-11 22:38:37,891 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]
2021-03-11 22:38:37,892 [main:117] - GENERATED CALL = (charProgression step 2).first.titlecase()
2021-03-11 22:38:37,892 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@32228595], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:38:37,892 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:38:37,992 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:37,993 [main:117] - GENERATED CALL = (charProgression step 2).step.toString(-156464503)
2021-03-11 22:38:37,993 [main:114] - replacement of "start" of type String is (charProgression step 2).first.titlecase()
2021-03-11 22:38:38,143 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:38:38,143 [main:66] - Compilation checking started
2021-03-11 22:38:38,678 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    l(suffix)
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    f(arg)
}

inline fun fu2(a: String): String {
    return a.toString()
}

fun fu3(param: String): String {
    var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {
            prope0 = fu2(a).toString()
        }
    }

    return prope0
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    var prope0 = "fail1"
    fu1("stub") { a ->
        fu0(param()) {
            prope0 = fu2(param()).toString()
        }
    }

    return prope0
}

inline fun fu6(crossinline param: () -> String): String {
    var prope0 = "fail1"
    {{prope0 = param()}()}()

    return prope0
}

fun box512(): String {
    if (fu3("start") != "start") return "fail1: ${fu3("start")}"
    if (fu3("nostart") != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fail3: ${fu4("start")}"

    if (fu5({"start"}) != "start") return "fail4: ${fu5({"start"})}"
    if (fu6({"start"}) != "start") return "fail5: ${fu6({"start"})}"

    return "OK"
}


2021-03-11 22:38:38,679 [main:107] - replacing (fu2(param()).toString(), String)
2021-03-11 22:38:38,682 [main:50] - replacing fu2(param()).toString() String
2021-03-11 22:38:38,682 [main:54] - Getting value of type String
2021-03-11 22:38:38,798 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:38:38,799 [main:58] - GENERATED VALUE OF TYPE String = "fmpni"
2021-03-11 22:38:38,800 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:39,278 [main:67] - randomType = LinkedHashSet<Double?>?
2021-03-11 22:38:39,384 [main:302] - generating value of type = LinkedHashSet<Double?> false depth = 0
2021-03-11 22:38:39,513 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Double?): LkedHashSet<Double?> = TODO()
2021-03-11 22:38:39,515 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Double?): LkedHashSet<Double?> = TODO()
2021-03-11 22:38:39,631 [main:302] - generating value of type = Double true depth = 3
2021-03-11 22:38:39,632 [main:95] - GENERATED = linkedSetOf<Double?>(0.5616969832804242)
2021-03-11 22:38:39,779 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:38:39,884 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:39,995 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:40,104 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:40,210 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:40,319 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:40,438 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:38:40,439 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:38:40,543 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:38:40,545 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:38:40,783 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-11 22:38:40,787 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-11 22:38:40,788 [main:78] - Generated call from random type = (linkedSetOf<Double?>(0.5616969832804242))?.joinToString("tyyiq", StringBuilder(), StringBuilder(), -942678770, "jktqi", {a: T -> StringBuilder(StringBuilder())})
2021-03-11 22:38:40,789 [main:106] - GETTING String from LongProgression
2021-03-11 22:38:40,807 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:38:40,808 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:38:40,910 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:41,016 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:41,125 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:41,237 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:38:41,239 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:38:41,458 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:38:41,460 [main:95] - GENERATED = StringBuilder(1817782896)
2021-03-11 22:38:41,560 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:41,661 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:41,797 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:38:41,798 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:38:41,803 [main:117] - GENERATED CALL = ((longProgression step 2L)).joinToString("mkiey", "lfmuh", StringBuilder(1817782896), -1857790181, "impac", {a: T -> "wpieg"})
2021-03-11 22:38:41,803 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@5a35e2a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]]
2021-03-11 22:38:41,803 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:38:41,917 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:41,918 [main:117] - GENERATED CALL = ((longProgression step 2L)).first.toString(1575791685)
2021-03-11 22:38:41,918 [main:114] - replacement of fu2(param()).toString() of type String is "fmpni"
2021-03-11 22:38:42,017 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 22:38:42,017 [main:66] - Compilation checking started
2021-03-11 22:38:42,487 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    l(suffix)
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    f(arg)
}

inline fun fu2(a: String): String {
    return a.toString()
}

fun fu3(param: String): String {
    var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {
            prope0 = fu2(a).toString()
        }
    }

    return prope0
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") { a ->
        fu0(param()) {
            prope0 = "fmpni"
        }
    }

    return prope0
}

inline fun fu6(crossinline param: () -> String): String {
    var prope0 = "fail1"
    {{prope0 = param()}()}()

    return prope0
}

fun box512(): String {
    if (fu3("start") != "start") return "fail1: ${fu3("start")}"
    if (fu3("nostart") != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fail3: ${fu4("start")}"

    if (fu5({"start"}) != "start") return "fail4: ${fu5({"start"})}"
    if (fu6({"start"}) != "start") return "fail5: ${fu6({"start"})}"

    return "OK"
}


2021-03-11 22:38:42,489 [main:107] - replacing ({ a ->
        fu0(param()) {
            prope0 = "fmpni"
        }
    }, Function1<String, Unit>)
2021-03-11 22:38:42,490 [main:50] - replacing { a ->
        fu0(param()) {
            prope0 = "fmpni"
        }
    } Function1<String, Unit>
2021-03-11 22:38:42,490 [main:54] - Getting value of type Function1<String, Unit>
2021-03-11 22:38:42,627 [main:302] - generating value of type = Function1<String, Unit> false depth = 0
2021-03-11 22:38:42,629 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:38:42,735 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:38:42,737 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:38:43,056 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:38:43,057 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 22:38:43,058 [main:302] - generating value of type = Any false depth = 5
2021-03-11 22:38:43,058 [main:95] - GENERATED = check(true, { "jdopi"})
2021-03-11 22:38:43,059 [main:58] - GENERATED VALUE OF TYPE Function1<String, Unit> = {a: String -> check(true, { "jdopi"})}
2021-03-11 22:38:43,059 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:43,301 [main:67] - randomType = ULong?
2021-03-11 22:38:43,400 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 22:38:43,435 [main:106] - GETTING Function1<String, Unit> from IntProgression
2021-03-11 22:38:43,449 [main:106] - GETTING Function1<String, Unit> from CharProgression
2021-03-11 22:38:43,463 [main:106] - GETTING Function1<String, Unit> from CharRange
2021-03-11 22:38:43,488 [main:106] - GETTING Function1<String, Unit> from IntProgression
2021-03-11 22:38:43,489 [main:106] - GETTING Function1<String, Unit> from LongProgression
2021-03-11 22:38:43,505 [main:106] - GETTING Function1<String, Unit> from CharProgression
2021-03-11 22:38:43,506 [main:106] - GETTING Function1<String, Unit> from LongRange
2021-03-11 22:38:43,532 [main:106] - GETTING Function1<String, Unit> from LongProgression
2021-03-11 22:38:43,534 [main:106] - GETTING Function1<String, Unit> from IntRange
2021-03-11 22:38:43,565 [main:114] - replacement of { a ->
        fu0(param()) {
            prope0 = "fmpni"
        }
    } of type Function1<String, Unit> is {a: String -> check(true, { "jdopi"})}
2021-03-11 22:38:43,666 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:38:43,667 [main:66] - Compilation checking started
2021-03-11 22:38:44,152 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    l(suffix)
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    f(arg)
}

inline fun fu2(a: String): String {
    return a.toString()
}

fun fu3(param: String): String {
    var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {
            prope0 = fu2(a).toString()
        }
    }

    return prope0
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return prope0
}

inline fun fu6(crossinline param: () -> String): String {
    var prope0 = "fail1"
    {{prope0 = param()}()}()

    return prope0
}

fun box512(): String {
    if (fu3("start") != "start") return "fail1: ${fu3("start")}"
    if (fu3("nostart") != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fail3: ${fu4("start")}"

    if (fu5({"start"}) != "start") return "fail4: ${fu5({"start"})}"
    if (fu6({"start"}) != "start") return "fail5: ${fu6({"start"})}"

    return "OK"
}


2021-03-11 22:38:44,154 [main:107] - replacing (param(), String)
2021-03-11 22:38:44,156 [main:50] - replacing param() String
2021-03-11 22:38:44,156 [main:54] - Getting value of type String
2021-03-11 22:38:44,265 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:38:44,266 [main:58] - GENERATED VALUE OF TYPE String = "founn"
2021-03-11 22:38:44,266 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:44,268 [main:67] - randomType = Long
2021-03-11 22:38:44,376 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:38:44,433 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2809e8ea]
2021-03-11 22:38:44,434 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]
2021-03-11 22:38:44,434 [main:78] - Generated call from random type = (8901514150533248928).toChar().titlecase()
2021-03-11 22:38:44,435 [main:106] - GETTING String from IntRange
2021-03-11 22:38:44,471 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@b0eb175], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:38:44,471 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:38:44,579 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:44,580 [main:117] - GENERATED CALL = (intProgression).endInclusive.toString(994515634)
2021-03-11 22:38:44,580 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@170fdf91], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:38:44,580 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:38:44,680 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:44,681 [main:117] - GENERATED CALL = (intProgression).first.toString(-367712796)
2021-03-11 22:38:44,681 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:38:44,681 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:38:44,797 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:44,900 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:45,003 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:38:45,005 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:38:45,223 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:38:45,327 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:38:45,329 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:38:45,551 [main:302] - generating value of type = String true depth = 6
2021-03-11 22:38:45,552 [main:95] - GENERATED = StringBuilder("eimyx")
2021-03-11 22:38:45,553 [main:95] - GENERATED = StringBuilder(StringBuilder("eimyx"))
2021-03-11 22:38:45,656 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:45,760 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:38:45,761 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:38:46,007 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:38:46,009 [main:95] - GENERATED = StringBuilder(-1963342350)
2021-03-11 22:38:46,113 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:46,213 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:46,316 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:38:46,317 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:38:46,321 [main:117] - GENERATED CALL = (intProgression).joinToString("kawsv", StringBuilder(StringBuilder("eimyx")), StringBuilder(-1963342350), 1556380314, "fjswn", {a: T -> "yxdgm"})
2021-03-11 22:38:46,321 [main:114] - replacement of param() of type String is (8901514150533248928).toChar().titlecase()
2021-03-11 22:38:46,423 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:38:46,423 [main:66] - Compilation checking started
2021-03-11 22:38:46,863 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    l(suffix)
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    f(arg)
}

inline fun fu2(a: String): String {
    return a.toString()
}

fun fu3(param: String): String {
    var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {
            prope0 = fu2(a).toString()
        }
    }

    return prope0
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return prope0
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    if (fu3("start") != "start") return "fail1: ${fu3("start")}"
    if (fu3("nostart") != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fail3: ${fu4("start")}"

    if (fu5({"start"}) != "start") return "fail4: ${fu5({"start"})}"
    if (fu6({"start"}) != "start") return "fail5: ${fu6({"start"})}"

    return "OK"
}


2021-03-11 22:38:46,864 [main:107] - replacing ("start", String)
2021-03-11 22:38:46,866 [main:50] - replacing "start" String
2021-03-11 22:38:46,867 [main:54] - Getting value of type String
2021-03-11 22:38:46,974 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:38:46,975 [main:58] - GENERATED VALUE OF TYPE String = "bixst"
2021-03-11 22:38:46,975 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:47,090 [main:67] - randomType = Short
2021-03-11 22:38:47,192 [main:302] - generating value of type = Short true depth = 0
2021-03-11 22:38:47,241 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1b46bba1]
2021-03-11 22:38:47,241 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:38:47,351 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:38:47,353 [main:78] - Generated call from random type = (-24462).toChar().plus("itwwa")
2021-03-11 22:38:47,354 [main:106] - GETTING String from IntProgression
2021-03-11 22:38:47,371 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@170fdf91], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:38:47,371 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:38:47,474 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:47,475 [main:117] - GENERATED CALL = (intProgression step 2).first.toString(1649883832)
2021-03-11 22:38:47,475 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:38:47,476 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:38:47,579 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:47,685 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:38:47,687 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:38:47,904 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:38:47,906 [main:95] - GENERATED = StringBuilder("dmzps")
2021-03-11 22:38:48,007 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:48,112 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:48,217 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:48,328 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:48,472 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:38:48,473 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:38:48,480 [main:117] - GENERATED CALL = (intProgression step 2).joinToString(StringBuilder("dmzps"), "gucsz", "cxsat", -230206654, StringBuilder(), {a: T -> "ssqfm"})
2021-03-11 22:38:48,480 [main:114] - replacement of "start" of type String is "bixst"
2021-03-11 22:38:48,598 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 22:38:48,598 [main:66] - Compilation checking started
2021-03-11 22:38:49,062 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    l(suffix)
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    f(arg)
}

inline fun fu2(a: String): String {
    return a.toString()
}

fun fu3(param: String): String {
    var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {
            prope0 = fu2(a).toString()
        }
    }

    return prope0
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return prope0
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${fu3("start")}"
    if (fu3("nostart") != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fail3: ${fu4("start")}"

    if (fu5({"start"}) != "start") return "fail4: ${fu5({"start"})}"
    if (fu6({"start"}) != "start") return "fail5: ${fu6({"start"})}"

    return "OK"
}


2021-03-11 22:38:49,064 [main:107] - replacing ("fail5: ${fu6({"start"})}", String)
2021-03-11 22:38:49,065 [main:50] - replacing "fail5: ${fu6({"start"})}" String
2021-03-11 22:38:49,065 [main:54] - Getting value of type String
2021-03-11 22:38:49,185 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:38:49,186 [main:58] - GENERATED VALUE OF TYPE String = "lezob"
2021-03-11 22:38:49,187 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:49,298 [main:67] - randomType = UByte
2021-03-11 22:38:49,398 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:38:49,426 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@638d6c67]
2021-03-11 22:38:49,426 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:38:49,526 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:49,527 [main:78] - Generated call from random type = (13.toUByte()).toLong().toString(-44179653)
2021-03-11 22:38:49,527 [main:114] - replacement of "fail5: ${fu6({"start"})}" of type String is (13.toUByte()).toLong().toString(-44179653)
2021-03-11 22:38:49,631 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:38:49,631 [main:66] - Compilation checking started
2021-03-11 22:38:50,140 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    l(suffix)
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    f(arg)
}

inline fun fu2(a: String): String {
    return a.toString()
}

fun fu3(param: String): String {
    var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {
            prope0 = fu2(a).toString()
        }
    }

    return prope0
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return prope0
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${fu3("start")}"
    if (fu3("nostart") != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fail3: ${fu4("start")}"

    if (fu5({"start"}) != "start") return "fail4: ${fu5({"start"})}"
    if (fu6({"start"}) != "start") return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:38:50,141 [main:107] - replacing (fu3("nostart"), String)
2021-03-11 22:38:50,141 [main:50] - replacing fu3("nostart") String
2021-03-11 22:38:50,141 [main:54] - Getting value of type String
2021-03-11 22:38:50,256 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:38:50,257 [main:58] - GENERATED VALUE OF TYPE String = "otmna"
2021-03-11 22:38:50,257 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:50,379 [main:67] - randomType = Short
2021-03-11 22:38:50,489 [main:302] - generating value of type = Short true depth = 0
2021-03-11 22:38:50,544 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7404d32b]
2021-03-11 22:38:50,645 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:38:50,646 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:38:50,748 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:50,749 [main:78] - Generated call from random type = (12345).compareTo(3).toString(-1436156818)
2021-03-11 22:38:50,750 [main:106] - GETTING String from IntRange
2021-03-11 22:38:50,772 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@170fdf91], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:38:50,772 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:38:50,874 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:50,875 [main:117] - GENERATED CALL = (intProgression).first.toString(1661919992)
2021-03-11 22:38:50,875 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@b0eb175], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:38:50,875 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:38:50,977 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:50,978 [main:117] - GENERATED CALL = (intProgression).endInclusive.toString(1451693971)
2021-03-11 22:38:50,978 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:38:50,978 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:38:51,079 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:51,183 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:51,288 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:51,424 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:51,554 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:51,660 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:38:51,661 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:38:51,665 [main:117] - GENERATED CALL = (intProgression).joinToString("zoypk", "nrlox", "orias", -1981664522, "behca", {a: T -> "fgehe"})
2021-03-11 22:38:51,665 [main:114] - replacement of fu3("nostart") of type String is (12345).compareTo(3).toString(-1436156818)
2021-03-11 22:38:51,765 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:38:51,766 [main:66] - Compilation checking started
2021-03-11 22:38:52,197 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    l(suffix)
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    f(arg)
}

inline fun fu2(a: String): String {
    return a.toString()
}

fun fu3(param: String): String {
    var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {
            prope0 = fu2(a).toString()
        }
    }

    return prope0
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return prope0
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${fu3("start")}"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fail3: ${fu4("start")}"

    if (fu5({"start"}) != "start") return "fail4: ${fu5({"start"})}"
    if (fu6({"start"}) != "start") return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:38:52,198 [main:107] - replacing (prope0, String)
2021-03-11 22:38:52,200 [main:50] - replacing prope0 String
2021-03-11 22:38:52,200 [main:54] - Getting value of type String
2021-03-11 22:38:52,306 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:38:52,308 [main:58] - GENERATED VALUE OF TYPE String = "olqgb"
2021-03-11 22:38:52,308 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:52,534 [main:67] - randomType = Double?
2021-03-11 22:38:52,637 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:38:52,687 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@7631518]
2021-03-11 22:38:52,687 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:38:52,796 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:52,798 [main:78] - Generated call from random type = (0.5962407798093791)?.toLong().toString(465676252)
2021-03-11 22:38:52,798 [main:106] - GETTING String from IntProgression
2021-03-11 22:38:52,814 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:38:52,814 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:38:52,940 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:53,052 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:38:53,054 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:38:53,284 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:38:53,285 [main:95] - GENERATED = StringBuilder("ejhmg")
2021-03-11 22:38:53,391 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:53,500 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:53,607 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:53,711 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:53,817 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:38:53,819 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:38:54,048 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:38:54,053 [main:95] - GENERATED = StringBuilder("vgxvu")
2021-03-11 22:38:54,156 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:38:54,158 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:38:54,162 [main:117] - GENERATED CALL = (intProgression step 2).joinToString(StringBuilder("ejhmg"), StringBuilder(), "xwixn", -1648967139, StringBuilder("vgxvu"), {a: T -> "kgacz"})
2021-03-11 22:38:54,162 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@170fdf91], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:38:54,162 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:38:54,309 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:54,311 [main:117] - GENERATED CALL = (intProgression step 2).first.toString(1072554407)
2021-03-11 22:38:54,311 [main:114] - replacement of prope0 of type String is "olqgb"
2021-03-11 22:38:54,432 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 22:38:54,433 [main:66] - Compilation checking started
2021-03-11 22:38:54,855 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    l(suffix)
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    f(arg)
}

inline fun fu2(a: String): String {
    return a.toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {
            prope0 = fu2(a).toString()
        }
    }

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return prope0
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${fu3("start")}"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fail3: ${fu4("start")}"

    if (fu5({"start"}) != "start") return "fail4: ${fu5({"start"})}"
    if (fu6({"start"}) != "start") return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:38:54,857 [main:107] - replacing ("start", String)
2021-03-11 22:38:54,858 [main:50] - replacing "start" String
2021-03-11 22:38:54,858 [main:54] - Getting value of type String
2021-03-11 22:38:54,978 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:38:54,979 [main:58] - GENERATED VALUE OF TYPE String = "bldon"
2021-03-11 22:38:54,979 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:54,982 [main:67] - randomType = UByte
2021-03-11 22:38:55,087 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:38:55,114 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7c6a6f34]
2021-03-11 22:38:55,114 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@704513f3]
2021-03-11 22:38:55,217 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:55,218 [main:78] - Generated call from random type = (45.toUByte()).toByte().toString(-1783786503)
2021-03-11 22:38:55,219 [main:106] - GETTING String from LongProgression
2021-03-11 22:38:55,233 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@5a35e2a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]]
2021-03-11 22:38:55,234 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:38:55,334 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:55,336 [main:117] - GENERATED CALL = ((longProgression step 2L)).first.toString(863265834)
2021-03-11 22:38:55,336 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:38:55,336 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:38:55,437 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:55,544 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:38:55,546 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:38:55,806 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:38:55,811 [main:95] - GENERATED = StringBuilder("zsfft")
2021-03-11 22:38:55,914 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:56,021 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:56,128 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:56,235 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:56,342 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:38:56,343 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:38:56,347 [main:117] - GENERATED CALL = ((longProgression step 2L)).joinToString(StringBuilder("zsfft"), StringBuilder(), "xyumw", 972126935, "hfwtd", {a: T -> "qizsi"})
2021-03-11 22:38:56,347 [main:114] - replacement of "start" of type String is "bldon"
2021-03-11 22:38:56,449 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 22:38:56,450 [main:66] - Compilation checking started
2021-03-11 22:38:56,900 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    l(suffix)
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    f(arg)
}

inline fun fu2(a: String): String {
    return a.toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {
            prope0 = fu2(a).toString()
        }
    }

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return prope0
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${fu3("start")}"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fail3: ${fu4("start")}"

    if (fu5({"bldon"}) != "start") return "fail4: ${fu5({"start"})}"
    if (fu6({"start"}) != "start") return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:38:56,902 [main:107] - replacing (prope0, String)
2021-03-11 22:38:56,903 [main:50] - replacing prope0 String
2021-03-11 22:38:56,903 [main:54] - Getting value of type String
2021-03-11 22:38:57,014 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:38:57,016 [main:58] - GENERATED VALUE OF TYPE String = "ytgiw"
2021-03-11 22:38:57,016 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:57,137 [main:67] - randomType = ULong
2021-03-11 22:38:57,238 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 22:38:57,265 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@8a8993b]
2021-03-11 22:38:57,265 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bb0fa2e]
2021-03-11 22:38:57,387 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:57,388 [main:78] - Generated call from random type = (132990469417934385.toULong()).toUByte().toString(-414663863)
2021-03-11 22:38:57,388 [main:114] - replacement of prope0 of type String is (132990469417934385.toULong()).toUByte().toString(-414663863)
2021-03-11 22:38:57,491 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:38:57,491 [main:66] - Compilation checking started
2021-03-11 22:38:57,768 [main:49] - Result = false
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    l(suffix)
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    f(arg)
}

inline fun fu2(a: String): String {
    return a.toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {
            prope0 = fu2(a).toString()
        }
    }

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            (132990469417934385.toULong()).toUByte().toString(-414663863) = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return prope0
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${fu3("start")}"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fail3: ${fu4("start")}"

    if (fu5({"bldon"}) != "start") return "fail4: ${fu5({"start"})}"
    if (fu6({"start"}) != "start") return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:38:57,769 [main:107] - replacing ("fail4: ${fu5({"start"})}", String)
2021-03-11 22:38:57,770 [main:50] - replacing "fail4: ${fu5({"start"})}" String
2021-03-11 22:38:57,770 [main:54] - Getting value of type String
2021-03-11 22:38:57,871 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:38:57,872 [main:58] - GENERATED VALUE OF TYPE String = "rpkuj"
2021-03-11 22:38:57,872 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:57,876 [main:67] - randomType = Long
2021-03-11 22:38:57,976 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:38:58,007 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2809e8ea]
2021-03-11 22:38:58,007 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:38:58,007 [main:78] - Generated call from random type = (-8614805346663890867).toChar().uppercase()
2021-03-11 22:38:58,008 [main:106] - GETTING String from CharProgression
2021-03-11 22:38:58,020 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]]
2021-03-11 22:38:58,020 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]
2021-03-11 22:38:58,020 [main:117] - GENERATED CALL = (charProgression step 2).first.titlecase()
2021-03-11 22:38:58,020 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:38:58,020 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:38:58,123 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:38:58,124 [main:117] - GENERATED CALL = (charProgression step 2).first.plus("dacgi")
2021-03-11 22:38:58,125 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]]
2021-03-11 22:38:58,125 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]
2021-03-11 22:38:58,125 [main:117] - GENERATED CALL = (charProgression step 2).first.lowercase()
2021-03-11 22:38:58,125 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@32228595], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:38:58,125 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:38:58,228 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:58,229 [main:117] - GENERATED CALL = (charProgression step 2).step.toString(1468597337)
2021-03-11 22:38:58,229 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]]
2021-03-11 22:38:58,229 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:38:58,229 [main:117] - GENERATED CALL = (charProgression step 2).first.uppercase()
2021-03-11 22:38:58,230 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:38:58,230 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:38:58,335 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:58,441 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:58,548 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:38:58,550 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:38:58,791 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:38:58,793 [main:95] - GENERATED = StringBuilder("vlqmu")
2021-03-11 22:38:58,895 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:59,002 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:38:59,110 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:38:59,217 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:38:59,218 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:38:59,222 [main:117] - GENERATED CALL = (charProgression step 2).joinToString("yynit", StringBuilder("vlqmu"), "fshux", -1508734587, StringBuilder(), {a: T -> "fcjjs"})
2021-03-11 22:38:59,222 [main:114] - replacement of "fail4: ${fu5({"start"})}" of type String is (charProgression step 2).first.uppercase()
2021-03-11 22:38:59,323 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:38:59,323 [main:66] - Compilation checking started
2021-03-11 22:38:59,744 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    l(suffix)
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    f(arg)
}

inline fun fu2(a: String): String {
    return a.toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {
            prope0 = fu2(a).toString()
        }
    }

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return prope0
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${fu3("start")}"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fail3: ${fu4("start")}"

    if (fu5({"bldon"}) != "start") return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != "start") return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:38:59,746 [main:107] - replacing ("fail1", String)
2021-03-11 22:38:59,746 [main:50] - replacing "fail1" String
2021-03-11 22:38:59,746 [main:54] - Getting value of type String
2021-03-11 22:38:59,856 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:38:59,858 [main:58] - GENERATED VALUE OF TYPE String = "lvypc"
2021-03-11 22:38:59,858 [main:61] - GENERATED IS CALL =false
2021-03-11 22:38:59,861 [main:67] - randomType = UByte
2021-03-11 22:38:59,966 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:38:59,998 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@180f041]
2021-03-11 22:38:59,999 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76345526]
2021-03-11 22:39:00,102 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:00,104 [main:78] - Generated call from random type = (61.toUByte()).toShort().toString(-1096385248)
2021-03-11 22:39:00,104 [main:106] - GETTING String from LongProgression
2021-03-11 22:39:00,117 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:39:00,117 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:39:00,222 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:00,353 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:00,355 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:00,573 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:39:00,575 [main:95] - GENERATED = StringBuilder("lzmel")
2021-03-11 22:39:00,688 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:00,793 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:00,899 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:01,002 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:01,108 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:39:01,109 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:39:01,113 [main:117] - GENERATED CALL = (longProgression step 2L).joinToString(StringBuilder("lzmel"), "wfjos", "xzmvg", 1073619725, "ruuza", {a: T -> "hxicf"})
2021-03-11 22:39:01,113 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@5a35e2a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]]
2021-03-11 22:39:01,113 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:39:01,215 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:01,216 [main:117] - GENERATED CALL = (longProgression step 2L).first.toString(-564158226)
2021-03-11 22:39:01,216 [main:114] - replacement of "fail1" of type String is "lvypc"
2021-03-11 22:39:01,317 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 22:39:01,318 [main:66] - Compilation checking started
2021-03-11 22:39:01,740 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    l(suffix)
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    f(arg)
}

inline fun fu2(a: String): String {
    return a.toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {
            prope0 = fu2(a).toString()
        }
    }

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return prope0
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${fu3("start")}"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fail3: ${fu4("start")}"

    if (fu5({"bldon"}) != "start") return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != "start") return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:39:01,743 [main:107] - replacing ("start", String)
2021-03-11 22:39:01,743 [main:50] - replacing "start" String
2021-03-11 22:39:01,743 [main:54] - Getting value of type String
2021-03-11 22:39:01,845 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:01,846 [main:58] - GENERATED VALUE OF TYPE String = "qsksg"
2021-03-11 22:39:01,847 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:01,960 [main:67] - randomType = Short
2021-03-11 22:39:02,084 [main:302] - generating value of type = Short true depth = 0
2021-03-11 22:39:02,119 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1b46bba1]
2021-03-11 22:39:02,119 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:39:02,221 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:02,222 [main:78] - Generated call from random type = (23250).toChar().plus("prqrm")
2021-03-11 22:39:02,223 [main:114] - replacement of "start" of type String is (23250).toChar().plus("prqrm")
2021-03-11 22:39:02,324 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:39:02,325 [main:66] - Compilation checking started
2021-03-11 22:39:02,766 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    l(suffix)
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    f(arg)
}

inline fun fu2(a: String): String {
    return a.toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {
            prope0 = fu2(a).toString()
        }
    }

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return prope0
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${fu3("start")}"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fail3: ${fu4("start")}"

    if (fu5({"bldon"}) != "start") return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:39:02,768 [main:107] - replacing (toString(), String)
2021-03-11 22:39:02,768 [main:50] - replacing toString() String
2021-03-11 22:39:02,768 [main:54] - Getting value of type String
2021-03-11 22:39:02,888 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:02,890 [main:58] - GENERATED VALUE OF TYPE String = "ntqes"
2021-03-11 22:39:02,890 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:03,023 [main:67] - randomType = Int?
2021-03-11 22:39:03,131 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:03,164 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@102310f6]
2021-03-11 22:39:03,164 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:39:03,270 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:03,272 [main:78] - Generated call from random type = (1413064501)?.toLong().toString(-2054311007)
2021-03-11 22:39:03,273 [main:106] - GETTING String from CharProgression
2021-03-11 22:39:03,287 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:39:03,287 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:39:03,391 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:03,501 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:03,614 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:03,616 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:03,876 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:39:03,877 [main:95] - GENERATED = StringBuilder(128787370)
2021-03-11 22:39:03,981 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:04,089 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:04,195 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:04,305 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:39:04,307 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:39:04,416 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:04,417 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:04,638 [main:302] - generating value of type = String true depth = 4
2021-03-11 22:39:04,639 [main:95] - GENERATED = StringBuilder("fotnx")
2021-03-11 22:39:04,640 [main:117] - GENERATED CALL = (charProgression step 2).joinToString("uztil", StringBuilder(128787370), "ahpkr", -865872534, "ntpib", {a: T -> StringBuilder("fotnx")})
2021-03-11 22:39:04,640 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:39:04,640 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:39:04,743 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:04,745 [main:117] - GENERATED CALL = (charProgression step 2).first.plus("wpdku")
2021-03-11 22:39:04,745 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]]
2021-03-11 22:39:04,745 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]
2021-03-11 22:39:04,745 [main:117] - GENERATED CALL = (charProgression step 2).first.titlecase()
2021-03-11 22:39:04,745 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@32228595], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:39:04,745 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:39:04,852 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:04,853 [main:117] - GENERATED CALL = (charProgression step 2).step.toString(1466052081)
2021-03-11 22:39:04,853 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]]
2021-03-11 22:39:04,853 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]
2021-03-11 22:39:04,853 [main:117] - GENERATED CALL = (charProgression step 2).first.lowercase()
2021-03-11 22:39:04,854 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]]
2021-03-11 22:39:04,854 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:39:04,854 [main:117] - GENERATED CALL = (charProgression step 2).first.uppercase()
2021-03-11 22:39:04,854 [main:114] - replacement of toString() of type String is (charProgression step 2).first.uppercase()
2021-03-11 22:39:04,960 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:39:04,960 [main:66] - Compilation checking started
2021-03-11 22:39:05,247 [main:49] - Result = false
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    l(suffix)
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    f(arg)
}

inline fun fu2(a: String): String {
    return a.toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {
            prope0 = fu2(a).toString()
        }
    }

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).(charProgression step 2).first.uppercase()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return prope0
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${fu3("start")}"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fail3: ${fu4("start")}"

    if (fu5({"bldon"}) != "start") return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:39:05,248 [main:107] - replacing ({
            prope0 = fu2(a).toString()
        }, Function1<[@kotlin.ParameterName] String, Unit>)
2021-03-11 22:39:05,249 [main:50] - replacing {
            prope0 = fu2(a).toString()
        } Function1<[@kotlin.ParameterName] String, Unit>
2021-03-11 22:39:05,249 [main:54] - Getting value of type Function1<[@kotlin.ParameterName] String, Unit>
2021-03-11 22:39:05,353 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] String, Unit> false depth = 0
2021-03-11 22:39:05,355 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:39:05,484 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:39:05,486 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:39:05,825 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:39:05,826 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 22:39:05,827 [main:302] - generating value of type = Any false depth = 5
2021-03-11 22:39:05,828 [main:95] - GENERATED = check(false, { "uktex"})
2021-03-11 22:39:05,828 [main:58] - GENERATED VALUE OF TYPE Function1<[@kotlin.ParameterName] String, Unit> = {a: String -> check(false, { "uktex"})}
2021-03-11 22:39:05,828 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:06,539 [main:67] - randomType = MutableMap<String, Function2<UShort?, HashSet<UByte>, Long>>?
2021-03-11 22:39:06,543 [main:106] - GETTING Function1<[@kotlin.ParameterName] String, Unit> from IntProgression
2021-03-11 22:39:06,559 [main:106] - GETTING Function1<[@kotlin.ParameterName] String, Unit> from CharRange
2021-03-11 22:39:06,585 [main:106] - GETTING Function1<[@kotlin.ParameterName] String, Unit> from CharProgression
2021-03-11 22:39:06,602 [main:106] - GETTING Function1<[@kotlin.ParameterName] String, Unit> from LongRange
2021-03-11 22:39:06,627 [main:106] - GETTING Function1<[@kotlin.ParameterName] String, Unit> from IntRange
2021-03-11 22:39:06,651 [main:106] - GETTING Function1<[@kotlin.ParameterName] String, Unit> from LongProgression
2021-03-11 22:39:06,666 [main:106] - GETTING Function1<[@kotlin.ParameterName] String, Unit> from CharProgression
2021-03-11 22:39:06,670 [main:106] - GETTING Function1<[@kotlin.ParameterName] String, Unit> from LongProgression
2021-03-11 22:39:06,674 [main:106] - GETTING Function1<[@kotlin.ParameterName] String, Unit> from IntProgression
2021-03-11 22:39:06,674 [main:114] - replacement of {
            prope0 = fu2(a).toString()
        } of type Function1<[@kotlin.ParameterName] String, Unit> is {a: String -> check(false, { "uktex"})}
2021-03-11 22:39:06,778 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:39:06,778 [main:66] - Compilation checking started
2021-03-11 22:39:07,272 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    l(suffix)
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    f(arg)
}

inline fun fu2(a: String): String {
    return a.toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {a: String -> check(false, { "uktex"})}
    }

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return prope0
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${fu3("start")}"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fail3: ${fu4("start")}"

    if (fu5({"bldon"}) != "start") return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:39:07,273 [main:107] - replacing ("fail3: ${fu4("start")}", String)
2021-03-11 22:39:07,274 [main:50] - replacing "fail3: ${fu4("start")}" String
2021-03-11 22:39:07,274 [main:54] - Getting value of type String
2021-03-11 22:39:07,397 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:07,398 [main:58] - GENERATED VALUE OF TYPE String = "fpbxs"
2021-03-11 22:39:07,398 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:07,522 [main:67] - randomType = UInt
2021-03-11 22:39:07,627 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 22:39:07,654 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@25bdf976]
2021-03-11 22:39:07,758 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:39:07,759 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:39:07,863 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:07,865 [main:78] - Generated call from random type = (2135444865.toUInt()).compareTo(91.toUByte()).toString(1639788835)
2021-03-11 22:39:07,866 [main:106] - GETTING String from IntProgression
2021-03-11 22:39:07,878 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@170fdf91], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:39:07,878 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:39:07,981 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:07,983 [main:117] - GENERATED CALL = (intProgression step 2).first.toString(-451907150)
2021-03-11 22:39:07,983 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:39:07,983 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:39:08,087 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:08,202 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:08,311 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:08,418 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:08,523 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:08,631 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:39:08,632 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:39:08,637 [main:117] - GENERATED CALL = (intProgression step 2).joinToString("becxk", "yhsqw", StringBuilder(), -1335257380, "fyivu", {a: T -> "zluux"})
2021-03-11 22:39:08,637 [main:114] - replacement of "fail3: ${fu4("start")}" of type String is "fpbxs"
2021-03-11 22:39:08,740 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 22:39:08,740 [main:66] - Compilation checking started
2021-03-11 22:39:09,169 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    l(suffix)
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    f(arg)
}

inline fun fu2(a: String): String {
    return a.toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {a: String -> check(false, { "uktex"})}
    }

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return prope0
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${fu3("start")}"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if (fu5({"bldon"}) != "start") return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:39:09,170 [main:107] - replacing (toString(), String)
2021-03-11 22:39:09,172 [main:50] - replacing toString() String
2021-03-11 22:39:09,172 [main:54] - Getting value of type String
2021-03-11 22:39:09,287 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:09,289 [main:58] - GENERATED VALUE OF TYPE String = "ukygu"
2021-03-11 22:39:09,289 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:09,911 [main:67] - randomType = Function2<Long, HashSet<Char>, Sequence<ULong>>
2021-03-11 22:39:09,912 [main:106] - GETTING String from LongRange
2021-03-11 22:39:09,933 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@6b9d59bc], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]]
2021-03-11 22:39:09,933 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:39:10,039 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:10,041 [main:117] - GENERATED CALL = (longProgression).endInclusive.toString(-787770410)
2021-03-11 22:39:10,041 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@5a35e2a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]]
2021-03-11 22:39:10,041 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:39:10,156 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:10,158 [main:117] - GENERATED CALL = (longProgression).first.toString(162083633)
2021-03-11 22:39:10,158 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:39:10,158 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:39:10,277 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:10,397 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:10,507 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:10,618 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:10,727 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:10,861 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:39:10,863 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:39:10,972 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:10,974 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:11,201 [main:302] - generating value of type = Int true depth = 4
2021-03-11 22:39:11,202 [main:95] - GENERATED = StringBuilder(926034776)
2021-03-11 22:39:11,203 [main:117] - GENERATED CALL = (longProgression).joinToString("zlfrh", "orzoj", "rkiph", -399634722, "epvvh", {a: T -> StringBuilder(926034776)})
2021-03-11 22:39:11,203 [main:114] - replacement of toString() of type String is (longProgression).first.toString(162083633)
2021-03-11 22:39:11,311 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:39:11,312 [main:66] - Compilation checking started
2021-03-11 22:39:11,613 [main:49] - Result = false
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    l(suffix)
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    f(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return a.(longProgression).first.toString(162083633)
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {a: String -> check(false, { "uktex"})}
    }

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return prope0
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${fu3("start")}"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if (fu5({"bldon"}) != "start") return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:39:11,614 [main:107] - replacing (fu6({"start"}), String)
2021-03-11 22:39:11,614 [main:50] - replacing fu6({"start"}) String
2021-03-11 22:39:11,614 [main:54] - Getting value of type String
2021-03-11 22:39:11,723 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:11,725 [main:58] - GENERATED VALUE OF TYPE String = "dsaxh"
2021-03-11 22:39:11,725 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:11,960 [main:67] - randomType = List<Byte>
2021-03-11 22:39:11,961 [main:106] - GETTING String from LongProgression
2021-03-11 22:39:11,973 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:39:11,973 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:39:12,079 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:12,189 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:12,301 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:39:12,303 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:39:12,534 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:39:12,674 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:12,677 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:12,902 [main:302] - generating value of type = String true depth = 6
2021-03-11 22:39:12,903 [main:95] - GENERATED = StringBuilder("amxmk")
2021-03-11 22:39:12,903 [main:95] - GENERATED = StringBuilder(StringBuilder("amxmk"))
2021-03-11 22:39:13,008 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:13,119 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:13,226 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:13,338 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:13,340 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:13,565 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:39:13,567 [main:95] - GENERATED = StringBuilder("hnegj")
2021-03-11 22:39:13,672 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:39:13,674 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:39:13,784 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:39:13,786 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:39:14,010 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-11 22:39:14,015 [main:95] - GENERATED = StringBuilder("iflbk")
2021-03-11 22:39:14,015 [main:117] - GENERATED CALL = (longProgression step 2L).joinToString(StringBuilder(), StringBuilder(StringBuilder("amxmk")), "xzpxd", 1703613207, StringBuilder("hnegj"), {a: T -> StringBuilder("iflbk")})
2021-03-11 22:39:14,015 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@5a35e2a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]]
2021-03-11 22:39:14,015 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:39:14,122 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:14,123 [main:117] - GENERATED CALL = (longProgression step 2L).first.toString(480337969)
2021-03-11 22:39:14,123 [main:114] - replacement of fu6({"start"}) of type String is (longProgression step 2L).joinToString(StringBuilder(), StringBuilder(StringBuilder("amxmk")), "xzpxd", 1703613207, StringBuilder("hnegj"), {a: T -> StringBuilder("iflbk")})
2021-03-11 22:39:14,229 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:39:14,229 [main:66] - Compilation checking started
2021-03-11 22:39:14,565 [main:49] - Result = false
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    l(suffix)
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    f(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return a.toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {a: String -> check(false, { "uktex"})}
    }

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return prope0
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${fu3("start")}"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if (fu5({"bldon"}) != "start") return (charProgression step 2).first.uppercase()
    if ((longProgression step 2L).joinToString(StringBuilder(), StringBuilder(StringBuilder("amxmk")), "xzpxd", 1703613207, StringBuilder("hnegj"), {a: T -> StringBuilder("iflbk")}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:39:14,566 [main:107] - replacing (f, Function1<Ty0, Unit>)
2021-03-11 22:39:14,568 [main:50] - replacing f Function1<Ty0, Unit>
2021-03-11 22:39:14,568 [main:54] - Getting value of type Function1<Ty0, Unit>
2021-03-11 22:39:14,685 [main:302] - generating value of type = Function1<Ty0, Unit> false depth = 0
2021-03-11 22:39:14,686 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:39:14,692 [main:58] - GENERATED VALUE OF TYPE Function1<Ty0, Unit> = {a: Ty0 -> println()}
2021-03-11 22:39:14,692 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:14,813 [main:67] - randomType = UInt
2021-03-11 22:39:14,924 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 22:39:14,966 [main:106] - GETTING Function1<Ty0, Unit> from LongRange
2021-03-11 22:39:14,991 [main:106] - GETTING Function1<Ty0, Unit> from IntProgression
2021-03-11 22:39:15,003 [main:106] - GETTING Function1<Ty0, Unit> from CharRange
2021-03-11 22:39:15,026 [main:106] - GETTING Function1<Ty0, Unit> from CharProgression
2021-03-11 22:39:15,040 [main:106] - GETTING Function1<Ty0, Unit> from IntProgression
2021-03-11 22:39:15,041 [main:106] - GETTING Function1<Ty0, Unit> from IntRange
2021-03-11 22:39:15,062 [main:106] - GETTING Function1<Ty0, Unit> from LongProgression
2021-03-11 22:39:15,075 [main:106] - GETTING Function1<Ty0, Unit> from CharProgression
2021-03-11 22:39:15,076 [main:106] - GETTING Function1<Ty0, Unit> from LongProgression
2021-03-11 22:39:15,076 [main:114] - replacement of f of type Function1<Ty0, Unit> is {a: Ty0 -> println()}
2021-03-11 22:39:15,184 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 22:39:15,184 [main:66] - Compilation checking started
2021-03-11 22:39:15,600 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    l(suffix)
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return a.toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {a: String -> check(false, { "uktex"})}
    }

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return prope0
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${fu3("start")}"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if (fu5({"bldon"}) != "start") return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:39:15,602 [main:107] - replacing (suffix, String)
2021-03-11 22:39:15,603 [main:50] - replacing suffix String
2021-03-11 22:39:15,603 [main:54] - Getting value of type String
2021-03-11 22:39:15,721 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:15,723 [main:58] - GENERATED VALUE OF TYPE String = "szfzp"
2021-03-11 22:39:15,723 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:15,984 [main:67] - randomType = Sequence<UShort>
2021-03-11 22:39:15,985 [main:106] - GETTING String from CharRange
2021-03-11 22:39:16,014 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]]
2021-03-11 22:39:16,014 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]
2021-03-11 22:39:16,014 [main:117] - GENERATED CALL = (charProgression).first.titlecase()
2021-03-11 22:39:16,014 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:39:16,014 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:39:16,126 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:16,128 [main:117] - GENERATED CALL = (charProgression).first.plus("rwpkp")
2021-03-11 22:39:16,128 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@46f67aef], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]]
2021-03-11 22:39:16,128 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]
2021-03-11 22:39:16,128 [main:117] - GENERATED CALL = (charProgression).endInclusive.lowercase()
2021-03-11 22:39:16,129 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@46f67aef], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]]
2021-03-11 22:39:16,129 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:39:16,129 [main:117] - GENERATED CALL = (charProgression).endInclusive.uppercase()
2021-03-11 22:39:16,129 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:39:16,129 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:39:16,243 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:16,359 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:16,361 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:16,629 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:39:16,631 [main:95] - GENERATED = StringBuilder("kddxj")
2021-03-11 22:39:16,741 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:16,856 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:16,970 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:16,972 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:17,214 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:39:17,216 [main:95] - GENERATED = StringBuilder(163093164)
2021-03-11 22:39:17,328 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:17,440 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:17,556 [main:117] - GENERATED CALL = (charProgression).joinToString(StringBuilder("kddxj"), StringBuilder(), StringBuilder(163093164), 576693543, StringBuilder(), null)
2021-03-11 22:39:17,556 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@4e0adae1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:39:17,556 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:39:17,666 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:17,667 [main:117] - GENERATED CALL = (charProgression).step.toString(1230329291)
2021-03-11 22:39:17,667 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@46f67aef], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:39:17,667 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:39:17,778 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:17,780 [main:117] - GENERATED CALL = (charProgression).endInclusive.plus("fcncn")
2021-03-11 22:39:17,780 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]]
2021-03-11 22:39:17,780 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:39:17,780 [main:117] - GENERATED CALL = (charProgression).first.uppercase()
2021-03-11 22:39:17,780 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@46f67aef], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]]
2021-03-11 22:39:17,780 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]
2021-03-11 22:39:17,780 [main:117] - GENERATED CALL = (charProgression).endInclusive.titlecase()
2021-03-11 22:39:17,780 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]]
2021-03-11 22:39:17,780 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]
2021-03-11 22:39:17,780 [main:117] - GENERATED CALL = (charProgression).first.lowercase()
2021-03-11 22:39:17,780 [main:114] - replacement of suffix of type String is (charProgression).endInclusive.plus("fcncn")
2021-03-11 22:39:17,890 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:39:17,891 [main:66] - Compilation checking started
2021-03-11 22:39:18,349 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
l((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return a.toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {a: String -> check(false, { "uktex"})}
    }

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return prope0
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${fu3("start")}"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if (fu5({"bldon"}) != "start") return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:39:18,351 [main:107] - replacing (prope0, String)
2021-03-11 22:39:18,351 [main:50] - replacing prope0 String
2021-03-11 22:39:18,351 [main:54] - Getting value of type String
2021-03-11 22:39:18,470 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:18,472 [main:58] - GENERATED VALUE OF TYPE String = "fhlcr"
2021-03-11 22:39:18,472 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:18,598 [main:67] - randomType = Float
2021-03-11 22:39:18,729 [main:302] - generating value of type = Float true depth = 0
2021-03-11 22:39:18,759 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@78042608]
2021-03-11 22:39:18,759 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@704513f3]
2021-03-11 22:39:18,872 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:18,874 [main:78] - Generated call from random type = (0.30493194f).toByte().toString(-1721102872)
2021-03-11 22:39:18,875 [main:106] - GETTING String from IntRange
2021-03-11 22:39:18,898 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@b0eb175], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:39:18,898 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:39:19,011 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:19,013 [main:117] - GENERATED CALL = (intProgression).endInclusive.toString(282994912)
2021-03-11 22:39:19,013 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@170fdf91], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:39:19,013 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:39:19,127 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:19,129 [main:117] - GENERATED CALL = (intProgression).first.toString(1188326962)
2021-03-11 22:39:19,129 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:39:19,129 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:39:19,242 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:19,358 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:19,360 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:19,600 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:39:19,601 [main:95] - GENERATED = StringBuilder(-1517129672)
2021-03-11 22:39:19,714 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:19,831 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:19,948 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:20,062 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:20,178 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:20,181 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:20,421 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:39:20,423 [main:95] - GENERATED = StringBuilder("cddvq")
2021-03-11 22:39:20,536 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:39:20,537 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:39:20,542 [main:117] - GENERATED CALL = (intProgression).joinToString(StringBuilder(-1517129672), "ovejj", "mvyah", -43910824, StringBuilder("cddvq"), {a: T -> "ktyef"})
2021-03-11 22:39:20,542 [main:114] - replacement of prope0 of type String is (intProgression).endInclusive.toString(282994912)
2021-03-11 22:39:20,678 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:39:20,678 [main:66] - Compilation checking started
2021-03-11 22:39:21,120 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
l((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return a.toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {a: String -> check(false, { "uktex"})}
    }

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${fu3("start")}"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if (fu5({"bldon"}) != "start") return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:39:21,122 [main:107] - replacing (fu5({"bldon"}) != "start", Boolean)
2021-03-11 22:39:21,122 [main:50] - replacing fu5({"bldon"}) != "start" Boolean
2021-03-11 22:39:21,123 [main:54] - Getting value of type Boolean
2021-03-11 22:39:21,258 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:39:21,259 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 22:39:21,259 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:21,508 [main:67] - randomType = UShort?
2021-03-11 22:39:21,620 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 22:39:21,650 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@42d6ca15]
2021-03-11 22:39:21,651 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@49329ce9]
2021-03-11 22:39:21,651 [main:78] - Generated call from random type = (3497.toUShort())?.toFloat().isInfinite()
2021-03-11 22:39:21,651 [main:114] - replacement of fu5({"bldon"}) != "start" of type Boolean is (3497.toUShort())?.toFloat().isInfinite()
2021-03-11 22:39:21,763 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:39:21,764 [main:66] - Compilation checking started
2021-03-11 22:39:22,252 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
l((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return a.toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {a: String -> check(false, { "uktex"})}
    }

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${fu3("start")}"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:39:22,253 [main:107] - replacing ("fail1", String)
2021-03-11 22:39:22,253 [main:50] - replacing "fail1" String
2021-03-11 22:39:22,253 [main:54] - Getting value of type String
2021-03-11 22:39:22,378 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:22,380 [main:58] - GENERATED VALUE OF TYPE String = "cwnrr"
2021-03-11 22:39:22,380 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:22,771 [main:67] - randomType = List<Function1<Boolean, UShort>>
2021-03-11 22:39:22,772 [main:106] - GETTING String from LongProgression
2021-03-11 22:39:22,784 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:39:22,784 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:39:22,923 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:23,043 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:23,046 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:23,296 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:39:23,298 [main:95] - GENERATED = StringBuilder(482745580)
2021-03-11 22:39:23,421 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:23,540 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:23,543 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:23,784 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:39:23,786 [main:95] - GENERATED = StringBuilder(1272214178)
2021-03-11 22:39:23,899 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:24,018 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:24,135 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:24,259 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:39:24,261 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:39:24,266 [main:117] - GENERATED CALL = ((longProgression step 2L)).joinToString(StringBuilder(482745580), StringBuilder(1272214178), "dzopy", -1690919160, StringBuilder(), {a: T -> StringBuilder()})
2021-03-11 22:39:24,266 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@5a35e2a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]]
2021-03-11 22:39:24,266 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:39:24,386 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:24,388 [main:117] - GENERATED CALL = ((longProgression step 2L)).first.toString(1456403656)
2021-03-11 22:39:24,388 [main:114] - replacement of "fail1" of type String is ((longProgression step 2L)).first.toString(1456403656)
2021-03-11 22:39:24,500 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:39:24,500 [main:66] - Compilation checking started
2021-03-11 22:39:24,948 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
l((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return a.toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) { a ->
        fu0("start") {a: String -> check(false, { "uktex"})}
    }

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${fu3("start")}"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:39:24,949 [main:107] - replacing ({ a ->
        fu0("start") {a: String -> check(false, { "uktex"})}
    }, Function1<String, Unit>)
2021-03-11 22:39:24,950 [main:50] - replacing { a ->
        fu0("start") {a: String -> check(false, { "uktex"})}
    } Function1<String, Unit>
2021-03-11 22:39:24,950 [main:54] - Getting value of type Function1<String, Unit>
2021-03-11 22:39:25,068 [main:302] - generating value of type = Function1<String, Unit> false depth = 0
2021-03-11 22:39:25,069 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:39:25,208 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:39:25,211 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:39:25,586 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:39:25,588 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 22:39:25,589 [main:302] - generating value of type = Any false depth = 5
2021-03-11 22:39:25,590 [main:95] - GENERATED = check(true, { "sgtpt"})
2021-03-11 22:39:25,590 [main:58] - GENERATED VALUE OF TYPE Function1<String, Unit> = {a: String -> check(true, { "sgtpt"})}
2021-03-11 22:39:25,590 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:26,242 [main:67] - randomType = HashSet<LinkedHashSet<Function2<Long, ULong?, Char>>>
2021-03-11 22:39:26,355 [main:302] - generating value of type = HashSet<LinkedHashSet<Function2<Long, ULong?, Char>>> false depth = 0
2021-03-11 22:39:26,476 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<LkedHashSet<Function2<Long, ULong?, Char>>> = TODO()
2021-03-11 22:39:26,478 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<LkedHashSet<Function2<Long, ULong?, Char>>> = TODO()
2021-03-11 22:39:26,597 [main:95] - GENERATED = linkedSetOf<LinkedHashSet<Function2<Long, ULong?, Char>>>()
2021-03-11 22:39:26,773 [main:106] - GETTING Function1<String, Unit> from IntProgression
2021-03-11 22:39:26,785 [main:106] - GETTING Function1<String, Unit> from CharProgression
2021-03-11 22:39:26,799 [main:106] - GETTING Function1<String, Unit> from CharRange
2021-03-11 22:39:26,823 [main:106] - GETTING Function1<String, Unit> from LongRange
2021-03-11 22:39:26,844 [main:106] - GETTING Function1<String, Unit> from CharProgression
2021-03-11 22:39:26,846 [main:106] - GETTING Function1<String, Unit> from IntRange
2021-03-11 22:39:26,867 [main:106] - GETTING Function1<String, Unit> from LongProgression
2021-03-11 22:39:26,879 [main:106] - GETTING Function1<String, Unit> from LongProgression
2021-03-11 22:39:26,880 [main:106] - GETTING Function1<String, Unit> from IntProgression
2021-03-11 22:39:26,880 [main:114] - replacement of { a ->
        fu0("start") {a: String -> check(false, { "uktex"})}
    } of type Function1<String, Unit> is {a: String -> check(true, { "sgtpt"})}
2021-03-11 22:39:26,993 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:39:26,994 [main:66] - Compilation checking started
2021-03-11 22:39:27,472 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
l((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return a.toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${fu3("start")}"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:39:27,473 [main:107] - replacing (l, Function1<[@kotlin.ParameterName] String, Unit>)
2021-03-11 22:39:27,474 [main:50] - replacing l Function1<[@kotlin.ParameterName] String, Unit>
2021-03-11 22:39:27,474 [main:54] - Getting value of type Function1<[@kotlin.ParameterName] String, Unit>
2021-03-11 22:39:27,593 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] String, Unit> false depth = 0
2021-03-11 22:39:27,595 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:39:27,714 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 22:39:27,716 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 22:39:28,092 [main:302] - generating value of type = Int true depth = 4
2021-03-11 22:39:28,093 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 22:39:28,095 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 22:39:28,100 [main:95] - GENERATED = repeat(413185335, {a: Int -> println()})
2021-03-11 22:39:28,100 [main:58] - GENERATED VALUE OF TYPE Function1<[@kotlin.ParameterName] String, Unit> = {a: String -> repeat(413185335, {a: Int -> println()})}
2021-03-11 22:39:28,100 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:28,225 [main:67] - randomType = Byte
2021-03-11 22:39:28,338 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:39:28,375 [main:106] - GETTING Function1<[@kotlin.ParameterName] String, Unit> from CharProgression
2021-03-11 22:39:28,391 [main:106] - GETTING Function1<[@kotlin.ParameterName] String, Unit> from IntProgression
2021-03-11 22:39:28,406 [main:106] - GETTING Function1<[@kotlin.ParameterName] String, Unit> from LongProgression
2021-03-11 22:39:28,421 [main:106] - GETTING Function1<[@kotlin.ParameterName] String, Unit> from LongRange
2021-03-11 22:39:28,446 [main:106] - GETTING Function1<[@kotlin.ParameterName] String, Unit> from CharRange
2021-03-11 22:39:28,472 [main:106] - GETTING Function1<[@kotlin.ParameterName] String, Unit> from CharProgression
2021-03-11 22:39:28,476 [main:106] - GETTING Function1<[@kotlin.ParameterName] String, Unit> from IntRange
2021-03-11 22:39:28,501 [main:106] - GETTING Function1<[@kotlin.ParameterName] String, Unit> from IntProgression
2021-03-11 22:39:28,505 [main:106] - GETTING Function1<[@kotlin.ParameterName] String, Unit> from LongProgression
2021-03-11 22:39:28,505 [main:114] - replacement of l of type Function1<[@kotlin.ParameterName] String, Unit> is {a: String -> repeat(413185335, {a: Int -> println()})}
2021-03-11 22:39:28,617 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 22:39:28,617 [main:66] - Compilation checking started
2021-03-11 22:39:29,132 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return a.toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${fu3("start")}"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:39:29,134 [main:107] - replacing (fu3("start"), String)
2021-03-11 22:39:29,135 [main:50] - replacing fu3("start") String
2021-03-11 22:39:29,135 [main:54] - Getting value of type String
2021-03-11 22:39:29,259 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:29,262 [main:58] - GENERATED VALUE OF TYPE String = "ioaab"
2021-03-11 22:39:29,262 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:29,405 [main:67] - randomType = Byte
2021-03-11 22:39:29,548 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:39:29,596 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@27702b7a]
2021-03-11 22:39:29,597 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:39:29,711 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:29,713 [main:78] - Generated call from random type = (-109).toChar().plus("vnqkn")
2021-03-11 22:39:29,714 [main:106] - GETTING String from LongRange
2021-03-11 22:39:29,735 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@5a35e2a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]]
2021-03-11 22:39:29,735 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:39:29,849 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:29,851 [main:117] - GENERATED CALL = (longProgression).first.toString(1934955452)
2021-03-11 22:39:29,851 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@6b9d59bc], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]]
2021-03-11 22:39:29,851 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:39:29,966 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:29,968 [main:117] - GENERATED CALL = (longProgression).endInclusive.toString(-1198203767)
2021-03-11 22:39:29,968 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:39:29,968 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:39:30,083 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:30,201 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:30,203 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:30,448 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:39:30,450 [main:95] - GENERATED = StringBuilder(-483766511)
2021-03-11 22:39:30,565 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:30,683 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:39:30,686 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:39:30,933 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:39:31,059 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:31,061 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:31,303 [main:302] - generating value of type = Int true depth = 6
2021-03-11 22:39:31,305 [main:95] - GENERATED = StringBuilder(345959982)
2021-03-11 22:39:31,305 [main:95] - GENERATED = StringBuilder(StringBuilder(345959982))
2021-03-11 22:39:31,419 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:31,564 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:31,685 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:31,804 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:39:31,807 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:39:31,933 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:31,935 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:32,178 [main:302] - generating value of type = String true depth = 4
2021-03-11 22:39:32,180 [main:95] - GENERATED = StringBuilder("ppjua")
2021-03-11 22:39:32,180 [main:117] - GENERATED CALL = (longProgression).joinToString(StringBuilder(-483766511), StringBuilder(StringBuilder(345959982)), StringBuilder(), 1113194852, "nfjlj", {a: T -> StringBuilder("ppjua")})
2021-03-11 22:39:32,180 [main:114] - replacement of fu3("start") of type String is (longProgression).joinToString(StringBuilder(-483766511), StringBuilder(StringBuilder(345959982)), StringBuilder(), 1113194852, "nfjlj", {a: T -> StringBuilder("ppjua")})
2021-03-11 22:39:32,305 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:39:32,305 [main:66] - Compilation checking started
2021-03-11 22:39:32,612 [main:49] - Result = false
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return a.toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fail1: ${(longProgression).joinToString(StringBuilder(-483766511), StringBuilder(StringBuilder(345959982)), StringBuilder(), 1113194852, "nfjlj", {a: T -> StringBuilder("ppjua")})}"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:39:32,613 [main:107] - replacing ("fail1: ${fu3("start")}", String)
2021-03-11 22:39:32,614 [main:50] - replacing "fail1: ${fu3("start")}" String
2021-03-11 22:39:32,614 [main:54] - Getting value of type String
2021-03-11 22:39:32,729 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:32,730 [main:58] - GENERATED VALUE OF TYPE String = "fjjuh"
2021-03-11 22:39:32,730 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:32,862 [main:67] - randomType = Collection<Long>
2021-03-11 22:39:32,863 [main:106] - GETTING String from IntProgression
2021-03-11 22:39:32,874 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:39:32,874 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:39:32,988 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:33,105 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:33,222 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:39:33,225 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:39:33,473 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:39:33,478 [main:95] - GENERATED = StringBuilder("govwl")
2021-03-11 22:39:33,594 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:33,741 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:33,856 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:33,974 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:33,976 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:34,220 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:39:34,221 [main:95] - GENERATED = StringBuilder("fupci")
2021-03-11 22:39:34,335 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:39:34,337 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:39:34,455 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:34,457 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:34,700 [main:302] - generating value of type = String true depth = 4
2021-03-11 22:39:34,701 [main:95] - GENERATED = StringBuilder("gwevc")
2021-03-11 22:39:34,702 [main:117] - GENERATED CALL = ((intProgression step 2)).joinToString("aamfj", StringBuilder("govwl"), StringBuilder(), 2068956421, StringBuilder("fupci"), {a: T -> StringBuilder("gwevc")})
2021-03-11 22:39:34,702 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@170fdf91], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:39:34,702 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:39:34,816 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:34,817 [main:117] - GENERATED CALL = ((intProgression step 2)).first.toString(-1101642982)
2021-03-11 22:39:34,817 [main:114] - replacement of "fail1: ${fu3("start")}" of type String is "fjjuh"
2021-03-11 22:39:34,931 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 22:39:34,931 [main:66] - Compilation checking started
2021-03-11 22:39:35,375 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return a.toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:39:35,377 [main:107] - replacing (a, String)
2021-03-11 22:39:35,377 [main:50] - replacing a String
2021-03-11 22:39:35,377 [main:54] - Getting value of type String
2021-03-11 22:39:35,512 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:35,513 [main:58] - GENERATED VALUE OF TYPE String = "qmpry"
2021-03-11 22:39:35,514 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:35,650 [main:67] - randomType = Map<Int, Int>
2021-03-11 22:39:35,651 [main:106] - GETTING String from IntRange
2021-03-11 22:39:35,672 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@170fdf91], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:39:35,672 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:39:35,787 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:35,788 [main:117] - GENERATED CALL = (intProgression).first.toString(-1180207212)
2021-03-11 22:39:35,788 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@b0eb175], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:39:35,788 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:39:35,902 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:35,904 [main:117] - GENERATED CALL = (intProgression).endInclusive.toString(445868821)
2021-03-11 22:39:35,904 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:39:35,904 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:39:36,045 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:36,172 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:36,174 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:36,419 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:39:36,421 [main:95] - GENERATED = StringBuilder("mofpx")
2021-03-11 22:39:36,535 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:36,653 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:36,786 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:36,900 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:37,018 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:39:37,020 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:39:37,140 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:37,143 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:37,394 [main:302] - generating value of type = String true depth = 4
2021-03-11 22:39:37,396 [main:95] - GENERATED = StringBuilder("nahez")
2021-03-11 22:39:37,396 [main:117] - GENERATED CALL = (intProgression).joinToString(StringBuilder("mofpx"), "trlad", "qvwez", 844813594, "yfdib", {a: T -> StringBuilder("nahez")})
2021-03-11 22:39:37,396 [main:114] - replacement of a of type String is (intProgression).endInclusive.toString(445868821)
2021-03-11 22:39:37,509 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:39:37,510 [main:66] - Compilation checking started
2021-03-11 22:39:37,966 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:39:37,967 [main:107] - replacing (prope0, String)
2021-03-11 22:39:37,968 [main:50] - replacing prope0 String
2021-03-11 22:39:37,968 [main:54] - Getting value of type String
2021-03-11 22:39:38,089 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:38,090 [main:58] - GENERATED VALUE OF TYPE String = "lnpyr"
2021-03-11 22:39:38,091 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:38,359 [main:67] - randomType = HashMap<ULong, Char>
2021-03-11 22:39:38,500 [main:302] - generating value of type = HashMap<ULong, Char> false depth = 0
2021-03-11 22:39:38,623 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<ULong, Char>): HashMap<ULong, Char> = TODO()
2021-03-11 22:39:38,626 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<ULong, Char>): HashMap<ULong, Char> = TODO()
2021-03-11 22:39:38,757 [main:302] - generating value of type = Pair<ULong, Char> false depth = 3
2021-03-11 22:39:38,883 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ULong, second: Char): Pair<ULong, Char> = TODO()
2021-03-11 22:39:38,887 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ULong, second: Char): Pair<ULong, Char> = TODO()
2021-03-11 22:39:39,007 [main:302] - generating value of type = ULong true depth = 6
2021-03-11 22:39:39,009 [main:302] - generating value of type = Char true depth = 6
2021-03-11 22:39:39,010 [main:95] - GENERATED = Pair<ULong, Char>(499030525416573087.toULong(), '䬵')
2021-03-11 22:39:39,010 [main:95] - GENERATED = linkedMapOf<ULong, Char>(Pair<ULong, Char>(499030525416573087.toULong(), '䬵'))
2021-03-11 22:39:39,102 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:39:39,215 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:39,216 [main:78] - Generated call from random type = (linkedMapOf<ULong, Char>(Pair<ULong, Char>(499030525416573087.toULong(), '䬵'))).size.toString(-848947883)
2021-03-11 22:39:39,217 [main:106] - GETTING String from LongProgression
2021-03-11 22:39:39,230 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:39:39,230 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:39:39,343 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:39,463 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:39,581 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:39,700 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:39,818 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:39,938 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:39:39,940 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:39:40,188 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:39:40,193 [main:95] - GENERATED = StringBuilder("ubdyu")
2021-03-11 22:39:40,306 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:39:40,308 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:39:40,312 [main:117] - GENERATED CALL = (longProgression step 2L).joinToString("roein", "nkntc", "qdkcf", -1265952571, StringBuilder("ubdyu"), {a: T -> "qwuqo"})
2021-03-11 22:39:40,312 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@5a35e2a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]]
2021-03-11 22:39:40,312 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:39:40,425 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:40,427 [main:117] - GENERATED CALL = (longProgression step 2L).first.toString(-1062366412)
2021-03-11 22:39:40,427 [main:114] - replacement of prope0 of type String is (linkedMapOf<ULong, Char>(Pair<ULong, Char>(499030525416573087.toULong(), '䬵'))).size.toString(-848947883)
2021-03-11 22:39:40,541 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:39:40,542 [main:66] - Compilation checking started
2021-03-11 22:39:40,916 [main:49] - Result = false
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{(linkedMapOf<ULong, Char>(Pair<ULong, Char>(499030525416573087.toULong(), '䬵'))).size.toString(-848947883) = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:39:40,917 [main:107] - replacing (arg, Ty0)
2021-03-11 22:39:40,918 [main:50] - replacing arg Ty0
2021-03-11 22:39:40,918 [main:54] - Getting value of type Ty0
2021-03-11 22:39:41,049 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 22:39:41,054 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 22:39:41,196 [main:67] - randomType = String?
2021-03-11 22:39:41,330 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:41,364 [main:106] - GETTING Ty0 from IntRange
2021-03-11 22:39:41,402 [main:106] - GETTING Ty0 from LongRange
2021-03-11 22:39:41,438 [main:106] - GETTING Ty0 from IntProgression
2021-03-11 22:39:41,456 [main:106] - GETTING Ty0 from CharProgression
2021-03-11 22:39:41,477 [main:106] - GETTING Ty0 from IntProgression
2021-03-11 22:39:41,478 [main:106] - GETTING Ty0 from CharRange
2021-03-11 22:39:41,519 [main:106] - GETTING Ty0 from LongProgression
2021-03-11 22:39:41,537 [main:106] - GETTING Ty0 from LongProgression
2021-03-11 22:39:41,538 [main:106] - GETTING Ty0 from CharProgression
2021-03-11 22:39:41,538 [main:111] - Cant find and generate replacement for arg type Ty0
2021-03-11 22:39:41,538 [main:107] - replacing (prope0, String)
2021-03-11 22:39:41,538 [main:50] - replacing prope0 String
2021-03-11 22:39:41,538 [main:54] - Getting value of type String
2021-03-11 22:39:41,655 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:41,657 [main:58] - GENERATED VALUE OF TYPE String = "nrasr"
2021-03-11 22:39:41,657 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:41,913 [main:67] - randomType = Byte?
2021-03-11 22:39:42,029 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:39:42,064 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@102310f6]
2021-03-11 22:39:42,064 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:39:42,181 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:42,183 [main:78] - Generated call from random type = (-94)?.toLong().toString(-914888625)
2021-03-11 22:39:42,184 [main:106] - GETTING String from LongProgression
2021-03-11 22:39:42,201 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@5a35e2a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]]
2021-03-11 22:39:42,202 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:39:42,323 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:42,324 [main:117] - GENERATED CALL = ((longProgression step 2L)).first.toString(1175871870)
2021-03-11 22:39:42,324 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:39:42,325 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:39:42,439 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:42,558 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:39:42,560 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:39:42,808 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:39:42,930 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:42,932 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:43,181 [main:302] - generating value of type = Int true depth = 6
2021-03-11 22:39:43,183 [main:95] - GENERATED = StringBuilder(401495384)
2021-03-11 22:39:43,183 [main:95] - GENERATED = StringBuilder(StringBuilder(401495384))
2021-03-11 22:39:43,325 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:43,442 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:43,444 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:43,694 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:39:43,696 [main:95] - GENERATED = StringBuilder("eaxta")
2021-03-11 22:39:43,811 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:43,931 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:43,933 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:44,174 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:39:44,176 [main:95] - GENERATED = StringBuilder("ijahn")
2021-03-11 22:39:44,289 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:44,404 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:44,520 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:39:44,522 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:39:44,763 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:39:44,767 [main:95] - GENERATED = StringBuilder("wufbv")
2021-03-11 22:39:44,882 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:39:44,884 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:39:44,889 [main:117] - GENERATED CALL = ((longProgression step 2L)).joinToString(StringBuilder(StringBuilder(401495384)), StringBuilder("eaxta"), StringBuilder("ijahn"), 1508302589, StringBuilder("wufbv"), {a: T -> StringBuilder()})
2021-03-11 22:39:44,889 [main:114] - replacement of prope0 of type String is ((longProgression step 2L)).first.toString(1175871870)
2021-03-11 22:39:45,001 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:39:45,001 [main:66] - Compilation checking started
2021-03-11 22:39:45,311 [main:49] - Result = false
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{((longProgression step 2L)).first.toString(1175871870) = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:39:45,313 [main:107] - replacing (prope0, String)
2021-03-11 22:39:45,313 [main:50] - replacing prope0 String
2021-03-11 22:39:45,313 [main:54] - Getting value of type String
2021-03-11 22:39:45,431 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:45,432 [main:58] - GENERATED VALUE OF TYPE String = "cqgxm"
2021-03-11 22:39:45,432 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:45,437 [main:67] - randomType = Int
2021-03-11 22:39:45,552 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:45,591 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6094f1df]
2021-03-11 22:39:45,591 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76345526]
2021-03-11 22:39:45,733 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:45,735 [main:78] - Generated call from random type = (-1212283805).toShort().toString(1834669432)
2021-03-11 22:39:45,736 [main:106] - GETTING String from CharProgression
2021-03-11 22:39:45,749 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]]
2021-03-11 22:39:45,749 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]
2021-03-11 22:39:45,749 [main:117] - GENERATED CALL = ((charProgression step 2)).first.titlecase()
2021-03-11 22:39:45,750 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:39:45,750 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:39:45,864 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:45,982 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:46,099 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:46,101 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:46,353 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:39:46,354 [main:95] - GENERATED = StringBuilder("axgyc")
2021-03-11 22:39:46,469 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:46,586 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:46,588 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:46,829 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:39:46,831 [main:95] - GENERATED = StringBuilder(878416838)
2021-03-11 22:39:46,944 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:47,060 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:47,178 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:47,180 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:47,426 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:39:47,428 [main:95] - GENERATED = StringBuilder("ylkxl")
2021-03-11 22:39:47,541 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:39:47,543 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:39:47,661 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:47,663 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:47,904 [main:302] - generating value of type = String true depth = 4
2021-03-11 22:39:47,906 [main:95] - GENERATED = StringBuilder("xbkdg")
2021-03-11 22:39:47,906 [main:117] - GENERATED CALL = ((charProgression step 2)).joinToString("lvskd", StringBuilder("axgyc"), StringBuilder(878416838), 954801845, StringBuilder("ylkxl"), {a: T -> StringBuilder("xbkdg")})
2021-03-11 22:39:47,907 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]]
2021-03-11 22:39:47,907 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]
2021-03-11 22:39:47,907 [main:117] - GENERATED CALL = ((charProgression step 2)).first.lowercase()
2021-03-11 22:39:47,907 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]]
2021-03-11 22:39:47,907 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:39:47,907 [main:117] - GENERATED CALL = ((charProgression step 2)).first.uppercase()
2021-03-11 22:39:47,907 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:39:47,907 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:39:48,027 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:48,028 [main:117] - GENERATED CALL = ((charProgression step 2)).first.plus("tzjhe")
2021-03-11 22:39:48,029 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@32228595], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:39:48,029 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:39:48,171 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:48,173 [main:117] - GENERATED CALL = ((charProgression step 2)).step.toString(1086375442)
2021-03-11 22:39:48,173 [main:114] - replacement of prope0 of type String is (-1212283805).toShort().toString(1834669432)
2021-03-11 22:39:48,285 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:39:48,286 [main:66] - Compilation checking started
2021-03-11 22:39:48,581 [main:49] - Result = false
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            (-1212283805).toShort().toString(1834669432) = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1("stub") {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:39:48,583 [main:107] - replacing ("stub", String)
2021-03-11 22:39:48,583 [main:50] - replacing "stub" String
2021-03-11 22:39:48,583 [main:54] - Getting value of type String
2021-03-11 22:39:48,697 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:48,699 [main:58] - GENERATED VALUE OF TYPE String = "vizdq"
2021-03-11 22:39:48,699 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:48,946 [main:67] - randomType = Short?
2021-03-11 22:39:49,059 [main:302] - generating value of type = Short true depth = 0
2021-03-11 22:39:49,105 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1b46bba1]
2021-03-11 22:39:49,106 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]
2021-03-11 22:39:49,106 [main:78] - Generated call from random type = (21899)?.toChar().lowercase()
2021-03-11 22:39:49,107 [main:106] - GETTING String from LongProgression
2021-03-11 22:39:49,122 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:39:49,122 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:39:49,236 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:49,353 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:39:49,355 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:39:49,598 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:39:49,603 [main:95] - GENERATED = StringBuilder("rnnxp")
2021-03-11 22:39:49,716 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:49,833 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:49,835 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:39:50,076 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:39:50,077 [main:95] - GENERATED = StringBuilder("iamrr")
2021-03-11 22:39:50,189 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:50,306 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:50,419 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:50,539 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:39:50,540 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:39:50,545 [main:117] - GENERATED CALL = (longProgression step 2L).joinToString(StringBuilder("rnnxp"), StringBuilder("iamrr"), "uqndo", 1242528892, StringBuilder(), {a: T -> "dqphf"})
2021-03-11 22:39:50,545 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@5a35e2a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]]
2021-03-11 22:39:50,545 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:39:50,686 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:50,688 [main:117] - GENERATED CALL = (longProgression step 2L).first.toString(-954593137)
2021-03-11 22:39:50,688 [main:114] - replacement of "stub" of type String is (21899)?.toChar().lowercase()
2021-03-11 22:39:50,800 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:39:50,800 [main:66] - Compilation checking started
2021-03-11 22:39:51,252 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1((21899)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return "OK"
}


2021-03-11 22:39:51,253 [main:107] - replacing ("OK", String)
2021-03-11 22:39:51,253 [main:50] - replacing "OK" String
2021-03-11 22:39:51,253 [main:54] - Getting value of type String
2021-03-11 22:39:51,378 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:51,380 [main:58] - GENERATED VALUE OF TYPE String = "phyke"
2021-03-11 22:39:51,380 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:51,511 [main:67] - randomType = Array<UShort>
2021-03-11 22:39:51,626 [main:302] - generating value of type = Array<UShort> false depth = 0
2021-03-11 22:39:51,745 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<UShort> = TODO()
2021-03-11 22:39:51,747 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<UShort> = TODO()
2021-03-11 22:39:51,867 [main:95] - GENERATED = emptyArray<UShort>()
2021-03-11 22:39:51,883 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.UShort defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5ef42a1a]
2021-03-11 22:39:51,997 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:51,999 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b5142ad]
2021-03-11 22:39:52,113 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:52,115 [main:78] - Generated call from random type = (emptyArray<UShort>()).get(1043925643).toString(-1994117839)
2021-03-11 22:39:52,116 [main:106] - GETTING String from CharProgression
2021-03-11 22:39:52,129 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@32228595], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:39:52,129 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:39:52,243 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:52,245 [main:117] - GENERATED CALL = (charProgression step 2).step.toString(-1659467834)
2021-03-11 22:39:52,245 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:39:52,245 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:39:52,360 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:52,361 [main:117] - GENERATED CALL = (charProgression step 2).first.plus("gxydv")
2021-03-11 22:39:52,362 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]]
2021-03-11 22:39:52,362 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]
2021-03-11 22:39:52,362 [main:117] - GENERATED CALL = (charProgression step 2).first.titlecase()
2021-03-11 22:39:52,362 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]]
2021-03-11 22:39:52,362 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:39:52,362 [main:117] - GENERATED CALL = (charProgression step 2).first.uppercase()
2021-03-11 22:39:52,362 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:39:52,362 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:39:52,476 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:52,595 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:52,714 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:52,832 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:52,955 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:39:53,074 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:53,076 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:39:53,358 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:39:53,360 [main:95] - GENERATED = StringBuilder(-731713652)
2021-03-11 22:39:53,474 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:39:53,475 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:39:53,480 [main:117] - GENERATED CALL = (charProgression step 2).joinToString("msxja", "eyaxr", StringBuilder(), -289729789, StringBuilder(-731713652), {a: T -> "hxyes"})
2021-03-11 22:39:53,480 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@799ee04b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]]
2021-03-11 22:39:53,480 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]
2021-03-11 22:39:53,480 [main:117] - GENERATED CALL = (charProgression step 2).first.lowercase()
2021-03-11 22:39:53,480 [main:114] - replacement of "OK" of type String is (charProgression step 2).step.toString(-1659467834)
2021-03-11 22:39:53,593 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:39:53,594 [main:66] - Compilation checking started
2021-03-11 22:39:54,047 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1((21899)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({"start"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return (charProgression step 2).step.toString(-1659467834)
}


2021-03-11 22:39:54,049 [main:107] - replacing ({"start"}, Function0<String>)
2021-03-11 22:39:54,049 [main:50] - replacing {"start"} Function0<String>
2021-03-11 22:39:54,049 [main:54] - Getting value of type Function0<String>
2021-03-11 22:39:54,169 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-11 22:39:54,170 [main:302] - generating value of type = String true depth = 1
2021-03-11 22:39:54,172 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "isrgl"}
2021-03-11 22:39:54,172 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:54,429 [main:67] - randomType = Sequence<UShort>
2021-03-11 22:39:54,430 [main:106] - GETTING Function0<String> from CharProgression
2021-03-11 22:39:54,445 [main:106] - GETTING Function0<String> from CharRange
2021-03-11 22:39:54,469 [main:106] - GETTING Function0<String> from IntRange
2021-03-11 22:39:54,491 [main:106] - GETTING Function0<String> from IntProgression
2021-03-11 22:39:54,503 [main:106] - GETTING Function0<String> from LongRange
2021-03-11 22:39:54,524 [main:106] - GETTING Function0<String> from IntProgression
2021-03-11 22:39:54,526 [main:106] - GETTING Function0<String> from LongProgression
2021-03-11 22:39:54,538 [main:106] - GETTING Function0<String> from LongProgression
2021-03-11 22:39:54,539 [main:106] - GETTING Function0<String> from CharProgression
2021-03-11 22:39:54,539 [main:114] - replacement of {"start"} of type Function0<String> is { "isrgl"}
2021-03-11 22:39:54,655 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:39:54,656 [main:66] - Compilation checking started
2021-03-11 22:39:55,118 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1((21899)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({ "isrgl"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return (charProgression step 2).step.toString(-1659467834)
}


2021-03-11 22:39:55,119 [main:107] - replacing (toString(), String)
2021-03-11 22:39:55,119 [main:50] - replacing toString() String
2021-03-11 22:39:55,119 [main:54] - Getting value of type String
2021-03-11 22:39:55,249 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:55,251 [main:58] - GENERATED VALUE OF TYPE String = "mnpmd"
2021-03-11 22:39:55,251 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:55,515 [main:67] - randomType = Double?
2021-03-11 22:39:55,630 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:39:55,661 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@9fa9d4c]
2021-03-11 22:39:55,661 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:39:55,775 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:55,777 [main:78] - Generated call from random type = (0.2785084434414392)?.toInt().toString(120390767)
2021-03-11 22:39:55,777 [main:114] - replacement of toString() of type String is (0.2785084434414392)?.toInt().toString(120390767)
2021-03-11 22:39:55,890 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:39:55,891 [main:66] - Compilation checking started
2021-03-11 22:39:56,217 [main:49] - Result = false
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).(0.2785084434414392)?.toInt().toString(120390767)
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1((21899)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({ "isrgl"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return (charProgression step 2).step.toString(-1659467834)
}


2021-03-11 22:39:56,219 [main:107] - replacing (fu2(param).toString(), String)
2021-03-11 22:39:56,219 [main:50] - replacing fu2(param).toString() String
2021-03-11 22:39:56,219 [main:54] - Getting value of type String
2021-03-11 22:39:56,333 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:56,335 [main:58] - GENERATED VALUE OF TYPE String = "zymnp"
2021-03-11 22:39:56,335 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:56,592 [main:67] - randomType = ArrayDeque<Char?>
2021-03-11 22:39:56,708 [main:302] - generating value of type = ArrayDeque<Char?> false depth = 0
2021-03-11 22:39:56,836 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Char?> = TODO()
2021-03-11 22:39:56,838 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Char?> = TODO()
2021-03-11 22:39:56,958 [main:95] - GENERATED = ArrayDeque<Char?>()
2021-03-11 22:39:57,123 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:39:57,240 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:39:57,241 [main:78] - Generated call from random type = (ArrayDeque<Char?>()).modCount.toString(146919465)
2021-03-11 22:39:57,241 [main:114] - replacement of fu2(param).toString() of type String is (ArrayDeque<Char?>()).modCount.toString(146919465)
2021-03-11 22:39:57,355 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:39:57,356 [main:66] - Compilation checking started
2021-03-11 22:39:57,684 [main:49] - Result = false
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = (ArrayDeque<Char?>()).modCount.toString(146919465)
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1((21899)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    {{prope0 = (8901514150533248928).toChar().titlecase()}()}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({ "isrgl"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return (charProgression step 2).step.toString(-1659467834)
}


2021-03-11 22:39:57,686 [main:107] - replacing ({{prope0 = (8901514150533248928).toChar().titlecase()}()}, Function0<Unit>)
2021-03-11 22:39:57,687 [main:50] - replacing {{prope0 = (8901514150533248928).toChar().titlecase()}()} Function0<Unit>
2021-03-11 22:39:57,687 [main:54] - Getting value of type Function0<Unit>
2021-03-11 22:39:57,811 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:39:57,812 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:39:57,939 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:39:57,941 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:39:58,187 [main:302] - generating value of type = Any false depth = 4
2021-03-11 22:39:58,188 [main:95] - GENERATED = print("yskco")
2021-03-11 22:39:58,188 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("yskco")}
2021-03-11 22:39:58,188 [main:61] - GENERATED IS CALL =false
2021-03-11 22:39:58,191 [main:67] - randomType = String
2021-03-11 22:39:58,305 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:39:58,332 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-11 22:39:58,347 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-11 22:39:58,348 [main:106] - GETTING Function0<Unit> from CharRange
2021-03-11 22:39:58,374 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:39:58,387 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:39:58,388 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 22:39:58,409 [main:106] - GETTING Function0<Unit> from LongProgression
2021-03-11 22:39:58,421 [main:106] - GETTING Function0<Unit> from LongProgression
2021-03-11 22:39:58,422 [main:106] - GETTING Function0<Unit> from LongRange
2021-03-11 22:39:58,442 [main:114] - replacement of {{prope0 = (8901514150533248928).toChar().titlecase()}()} of type Function0<Unit> is { print("yskco")}
2021-03-11 22:39:58,559 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:39:58,559 [main:66] - Compilation checking started
2021-03-11 22:39:59,033 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1((21899)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({ "isrgl"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return (charProgression step 2).step.toString(-1659467834)
}


2021-03-11 22:39:59,152 [main:141] - TRYING TO REPLACE CONSTANT 2
2021-03-11 22:39:59,267 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 22:39:59,268 [main:66] - Compilation checking started
2021-03-11 22:39:59,578 [main:49] - Result = false
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step i).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1((21899)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({ "isrgl"}) != (23250).toChar().plus("prqrm")) return (13.toUByte()).toLong().toString(-44179653)

    return (charProgression step 2).step.toString(-1659467834)
}


2021-03-11 22:39:59,578 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-11 22:39:59,692 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 22:39:59,692 [main:66] - Compilation checking started
2021-03-11 22:40:00,139 [main:141] - TRYING TO REPLACE CONSTANT 13
2021-03-11 22:40:00,258 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 22:40:00,259 [main:66] - Compilation checking started
2021-03-11 22:40:00,705 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1((21899)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({ "isrgl"}) != (23250).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(-44179653)

    return (charProgression step 2).step.toString(-1659467834)
}


2021-03-11 22:40:00,706 [main:141] - TRYING TO REPLACE CONSTANT 44179653
2021-03-11 22:40:00,828 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 22:40:00,828 [main:66] - Compilation checking started
2021-03-11 22:40:01,266 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1((21899)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if ((12345).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({ "isrgl"}) != (23250).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 2).step.toString(-1659467834)
}


2021-03-11 22:40:01,266 [main:141] - TRYING TO REPLACE CONSTANT 12345
2021-03-11 22:40:01,392 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:40:01,392 [main:66] - Compilation checking started
2021-03-11 22:40:01,868 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1((21899)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(3).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({ "isrgl"}) != (23250).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 2).step.toString(-1659467834)
}


2021-03-11 22:40:01,869 [main:141] - TRYING TO REPLACE CONSTANT 3
2021-03-11 22:40:01,984 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 22:40:01,984 [main:66] - Compilation checking started
2021-03-11 22:40:02,417 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1((21899)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(-1436156818) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({ "isrgl"}) != (23250).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 2).step.toString(-1659467834)
}


2021-03-11 22:40:02,418 [main:141] - TRYING TO REPLACE CONSTANT 1436156818
2021-03-11 22:40:02,531 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 22:40:02,531 [main:66] - Compilation checking started
2021-03-11 22:40:02,970 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1((21899)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 2).first.uppercase()
    if (fu6({ "isrgl"}) != (23250).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 2).step.toString(-1659467834)
}


2021-03-11 22:40:02,970 [main:141] - TRYING TO REPLACE CONSTANT 2
2021-03-11 22:40:03,092 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 22:40:03,093 [main:66] - Compilation checking started
2021-03-11 22:40:03,517 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1((21899)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (23250).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 2).step.toString(-1659467834)
}


2021-03-11 22:40:03,517 [main:141] - TRYING TO REPLACE CONSTANT 23250
2021-03-11 22:40:03,641 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 22:40:03,642 [main:66] - Compilation checking started
2021-03-11 22:40:04,098 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1((21899)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(282994912)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 2).step.toString(-1659467834)
}


2021-03-11 22:40:04,098 [main:141] - TRYING TO REPLACE CONSTANT 282994912
2021-03-11 22:40:04,212 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 22:40:04,213 [main:66] - Compilation checking started
2021-03-11 22:40:04,692 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1((21899)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((3497.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 2).step.toString(-1659467834)
}


2021-03-11 22:40:04,692 [main:141] - TRYING TO REPLACE CONSTANT 3497
2021-03-11 22:40:04,806 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 22:40:04,806 [main:66] - Compilation checking started
2021-03-11 22:40:05,269 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(1456403656)
    fu1((21899)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 2).step.toString(-1659467834)
}


2021-03-11 22:40:05,270 [main:141] - TRYING TO REPLACE CONSTANT 1456403656
2021-03-11 22:40:05,385 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 22:40:05,385 [main:66] - Compilation checking started
2021-03-11 22:40:05,805 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 2L)).first.toString(2)
    fu1((21899)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 2).step.toString(-1659467834)
}


2021-03-11 22:40:05,805 [main:141] - TRYING TO REPLACE CONSTANT 2L
2021-03-11 22:40:05,921 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 22:40:05,921 [main:66] - Compilation checking started
2021-03-11 22:40:06,347 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(true, { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1((21899)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 2).step.toString(-1659467834)
}


2021-03-11 22:40:06,347 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-11 22:40:06,469 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-11 22:40:06,469 [main:66] - Compilation checking started
2021-03-11 22:40:06,891 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(413185335, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1((21899)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 2).step.toString(-1659467834)
}


2021-03-11 22:40:06,892 [main:141] - TRYING TO REPLACE CONSTANT 413185335
2021-03-11 22:40:07,006 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 22:40:07,007 [main:66] - Compilation checking started
2021-03-11 22:40:07,427 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString(445868821).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1((21899)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 2).step.toString(-1659467834)
}


2021-03-11 22:40:07,427 [main:141] - TRYING TO REPLACE CONSTANT 445868821
2021-03-11 22:40:07,569 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-11 22:40:07,569 [main:66] - Compilation checking started
2021-03-11 22:40:08,008 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1((21899)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 2).step.toString(-1659467834)
}


2021-03-11 22:40:08,009 [main:141] - TRYING TO REPLACE CONSTANT 21899
2021-03-11 22:40:08,127 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:40:08,128 [main:66] - Compilation checking started
2021-03-11 22:40:08,563 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 2).step.toString(-1659467834)
}


2021-03-11 22:40:08,563 [main:141] - TRYING TO REPLACE CONSTANT 2
2021-03-11 22:40:08,680 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 22:40:08,681 [main:66] - Compilation checking started
2021-03-11 22:40:09,121 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(-1659467834)
}


2021-03-11 22:40:09,122 [main:141] - TRYING TO REPLACE CONSTANT 1659467834
2021-03-11 22:40:09,237 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 22:40:09,237 [main:66] - Compilation checking started
2021-03-11 22:40:09,653 [main:53] - Result = true
Text:
import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}


2021-03-11 22:40:09,653 [main:41] - AFTER TRY 1 res = import kotlin.test.*

fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}


2021-03-11 22:40:10,124 [main:43] - GENERATING CALL OF fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}
2021-03-11 22:40:10,125 [main:61] - WITHOUT TYPE PARAMS = fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}
2021-03-11 22:40:10,404 [main:302] - generating value of type = String true depth = 1
2021-03-11 22:40:10,406 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] String, Unit> false depth = 1
2021-03-11 22:40:10,408 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 22:40:10,527 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:40:10,530 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:40:10,902 [main:302] - generating value of type = Boolean true depth = 5
2021-03-11 22:40:10,904 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-11 22:40:10,905 [main:302] - generating value of type = Any false depth = 6
2021-03-11 22:40:10,906 [main:95] - GENERATED = require(false, { "gkane"})
2021-03-11 22:40:10,906 [main:95] - GENERATED = fu0("wbmog", {a: String -> require(false, { "gkane"})})
2021-03-11 22:40:11,020 [main:43] - GENERATING CALL OF fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}
2021-03-11 22:40:11,027 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu1(arg: UByte, f: (UByte) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}
2021-03-11 22:40:11,282 [main:302] - generating value of type = UByte true depth = 1
2021-03-11 22:40:11,284 [main:302] - generating value of type = Function1<UByte, Unit> false depth = 1
2021-03-11 22:40:11,285 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 22:40:11,406 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:40:11,408 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:40:11,655 [main:302] - generating value of type = Boolean true depth = 5
2021-03-11 22:40:11,656 [main:95] - GENERATED = require(false)
2021-03-11 22:40:11,657 [main:95] - GENERATED = fu1<UByte>(58.toUByte(), {a: UByte -> require(false)})
2021-03-11 22:40:11,771 [main:43] - GENERATING CALL OF inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}
2021-03-11 22:40:11,773 [main:61] - WITHOUT TYPE PARAMS = inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}
2021-03-11 22:40:11,892 [main:302] - generating value of type = String true depth = 1
2021-03-11 22:40:11,894 [main:95] - GENERATED = fu2("teeiv")
2021-03-11 22:40:12,010 [main:43] - GENERATING CALL OF fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}
2021-03-11 22:40:12,012 [main:61] - WITHOUT TYPE PARAMS = fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}
2021-03-11 22:40:12,130 [main:302] - generating value of type = String true depth = 1
2021-03-11 22:40:12,132 [main:95] - GENERATED = fu3("emofm")
2021-03-11 22:40:12,247 [main:43] - GENERATING CALL OF fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}
2021-03-11 22:40:12,248 [main:61] - WITHOUT TYPE PARAMS = fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}
2021-03-11 22:40:12,368 [main:302] - generating value of type = String true depth = 1
2021-03-11 22:40:12,370 [main:95] - GENERATED = fu4("wgvqu")
2021-03-11 22:40:12,487 [main:43] - GENERATING CALL OF inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}
2021-03-11 22:40:12,488 [main:61] - WITHOUT TYPE PARAMS = inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}
2021-03-11 22:40:12,734 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-11 22:40:12,735 [main:302] - generating value of type = String true depth = 2
2021-03-11 22:40:12,737 [main:95] - GENERATED = fu5({ "lmriy"})
2021-03-11 22:40:12,851 [main:43] - GENERATING CALL OF inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}
2021-03-11 22:40:12,853 [main:61] - WITHOUT TYPE PARAMS = inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}
2021-03-11 22:40:13,130 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-11 22:40:13,131 [main:302] - generating value of type = String true depth = 2
2021-03-11 22:40:13,133 [main:95] - GENERATED = fu6({ "xxmtx"})
2021-03-11 22:40:13,258 [main:43] - Try №1
2021-03-11 22:40:22,840 [main:48] - Already checked
2021-03-11 22:40:27,618 [main:69] - Trying to insert suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }
2021-03-11 22:40:27,737 [main:66] - Compilation checking started
2021-03-11 22:40:29,081 [main:103] - Trying to change 200 nodes
2021-03-11 22:40:29,081 [main:107] - replacing ("123456789012345#test", String)
2021-03-11 22:40:29,083 [main:50] - replacing "123456789012345#test" String
2021-03-11 22:40:29,083 [main:54] - Getting value of type String
2021-03-11 22:40:29,304 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:40:29,307 [main:58] - GENERATED VALUE OF TYPE String = "mosgc"
2021-03-11 22:40:29,307 [main:61] - GENERATED IS CALL =false
2021-03-11 22:40:30,240 [main:67] - randomType = ArrayList<Double?>?
2021-03-11 22:40:30,430 [main:302] - generating value of type = ArrayList<Double?> false depth = 0
2021-03-11 22:40:30,628 [main:43] - GENERATING CALL OF fun <E> ArrayList(elements: kotlin.collections.Collection<Double?>): ArrayList<Double?> = TODO()
2021-03-11 22:40:30,633 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(elements: kotlin.collections.Collection<Double?>): ArrayList<Double?> = TODO()
2021-03-11 22:40:31,072 [main:302] - generating value of type = Collection<Double?> false depth = 3
2021-03-11 22:40:31,266 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): Collection<Double?> = TODO()
2021-03-11 22:40:31,271 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): Collection<Double?> = TODO()
2021-03-11 22:40:31,466 [main:95] - GENERATED = arrayListOf<Double?>()
2021-03-11 22:40:31,466 [main:95] - GENERATED = ArrayList<Double?>(arrayListOf<Double?>())
2021-03-11 22:40:31,656 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@492c7058]
2021-03-11 22:40:31,657 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5c2475de]
2021-03-11 22:40:31,657 [main:78] - Generated call from random type = (ArrayList<Double?>(arrayListOf<Double?>()))?.toArray().contentDeepToString()
2021-03-11 22:40:31,658 [main:106] - GETTING String from Char
2021-03-11 22:40:31,676 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4a3a164c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:40:31,676 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4a3a164c]
2021-03-11 22:40:31,677 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:40:31,677 [main:117] - GENERATED CALL = ((charProgression step 44179653).first).compareTo((2).toChar()).toString(((intProgression).endInclusive).compareTo(21899))
2021-03-11 22:40:31,677 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7c4a3a84], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76345526]]
2021-03-11 22:40:31,677 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7c4a3a84]
2021-03-11 22:40:31,677 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76345526]
2021-03-11 22:40:31,677 [main:117] - GENERATED CALL = ((charProgression step 44179653).first).toShort().toString((intProgression).endInclusive)
2021-03-11 22:40:31,677 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]]
2021-03-11 22:40:31,677 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:40:31,678 [main:117] - GENERATED CALL = ((charProgression step 44179653).first).uppercase()
2021-03-11 22:40:31,678 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]]
2021-03-11 22:40:31,678 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]
2021-03-11 22:40:31,678 [main:117] - GENERATED CALL = ((charProgression step 44179653).first).titlecase()
2021-03-11 22:40:31,678 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:40:31,678 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:40:31,678 [main:117] - GENERATED CALL = ((charProgression step 44179653).first).plus(fu3("nostart"))
2021-03-11 22:40:31,678 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]]
2021-03-11 22:40:31,678 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]
2021-03-11 22:40:31,678 [main:117] - GENERATED CALL = ((charProgression step 44179653).first).lowercase()
2021-03-11 22:40:31,678 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@27225e83], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]]
2021-03-11 22:40:31,678 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@27225e83]
2021-03-11 22:40:31,678 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:40:31,679 [main:117] - GENERATED CALL = ((charProgression step 44179653).first).toLong().toString((2))
2021-03-11 22:40:31,679 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5663d72d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@704513f3]]
2021-03-11 22:40:31,679 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5663d72d]
2021-03-11 22:40:31,679 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@704513f3]
2021-03-11 22:40:31,679 [main:117] - GENERATED CALL = ((charProgression step 44179653).first).toByte().toString((2))
2021-03-11 22:40:31,679 [main:114] - replacement of "123456789012345#test" of type String is ((charProgression step 44179653).first).titlecase()
2021-03-11 22:40:31,867 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:40:31,867 [main:66] - Compilation checking started
2021-03-11 22:40:32,640 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val prope3 = v?.fu12()
    if (prope3 == null) return "null"
    return prope3
}

suspend fun Kla0.fu8(v: Long?): String {
    val prope3 = v?.fu12() ?: "null"
    return prope3
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 {
        val prope10 = Kla0("#test")
        val prope11 = prope10.fu7(null)
        if (prope11 != "null") throw RuntimeException("fail 1: $prope11")

        val prope12 = prope10.fu7(123456789012345)
        if (prope12 != "123456789012345#test") throw RuntimeException("fail 2: $prope12")

        val prope13 = prope10.fu8(null)
        if (prope13 != "null") throw RuntimeException("fail 3: $prope13")

        val prope14 = prope10.fu8(123456789012345)
        if (prope14 != ((charProgression step 44179653).first).titlecase()) throw RuntimeException("fail 4: $prope14")

        prope4 = "OK"
    }

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu15(it)
    }

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:40:32,642 [main:107] - replacing (prope3, String)
2021-03-11 22:40:32,644 [main:50] - replacing prope3 String
2021-03-11 22:40:32,644 [main:54] - Getting value of type String
2021-03-11 22:40:32,825 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:40:32,829 [main:58] - GENERATED VALUE OF TYPE String = "myyjk"
2021-03-11 22:40:32,829 [main:61] - GENERATED IS CALL =false
2021-03-11 22:40:33,045 [main:67] - randomType = Kla6
2021-03-11 22:40:33,234 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 22:40:33,238 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}
2021-03-11 22:40:33,270 [main:106] - GETTING String from String
2021-03-11 22:40:33,303 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4616e902]]
2021-03-11 22:40:33,303 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4616e902]
2021-03-11 22:40:33,304 [main:117] - GENERATED CALL = (((intProgression).endInclusive).compareTo(21899).toString(1)).dropLast(((intProgression).endInclusive))
2021-03-11 22:40:33,304 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37e22e46]]
2021-03-11 22:40:33,304 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37e22e46]
2021-03-11 22:40:33,304 [main:117] - GENERATED CALL = (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceAfter((charProgression step 44179653).first, fu2("teeiv"), fu6({ "xxmtx"}))
2021-03-11 22:40:33,304 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f5db4f]]
2021-03-11 22:40:33,304 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f5db4f]
2021-03-11 22:40:33,304 [main:117] - GENERATED CALL = (((intProgression).endInclusive).compareTo(21899).toString(1)).drop((2))
2021-03-11 22:40:33,305 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ce8be6a]]
2021-03-11 22:40:33,305 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9]
2021-03-11 22:40:33,305 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ce8be6a]
2021-03-11 22:40:33,498 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:40:33,502 [main:117] - GENERATED CALL = (((intProgression).endInclusive).compareTo(21899).toString(1)).subSequence(((intProgression).endInclusive).compareTo(21899), ((intProgression).endInclusive)).repeat(1871161735)
2021-03-11 22:40:33,502 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]]
2021-03-11 22:40:33,502 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386]
2021-03-11 22:40:33,693 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:40:33,697 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]
2021-03-11 22:40:33,697 [main:117] - GENERATED CALL = (((intProgression).endInclusive).compareTo(21899).toString(1)).get(892306090).titlecase()
2021-03-11 22:40:33,697 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1552f868]]
2021-03-11 22:40:33,697 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1552f868]
2021-03-11 22:40:33,697 [main:117] - GENERATED CALL = (((intProgression).endInclusive).compareTo(21899).toString(1)).substring(((intProgression).endInclusive).compareTo(21899))
2021-03-11 22:40:33,697 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1459daba]]
2021-03-11 22:40:33,697 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1459daba]
2021-03-11 22:40:33,698 [main:117] - GENERATED CALL = (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
2021-03-11 22:40:33,698 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@229ea125]]
2021-03-11 22:40:33,698 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@229ea125]
2021-03-11 22:40:33,883 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:40:33,890 [main:117] - GENERATED CALL = (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceRange((intProgression).endInclusive, (2), "ptxou")
2021-03-11 22:40:33,890 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:40:33,890 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386]
2021-03-11 22:40:33,890 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:40:34,086 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:40:34,090 [main:117] - GENERATED CALL = (((intProgression).endInclusive).compareTo(21899).toString(1)).get(((intProgression).endInclusive).compareTo(21899)).plus("mjzgv")
2021-03-11 22:40:34,091 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c0fd226]]
2021-03-11 22:40:34,091 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c0fd226]
2021-03-11 22:40:34,091 [main:117] - GENERATED CALL = (((intProgression).endInclusive).compareTo(21899).toString(1)).trimEnd()
2021-03-11 22:40:34,091 [main:114] - replacement of prope3 of type String is (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
2021-03-11 22:40:34,274 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:40:34,275 [main:66] - Compilation checking started
2021-03-11 22:40:35,076 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val prope3 = v?.fu12()
    if (prope3 == null) return "null"
    return prope3
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12() ?: "null"
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 {
        val prope10 = Kla0("#test")
        val prope11 = prope10.fu7(null)
        if (prope11 != "null") throw RuntimeException("fail 1: $prope11")

        val prope12 = prope10.fu7(123456789012345)
        if (prope12 != "123456789012345#test") throw RuntimeException("fail 2: $prope12")

        val prope13 = prope10.fu8(null)
        if (prope13 != "null") throw RuntimeException("fail 3: $prope13")

        val prope14 = prope10.fu8(123456789012345)
        if (prope14 != ((charProgression step 44179653).first).titlecase()) throw RuntimeException("fail 4: $prope14")

        prope4 = "OK"
    }

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu15(it)
    }

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:40:35,078 [main:107] - replacing (let(x), Unit?)
2021-03-11 22:40:35,081 [main:50] - replacing let(x) Unit?
2021-03-11 22:40:35,081 [main:54] - Getting value of type Unit?
2021-03-11 22:40:35,275 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 22:40:35,498 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:40:35,503 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:40:36,108 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 22:40:36,112 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-11 22:40:36,115 [main:302] - generating value of type = Any false depth = 4
2021-03-11 22:40:36,115 [main:95] - GENERATED = require(false, { "nyokf"})
2021-03-11 22:40:36,115 [main:58] - GENERATED VALUE OF TYPE Unit? = require(false, { "nyokf"})
2021-03-11 22:40:36,115 [main:61] - GENERATED IS CALL =true
2021-03-11 22:40:36,960 [main:67] - randomType = Function1<LinkedHashSet<Kla2?>, Float?>
2021-03-11 22:40:36,965 [main:106] - GETTING Unit? from Int
2021-03-11 22:40:37,003 [main:106] - GETTING Unit? from String
2021-03-11 22:40:37,020 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1506a9d]]
2021-03-11 22:40:37,020 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1506a9d]
2021-03-11 22:40:37,198 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 22:40:37,201 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:40:37,395 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 22:40:37,400 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 22:40:38,004 [main:302] - generating value of type = Int true depth = 4
2021-03-11 22:40:38,008 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 22:40:38,011 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 22:40:38,196 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:40:38,201 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:40:38,591 [main:302] - generating value of type = Any false depth = 8
2021-03-11 22:40:38,591 [main:95] - GENERATED = print("wvqbl")
2021-03-11 22:40:38,591 [main:95] - GENERATED = repeat(-486935229, {a: Int -> print("wvqbl")})
2021-03-11 22:40:38,592 [main:117] - GENERATED CALL = (fu4("wgvqu"))?.forEachIndexed({a: Int, b: Char -> repeat(-486935229, {a: Int -> print("wvqbl")})})
2021-03-11 22:40:38,592 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b2a3c9c]]
2021-03-11 22:40:38,592 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b2a3c9c]
2021-03-11 22:40:38,778 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 22:40:38,781 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:40:38,967 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:40:38,972 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:40:39,599 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:40:39,603 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 22:40:39,606 [main:302] - generating value of type = Any false depth = 5
2021-03-11 22:40:39,606 [main:95] - GENERATED = require(false, { "nsidu"})
2021-03-11 22:40:39,607 [main:117] - GENERATED CALL = (fu4("wgvqu"))?.forEach({a: Char -> require(false, { "nsidu"})})
2021-03-11 22:40:39,607 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b2a3c9c]]
2021-03-11 22:40:39,607 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9]
2021-03-11 22:40:39,791 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:40:39,795 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b2a3c9c]
2021-03-11 22:40:39,975 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 22:40:39,978 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:40:40,171 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:40:40,176 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:40:40,560 [main:302] - generating value of type = Any false depth = 4
2021-03-11 22:40:40,560 [main:95] - GENERATED = println("uayxk")
2021-03-11 22:40:40,562 [main:117] - GENERATED CALL = (fu4("wgvqu"))?.subSequence(((intProgression).endInclusive), 62652112).forEach({a: Char -> println("uayxk")})
2021-03-11 22:40:40,562 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1506a9d]]
2021-03-11 22:40:40,562 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9]
2021-03-11 22:40:40,562 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1506a9d]
2021-03-11 22:40:40,747 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 22:40:40,750 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:40:40,939 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:40:40,944 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:40:41,337 [main:302] - generating value of type = Any false depth = 4
2021-03-11 22:40:41,337 [main:95] - GENERATED = print("zthqn")
2021-03-11 22:40:41,337 [main:117] - GENERATED CALL = (fu4("wgvqu"))?.subSequence(((intProgression).endInclusive), (2)).forEachIndexed({a: Int, b: Char -> print("zthqn")})
2021-03-11 22:40:41,337 [main:114] - replacement of let(x) of type Unit? is (fu4("wgvqu"))?.forEach({a: Char -> require(false, { "nsidu"})})
2021-03-11 22:40:41,518 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 22:40:41,519 [main:66] - Compilation checking started
2021-03-11 22:40:42,046 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val prope3 = v?.fu12()
    if (prope3 == null) return "null"
    return prope3
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12() ?: "null"
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 {
        val prope10 = Kla0("#test")
        val prope11 = prope10.fu7(null)
        if (prope11 != "null") throw RuntimeException("fail 1: $prope11")

        val prope12 = prope10.fu7(123456789012345)
        if (prope12 != "123456789012345#test") throw RuntimeException("fail 2: $prope12")

        val prope13 = prope10.fu8(null)
        if (prope13 != "null") throw RuntimeException("fail 3: $prope13")

        val prope14 = prope10.fu8(123456789012345)
        if (prope14 != ((charProgression step 44179653).first).titlecase()) throw RuntimeException("fail 4: $prope14")

        prope4 = "OK"
    }

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.(fu4("wgvqu"))?.forEach({a: Char -> require(false, { "nsidu"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu15(it)
    }

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:40:42,048 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 22:40:42,048 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 22:40:42,048 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 22:40:42,223 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 22:40:42,229 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 22:40:42,638 [main:67] - randomType = Kla6?
2021-03-11 22:40:42,847 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 22:40:42,850 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}
2021-03-11 22:40:42,875 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:40:42,917 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:40:42,933 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:40:42,956 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:40:42,956 [main:106] - GETTING EmptyCoroutineContext from IntRange
2021-03-11 22:40:42,986 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:40:42,986 [main:106] - GETTING EmptyCoroutineContext from IntRange
2021-03-11 22:40:42,987 [main:106] - GETTING EmptyCoroutineContext from UByte
2021-03-11 22:40:43,020 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-11 22:40:43,043 [main:106] - GETTING EmptyCoroutineContext from UByte
2021-03-11 22:40:43,044 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:40:43,045 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:40:43,045 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:40:43,046 [main:106] - GETTING EmptyCoroutineContext from UShort
2021-03-11 22:40:43,082 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:40:43,083 [main:106] - GETTING EmptyCoroutineContext from LongProgression
2021-03-11 22:40:43,103 [main:106] - GETTING EmptyCoroutineContext from Float
2021-03-11 22:40:43,155 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:40:43,156 [main:106] - GETTING EmptyCoroutineContext from Long
2021-03-11 22:40:43,188 [main:106] - GETTING EmptyCoroutineContext from LongRange
2021-03-11 22:40:43,210 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:40:43,210 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:40:43,211 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:40:43,212 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:40:43,212 [main:106] - GETTING EmptyCoroutineContext from CharRange
2021-03-11 22:40:43,237 [main:106] - GETTING EmptyCoroutineContext from LongProgression
2021-03-11 22:40:43,237 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:40:43,238 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:40:43,239 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:40:43,239 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:40:43,240 [main:106] - GETTING EmptyCoroutineContext from UShort
2021-03-11 22:40:43,241 [main:106] - GETTING EmptyCoroutineContext from IntProgression
2021-03-11 22:40:43,253 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-11 22:40:43,254 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:40:43,254 [main:106] - GETTING EmptyCoroutineContext from IntProgression
2021-03-11 22:40:43,255 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:40:43,256 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:40:43,256 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 22:40:43,256 [main:107] - replacing ({
        val prope10 = Kla0("#test")
        val prope11 = prope10.fu7(null)
        if (prope11 != "null") throw RuntimeException("fail 1: $prope11")

        val prope12 = prope10.fu7(123456789012345)
        if (prope12 != "123456789012345#test") throw RuntimeException("fail 2: $prope12")

        val prope13 = prope10.fu8(null)
        if (prope13 != "null") throw RuntimeException("fail 3: $prope13")

        val prope14 = prope10.fu8(123456789012345)
        if (prope14 != ((charProgression step 44179653).first).titlecase()) throw RuntimeException("fail 4: $prope14")

        prope4 = "OK"
    }, SuspendFunction0<Unit>)
2021-03-11 22:40:43,256 [main:50] - replacing {
        val prope10 = Kla0("#test")
        val prope11 = prope10.fu7(null)
        if (prope11 != "null") throw RuntimeException("fail 1: $prope11")

        val prope12 = prope10.fu7(123456789012345)
        if (prope12 != "123456789012345#test") throw RuntimeException("fail 2: $prope12")

        val prope13 = prope10.fu8(null)
        if (prope13 != "null") throw RuntimeException("fail 3: $prope13")

        val prope14 = prope10.fu8(123456789012345)
        if (prope14 != ((charProgression step 44179653).first).titlecase()) throw RuntimeException("fail 4: $prope14")

        prope4 = "OK"
    } SuspendFunction0<Unit>
2021-03-11 22:40:43,256 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-11 22:40:43,427 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 22:40:43,431 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:40:43,616 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:40:43,621 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:40:44,208 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:40:44,212 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 22:40:44,215 [main:302] - generating value of type = Any false depth = 5
2021-03-11 22:40:44,216 [main:95] - GENERATED = check(false, { "rygug"})
2021-03-11 22:40:44,216 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { check(false, { "rygug"})}
2021-03-11 22:40:44,216 [main:61] - GENERATED IS CALL =false
2021-03-11 22:40:44,612 [main:67] - randomType = Sequence<Kla6>
2021-03-11 22:40:44,613 [main:106] - GETTING SuspendFunction0<Unit> from LongProgression
2021-03-11 22:40:44,631 [main:106] - GETTING SuspendFunction0<Unit> from IntRange
2021-03-11 22:40:44,665 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 22:40:44,691 [main:106] - GETTING SuspendFunction0<Unit> from LongRange
2021-03-11 22:40:44,713 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 22:40:44,713 [main:106] - GETTING SuspendFunction0<Unit> from CharProgression
2021-03-11 22:40:44,727 [main:106] - GETTING SuspendFunction0<Unit> from UShort
2021-03-11 22:40:44,750 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 22:40:44,779 [main:106] - GETTING SuspendFunction0<Unit> from IntProgression
2021-03-11 22:40:44,791 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 22:40:44,792 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 22:40:44,823 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 22:40:44,824 [main:106] - GETTING SuspendFunction0<Unit> from CharProgression
2021-03-11 22:40:44,825 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 22:40:44,826 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 22:40:44,827 [main:106] - GETTING SuspendFunction0<Unit> from CharProgression
2021-03-11 22:40:44,828 [main:106] - GETTING SuspendFunction0<Unit> from LongProgression
2021-03-11 22:40:44,829 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 22:40:44,830 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 22:40:44,831 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 22:40:44,832 [main:106] - GETTING SuspendFunction0<Unit> from UByte
2021-03-11 22:40:44,856 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 22:40:44,874 [main:106] - GETTING SuspendFunction0<Unit> from UByte
2021-03-11 22:40:44,875 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 22:40:44,876 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 22:40:44,877 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 22:40:44,878 [main:106] - GETTING SuspendFunction0<Unit> from CharProgression
2021-03-11 22:40:44,879 [main:106] - GETTING SuspendFunction0<Unit> from CharProgression
2021-03-11 22:40:44,880 [main:106] - GETTING SuspendFunction0<Unit> from UShort
2021-03-11 22:40:44,881 [main:106] - GETTING SuspendFunction0<Unit> from CharProgression
2021-03-11 22:40:44,882 [main:106] - GETTING SuspendFunction0<Unit> from CharRange
2021-03-11 22:40:44,907 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 22:40:44,908 [main:106] - GETTING SuspendFunction0<Unit> from IntProgression
2021-03-11 22:40:44,909 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 22:40:44,909 [main:106] - GETTING SuspendFunction0<Unit> from Float
2021-03-11 22:40:44,939 [main:106] - GETTING SuspendFunction0<Unit> from IntRange
2021-03-11 22:40:44,940 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 22:40:44,940 [main:114] - replacement of {
        val prope10 = Kla0("#test")
        val prope11 = prope10.fu7(null)
        if (prope11 != "null") throw RuntimeException("fail 1: $prope11")

        val prope12 = prope10.fu7(123456789012345)
        if (prope12 != "123456789012345#test") throw RuntimeException("fail 2: $prope12")

        val prope13 = prope10.fu8(null)
        if (prope13 != "null") throw RuntimeException("fail 3: $prope13")

        val prope14 = prope10.fu8(123456789012345)
        if (prope14 != ((charProgression step 44179653).first).titlecase()) throw RuntimeException("fail 4: $prope14")

        prope4 = "OK"
    } of type SuspendFunction0<Unit> is { check(false, { "rygug"})}
2021-03-11 22:40:45,122 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:40:45,122 [main:66] - Compilation checking started
2021-03-11 22:40:45,893 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val prope3 = v?.fu12()
    if (prope3 == null) return "null"
    return prope3
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12() ?: "null"
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu15(it)
    }

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:40:45,895 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 22:40:45,897 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 22:40:45,897 [main:54] - Getting value of type Function0<Unit>
2021-03-11 22:40:46,108 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:40:46,112 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:40:46,289 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:40:46,294 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:40:46,860 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:40:46,864 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 22:40:46,867 [main:302] - generating value of type = Any false depth = 5
2021-03-11 22:40:46,867 [main:95] - GENERATED = require(false, { "xtngt"})
2021-03-11 22:40:46,867 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "xtngt"})}
2021-03-11 22:40:46,868 [main:61] - GENERATED IS CALL =false
2021-03-11 22:40:47,090 [main:67] - randomType = Map<Kla5, Boolean>
2021-03-11 22:40:47,091 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:40:47,105 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:40:47,122 [main:106] - GETTING Function0<Unit> from LongRange
2021-03-11 22:40:47,145 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:40:47,146 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:40:47,178 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-11 22:40:47,189 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:40:47,190 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:40:47,191 [main:106] - GETTING Function0<Unit> from LongProgression
2021-03-11 22:40:47,204 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:40:47,205 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:40:47,206 [main:106] - GETTING Function0<Unit> from Long
2021-03-11 22:40:47,236 [main:106] - GETTING Function0<Unit> from UByte
2021-03-11 22:40:47,258 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 22:40:47,280 [main:106] - GETTING Function0<Unit> from CharRange
2021-03-11 22:40:47,303 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:40:47,304 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 22:40:47,323 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:40:47,324 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:40:47,325 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:40:47,325 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:40:47,326 [main:106] - GETTING Function0<Unit> from UByte
2021-03-11 22:40:47,327 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:40:47,328 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-11 22:40:47,329 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:40:47,330 [main:106] - GETTING Function0<Unit> from Float
2021-03-11 22:40:47,360 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:40:47,361 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:40:47,362 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:40:47,363 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 22:40:47,364 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:40:47,365 [main:106] - GETTING Function0<Unit> from UShort
2021-03-11 22:40:47,388 [main:106] - GETTING Function0<Unit> from UShort
2021-03-11 22:40:47,389 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:40:47,390 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 22:40:47,391 [main:106] - GETTING Function0<Unit> from LongProgression
2021-03-11 22:40:47,392 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:40:47,392 [main:114] - replacement of prope8 of type Function0<Unit> is { require(false, { "xtngt"})}
2021-03-11 22:40:47,560 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 22:40:47,561 [main:66] - Compilation checking started
2021-03-11 22:40:48,063 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val prope3 = v?.fu12()
    if (prope3 == null) return "null"
    return prope3
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12() ?: "null"
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu15(it)
    }

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            { require(false, { "xtngt"})}()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:40:48,065 [main:107] - replacing (v?.fu12() ?: "null", String)
2021-03-11 22:40:48,065 [main:50] - replacing v?.fu12() ?: "null" String
2021-03-11 22:40:48,065 [main:54] - Getting value of type String
2021-03-11 22:40:48,251 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:40:48,255 [main:58] - GENERATED VALUE OF TYPE String = "phgtc"
2021-03-11 22:40:48,255 [main:61] - GENERATED IS CALL =false
2021-03-11 22:40:49,065 [main:67] - randomType = Function1<Collection<ULong>, UShort>
2021-03-11 22:40:49,065 [main:106] - GETTING String from String
2021-03-11 22:40:49,083 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cf778a9]]
2021-03-11 22:40:49,083 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cf778a9]
2021-03-11 22:40:49,251 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 22:40:49,458 [main:43] - GENERATING CALL OF fun <T> listOf(element: Int): Iterable<Int> = TODO()
2021-03-11 22:40:49,462 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(element: Int): Iterable<Int> = TODO()
2021-03-11 22:40:49,639 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:40:49,642 [main:95] - GENERATED = listOf<Int>(1111121029)
2021-03-11 22:40:49,643 [main:117] - GENERATED CALL = (fu3("emofm")).slice(listOf<Int>(1111121029))
2021-03-11 22:40:49,643 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]]
2021-03-11 22:40:49,643 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386]
2021-03-11 22:40:49,812 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:40:49,816 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:40:49,816 [main:117] - GENERATED CALL = (fu3("emofm")).get(-2010333582).uppercase()
2021-03-11 22:40:49,816 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2beed03b]]
2021-03-11 22:40:49,816 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2beed03b]
2021-03-11 22:40:49,816 [main:117] - GENERATED CALL = (fu3("emofm")).trimStart()
2021-03-11 22:40:49,816 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2571098d]]
2021-03-11 22:40:49,816 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2571098d]
2021-03-11 22:40:49,985 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:40:49,991 [main:117] - GENERATED CALL = (fu3("emofm")).removeSurrounding("bblfd")
2021-03-11 22:40:49,991 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39efa66a]]
2021-03-11 22:40:49,991 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39efa66a]
2021-03-11 22:40:50,164 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 22:40:50,167 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:40:50,171 [main:117] - GENERATED CALL = (fu3("emofm")).filterIndexed({a: Int, b: Char -> true})
2021-03-11 22:40:50,171 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1459daba]]
2021-03-11 22:40:50,171 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1459daba]
2021-03-11 22:40:50,171 [main:117] - GENERATED CALL = (fu3("emofm")).replaceIndent(fu3("nostart"))
2021-03-11 22:40:50,171 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@147d069b]]
2021-03-11 22:40:50,171 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@147d069b]
2021-03-11 22:40:50,340 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:40:50,346 [main:117] - GENERATED CALL = (fu3("emofm")).removePrefix(StringBuilder())
2021-03-11 22:40:50,346 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ce8be6a]]
2021-03-11 22:40:50,346 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9]
2021-03-11 22:40:50,519 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:40:50,523 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ce8be6a]
2021-03-11 22:40:50,523 [main:117] - GENERATED CALL = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
2021-03-11 22:40:50,523 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37d64f34]]
2021-03-11 22:40:50,523 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37d64f34]
2021-03-11 22:40:50,693 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:40:50,871 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:40:50,875 [main:117] - GENERATED CALL = (fu3("emofm")).commonPrefixWith("vdfuf", true)
2021-03-11 22:40:50,875 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f993d68]]
2021-03-11 22:40:50,875 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f993d68]
2021-03-11 22:40:50,876 [main:117] - GENERATED CALL = (fu3("emofm")).toUpperCase()
2021-03-11 22:40:50,876 [main:114] - replacement of v?.fu12() ?: "null" of type String is (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
2021-03-11 22:40:51,046 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:40:51,046 [main:66] - Compilation checking started
2021-03-11 22:40:51,787 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val prope3 = v?.fu12()
    if (prope3 == null) return "null"
    return prope3
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu15(it)
    }

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:40:51,789 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 22:40:51,789 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 22:40:51,790 [main:54] - Getting value of type Function0<Unit>
2021-03-11 22:40:51,968 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:40:51,972 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:40:52,152 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:40:52,156 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:40:52,536 [main:302] - generating value of type = Any false depth = 4
2021-03-11 22:40:52,537 [main:95] - GENERATED = println("jqkpk")
2021-03-11 22:40:52,537 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("jqkpk")}
2021-03-11 22:40:52,537 [main:61] - GENERATED IS CALL =false
2021-03-11 22:40:52,551 [main:67] - randomType = Kla5
2021-03-11 22:40:52,723 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 22:40:52,727 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 22:40:52,740 [main:78] - Generated call from random type = (Kla5()).prope8
2021-03-11 22:40:52,740 [main:114] - replacement of prope8 of type Function0<Unit> is (Kla5()).prope8
2021-03-11 22:40:52,914 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:40:52,914 [main:66] - Compilation checking started
2021-03-11 22:40:53,661 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val prope3 = v?.fu12()
    if (prope3 == null) return "null"
    return prope3
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu15(it)
    }

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:40:53,662 [main:107] - replacing (false, Boolean)
2021-03-11 22:40:53,663 [main:50] - replacing false Boolean
2021-03-11 22:40:53,663 [main:54] - Getting value of type Boolean
2021-03-11 22:40:53,844 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:40:53,848 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 22:40:53,848 [main:61] - GENERATED IS CALL =false
2021-03-11 22:40:54,048 [main:67] - randomType = ULong
2021-03-11 22:40:54,225 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 22:40:54,269 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@2a032da2]
2021-03-11 22:40:54,447 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:40:54,447 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6448989]
2021-03-11 22:40:54,447 [main:78] - Generated call from random type = (3794726326831964271.toULong()).equals("nwygk").not()
2021-03-11 22:40:54,448 [main:106] - GETTING Boolean from String
2021-03-11 22:40:54,466 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a75e27b]]
2021-03-11 22:40:54,466 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386]
2021-03-11 22:40:54,467 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a75e27b]
2021-03-11 22:40:54,467 [main:117] - GENERATED CALL = (fu4("wgvqu")).get((intProgression).endInclusive).isISOControl()
2021-03-11 22:40:54,467 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@be02112]]
2021-03-11 22:40:54,467 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9]
2021-03-11 22:40:54,467 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@be02112]
2021-03-11 22:40:54,640 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:40:54,644 [main:117] - GENERATED CALL = (fu4("wgvqu")).subSequence(((intProgression).endInclusive), (2)).endsWith((charProgression step 44179653).first, true)
2021-03-11 22:40:54,644 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c34387b]]
2021-03-11 22:40:54,644 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386]
2021-03-11 22:40:54,813 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:40:54,816 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c34387b]
2021-03-11 22:40:54,816 [main:117] - GENERATED CALL = (fu4("wgvqu")).get(-1821988927).isSurrogate()
2021-03-11 22:40:54,817 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51911ca8]]
2021-03-11 22:40:54,817 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9]
2021-03-11 22:40:54,817 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51911ca8]
2021-03-11 22:40:54,817 [main:117] - GENERATED CALL = (fu4("wgvqu")).subSequence((2), (charProgression step 1).step).hasSurrogatePairAt((charProgression step 1).step)
2021-03-11 22:40:54,817 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@549b26ea], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13a5d745]]
2021-03-11 22:40:54,817 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@549b26ea]
2021-03-11 22:40:54,986 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:40:54,987 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13a5d745]
2021-03-11 22:40:55,157 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:40:55,161 [main:117] - GENERATED CALL = (fu4("wgvqu")).equals("vjgob").and(true)
2021-03-11 22:40:55,161 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e31cf10]]
2021-03-11 22:40:55,161 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e31cf10]
2021-03-11 22:40:55,338 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:40:55,341 [main:117] - GENERATED CALL = (fu4("wgvqu")).contains((2).toChar(), true)
2021-03-11 22:40:55,342 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11770046]]
2021-03-11 22:40:55,342 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11770046]
2021-03-11 22:40:55,513 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:40:55,689 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:40:55,862 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:40:55,865 [main:117] - GENERATED CALL = (fu4("wgvqu")).regionMatches(((intProgression).endInclusive), "skirv", 1180265353, ((intProgression).endInclusive), false)
2021-03-11 22:40:55,866 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3add94b7]]
2021-03-11 22:40:55,866 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3add94b7]
2021-03-11 22:40:55,866 [main:117] - GENERATED CALL = (fu4("wgvqu")).isNotBlank()
2021-03-11 22:40:55,866 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b15745b]]
2021-03-11 22:40:55,866 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9]
2021-03-11 22:40:56,035 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:40:56,039 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b15745b]
2021-03-11 22:40:56,039 [main:117] - GENERATED CALL = (fu4("wgvqu")).subSequence(733011130, ((intProgression).endInclusive).compareTo(21899)).isEmpty()
2021-03-11 22:40:56,039 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@281d6f49]]
2021-03-11 22:40:56,039 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@281d6f49]
2021-03-11 22:40:56,209 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:40:56,213 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:40:56,217 [main:117] - GENERATED CALL = (fu4("wgvqu")).all({a: Char -> true})
2021-03-11 22:40:56,217 [main:114] - replacement of false of type Boolean is (fu4("wgvqu")).regionMatches(((intProgression).endInclusive), "skirv", 1180265353, ((intProgression).endInclusive), false)
2021-03-11 22:40:56,386 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:40:56,386 [main:66] - Compilation checking started
2021-03-11 22:40:56,933 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val prope3 = v?.fu12()
    if (prope3 == null) return "null"
    return prope3
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu15(it)
    }

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = (fu4("wgvqu")).regionMatches(((intProgression).endInclusive), "skirv", 1180265353, ((intProgression).endInclusive), false)

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:40:56,935 [main:107] - replacing (isSuccess, Boolean)
2021-03-11 22:40:56,937 [main:50] - replacing isSuccess Boolean
2021-03-11 22:40:56,937 [main:54] - Getting value of type Boolean
2021-03-11 22:40:57,115 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:40:57,119 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 22:40:57,119 [main:61] - GENERATED IS CALL =false
2021-03-11 22:40:57,337 [main:67] - randomType = Kla3<UByte>
2021-03-11 22:40:57,511 [main:302] - generating value of type = Kla3<UByte> false depth = 0
2021-03-11 22:40:57,514 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 22:40:58,283 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 22:40:58,287 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}
2021-03-11 22:40:58,301 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@6b19c78d]
2021-03-11 22:40:58,473 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:40:58,474 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2f9f9876]
2021-03-11 22:40:58,646 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:40:58,650 [main:78] - Generated call from random type = (Kla6).equals("gbraj").or(true)
2021-03-11 22:40:58,650 [main:106] - GETTING Boolean from UByte
2021-03-11 22:40:58,673 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@e3babe2], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@a6c816a]]
2021-03-11 22:40:58,674 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@e3babe2]
2021-03-11 22:40:58,674 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@a6c816a]
2021-03-11 22:40:58,674 [main:117] - GENERATED CALL = (9.toUByte()).toDouble().isNaN()
2021-03-11 22:40:58,674 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5e9f55b1], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@75ba0974]]
2021-03-11 22:40:58,674 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5e9f55b1]
2021-03-11 22:40:58,845 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:40:58,849 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@75ba0974]
2021-03-11 22:40:58,849 [main:117] - GENERATED CALL = (9.toUByte()).rangeTo(42.toUByte()).isEmpty()
2021-03-11 22:40:58,849 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@420dd14b], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2e681871]]
2021-03-11 22:40:58,849 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@420dd14b]
2021-03-11 22:40:58,849 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2e681871]
2021-03-11 22:40:58,849 [main:117] - GENERATED CALL = (9.toUByte()).toFloat().isNaN()
2021-03-11 22:40:58,849 [main:113] - Case = [@kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@314f9652], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37d4440a]]
2021-03-11 22:40:58,849 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@314f9652]
2021-03-11 22:40:59,020 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:40:59,024 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37d4440a]
2021-03-11 22:40:59,195 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:40:59,196 [main:117] - GENERATED CALL = (9.toUByte()).compareTo(105.toUByte()).equals("evbmz")
2021-03-11 22:40:59,196 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5ce5ec01], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13a5d745]]
2021-03-11 22:40:59,196 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5ce5ec01]
2021-03-11 22:40:59,367 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:40:59,367 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13a5d745]
2021-03-11 22:40:59,539 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:40:59,543 [main:117] - GENERATED CALL = (9.toUByte()).equals("mqbhl").and(true)
2021-03-11 22:40:59,543 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5ce5ec01], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2f9f9876]]
2021-03-11 22:40:59,543 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5ce5ec01]
2021-03-11 22:40:59,714 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:40:59,715 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2f9f9876]
2021-03-11 22:40:59,886 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:40:59,890 [main:117] - GENERATED CALL = (9.toUByte()).equals("fzszr").or(true)
2021-03-11 22:40:59,890 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1cf04cdc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@19583ef8]]
2021-03-11 22:40:59,890 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1cf04cdc]
2021-03-11 22:40:59,890 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@19583ef8]
2021-03-11 22:41:00,061 [main:117] - GENERATED CALL = (9.toUByte()).toShort().equals(null)
2021-03-11 22:41:00,062 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@6d89339], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@16e0d7b]]
2021-03-11 22:41:00,062 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@6d89339]
2021-03-11 22:41:00,062 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@16e0d7b]
2021-03-11 22:41:00,268 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:41:00,268 [main:117] - GENERATED CALL = (9.toUByte()).toLong().equals("kkmlo")
2021-03-11 22:41:00,268 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1e34bf20], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6f2af764]]
2021-03-11 22:41:00,268 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1e34bf20]
2021-03-11 22:41:00,268 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6f2af764]
2021-03-11 22:41:00,445 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:41:00,445 [main:117] - GENERATED CALL = (9.toUByte()).toByte().equals("iqdic")
2021-03-11 22:41:00,445 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@420dd14b], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@49329ce9]]
2021-03-11 22:41:00,445 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@420dd14b]
2021-03-11 22:41:00,445 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@49329ce9]
2021-03-11 22:41:00,445 [main:117] - GENERATED CALL = (9.toUByte()).toFloat().isInfinite()
2021-03-11 22:41:00,445 [main:114] - replacement of isSuccess of type Boolean is (9.toUByte()).equals("fzszr").or(true)
2021-03-11 22:41:00,616 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:41:00,619 [main:107] - replacing (prope3, String)
2021-03-11 22:41:00,620 [main:50] - replacing prope3 String
2021-03-11 22:41:00,620 [main:54] - Getting value of type String
2021-03-11 22:41:00,797 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:41:00,800 [main:58] - GENERATED VALUE OF TYPE String = "eqdxl"
2021-03-11 22:41:00,800 [main:61] - GENERATED IS CALL =false
2021-03-11 22:41:02,242 [main:67] - randomType = Function1<HashMap<Long, Boolean?>, Array<UInt?>?>
2021-03-11 22:41:02,242 [main:106] - GETTING String from String
2021-03-11 22:41:02,260 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d85d280]]
2021-03-11 22:41:02,260 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9]
2021-03-11 22:41:02,260 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d85d280]
2021-03-11 22:41:02,434 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 22:41:02,614 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 22:41:02,620 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 22:41:03,224 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:41:03,228 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 22:41:03,409 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int): Set<RegexOption> = TODO()
2021-03-11 22:41:03,414 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int): Set<RegexOption> = TODO()
2021-03-11 22:41:03,853 [main:302] - generating value of type = Int true depth = 6
2021-03-11 22:41:03,857 [main:95] - GENERATED = LinkedHashSet<RegexOption>(200601676)
2021-03-11 22:41:03,857 [main:95] - GENERATED = Regex("sexsc", LinkedHashSet<RegexOption>(200601676))
2021-03-11 22:41:04,029 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 22:41:04,033 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:41:04,212 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:41:04,217 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:41:04,621 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-11 22:41:04,800 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:41:04,805 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:41:05,192 [main:302] - generating value of type = Int true depth = 7
2021-03-11 22:41:05,196 [main:95] - GENERATED = StringBuilder(-1389553290)
2021-03-11 22:41:05,197 [main:95] - GENERATED = StringBuilder(StringBuilder(-1389553290))
2021-03-11 22:41:05,197 [main:117] - GENERATED CALL = (fu6({ "isrgl"})).subSequence(((intProgression).endInclusive).compareTo(21899), ((intProgression).endInclusive).compareTo(21899)).replace(Regex("sexsc", LinkedHashSet<RegexOption>(200601676)), {a: MatchResult -> StringBuilder(StringBuilder(-1389553290))})
2021-03-11 22:41:05,197 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c16efef]]
2021-03-11 22:41:05,197 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c16efef]
2021-03-11 22:41:05,197 [main:117] - GENERATED CALL = (fu6({ "isrgl"})).trim()
2021-03-11 22:41:05,198 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a81c96f]]
2021-03-11 22:41:05,198 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9]
2021-03-11 22:41:05,370 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:41:05,374 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a81c96f]
2021-03-11 22:41:05,546 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:41:05,721 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:41:05,726 [main:117] - GENERATED CALL = (fu6({ "isrgl"})).subSequence((2), 1561949185).substring(-1211006193, -1358247221)
2021-03-11 22:41:05,726 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a933349]]
2021-03-11 22:41:05,726 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a933349]
2021-03-11 22:41:05,726 [main:117] - GENERATED CALL = (fu6({ "isrgl"})).decapitalize()
2021-03-11 22:41:05,726 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@229ea125]]
2021-03-11 22:41:05,726 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@229ea125]
2021-03-11 22:41:05,908 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:41:05,915 [main:117] - GENERATED CALL = (fu6({ "isrgl"})).replaceRange((2), ((intProgression).endInclusive).compareTo(21899), "oqbgu")
2021-03-11 22:41:05,915 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ce8be6a]]
2021-03-11 22:41:05,915 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ce8be6a]
2021-03-11 22:41:05,915 [main:117] - GENERATED CALL = (fu6({ "isrgl"})).repeat((charProgression step 1).step)
2021-03-11 22:41:05,915 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd08441]]
2021-03-11 22:41:05,915 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cd08441]
2021-03-11 22:41:06,087 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:41:06,091 [main:117] - GENERATED CALL = (fu6({ "isrgl"})).padEnd(1621377876, (2).toChar())
2021-03-11 22:41:06,091 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@77578d9f]]
2021-03-11 22:41:06,091 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@77578d9f]
2021-03-11 22:41:06,262 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:41:06,263 [main:117] - GENERATED CALL = (fu6({ "isrgl"})).plus("auqys")
2021-03-11 22:41:06,263 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39efa66a]]
2021-03-11 22:41:06,263 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39efa66a]
2021-03-11 22:41:06,434 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 22:41:06,438 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:41:06,442 [main:117] - GENERATED CALL = (fu6({ "isrgl"})).filterIndexed({a: Int, b: Char -> false})
2021-03-11 22:41:06,442 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@460361ec]]
2021-03-11 22:41:06,442 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@460361ec]
2021-03-11 22:41:06,442 [main:117] - GENERATED CALL = (fu6({ "isrgl"})).trimIndent()
2021-03-11 22:41:06,442 [main:114] - replacement of prope3 of type String is (fu6({ "isrgl"})).plus("auqys")
2021-03-11 22:41:06,613 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:41:06,613 [main:66] - Compilation checking started
2021-03-11 22:41:07,372 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return "null"
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu15(it)
    }

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:41:07,374 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6, String)
2021-03-11 22:41:07,374 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6 String
2021-03-11 22:41:07,374 [main:54] - Getting value of type String
2021-03-11 22:41:07,586 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:41:07,590 [main:58] - GENERATED VALUE OF TYPE String = "ijygi"
2021-03-11 22:41:07,590 [main:61] - GENERATED IS CALL =false
2021-03-11 22:41:07,604 [main:67] - randomType = Kla1
2021-03-11 22:41:07,780 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 22:41:07,784 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}
2021-03-11 22:41:07,955 [main:194] - Type params = []
2021-03-11 22:41:08,127 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 22:41:08,306 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:41:08,310 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:41:08,703 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 22:41:08,895 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:41:08,900 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:41:09,508 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:41:09,508 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:41:09,522 [main:106] - GETTING String from CharProgression
2021-03-11 22:41:09,534 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]]
2021-03-11 22:41:09,534 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]
2021-03-11 22:41:09,535 [main:117] - GENERATED CALL = (charProgression step 44179653).first.titlecase()
2021-03-11 22:41:09,535 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:41:09,535 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:41:09,535 [main:117] - GENERATED CALL = (charProgression step 44179653).first.plus(fu3("emofm"))
2021-03-11 22:41:09,535 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]]
2021-03-11 22:41:09,535 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]
2021-03-11 22:41:09,535 [main:117] - GENERATED CALL = (charProgression step 44179653).first.lowercase()
2021-03-11 22:41:09,535 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]]
2021-03-11 22:41:09,535 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:41:09,536 [main:117] - GENERATED CALL = (charProgression step 44179653).first.uppercase()
2021-03-11 22:41:09,536 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@940a66], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:41:09,536 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:41:09,712 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:41:09,716 [main:117] - GENERATED CALL = (charProgression step 44179653).step.toString(-379542494)
2021-03-11 22:41:09,716 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:41:09,716 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:41:09,891 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:41:10,072 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:41:10,077 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:41:10,460 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:41:10,464 [main:95] - GENERATED = StringBuilder("zdudm")
2021-03-11 22:41:10,638 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:41:10,816 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:41:10,994 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:41:10,999 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:41:11,435 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:41:11,615 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:41:11,620 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:41:12,003 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-11 22:41:12,010 [main:95] - GENERATED = StringBuilder("cfocn")
2021-03-11 22:41:12,010 [main:95] - GENERATED = StringBuilder(StringBuilder("cfocn"))
2021-03-11 22:41:12,184 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:41:12,363 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:41:12,368 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:41:12,749 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:41:12,753 [main:95] - GENERATED = StringBuilder(785687057)
2021-03-11 22:41:12,926 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:41:12,930 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:41:12,937 [main:117] - GENERATED CALL = (charProgression step 44179653).joinToString(StringBuilder("zdudm"), StringBuilder(), StringBuilder(StringBuilder("cfocn")), (charProgression step 1).step, StringBuilder(785687057), {a: T -> "nniql"})
2021-03-11 22:41:12,937 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6 of type String is "ijygi"
2021-03-11 22:41:13,112 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 22:41:13,113 [main:66] - Compilation checking started
2021-03-11 22:41:13,855 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return "null"
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu15(it)
    }

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:41:13,857 [main:107] - replacing (getOrThrow(), Any?)
2021-03-11 22:41:13,858 [main:50] - replacing getOrThrow() Any?
2021-03-11 22:41:13,858 [main:54] - Getting value of type Any?
2021-03-11 22:41:14,039 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:41:14,039 [main:58] - GENERATED VALUE OF TYPE Any? = "byzsp"
2021-03-11 22:41:14,040 [main:61] - GENERATED IS CALL =false
2021-03-11 22:41:14,055 [main:67] - randomType = Kla0
2021-03-11 22:41:14,232 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 22:41:14,236 [main:112] - generating klass Kla0 text = class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}
2021-03-11 22:41:14,414 [main:194] - Type params = []
2021-03-11 22:41:14,589 [main:302] - generating value of type = String true depth = 2
2021-03-11 22:41:14,598 [main:106] - GETTING Any? from CharRange
2021-03-11 22:41:14,622 [main:106] - GETTING Any? from IntProgression
2021-03-11 22:41:14,634 [main:106] - GETTING Any? from String
2021-03-11 22:41:14,652 [main:106] - GETTING Any? from IntRange
2021-03-11 22:41:14,673 [main:106] - GETTING Any? from Int
2021-03-11 22:41:14,704 [main:106] - GETTING Any? from Int
2021-03-11 22:41:14,705 [main:106] - GETTING Any? from String
2021-03-11 22:41:14,706 [main:106] - GETTING Any? from String
2021-03-11 22:41:14,707 [main:106] - GETTING Any? from LongProgression
2021-03-11 22:41:14,719 [main:106] - GETTING Any? from UByte
2021-03-11 22:41:14,743 [main:106] - GETTING Any? from String
2021-03-11 22:41:14,744 [main:106] - GETTING Any? from IntProgression
2021-03-11 22:41:14,745 [main:106] - GETTING Any? from UShort
2021-03-11 22:41:14,768 [main:106] - GETTING Any? from Char
2021-03-11 22:41:14,785 [main:106] - GETTING Any? from Float
2021-03-11 22:41:14,843 [main:106] - GETTING Any? from String
2021-03-11 22:41:14,844 [main:106] - GETTING Any? from String
2021-03-11 22:41:14,845 [main:106] - GETTING Any? from String
2021-03-11 22:41:14,846 [main:106] - GETTING Any? from Int
2021-03-11 22:41:14,847 [main:106] - GETTING Any? from Char
2021-03-11 22:41:14,848 [main:106] - GETTING Any? from UShort
2021-03-11 22:41:14,849 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:41:14,863 [main:106] - GETTING Any? from String
2021-03-11 22:41:14,864 [main:106] - GETTING Any? from String
2021-03-11 22:41:14,865 [main:106] - GETTING Any? from IntRange
2021-03-11 22:41:14,866 [main:106] - GETTING Any? from Long
2021-03-11 22:41:14,897 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:41:14,898 [main:106] - GETTING Any? from String
2021-03-11 22:41:14,899 [main:106] - GETTING Any? from Int
2021-03-11 22:41:14,900 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:41:14,901 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:41:14,902 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:41:14,903 [main:106] - GETTING Any? from UByte
2021-03-11 22:41:14,904 [main:106] - GETTING Any? from LongRange
2021-03-11 22:41:14,926 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:41:14,927 [main:106] - GETTING Any? from Int
2021-03-11 22:41:14,928 [main:106] - GETTING Any? from LongProgression
2021-03-11 22:41:14,928 [main:114] - replacement of getOrThrow() of type Any? is "byzsp"
2021-03-11 22:41:15,104 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 22:41:15,104 [main:66] - Compilation checking started
2021-03-11 22:41:15,598 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return "null"
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4."byzsp"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu15(it)
    }

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:41:15,600 [main:107] - replacing (prope2.prope8, Function0<Unit>)
2021-03-11 22:41:15,602 [main:50] - replacing prope2.prope8 Function0<Unit>
2021-03-11 22:41:15,602 [main:54] - Getting value of type Function0<Unit>
2021-03-11 22:41:15,783 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:41:15,787 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:41:15,795 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 22:41:15,795 [main:61] - GENERATED IS CALL =false
2021-03-11 22:41:15,811 [main:67] - randomType = Kla1
2021-03-11 22:41:15,992 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 22:41:15,996 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}
2021-03-11 22:41:16,174 [main:194] - Type params = []
2021-03-11 22:41:16,351 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 22:41:16,534 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:41:16,539 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:41:16,940 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 22:41:17,129 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:41:17,134 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:41:17,750 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:41:17,750 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:41:17,766 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:41:17,788 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:41:17,825 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:41:17,842 [main:106] - GETTING Function0<Unit> from UByte
2021-03-11 22:41:17,865 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 22:41:17,887 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:41:17,888 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:41:17,889 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 22:41:17,907 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:41:17,908 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:41:17,909 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:41:17,910 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 22:41:17,911 [main:106] - GETTING Function0<Unit> from LongProgression
2021-03-11 22:41:17,924 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:41:17,925 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 22:41:17,926 [main:106] - GETTING Function0<Unit> from UByte
2021-03-11 22:41:17,927 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:41:17,928 [main:106] - GETTING Function0<Unit> from Long
2021-03-11 22:41:17,958 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:41:17,959 [main:106] - GETTING Function0<Unit> from UShort
2021-03-11 22:41:17,983 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:41:17,984 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:41:17,985 [main:106] - GETTING Function0<Unit> from Float
2021-03-11 22:41:18,014 [main:106] - GETTING Function0<Unit> from LongRange
2021-03-11 22:41:18,036 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-11 22:41:18,048 [main:106] - GETTING Function0<Unit> from CharRange
2021-03-11 22:41:18,071 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:41:18,072 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:41:18,073 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-11 22:41:18,074 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:41:18,075 [main:106] - GETTING Function0<Unit> from LongProgression
2021-03-11 22:41:18,076 [main:106] - GETTING Function0<Unit> from UShort
2021-03-11 22:41:18,077 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:41:18,078 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:41:18,079 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:41:18,080 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:41:18,081 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:41:18,081 [main:114] - replacement of prope2.prope8 of type Function0<Unit> is { println()}
2021-03-11 22:41:18,259 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 22:41:18,259 [main:66] - Compilation checking started
2021-03-11 22:41:18,783 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return "null"
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu15(it)
    }

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{ println()} = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:41:18,785 [main:107] - replacing (method, String)
2021-03-11 22:41:18,786 [main:50] - replacing method String
2021-03-11 22:41:18,786 [main:54] - Getting value of type String
2021-03-11 22:41:18,968 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:41:18,972 [main:58] - GENERATED VALUE OF TYPE String = "onmup"
2021-03-11 22:41:18,972 [main:61] - GENERATED IS CALL =false
2021-03-11 22:41:19,182 [main:67] - randomType = ULong
2021-03-11 22:41:19,362 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 22:41:19,392 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@70458d48]
2021-03-11 22:41:19,392 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:41:19,582 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:41:19,586 [main:78] - Generated call from random type = (3514341152858824195.toULong()).toLong().toString(-420923507)
2021-03-11 22:41:19,587 [main:106] - GETTING String from Char
2021-03-11 22:41:19,607 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7c4a3a84], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76345526]]
2021-03-11 22:41:19,607 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7c4a3a84]
2021-03-11 22:41:19,607 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76345526]
2021-03-11 22:41:19,787 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:41:19,791 [main:117] - GENERATED CALL = ((charProgression step 44179653).first).toShort().toString(258768832)
2021-03-11 22:41:19,791 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]]
2021-03-11 22:41:19,791 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]
2021-03-11 22:41:19,791 [main:117] - GENERATED CALL = ((charProgression step 44179653).first).titlecase()
2021-03-11 22:41:19,791 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5663d72d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@704513f3]]
2021-03-11 22:41:19,791 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5663d72d]
2021-03-11 22:41:19,791 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@704513f3]
2021-03-11 22:41:19,792 [main:117] - GENERATED CALL = ((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))
2021-03-11 22:41:19,792 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]]
2021-03-11 22:41:19,792 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:41:19,792 [main:117] - GENERATED CALL = ((charProgression step 44179653).first).uppercase()
2021-03-11 22:41:19,792 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@27225e83], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]]
2021-03-11 22:41:19,792 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@27225e83]
2021-03-11 22:41:19,792 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:41:19,970 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:41:19,974 [main:117] - GENERATED CALL = ((charProgression step 44179653).first).toLong().toString(787832690)
2021-03-11 22:41:19,975 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]]
2021-03-11 22:41:19,975 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]
2021-03-11 22:41:19,975 [main:117] - GENERATED CALL = ((charProgression step 44179653).first).lowercase()
2021-03-11 22:41:19,975 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:41:19,975 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:41:20,154 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:41:20,158 [main:117] - GENERATED CALL = ((charProgression step 44179653).first).plus("ucpoz")
2021-03-11 22:41:20,158 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4a3a164c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:41:20,158 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4a3a164c]
2021-03-11 22:41:20,337 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:41:20,341 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:41:20,342 [main:117] - GENERATED CALL = ((charProgression step 44179653).first).compareTo('').toString((intProgression).endInclusive)
2021-03-11 22:41:20,342 [main:114] - replacement of method of type String is ((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))
2021-03-11 22:41:20,520 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:41:20,521 [main:66] - Compilation checking started
2021-03-11 22:41:21,291 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return "null"
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu15(it)
    }

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:41:21,293 [main:107] - replacing ({
        fu15(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 22:41:21,293 [main:50] - replacing {
        fu15(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-11 22:41:21,293 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 22:41:21,478 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 22:41:21,483 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:41:21,672 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:41:21,678 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:41:22,345 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:41:22,350 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 22:41:22,355 [main:302] - generating value of type = Any false depth = 5
2021-03-11 22:41:22,355 [main:95] - GENERATED = require(true, { "qdrwh"})
2021-03-11 22:41:22,355 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> require(true, { "qdrwh"})}
2021-03-11 22:41:22,355 [main:61] - GENERATED IS CALL =false
2021-03-11 22:41:22,365 [main:67] - randomType = UShort
2021-03-11 22:41:22,548 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 22:41:22,585 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 22:41:22,603 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from IntProgression
2021-03-11 22:41:22,616 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 22:41:22,617 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:41:22,649 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CharRange
2021-03-11 22:41:22,673 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 22:41:22,674 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from IntProgression
2021-03-11 22:41:22,676 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from LongProgression
2021-03-11 22:41:22,689 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:41:22,690 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Float
2021-03-11 22:41:22,720 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CharProgression
2021-03-11 22:41:22,734 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CharProgression
2021-03-11 22:41:22,736 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from UShort
2021-03-11 22:41:22,760 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from UShort
2021-03-11 22:41:22,761 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 22:41:22,763 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CharProgression
2021-03-11 22:41:22,764 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from IntRange
2021-03-11 22:41:22,787 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 22:41:22,788 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 22:41:22,790 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from UByte
2021-03-11 22:41:22,814 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 22:41:22,816 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from UByte
2021-03-11 22:41:22,817 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 22:41:22,818 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CharProgression
2021-03-11 22:41:22,820 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CharProgression
2021-03-11 22:41:22,821 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Char
2021-03-11 22:41:22,841 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CharProgression
2021-03-11 22:41:22,843 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:41:22,844 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:41:22,846 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Long
2021-03-11 22:41:22,883 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from LongProgression
2021-03-11 22:41:22,885 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 22:41:22,886 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from IntRange
2021-03-11 22:41:22,888 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 22:41:22,889 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:41:22,891 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Char
2021-03-11 22:41:22,892 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from LongRange
2021-03-11 22:41:22,919 [main:114] - replacement of {
        fu15(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> require(true, { "qdrwh"})}
2021-03-11 22:41:23,102 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:41:23,102 [main:66] - Compilation checking started
2021-03-11 22:41:23,927 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return "null"
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:41:23,929 [main:107] - replacing (", got ", String)
2021-03-11 22:41:23,929 [main:50] - replacing ", got " String
2021-03-11 22:41:23,930 [main:54] - Getting value of type String
2021-03-11 22:41:24,119 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:41:24,124 [main:58] - GENERATED VALUE OF TYPE String = "hclid"
2021-03-11 22:41:24,124 [main:61] - GENERATED IS CALL =false
2021-03-11 22:41:24,144 [main:67] - randomType = Kla1
2021-03-11 22:41:24,326 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 22:41:24,331 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}
2021-03-11 22:41:24,511 [main:194] - Type params = []
2021-03-11 22:41:24,692 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 22:41:24,880 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:41:24,886 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:41:25,312 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 22:41:25,506 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:41:25,512 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:41:26,203 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:41:26,203 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:41:26,216 [main:106] - GETTING String from CharProgression
2021-03-11 22:41:26,228 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]]
2021-03-11 22:41:26,228 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]
2021-03-11 22:41:26,228 [main:117] - GENERATED CALL = (charProgression step 2).first.titlecase()
2021-03-11 22:41:26,228 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]]
2021-03-11 22:41:26,228 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]
2021-03-11 22:41:26,229 [main:117] - GENERATED CALL = (charProgression step 2).first.lowercase()
2021-03-11 22:41:26,229 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:41:26,229 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:41:26,412 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:41:26,619 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:41:26,809 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:41:26,999 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:41:27,005 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:41:27,423 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:41:27,432 [main:95] - GENERATED = StringBuilder("ueiiw")
2021-03-11 22:41:27,616 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:41:27,804 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:41:27,809 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:41:28,008 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:41:28,018 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:41:28,426 [main:302] - generating value of type = Int true depth = 4
2021-03-11 22:41:28,431 [main:95] - GENERATED = StringBuilder(1675031419)
2021-03-11 22:41:28,432 [main:117] - GENERATED CALL = (charProgression step 2).joinToString("plmtr", "akhmp", StringBuilder("ueiiw"), (charProgression step 1).step, "eblyy", {a: T -> StringBuilder(1675031419)})
2021-03-11 22:41:28,432 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@940a66], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:41:28,432 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:41:28,432 [main:117] - GENERATED CALL = (charProgression step 2).step.toString((charProgression step 1).step)
2021-03-11 22:41:28,432 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:41:28,432 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:41:28,613 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:41:28,618 [main:117] - GENERATED CALL = (charProgression step 2).first.plus("wbuon")
2021-03-11 22:41:28,619 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]]
2021-03-11 22:41:28,619 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:41:28,619 [main:117] - GENERATED CALL = (charProgression step 2).first.uppercase()
2021-03-11 22:41:28,619 [main:114] - replacement of ", got " of type String is (charProgression step 2).joinToString("plmtr", "akhmp", StringBuilder("ueiiw"), (charProgression step 1).step, "eblyy", {a: T -> StringBuilder(1675031419)})
2021-03-11 22:41:28,799 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:41:28,800 [main:66] - Compilation checking started
2021-03-11 22:41:29,329 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return "null"
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (charProgression step 2).joinToString("plmtr", "akhmp", StringBuilder("ueiiw"), (charProgression step 1).step, "eblyy", {a: T -> StringBuilder(1675031419)}) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:41:29,332 [main:107] - replacing (prope4.getOrThrow(), Ty1)
2021-03-11 22:41:29,333 [main:50] - replacing prope4.getOrThrow() Ty1
2021-03-11 22:41:29,334 [main:54] - Getting value of type Ty1
2021-03-11 22:41:29,551 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 22:41:29,560 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 22:41:29,580 [main:67] - randomType = Kla5
2021-03-11 22:41:29,772 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 22:41:29,777 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 22:41:29,789 [main:106] - GETTING Ty1 from String
2021-03-11 22:41:29,819 [main:106] - GETTING Ty1 from CharRange
2021-03-11 22:41:29,853 [main:106] - GETTING Ty1 from Long
2021-03-11 22:41:29,883 [main:106] - GETTING Ty1 from Int
2021-03-11 22:41:29,914 [main:106] - GETTING Ty1 from Int
2021-03-11 22:41:29,914 [main:106] - GETTING Ty1 from IntRange
2021-03-11 22:41:29,935 [main:106] - GETTING Ty1 from IntProgression
2021-03-11 22:41:29,947 [main:106] - GETTING Ty1 from UShort
2021-03-11 22:41:29,969 [main:106] - GETTING Ty1 from String
2021-03-11 22:41:29,969 [main:106] - GETTING Ty1 from UByte
2021-03-11 22:41:29,992 [main:106] - GETTING Ty1 from String
2021-03-11 22:41:29,993 [main:106] - GETTING Ty1 from Char
2021-03-11 22:41:30,015 [main:106] - GETTING Ty1 from String
2021-03-11 22:41:30,016 [main:106] - GETTING Ty1 from String
2021-03-11 22:41:30,017 [main:106] - GETTING Ty1 from IntRange
2021-03-11 22:41:30,017 [main:106] - GETTING Ty1 from LongRange
2021-03-11 22:41:30,050 [main:106] - GETTING Ty1 from String
2021-03-11 22:41:30,050 [main:106] - GETTING Ty1 from Int
2021-03-11 22:41:30,051 [main:106] - GETTING Ty1 from String
2021-03-11 22:41:30,052 [main:106] - GETTING Ty1 from String
2021-03-11 22:41:30,053 [main:106] - GETTING Ty1 from Char
2021-03-11 22:41:30,053 [main:106] - GETTING Ty1 from CharProgression
2021-03-11 22:41:30,074 [main:106] - GETTING Ty1 from Float
2021-03-11 22:41:30,123 [main:106] - GETTING Ty1 from LongProgression
2021-03-11 22:41:30,141 [main:106] - GETTING Ty1 from UShort
2021-03-11 22:41:30,142 [main:106] - GETTING Ty1 from IntProgression
2021-03-11 22:41:30,143 [main:106] - GETTING Ty1 from CharProgression
2021-03-11 22:41:30,144 [main:106] - GETTING Ty1 from CharProgression
2021-03-11 22:41:30,144 [main:106] - GETTING Ty1 from Int
2021-03-11 22:41:30,145 [main:106] - GETTING Ty1 from CharProgression
2021-03-11 22:41:30,146 [main:106] - GETTING Ty1 from LongProgression
2021-03-11 22:41:30,146 [main:106] - GETTING Ty1 from UByte
2021-03-11 22:41:30,147 [main:106] - GETTING Ty1 from String
2021-03-11 22:41:30,148 [main:106] - GETTING Ty1 from String
2021-03-11 22:41:30,148 [main:106] - GETTING Ty1 from CharProgression
2021-03-11 22:41:30,149 [main:106] - GETTING Ty1 from CharProgression
2021-03-11 22:41:30,150 [main:106] - GETTING Ty1 from Int
2021-03-11 22:41:30,150 [main:111] - Cant find and generate replacement for prope4.getOrThrow() type Ty1
2021-03-11 22:41:30,150 [main:107] - replacing (prope7, Boolean)
2021-03-11 22:41:30,150 [main:50] - replacing prope7 Boolean
2021-03-11 22:41:30,150 [main:54] - Getting value of type Boolean
2021-03-11 22:41:30,350 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:41:30,356 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 22:41:30,356 [main:61] - GENERATED IS CALL =false
2021-03-11 22:41:30,606 [main:67] - randomType = HashSet<Float>
2021-03-11 22:41:30,794 [main:302] - generating value of type = HashSet<Float> false depth = 0
2021-03-11 22:41:30,988 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Float): HashSet<Float> = TODO()
2021-03-11 22:41:30,995 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Float): HashSet<Float> = TODO()
2021-03-11 22:41:31,198 [main:302] - generating value of type = Float true depth = 3
2021-03-11 22:41:31,203 [main:95] - GENERATED = hashSetOf<Float>(0.94441456f)
2021-03-11 22:41:31,301 [main:149] - GENERATING call of type public open fun contains(element: kotlin.Float): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@4f5b69ac]
2021-03-11 22:41:31,301 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13a5d745]
2021-03-11 22:41:31,486 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:41:31,491 [main:78] - Generated call from random type = (hashSetOf<Float>(0.94441456f)).contains((44179653.toUShort())?.toFloat()).and(false)
2021-03-11 22:41:31,492 [main:106] - GETTING Boolean from Int
2021-03-11 22:41:31,522 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35529bcc], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@44d0f9bc]]
2021-03-11 22:41:31,522 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35529bcc]
2021-03-11 22:41:31,706 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:41:31,712 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@44d0f9bc]
2021-03-11 22:41:31,712 [main:117] - GENERATED CALL = (((intProgression).endInclusive)).div(0.6702579337959405).isFinite()
2021-03-11 22:41:31,712 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7d7681be], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@6e41d86]]
2021-03-11 22:41:31,712 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7d7681be]
2021-03-11 22:41:31,901 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:41:31,907 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@6e41d86]
2021-03-11 22:41:32,091 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:41:32,091 [main:117] - GENERATED CALL = (((intProgression).endInclusive)).rangeTo(73).equals("hpuqf")
2021-03-11 22:41:32,091 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35529bcc], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3aa9fb3]]
2021-03-11 22:41:32,091 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35529bcc]
2021-03-11 22:41:32,275 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:41:32,280 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3aa9fb3]
2021-03-11 22:41:32,281 [main:117] - GENERATED CALL = (((intProgression).endInclusive)).div(0.5451804355745888).isInfinite()
2021-03-11 22:41:32,281 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6a60a620], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5a83747]]
2021-03-11 22:41:32,281 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6a60a620]
2021-03-11 22:41:32,281 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5a83747]
2021-03-11 22:41:32,464 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:41:32,464 [main:117] - GENERATED CALL = (((intProgression).endInclusive)).toDouble().equals("xisws")
2021-03-11 22:41:32,464 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37d4440a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43786fd8]]
2021-03-11 22:41:32,464 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37d4440a]
2021-03-11 22:41:32,657 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:41:32,657 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43786fd8]
2021-03-11 22:41:33,006 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:41:33,006 [main:117] - GENERATED CALL = (((intProgression).endInclusive)).equals("kokjg").equals("uwmuv")
2021-03-11 22:41:33,006 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63833438]]
2021-03-11 22:41:33,006 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]
2021-03-11 22:41:33,006 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63833438]
2021-03-11 22:41:33,006 [main:117] - GENERATED CALL = (((intProgression).endInclusive)).toChar().isTitleCase()
2021-03-11 22:41:33,007 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@510362d6]]
2021-03-11 22:41:33,007 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]
2021-03-11 22:41:33,007 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@510362d6]
2021-03-11 22:41:33,007 [main:117] - GENERATED CALL = (((intProgression).endInclusive)).toChar().isDigit()
2021-03-11 22:41:33,007 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a92bf4b]]
2021-03-11 22:41:33,007 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]
2021-03-11 22:41:33,007 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a92bf4b]
2021-03-11 22:41:33,192 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:41:33,414 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:41:33,419 [main:117] - GENERATED CALL = (((intProgression).endInclusive)).toChar().equals('跽', false)
2021-03-11 22:41:33,419 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@cf9073a], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a63d87e]]
2021-03-11 22:41:33,419 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@cf9073a]
2021-03-11 22:41:33,419 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a63d87e]
2021-03-11 22:41:33,420 [main:117] - GENERATED CALL = (((intProgression).endInclusive)).toFloat().isFinite()
2021-03-11 22:41:33,420 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7636f179]]
2021-03-11 22:41:33,420 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]
2021-03-11 22:41:33,420 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7636f179]
2021-03-11 22:41:33,420 [main:117] - GENERATED CALL = (((intProgression).endInclusive)).toChar().isLowSurrogate()
2021-03-11 22:41:33,420 [main:114] - replacement of prope7 of type Boolean is (((intProgression).endInclusive)).div(0.5451804355745888).isInfinite()
2021-03-11 22:41:33,605 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:41:33,605 [main:66] - Compilation checking started
2021-03-11 22:41:34,132 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return "null"
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.(((intProgression).endInclusive)).div(0.5451804355745888).isInfinite() = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:41:34,134 [main:107] - replacing ("null", String)
2021-03-11 22:41:34,135 [main:50] - replacing "null" String
2021-03-11 22:41:34,135 [main:54] - Getting value of type String
2021-03-11 22:41:34,328 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:41:34,333 [main:58] - GENERATED VALUE OF TYPE String = "aaaiz"
2021-03-11 22:41:34,333 [main:61] - GENERATED IS CALL =false
2021-03-11 22:41:34,559 [main:67] - randomType = Int?
2021-03-11 22:41:34,744 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:41:34,785 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]
2021-03-11 22:41:34,785 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:41:34,785 [main:78] - Generated call from random type = (-961975344)?.toChar().uppercase()
2021-03-11 22:41:34,786 [main:106] - GETTING String from IntProgression
2021-03-11 22:41:34,797 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@475cd5ea], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:41:34,797 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:41:34,797 [main:117] - GENERATED CALL = (intProgression step 2).first.toString(((intProgression).endInclusive).compareTo(21899))
2021-03-11 22:41:34,797 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:41:34,797 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:41:34,981 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:41:35,174 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:41:35,366 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:41:35,557 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:41:35,753 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:41:35,758 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:41:35,767 [main:117] - GENERATED CALL = (intProgression step 2).joinToString("lmakk", "lxwtv", "modob", (2), "ncjgc", {a: T -> StringBuilder()})
2021-03-11 22:41:35,767 [main:114] - replacement of "null" of type String is (-961975344)?.toChar().uppercase()
2021-03-11 22:41:35,950 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:41:35,951 [main:66] - Compilation checking started
2021-03-11 22:41:36,740 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:41:36,742 [main:107] - replacing (x, Function1<Ty1, Unit>)
2021-03-11 22:41:36,742 [main:50] - replacing x Function1<Ty1, Unit>
2021-03-11 22:41:36,743 [main:54] - Getting value of type Function1<Ty1, Unit>
2021-03-11 22:41:36,947 [main:302] - generating value of type = Function1<Ty1, Unit> false depth = 0
2021-03-11 22:41:36,952 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:41:37,147 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:41:37,153 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:41:37,591 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:41:37,596 [main:95] - GENERATED = require(false)
2021-03-11 22:41:37,596 [main:58] - GENERATED VALUE OF TYPE Function1<Ty1, Unit> = {a: Ty1 -> require(false)}
2021-03-11 22:41:37,596 [main:61] - GENERATED IS CALL =false
2021-03-11 22:41:38,488 [main:67] - randomType = HashMap<Double?, Boolean?>
2021-03-11 22:41:38,674 [main:302] - generating value of type = HashMap<Double?, Boolean?> false depth = 0
2021-03-11 22:41:38,867 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Double?, Boolean?> = TODO()
2021-03-11 22:41:38,873 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Double?, Boolean?> = TODO()
2021-03-11 22:41:39,069 [main:95] - GENERATED = linkedMapOf<Double?, Boolean?>()
2021-03-11 22:41:39,166 [main:106] - GETTING Function1<Ty1, Unit> from CharProgression
2021-03-11 22:41:39,179 [main:106] - GETTING Function1<Ty1, Unit> from UByte
2021-03-11 22:41:39,202 [main:106] - GETTING Function1<Ty1, Unit> from CharProgression
2021-03-11 22:41:39,204 [main:106] - GETTING Function1<Ty1, Unit> from UShort
2021-03-11 22:41:39,227 [main:106] - GETTING Function1<Ty1, Unit> from UByte
2021-03-11 22:41:39,228 [main:106] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 22:41:39,259 [main:106] - GETTING Function1<Ty1, Unit> from CharProgression
2021-03-11 22:41:39,260 [main:106] - GETTING Function1<Ty1, Unit> from CharProgression
2021-03-11 22:41:39,261 [main:106] - GETTING Function1<Ty1, Unit> from String
2021-03-11 22:41:39,279 [main:106] - GETTING Function1<Ty1, Unit> from LongProgression
2021-03-11 22:41:39,291 [main:106] - GETTING Function1<Ty1, Unit> from IntProgression
2021-03-11 22:41:39,303 [main:106] - GETTING Function1<Ty1, Unit> from String
2021-03-11 22:41:39,304 [main:106] - GETTING Function1<Ty1, Unit> from Float
2021-03-11 22:41:39,333 [main:106] - GETTING Function1<Ty1, Unit> from CharRange
2021-03-11 22:41:39,356 [main:106] - GETTING Function1<Ty1, Unit> from IntRange
2021-03-11 22:41:39,382 [main:106] - GETTING Function1<Ty1, Unit> from String
2021-03-11 22:41:39,383 [main:106] - GETTING Function1<Ty1, Unit> from LongProgression
2021-03-11 22:41:39,385 [main:106] - GETTING Function1<Ty1, Unit> from String
2021-03-11 22:41:39,386 [main:106] - GETTING Function1<Ty1, Unit> from String
2021-03-11 22:41:39,387 [main:106] - GETTING Function1<Ty1, Unit> from String
2021-03-11 22:41:39,388 [main:106] - GETTING Function1<Ty1, Unit> from String
2021-03-11 22:41:39,389 [main:106] - GETTING Function1<Ty1, Unit> from Char
2021-03-11 22:41:39,408 [main:106] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 22:41:39,409 [main:106] - GETTING Function1<Ty1, Unit> from CharProgression
2021-03-11 22:41:39,411 [main:106] - GETTING Function1<Ty1, Unit> from CharProgression
2021-03-11 22:41:39,412 [main:106] - GETTING Function1<Ty1, Unit> from UShort
2021-03-11 22:41:39,413 [main:106] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 22:41:39,414 [main:106] - GETTING Function1<Ty1, Unit> from IntProgression
2021-03-11 22:41:39,415 [main:106] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 22:41:39,416 [main:106] - GETTING Function1<Ty1, Unit> from Long
2021-03-11 22:41:39,447 [main:106] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 22:41:39,448 [main:106] - GETTING Function1<Ty1, Unit> from LongRange
2021-03-11 22:41:39,470 [main:106] - GETTING Function1<Ty1, Unit> from String
2021-03-11 22:41:39,471 [main:106] - GETTING Function1<Ty1, Unit> from Char
2021-03-11 22:41:39,472 [main:106] - GETTING Function1<Ty1, Unit> from String
2021-03-11 22:41:39,473 [main:106] - GETTING Function1<Ty1, Unit> from String
2021-03-11 22:41:39,474 [main:106] - GETTING Function1<Ty1, Unit> from IntRange
2021-03-11 22:41:39,474 [main:114] - replacement of x of type Function1<Ty1, Unit> is {a: Ty1 -> require(false)}
2021-03-11 22:41:39,659 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 22:41:39,659 [main:66] - Compilation checking started
2021-03-11 22:41:40,446 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:41:40,449 [main:107] - replacing (prope6 != i, Boolean)
2021-03-11 22:41:40,449 [main:50] - replacing prope6 != i Boolean
2021-03-11 22:41:40,449 [main:54] - Getting value of type Boolean
2021-03-11 22:41:40,635 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:41:40,640 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 22:41:40,640 [main:61] - GENERATED IS CALL =false
2021-03-11 22:41:41,116 [main:67] - randomType = Kla3<Kla6>
2021-03-11 22:41:41,300 [main:302] - generating value of type = Kla3<Kla6> false depth = 0
2021-03-11 22:41:41,305 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 22:41:41,971 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 22:41:41,977 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}
2021-03-11 22:41:41,997 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@53d946f]
2021-03-11 22:41:42,190 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:41:42,191 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2785b3c8]
2021-03-11 22:41:42,382 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:41:42,388 [main:78] - Generated call from random type = (Kla6).equals("nupsl").xor(true)
2021-03-11 22:41:42,389 [main:106] - GETTING Boolean from LongRange
2021-03-11 22:41:42,414 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@4feb1e4], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2f9f9876]]
2021-03-11 22:41:42,414 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@4feb1e4]
2021-03-11 22:41:42,606 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:41:42,606 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2f9f9876]
2021-03-11 22:41:42,796 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:41:42,801 [main:117] - GENERATED CALL = (longProgression).equals("tjuqy").or(false)
2021-03-11 22:41:42,801 [main:113] - Case = [public open fun iterator(): kotlin.collections.LongIterator defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@724caad2], public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.LongIterator[DeserializedSimpleFunctionDescriptor@8f7faf3]]
2021-03-11 22:41:42,801 [main:149] - GENERATING call of type public open fun iterator(): kotlin.collections.LongIterator defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@724caad2]
2021-03-11 22:41:42,801 [main:149] - GENERATING call of type public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.LongIterator[DeserializedSimpleFunctionDescriptor@8f7faf3]
2021-03-11 22:41:42,801 [main:117] - GENERATED CALL = (longProgression).iterator().hasNext()
2021-03-11 22:41:42,801 [main:113] - Case = [public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@11bfe4f8]]
2021-03-11 22:41:42,801 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@11bfe4f8]
2021-03-11 22:41:42,802 [main:117] - GENERATED CALL = (longProgression).isEmpty()
2021-03-11 22:41:42,802 [main:113] - Case = [public open fun iterator(): kotlin.collections.LongIterator defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@724caad2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.LongIterator[DeserializedSimpleFunctionDescriptor@6dc05680]]
2021-03-11 22:41:42,802 [main:149] - GENERATING call of type public open fun iterator(): kotlin.collections.LongIterator defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@724caad2]
2021-03-11 22:41:42,802 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.LongIterator[DeserializedSimpleFunctionDescriptor@6dc05680]
2021-03-11 22:41:42,996 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:41:42,997 [main:117] - GENERATED CALL = (longProgression).iterator().equals("bjwsk")
2021-03-11 22:41:42,997 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@4feb1e4], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2785b3c8]]
2021-03-11 22:41:42,997 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@4feb1e4]
2021-03-11 22:41:43,201 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:41:43,201 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2785b3c8]
2021-03-11 22:41:43,402 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:41:43,408 [main:117] - GENERATED CALL = (longProgression).equals("gpbda").xor(false)
2021-03-11 22:41:43,408 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d2d08ba]]
2021-03-11 22:41:43,408 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d2d08ba]
2021-03-11 22:41:43,408 [main:117] - GENERATED CALL = (longProgression).any()
2021-03-11 22:41:43,408 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@49ec6671], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@16e0d7b]]
2021-03-11 22:41:43,408 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@16e0d7b]
2021-03-11 22:41:43,597 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:41:43,597 [main:117] - GENERATED CALL = (longProgression).endInclusive.equals("zqobf")
2021-03-11 22:41:43,597 [main:113] - Case = [public open fun contains(value: kotlin.Long): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@5536d4c1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43786fd8]]
2021-03-11 22:41:43,597 [main:149] - GENERATING call of type public open fun contains(value: kotlin.Long): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@5536d4c1]
2021-03-11 22:41:43,791 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:41:43,797 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43786fd8]
2021-03-11 22:41:43,991 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:41:43,991 [main:117] - GENERATED CALL = (longProgression).contains(7333126605288837326).equals("qmqmn")
2021-03-11 22:41:43,991 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.LongRange.contains(element: kotlin.Long?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@54e6635e]]
2021-03-11 22:41:43,991 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.LongRange.contains(element: kotlin.Long?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@54e6635e]
2021-03-11 22:41:44,190 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:41:44,195 [main:117] - GENERATED CALL = (longProgression).contains(5022593836373726910)
2021-03-11 22:41:44,195 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@4feb1e4], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13a5d745]]
2021-03-11 22:41:44,195 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@4feb1e4]
2021-03-11 22:41:44,389 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:41:44,389 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13a5d745]
2021-03-11 22:41:44,582 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:41:44,588 [main:117] - GENERATED CALL = (longProgression).equals("wnluk").and(false)
2021-03-11 22:41:44,588 [main:114] - replacement of prope6 != i of type Boolean is (longProgression).iterator().equals("bjwsk")
2021-03-11 22:41:44,780 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:41:44,781 [main:66] - Compilation checking started
2021-03-11 22:41:45,616 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in 1..numberOfSuspensions) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:41:45,619 [main:107] - replacing (1, Int)
2021-03-11 22:41:45,619 [main:50] - replacing 1 Int
2021-03-11 22:41:45,619 [main:54] - Getting value of type Int
2021-03-11 22:41:45,804 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:41:45,809 [main:58] - GENERATED VALUE OF TYPE Int = 2128342498
2021-03-11 22:41:45,809 [main:61] - GENERATED IS CALL =false
2021-03-11 22:41:45,819 [main:67] - randomType = Long
2021-03-11 22:41:46,003 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:41:46,038 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@9fa9d4c]
2021-03-11 22:41:46,038 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@33ac4ea9]
2021-03-11 22:41:46,228 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:41:46,233 [main:78] - Generated call from random type = (-4506003519712596014).toInt().ushr(415841595)
2021-03-11 22:41:46,234 [main:106] - GETTING Int from CharProgression
2021-03-11 22:41:46,247 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6e1702e0]]
2021-03-11 22:41:46,247 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6e1702e0]
2021-03-11 22:41:46,431 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 22:41:46,436 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:41:46,441 [main:117] - GENERATED CALL = (charProgression step 1).indexOfLast({a: T -> true})
2021-03-11 22:41:46,441 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4a3a164c]]
2021-03-11 22:41:46,441 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4a3a164c]
2021-03-11 22:41:46,442 [main:117] - GENERATED CALL = (charProgression step 1).first.compareTo((charProgression step 44179653).first)
2021-03-11 22:41:46,442 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@16529196]]
2021-03-11 22:41:46,442 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@16529196]
2021-03-11 22:41:46,626 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 22:41:46,631 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:41:46,637 [main:117] - GENERATED CALL = (charProgression step 1).indexOfFirst({a: T -> true})
2021-03-11 22:41:46,637 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@605ca0a8]]
2021-03-11 22:41:46,637 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@605ca0a8]
2021-03-11 22:41:46,826 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:41:46,831 [main:117] - GENERATED CALL = (charProgression step 1).first.minus('晱')
2021-03-11 22:41:46,831 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@940a66], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72e9940f]]
2021-03-11 22:41:46,831 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72e9940f]
2021-03-11 22:41:46,831 [main:117] - GENERATED CALL = (charProgression step 1).step.takeLowestOneBit()
2021-03-11 22:41:46,831 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@940a66], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f8544c7]]
2021-03-11 22:41:46,831 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f8544c7]
2021-03-11 22:41:47,017 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:41:47,022 [main:117] - GENERATED CALL = (charProgression step 1).step.compareTo(59)
2021-03-11 22:41:47,022 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@940a66], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4b7217a2]]
2021-03-11 22:41:47,022 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4b7217a2]
2021-03-11 22:41:47,208 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:41:47,214 [main:117] - GENERATED CALL = (charProgression step 1).step.coerceIn((2), -349339385)
2021-03-11 22:41:47,214 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@940a66], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77feef20]]
2021-03-11 22:41:47,214 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@77feef20]
2021-03-11 22:41:47,214 [main:117] - GENERATED CALL = (charProgression step 1).step.rotateRight((charProgression step 1).step)
2021-03-11 22:41:47,214 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@940a66], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74991745]]
2021-03-11 22:41:47,214 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74991745]
2021-03-11 22:41:47,400 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:41:47,405 [main:117] - GENERATED CALL = (charProgression step 1).step.minus(26)
2021-03-11 22:41:47,406 [main:113] - Case = [@kotlin.jvm.JvmName public fun kotlin.collections.Iterable<kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5fb5faea]]
2021-03-11 22:41:47,406 [main:149] - GENERATING call of type @kotlin.jvm.JvmName public fun kotlin.collections.Iterable<kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5fb5faea]
2021-03-11 22:41:47,406 [main:117] - GENERATED CALL = (charProgression step 1).sum()
2021-03-11 22:41:47,406 [main:114] - replacement of 1 of type Int is (charProgression step 1).first.compareTo((charProgression step 44179653).first)
2021-03-11 22:41:47,591 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:41:47,591 [main:66] - Compilation checking started
2021-03-11 22:41:48,385 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (charProgression step 1).first.compareTo((charProgression step 44179653).first)..numberOfSuspensions) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:41:48,388 [main:107] - replacing (true, Boolean)
2021-03-11 22:41:48,388 [main:50] - replacing true Boolean
2021-03-11 22:41:48,388 [main:54] - Getting value of type Boolean
2021-03-11 22:41:48,576 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:41:48,581 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 22:41:48,581 [main:61] - GENERATED IS CALL =false
2021-03-11 22:41:49,321 [main:67] - randomType = HashMap<Byte, Boolean?>?
2021-03-11 22:41:49,514 [main:302] - generating value of type = HashMap<Byte, Boolean?> false depth = 0
2021-03-11 22:41:49,711 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<Byte, Boolean?> = TODO()
2021-03-11 22:41:49,717 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<Byte, Boolean?> = TODO()
2021-03-11 22:41:49,914 [main:95] - GENERATED = hashMapOf<Byte, Boolean?>()
2021-03-11 22:41:50,009 [main:149] - GENERATING call of type public open fun put(key: kotlin.Byte, value: kotlin.Boolean?): kotlin.Boolean? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@3b12f6fe]
2021-03-11 22:41:50,198 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:41:50,391 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:41:50,396 [main:78] - Generated call from random type = (hashMapOf<Byte, Boolean?>())?.put(52, true)!!
2021-03-11 22:41:50,397 [main:106] - GETTING Boolean from LongProgression
2021-03-11 22:41:50,414 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54a5728b]]
2021-03-11 22:41:50,414 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54a5728b]
2021-03-11 22:41:50,414 [main:117] - GENERATED CALL = ((longProgression step 2L)).none()
2021-03-11 22:41:50,414 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@4feb1e4]]
2021-03-11 22:41:50,414 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@4feb1e4]
2021-03-11 22:41:50,607 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:41:50,607 [main:117] - GENERATED CALL = ((longProgression step 2L)).equals("bpnap")
2021-03-11 22:41:50,607 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@4feb1e4], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6448989]]
2021-03-11 22:41:50,608 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@4feb1e4]
2021-03-11 22:41:50,797 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:41:50,798 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6448989]
2021-03-11 22:41:50,798 [main:117] - GENERATED CALL = ((longProgression step 2L)).equals("hbwog").not()
2021-03-11 22:41:50,798 [main:113] - Case = [public open fun iterator(): kotlin.collections.LongIterator defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@59e3da56], public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.LongIterator[DeserializedSimpleFunctionDescriptor@8f7faf3]]
2021-03-11 22:41:50,798 [main:149] - GENERATING call of type public open fun iterator(): kotlin.collections.LongIterator defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@59e3da56]
2021-03-11 22:41:50,798 [main:149] - GENERATING call of type public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.LongIterator[DeserializedSimpleFunctionDescriptor@8f7faf3]
2021-03-11 22:41:50,798 [main:117] - GENERATED CALL = ((longProgression step 2L)).iterator().hasNext()
2021-03-11 22:41:50,798 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@4feb1e4], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2f9f9876]]
2021-03-11 22:41:50,798 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@4feb1e4]
2021-03-11 22:41:50,991 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:41:50,991 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2f9f9876]
2021-03-11 22:41:51,177 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:41:51,182 [main:117] - GENERATED CALL = ((longProgression step 2L)).equals("urtcs").or(false)
2021-03-11 22:41:51,183 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@4feb1e4], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13a5d745]]
2021-03-11 22:41:51,183 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@4feb1e4]
2021-03-11 22:41:51,368 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:41:51,368 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13a5d745]
2021-03-11 22:41:51,553 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:41:51,558 [main:117] - GENERATED CALL = ((longProgression step 2L)).equals("qfmwl").and(true)
2021-03-11 22:41:51,558 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d2d08ba]]
2021-03-11 22:41:51,558 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d2d08ba]
2021-03-11 22:41:51,558 [main:117] - GENERATED CALL = ((longProgression step 2L)).any()
2021-03-11 22:41:51,558 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@4feb1e4], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2785b3c8]]
2021-03-11 22:41:51,558 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@4feb1e4]
2021-03-11 22:41:51,747 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:41:51,747 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2785b3c8]
2021-03-11 22:41:51,933 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:41:51,938 [main:117] - GENERATED CALL = ((longProgression step 2L)).equals("rretl").xor(true)
2021-03-11 22:41:51,938 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@5f1d3712], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@16e0d7b]]
2021-03-11 22:41:51,938 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@16e0d7b]
2021-03-11 22:41:52,127 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:41:52,127 [main:117] - GENERATED CALL = ((longProgression step 2L)).first.equals("xyjew")
2021-03-11 22:41:52,127 [main:113] - Case = [public operator fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.contains(element: T): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@200f818c]]
2021-03-11 22:41:52,127 [main:149] - GENERATING call of type public operator fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.contains(element: T): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@200f818c]
2021-03-11 22:41:52,321 [main:302] - generating value of type = T false depth = 0
2021-03-11 22:41:52,524 [main:43] - GENERATING CALL OF fun <T> minOf(a: Comparable<T>, b: Comparable<T>): T = TODO()
2021-03-11 22:41:52,530 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Comparable<T>, b: Comparable<T>): T = TODO()
2021-03-11 22:41:52,725 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 22:41:52,734 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 22:41:52,743 [main:95] - GENERATED = minOf<Comparable<T>>(false, 0.16294527f)
2021-03-11 22:41:52,743 [main:117] - GENERATED CALL = ((longProgression step 2L)).contains(minOf<Comparable<T>>(false, 0.16294527f))
2021-03-11 22:41:52,743 [main:114] - replacement of true of type Boolean is ((longProgression step 2L)).equals("hbwog").not()
2021-03-11 22:41:52,952 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:41:52,953 [main:66] - Compilation checking started
2021-03-11 22:41:53,770 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (charProgression step 1).first.compareTo((charProgression step 44179653).first)..numberOfSuspensions) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:41:53,773 [main:107] - replacing (" has state-machine ", String)
2021-03-11 22:41:53,773 [main:50] - replacing " has state-machine " String
2021-03-11 22:41:53,773 [main:54] - Getting value of type String
2021-03-11 22:41:53,968 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:41:53,973 [main:58] - GENERATED VALUE OF TYPE String = "ozrfu"
2021-03-11 22:41:53,973 [main:61] - GENERATED IS CALL =false
2021-03-11 22:41:54,437 [main:67] - randomType = Collection<Kla1?>
2021-03-11 22:41:54,438 [main:106] - GETTING String from CharProgression
2021-03-11 22:41:54,451 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]]
2021-03-11 22:41:54,451 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]
2021-03-11 22:41:54,451 [main:117] - GENERATED CALL = (charProgression step 1).first.titlecase()
2021-03-11 22:41:54,452 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]]
2021-03-11 22:41:54,452 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:41:54,452 [main:117] - GENERATED CALL = (charProgression step 1).first.uppercase()
2021-03-11 22:41:54,452 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@940a66], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:41:54,452 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:41:54,452 [main:117] - GENERATED CALL = (charProgression step 1).step.toString((intProgression).endInclusive)
2021-03-11 22:41:54,452 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:41:54,452 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:41:54,640 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:41:54,835 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:41:54,842 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:41:55,267 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:41:55,463 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:41:55,469 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:41:55,885 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-11 22:41:56,079 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:41:56,085 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:41:56,503 [main:302] - generating value of type = CharSequence false depth = 9
2021-03-11 22:41:56,511 [main:95] - GENERATED = StringBuilder("kjrue")
2021-03-11 22:41:56,511 [main:95] - GENERATED = StringBuilder(StringBuilder("kjrue"))
2021-03-11 22:41:56,511 [main:95] - GENERATED = StringBuilder(StringBuilder(StringBuilder("kjrue")))
2021-03-11 22:41:56,698 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:41:56,926 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:41:56,933 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:41:57,355 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:41:57,363 [main:95] - GENERATED = StringBuilder("dsvsm")
2021-03-11 22:41:57,552 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:41:57,752 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:41:57,949 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:41:57,954 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:41:57,962 [main:117] - GENERATED CALL = (charProgression step 1).joinToString(StringBuilder(StringBuilder(StringBuilder("kjrue"))), StringBuilder("dsvsm"), "qknnf", ((intProgression).endInclusive), StringBuilder(), {a: T -> "nyvwm"})
2021-03-11 22:41:57,962 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:41:57,962 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:41:57,962 [main:117] - GENERATED CALL = (charProgression step 1).first.plus(fu4("wgvqu"))
2021-03-11 22:41:57,963 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]]
2021-03-11 22:41:57,963 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]
2021-03-11 22:41:57,963 [main:117] - GENERATED CALL = (charProgression step 1).first.lowercase()
2021-03-11 22:41:57,963 [main:114] - replacement of " has state-machine " of type String is (charProgression step 1).first.lowercase()
2021-03-11 22:41:58,153 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:41:58,153 [main:66] - Compilation checking started
2021-03-11 22:41:58,930 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error("tail-call optimization miss: method at " + it + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (charProgression step 1).first.compareTo((charProgression step 44179653).first)..numberOfSuspensions) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:41:58,932 [main:107] - replacing (c, SuspendFunction0<Unit>)
2021-03-11 22:41:58,934 [main:50] - replacing c SuspendFunction0<Unit>
2021-03-11 22:41:58,934 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-11 22:41:59,130 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 22:41:59,135 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:41:59,333 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:41:59,340 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:41:59,992 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:41:59,997 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 22:42:00,003 [main:302] - generating value of type = Any false depth = 5
2021-03-11 22:42:00,003 [main:95] - GENERATED = check(true, { "ioxst"})
2021-03-11 22:42:00,003 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { check(true, { "ioxst"})}
2021-03-11 22:42:00,003 [main:61] - GENERATED IS CALL =false
2021-03-11 22:42:01,977 [main:67] - randomType = ArrayDeque<MutableMap<Function2<UInt, Char?, LinkedHashSet<Byte>>, Long?>?>
2021-03-11 22:42:02,166 [main:302] - generating value of type = ArrayDeque<MutableMap<Function2<UInt, Char?, LinkedHashSet<Byte>>, Long?>?> false depth = 0
2021-03-11 22:42:02,365 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<MutableMap<Function2<UInt, Char?, LinkedHashSet<Byte>>, Long?>?>): ArrayDeque<MutableMap<Function2<UInt, Char?, LinkedHashSet<Byte>>, Long?>?> = TODO()
2021-03-11 22:42:02,372 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<MutableMap<Function2<UInt, Char?, LinkedHashSet<Byte>>, Long?>?>): ArrayDeque<MutableMap<Function2<UInt, Char?, LinkedHashSet<Byte>>, Long?>?> = TODO()
2021-03-11 22:42:02,827 [main:302] - generating value of type = Collection<MutableMap<Function2<UInt, Char?, LinkedHashSet<Byte>>, Long?>?> false depth = 3
2021-03-11 22:42:03,030 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): Collection<MutableMap<Function2<UInt, Char?, LkedHashSet<Byte>>, Long?>?> = TODO()
2021-03-11 22:42:03,037 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): Collection<MutableMap<Function2<UInt, Char?, LkedHashSet<Byte>>, Long?>?> = TODO()
2021-03-11 22:42:03,238 [main:95] - GENERATED = hashSetOf<MutableMap<Function2<UInt, Char?, LinkedHashSet<Byte>>, Long?>?>()
2021-03-11 22:42:03,238 [main:95] - GENERATED = ArrayDeque<MutableMap<Function2<UInt, Char?, LinkedHashSet<Byte>>, Long?>?>(hashSetOf<MutableMap<Function2<UInt, Char?, LinkedHashSet<Byte>>, Long?>?>())
2021-03-11 22:42:03,522 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 22:42:03,554 [main:106] - GETTING SuspendFunction0<Unit> from IntRange
2021-03-11 22:42:03,575 [main:106] - GETTING SuspendFunction0<Unit> from CharRange
2021-03-11 22:42:03,598 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 22:42:03,616 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 22:42:03,617 [main:106] - GETTING SuspendFunction0<Unit> from IntProgression
2021-03-11 22:42:03,629 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 22:42:03,647 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 22:42:03,648 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 22:42:03,680 [main:106] - GETTING SuspendFunction0<Unit> from CharProgression
2021-03-11 22:42:03,697 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 22:42:03,698 [main:106] - GETTING SuspendFunction0<Unit> from CharProgression
2021-03-11 22:42:03,699 [main:106] - GETTING SuspendFunction0<Unit> from Float
2021-03-11 22:42:03,743 [main:106] - GETTING SuspendFunction0<Unit> from UByte
2021-03-11 22:42:03,778 [main:106] - GETTING SuspendFunction0<Unit> from LongRange
2021-03-11 22:42:03,810 [main:106] - GETTING SuspendFunction0<Unit> from CharProgression
2021-03-11 22:42:03,811 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 22:42:03,812 [main:106] - GETTING SuspendFunction0<Unit> from LongProgression
2021-03-11 22:42:03,831 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 22:42:03,832 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 22:42:03,833 [main:106] - GETTING SuspendFunction0<Unit> from CharProgression
2021-03-11 22:42:03,834 [main:106] - GETTING SuspendFunction0<Unit> from LongProgression
2021-03-11 22:42:03,835 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 22:42:03,836 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 22:42:03,837 [main:106] - GETTING SuspendFunction0<Unit> from CharProgression
2021-03-11 22:42:03,838 [main:106] - GETTING SuspendFunction0<Unit> from IntRange
2021-03-11 22:42:03,839 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 22:42:03,840 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 22:42:03,841 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 22:42:03,842 [main:106] - GETTING SuspendFunction0<Unit> from UShort
2021-03-11 22:42:03,878 [main:106] - GETTING SuspendFunction0<Unit> from CharProgression
2021-03-11 22:42:03,879 [main:106] - GETTING SuspendFunction0<Unit> from UShort
2021-03-11 22:42:03,880 [main:106] - GETTING SuspendFunction0<Unit> from UByte
2021-03-11 22:42:03,881 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 22:42:03,882 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 22:42:03,883 [main:106] - GETTING SuspendFunction0<Unit> from IntProgression
2021-03-11 22:42:03,884 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 22:42:03,884 [main:114] - replacement of c of type SuspendFunction0<Unit> is { check(true, { "ioxst"})}
2021-03-11 22:42:04,082 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 22:42:04,082 [main:66] - Compilation checking started
2021-03-11 22:42:04,652 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{ check(true, { "ioxst"})}.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error("tail-call optimization miss: method at " + it + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (charProgression step 1).first.compareTo((charProgression step 44179653).first)..numberOfSuspensions) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:42:04,654 [main:107] - replacing (Kla4(), Kla4)
2021-03-11 22:42:04,654 [main:50] - replacing Kla4() Kla4
2021-03-11 22:42:04,655 [main:54] - Getting value of type Kla4
2021-03-11 22:42:04,852 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 22:42:04,857 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error("tail-call optimization miss: method at " + it + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 22:42:04,857 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-11 22:42:04,857 [main:61] - GENERATED IS CALL =true
2021-03-11 22:42:04,868 [main:67] - randomType = Boolean
2021-03-11 22:42:05,058 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:42:05,075 [main:106] - GETTING Kla4 from Int
2021-03-11 22:42:05,107 [main:106] - GETTING Kla4 from LongProgression
2021-03-11 22:42:05,118 [main:106] - GETTING Kla4 from IntRange
2021-03-11 22:42:05,139 [main:106] - GETTING Kla4 from Int
2021-03-11 22:42:05,140 [main:106] - GETTING Kla4 from String
2021-03-11 22:42:05,159 [main:106] - GETTING Kla4 from Long
2021-03-11 22:42:05,195 [main:106] - GETTING Kla4 from Char
2021-03-11 22:42:05,217 [main:106] - GETTING Kla4 from UByte
2021-03-11 22:42:05,241 [main:106] - GETTING Kla4 from UShort
2021-03-11 22:42:05,263 [main:106] - GETTING Kla4 from Int
2021-03-11 22:42:05,264 [main:106] - GETTING Kla4 from IntRange
2021-03-11 22:42:05,264 [main:106] - GETTING Kla4 from String
2021-03-11 22:42:05,265 [main:106] - GETTING Kla4 from Int
2021-03-11 22:42:05,266 [main:106] - GETTING Kla4 from String
2021-03-11 22:42:05,266 [main:106] - GETTING Kla4 from CharProgression
2021-03-11 22:42:05,279 [main:106] - GETTING Kla4 from CharRange
2021-03-11 22:42:05,302 [main:106] - GETTING Kla4 from CharProgression
2021-03-11 22:42:05,303 [main:106] - GETTING Kla4 from CharProgression
2021-03-11 22:42:05,303 [main:106] - GETTING Kla4 from CharProgression
2021-03-11 22:42:05,304 [main:106] - GETTING Kla4 from Char
2021-03-11 22:42:05,304 [main:106] - GETTING Kla4 from LongRange
2021-03-11 22:42:05,326 [main:106] - GETTING Kla4 from IntProgression
2021-03-11 22:42:05,337 [main:106] - GETTING Kla4 from CharProgression
2021-03-11 22:42:05,338 [main:106] - GETTING Kla4 from UByte
2021-03-11 22:42:05,339 [main:106] - GETTING Kla4 from IntProgression
2021-03-11 22:42:05,339 [main:106] - GETTING Kla4 from LongProgression
2021-03-11 22:42:05,340 [main:106] - GETTING Kla4 from UShort
2021-03-11 22:42:05,340 [main:106] - GETTING Kla4 from String
2021-03-11 22:42:05,341 [main:106] - GETTING Kla4 from String
2021-03-11 22:42:05,342 [main:106] - GETTING Kla4 from CharProgression
2021-03-11 22:42:05,342 [main:106] - GETTING Kla4 from String
2021-03-11 22:42:05,343 [main:106] - GETTING Kla4 from Float
2021-03-11 22:42:05,372 [main:106] - GETTING Kla4 from String
2021-03-11 22:42:05,372 [main:106] - GETTING Kla4 from String
2021-03-11 22:42:05,373 [main:106] - GETTING Kla4 from String
2021-03-11 22:42:05,374 [main:106] - GETTING Kla4 from String
2021-03-11 22:42:05,374 [main:106] - GETTING Kla4 from Int
2021-03-11 22:42:05,374 [main:114] - replacement of Kla4() of type Kla4 is Kla4()
2021-03-11 22:42:05,568 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:42:05,571 [main:107] - replacing (0, Int)
2021-03-11 22:42:05,572 [main:50] - replacing 0 Int
2021-03-11 22:42:05,572 [main:54] - Getting value of type Int
2021-03-11 22:42:05,765 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:42:05,771 [main:58] - GENERATED VALUE OF TYPE Int = -684891901
2021-03-11 22:42:05,771 [main:61] - GENERATED IS CALL =false
2021-03-11 22:42:05,793 [main:67] - randomType = Kla1
2021-03-11 22:42:05,991 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 22:42:05,996 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}
2021-03-11 22:42:06,202 [main:194] - Type params = []
2021-03-11 22:42:06,396 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 22:42:06,595 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:42:06,602 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:42:07,044 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 22:42:07,249 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:42:07,256 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:42:07,936 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:42:07,936 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:42:07,948 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@236f2981]
2021-03-11 22:42:08,166 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:42:08,166 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4bec43d4]
2021-03-11 22:42:08,357 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:42:08,363 [main:78] - Generated call from random type = (Kla1()).equals("cdkzz").compareTo(true)
2021-03-11 22:42:08,363 [main:106] - GETTING Int from Int
2021-03-11 22:42:08,394 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d236b95], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75c1bb3d]]
2021-03-11 22:42:08,394 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d236b95]
2021-03-11 22:42:08,394 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75c1bb3d]
2021-03-11 22:42:08,585 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:42:08,591 [main:117] - GENERATED CALL = (((intProgression).endInclusive).compareTo(21899)).compareTo(((intProgression).endInclusive).compareTo(21899)).div(-118)
2021-03-11 22:42:08,591 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@9fa9d4c], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@15446137]]
2021-03-11 22:42:08,591 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@9fa9d4c]
2021-03-11 22:42:08,591 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@15446137]
2021-03-11 22:42:08,592 [main:117] - GENERATED CALL = (((intProgression).endInclusive).compareTo(21899)).toInt().coerceAtLeast((intProgression).endInclusive)
2021-03-11 22:42:08,592 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@102310f6], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3bb4ade3]]
2021-03-11 22:42:08,592 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@102310f6]
2021-03-11 22:42:08,592 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3bb4ade3]
2021-03-11 22:42:08,592 [main:117] - GENERATED CALL = (((intProgression).endInclusive).compareTo(21899)).toLong().countOneBits()
2021-03-11 22:42:08,592 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6880f559], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6c10c6b1]]
2021-03-11 22:42:08,592 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6880f559]
2021-03-11 22:42:08,592 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6c10c6b1]
2021-03-11 22:42:08,592 [main:117] - GENERATED CALL = (((intProgression).endInclusive).compareTo(21899)).toByte().unaryPlus()
2021-03-11 22:42:08,592 [main:113] - Case = [public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@444ce7a0]]
2021-03-11 22:42:08,592 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@444ce7a0]
2021-03-11 22:42:08,592 [main:117] - GENERATED CALL = (((intProgression).endInclusive).compareTo(21899)).or((2))
2021-03-11 22:42:08,592 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@9fa9d4c], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74991745]]
2021-03-11 22:42:08,592 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@9fa9d4c]
2021-03-11 22:42:08,593 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74991745]
2021-03-11 22:42:08,784 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:42:08,790 [main:117] - GENERATED CALL = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
2021-03-11 22:42:08,790 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@9fa9d4c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@290a9500]]
2021-03-11 22:42:08,790 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@9fa9d4c]
2021-03-11 22:42:08,790 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@290a9500]
2021-03-11 22:42:08,790 [main:117] - GENERATED CALL = (((intProgression).endInclusive).compareTo(21899)).toInt().countOneBits()
2021-03-11 22:42:08,790 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d236b95], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@73fbe2ce]]
2021-03-11 22:42:08,790 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d236b95]
2021-03-11 22:42:08,790 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@73fbe2ce]
2021-03-11 22:42:08,790 [main:117] - GENERATED CALL = (((intProgression).endInclusive).compareTo(21899)).compareTo((charProgression step 1).step).countLeadingZeroBits()
2021-03-11 22:42:08,791 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ec8aea9], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5e4e51]]
2021-03-11 22:42:08,791 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ec8aea9]
2021-03-11 22:42:08,791 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5e4e51]
2021-03-11 22:42:08,791 [main:117] - GENERATED CALL = (((intProgression).endInclusive).compareTo(21899)).div((44179653.toUShort())?.toFloat()).toBits()
2021-03-11 22:42:08,791 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d236b95], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6178eb74]]
2021-03-11 22:42:08,791 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d236b95]
2021-03-11 22:42:08,791 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6178eb74]
2021-03-11 22:42:08,791 [main:117] - GENERATED CALL = (((intProgression).endInclusive).compareTo(21899)).compareTo((2)).inv()
2021-03-11 22:42:08,791 [main:114] - replacement of 0 of type Int is (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
2021-03-11 22:42:08,982 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:42:08,983 [main:66] - Compilation checking started
2021-03-11 22:42:09,768 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error("tail-call optimization miss: method at " + it + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (charProgression step 1).first.compareTo((charProgression step 44179653).first)..numberOfSuspensions) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:42:09,771 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 22:42:09,771 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 22:42:09,771 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 22:42:09,969 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 22:42:09,978 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 22:42:10,467 [main:67] - randomType = MutableMap<UByte, Kla6>
2021-03-11 22:42:10,469 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:42:10,501 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:42:10,501 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-11 22:42:10,521 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:42:10,538 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:42:10,539 [main:106] - GETTING EmptyCoroutineContext from IntProgression
2021-03-11 22:42:10,550 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:42:10,562 [main:106] - GETTING EmptyCoroutineContext from Float
2021-03-11 22:42:10,590 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:42:10,591 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:42:10,592 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:42:10,592 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:42:10,593 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:42:10,594 [main:106] - GETTING EmptyCoroutineContext from IntRange
2021-03-11 22:42:10,615 [main:106] - GETTING EmptyCoroutineContext from LongProgression
2021-03-11 22:42:10,626 [main:106] - GETTING EmptyCoroutineContext from UShort
2021-03-11 22:42:10,649 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:42:10,650 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:42:10,650 [main:106] - GETTING EmptyCoroutineContext from UShort
2021-03-11 22:42:10,651 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:42:10,651 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:42:10,652 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:42:10,653 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:42:10,653 [main:106] - GETTING EmptyCoroutineContext from LongProgression
2021-03-11 22:42:10,654 [main:106] - GETTING EmptyCoroutineContext from IntRange
2021-03-11 22:42:10,655 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:42:10,655 [main:106] - GETTING EmptyCoroutineContext from CharRange
2021-03-11 22:42:10,679 [main:106] - GETTING EmptyCoroutineContext from UByte
2021-03-11 22:42:10,702 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:42:10,702 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:42:10,703 [main:106] - GETTING EmptyCoroutineContext from LongRange
2021-03-11 22:42:10,724 [main:106] - GETTING EmptyCoroutineContext from UByte
2021-03-11 22:42:10,725 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:42:10,726 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-11 22:42:10,726 [main:106] - GETTING EmptyCoroutineContext from Long
2021-03-11 22:42:10,756 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:42:10,757 [main:106] - GETTING EmptyCoroutineContext from IntProgression
2021-03-11 22:42:10,757 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 22:42:10,757 [main:107] - replacing (prope4, Result<Any?>)
2021-03-11 22:42:10,757 [main:50] - replacing prope4 Result<Any?>
2021-03-11 22:42:10,757 [main:54] - Getting value of type Result<Any?>
2021-03-11 22:42:10,948 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 22:42:11,148 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 22:42:11,155 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 22:42:11,591 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 22:42:11,597 [main:302] - generating value of type = Any false depth = 4
2021-03-11 22:42:11,597 [main:95] - GENERATED = runCatching<Any?>({ "twjhg"})
2021-03-11 22:42:11,597 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "twjhg"})
2021-03-11 22:42:11,597 [main:61] - GENERATED IS CALL =true
2021-03-11 22:42:11,608 [main:67] - randomType = String
2021-03-11 22:42:11,825 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:42:11,849 [main:106] - GETTING Result<Any?> from String
2021-03-11 22:42:11,867 [main:106] - GETTING Result<Any?> from CharProgression
2021-03-11 22:42:11,880 [main:106] - GETTING Result<Any?> from LongRange
2021-03-11 22:42:11,902 [main:106] - GETTING Result<Any?> from Char
2021-03-11 22:42:11,920 [main:106] - GETTING Result<Any?> from String
2021-03-11 22:42:11,922 [main:106] - GETTING Result<Any?> from String
2021-03-11 22:42:11,923 [main:106] - GETTING Result<Any?> from Long
2021-03-11 22:42:11,953 [main:106] - GETTING Result<Any?> from Int
2021-03-11 22:42:11,985 [main:106] - GETTING Result<Any?> from CharRange
2021-03-11 22:42:12,008 [main:106] - GETTING Result<Any?> from CharProgression
2021-03-11 22:42:12,009 [main:106] - GETTING Result<Any?> from IntProgression
2021-03-11 22:42:12,022 [main:106] - GETTING Result<Any?> from String
2021-03-11 22:42:12,023 [main:106] - GETTING Result<Any?> from Float
2021-03-11 22:42:12,054 [main:106] - GETTING Result<Any?> from String
2021-03-11 22:42:12,055 [main:106] - GETTING Result<Any?> from String
2021-03-11 22:42:12,056 [main:106] - GETTING Result<Any?> from IntRange
2021-03-11 22:42:12,078 [main:106] - GETTING Result<Any?> from UByte
2021-03-11 22:42:12,102 [main:106] - GETTING Result<Any?> from String
2021-03-11 22:42:12,103 [main:106] - GETTING Result<Any?> from Int
2021-03-11 22:42:12,104 [main:106] - GETTING Result<Any?> from CharProgression
2021-03-11 22:42:12,105 [main:106] - GETTING Result<Any?> from String
2021-03-11 22:42:12,106 [main:106] - GETTING Result<Any?> from UByte
2021-03-11 22:42:12,108 [main:106] - GETTING Result<Any?> from Int
2021-03-11 22:42:12,109 [main:106] - GETTING Result<Any?> from String
2021-03-11 22:42:12,110 [main:106] - GETTING Result<Any?> from IntProgression
2021-03-11 22:42:12,111 [main:106] - GETTING Result<Any?> from Int
2021-03-11 22:42:12,112 [main:106] - GETTING Result<Any?> from String
2021-03-11 22:42:12,113 [main:106] - GETTING Result<Any?> from CharProgression
2021-03-11 22:42:12,114 [main:106] - GETTING Result<Any?> from IntRange
2021-03-11 22:42:12,116 [main:106] - GETTING Result<Any?> from CharProgression
2021-03-11 22:42:12,117 [main:106] - GETTING Result<Any?> from UShort
2021-03-11 22:42:12,141 [main:106] - GETTING Result<Any?> from Int
2021-03-11 22:42:12,142 [main:106] - GETTING Result<Any?> from CharProgression
2021-03-11 22:42:12,143 [main:106] - GETTING Result<Any?> from Char
2021-03-11 22:42:12,144 [main:106] - GETTING Result<Any?> from LongProgression
2021-03-11 22:42:12,157 [main:106] - GETTING Result<Any?> from UShort
2021-03-11 22:42:12,158 [main:106] - GETTING Result<Any?> from LongProgression
2021-03-11 22:42:12,158 [main:114] - replacement of prope4 of type Result<Any?> is runCatching<Any?>({ "twjhg"})
2021-03-11 22:42:12,348 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:42:12,349 [main:66] - Compilation checking started
2021-03-11 22:42:13,161 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error("tail-call optimization miss: method at " + it + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (charProgression step 1).first.compareTo((charProgression step 44179653).first)..numberOfSuspensions) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:42:13,165 [main:107] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-11 22:42:13,168 [main:50] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-11 22:42:13,168 [main:54] - Getting value of type String
2021-03-11 22:42:13,411 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:42:13,417 [main:58] - GENERATED VALUE OF TYPE String = "ecvkv"
2021-03-11 22:42:13,417 [main:61] - GENERATED IS CALL =false
2021-03-11 22:42:14,414 [main:67] - randomType = Kla3<MutableMap<Char, Kla3<Short>>>
2021-03-11 22:42:14,610 [main:302] - generating value of type = Kla3<MutableMap<Char, Kla3<Short>>> false depth = 0
2021-03-11 22:42:14,615 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 22:42:15,301 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 22:42:15,306 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}
2021-03-11 22:42:15,326 [main:106] - GETTING String from Int
2021-03-11 22:42:15,356 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1dcf7c57], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]]
2021-03-11 22:42:15,356 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1dcf7c57]
2021-03-11 22:42:15,356 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:42:15,357 [main:117] - GENERATED CALL = ((intProgression).endInclusive).div((9.toUByte()).toLong()).toString((charProgression step 1).step)
2021-03-11 22:42:15,357 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:42:15,357 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]
2021-03-11 22:42:15,357 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:42:15,357 [main:117] - GENERATED CALL = ((intProgression).endInclusive).toChar().plus(fu3("start"))
2021-03-11 22:42:15,357 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]]
2021-03-11 22:42:15,357 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]
2021-03-11 22:42:15,357 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]
2021-03-11 22:42:15,357 [main:117] - GENERATED CALL = ((intProgression).endInclusive).toChar().lowercase()
2021-03-11 22:42:15,357 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]]
2021-03-11 22:42:15,358 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]
2021-03-11 22:42:15,358 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:42:15,358 [main:117] - GENERATED CALL = ((intProgression).endInclusive).toChar().uppercase()
2021-03-11 22:42:15,358 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@9fa9d4c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:42:15,358 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@9fa9d4c]
2021-03-11 22:42:15,358 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:42:15,358 [main:117] - GENERATED CALL = ((intProgression).endInclusive).toInt().toString((2))
2021-03-11 22:42:15,358 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6880f559], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@704513f3]]
2021-03-11 22:42:15,358 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6880f559]
2021-03-11 22:42:15,358 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@704513f3]
2021-03-11 22:42:15,358 [main:117] - GENERATED CALL = ((intProgression).endInclusive).toByte().toString((intProgression).endInclusive)
2021-03-11 22:42:15,359 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d236b95], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:42:15,359 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d236b95]
2021-03-11 22:42:15,359 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:42:15,359 [main:117] - GENERATED CALL = ((intProgression).endInclusive).compareTo(((intProgression).endInclusive)).toString(((intProgression).endInclusive))
2021-03-11 22:42:15,359 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@102310f6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]]
2021-03-11 22:42:15,359 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@102310f6]
2021-03-11 22:42:15,359 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:42:15,360 [main:117] - GENERATED CALL = ((intProgression).endInclusive).toLong().toString((2))
2021-03-11 22:42:15,360 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6094f1df], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76345526]]
2021-03-11 22:42:15,360 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6094f1df]
2021-03-11 22:42:15,360 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76345526]
2021-03-11 22:42:15,564 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:42:15,570 [main:117] - GENERATED CALL = ((intProgression).endInclusive).toShort().toString(858418384)
2021-03-11 22:42:15,727 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:42:15,727 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:42:15,728 [main:117] - GENERATED CALL = ((intProgression).endInclusive).toString(((intProgression).endInclusive))
2021-03-11 22:42:15,728 [main:114] - replacement of " is not subtype of CoroutineStackFrame" of type String is "ecvkv"
2021-03-11 22:42:15,955 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 22:42:15,955 [main:66] - Compilation checking started
2021-03-11 22:42:16,812 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error("tail-call optimization miss: method at " + it + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (charProgression step 1).first.compareTo((charProgression step 44179653).first)..numberOfSuspensions) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:42:16,815 [main:107] - replacing ("tail-call optimization miss: method at " + it + (charProgression step 1).first.lowercase(), String)
2021-03-11 22:42:16,815 [main:50] - replacing "tail-call optimization miss: method at " + it + (charProgression step 1).first.lowercase() String
2021-03-11 22:42:16,815 [main:54] - Getting value of type String
2021-03-11 22:42:17,016 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:42:17,022 [main:58] - GENERATED VALUE OF TYPE String = "fhhpa"
2021-03-11 22:42:17,022 [main:61] - GENERATED IS CALL =false
2021-03-11 22:42:17,033 [main:67] - randomType = UShort
2021-03-11 22:42:17,231 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 22:42:17,262 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@1345ed97]
2021-03-11 22:42:17,263 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76345526]
2021-03-11 22:42:17,458 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:42:17,464 [main:78] - Generated call from random type = (10002.toUShort()).toShort().toString(275117463)
2021-03-11 22:42:17,465 [main:106] - GETTING String from CharProgression
2021-03-11 22:42:17,477 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]]
2021-03-11 22:42:17,478 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]
2021-03-11 22:42:17,478 [main:117] - GENERATED CALL = ((charProgression step 2)).first.lowercase()
2021-03-11 22:42:17,478 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]]
2021-03-11 22:42:17,478 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]
2021-03-11 22:42:17,478 [main:117] - GENERATED CALL = ((charProgression step 2)).first.titlecase()
2021-03-11 22:42:17,478 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:42:17,478 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:42:17,674 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:42:17,878 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:42:17,885 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:42:18,322 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:42:18,327 [main:95] - GENERATED = StringBuilder(171659524)
2021-03-11 22:42:18,521 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:42:18,723 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:42:18,730 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:42:19,164 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:42:19,170 [main:95] - GENERATED = StringBuilder(-2070495346)
2021-03-11 22:42:19,363 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:42:19,565 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:42:19,572 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:42:20,039 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:42:20,045 [main:95] - GENERATED = StringBuilder("eglvw")
2021-03-11 22:42:20,241 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:42:20,444 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:42:20,451 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:42:20,889 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:42:21,093 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:42:21,100 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:42:21,549 [main:302] - generating value of type = String true depth = 6
2021-03-11 22:42:21,555 [main:95] - GENERATED = StringBuilder("tsryq")
2021-03-11 22:42:21,555 [main:95] - GENERATED = StringBuilder(StringBuilder("tsryq"))
2021-03-11 22:42:21,750 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:42:21,756 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:42:21,962 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:42:21,969 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:42:22,404 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-11 22:42:22,608 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:42:22,615 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:42:23,057 [main:302] - generating value of type = String true depth = 7
2021-03-11 22:42:23,063 [main:95] - GENERATED = StringBuilder("mhddy")
2021-03-11 22:42:23,063 [main:95] - GENERATED = StringBuilder(StringBuilder("mhddy"))
2021-03-11 22:42:23,064 [main:117] - GENERATED CALL = ((charProgression step 2)).joinToString(StringBuilder(171659524), StringBuilder(-2070495346), StringBuilder("eglvw"), (charProgression step 1).step, StringBuilder(StringBuilder("tsryq")), {a: T -> StringBuilder(StringBuilder("mhddy"))})
2021-03-11 22:42:23,064 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:42:23,064 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:42:23,064 [main:117] - GENERATED CALL = ((charProgression step 2)).first.plus(fu3("emofm"))
2021-03-11 22:42:23,064 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@940a66], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:42:23,064 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:42:23,064 [main:117] - GENERATED CALL = ((charProgression step 2)).step.toString((intProgression).endInclusive)
2021-03-11 22:42:23,064 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]]
2021-03-11 22:42:23,064 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:42:23,065 [main:117] - GENERATED CALL = ((charProgression step 2)).first.uppercase()
2021-03-11 22:42:23,065 [main:114] - replacement of "tail-call optimization miss: method at " + it + (charProgression step 1).first.lowercase() of type String is ((charProgression step 2)).joinToString(StringBuilder(171659524), StringBuilder(-2070495346), StringBuilder("eglvw"), (charProgression step 1).step, StringBuilder(StringBuilder("tsryq")), {a: T -> StringBuilder(StringBuilder("mhddy"))})
2021-03-11 22:42:23,258 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:42:23,259 [main:66] - Compilation checking started
2021-03-11 22:42:23,820 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error(((charProgression step 2)).joinToString(StringBuilder(171659524), StringBuilder(-2070495346), StringBuilder("eglvw"), (charProgression step 1).step, StringBuilder(StringBuilder("tsryq")), {a: T -> StringBuilder(StringBuilder("mhddy"))}) +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (charProgression step 1).first.compareTo((charProgression step 44179653).first)..numberOfSuspensions) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:42:23,822 [main:107] - replacing ("tail-call optimization hit: method " + method + " has no state-machine ", String)
2021-03-11 22:42:23,824 [main:50] - replacing "tail-call optimization hit: method " + method + " has no state-machine " String
2021-03-11 22:42:23,824 [main:54] - Getting value of type String
2021-03-11 22:42:24,048 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:42:24,054 [main:58] - GENERATED VALUE OF TYPE String = "ymrqa"
2021-03-11 22:42:24,054 [main:61] - GENERATED IS CALL =false
2021-03-11 22:42:24,300 [main:67] - randomType = Kla6
2021-03-11 22:42:24,514 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 22:42:24,520 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}
2021-03-11 22:42:24,549 [main:106] - GETTING String from IntProgression
2021-03-11 22:42:24,564 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@475cd5ea], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:42:24,564 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:42:24,564 [main:117] - GENERATED CALL = (intProgression step 2).first.toString((charProgression step 1).step)
2021-03-11 22:42:24,564 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:42:24,564 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:42:24,771 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:42:24,986 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:42:24,993 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:42:25,437 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:42:25,446 [main:95] - GENERATED = StringBuilder("zdznn")
2021-03-11 22:42:25,644 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:42:25,851 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:42:26,057 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:42:26,262 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:42:26,268 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:42:26,276 [main:117] - GENERATED CALL = (intProgression step 2).joinToString(StringBuilder("zdznn"), StringBuilder(), "nizdy", ((intProgression).endInclusive).compareTo(21899), StringBuilder(), {a: T -> "ggezi"})
2021-03-11 22:42:26,276 [main:114] - replacement of "tail-call optimization hit: method " + method + " has no state-machine " of type String is (intProgression step 2).joinToString(StringBuilder("zdznn"), StringBuilder(), "nizdy", ((intProgression).endInclusive).compareTo(21899), StringBuilder(), {a: T -> "ggezi"})
2021-03-11 22:42:26,472 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:42:26,473 [main:66] - Compilation checking started
2021-03-11 22:42:27,030 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error("tail-call optimization miss: method at " + it + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(method) == true } ?: error((intProgression step 2).joinToString(StringBuilder("zdznn"), StringBuilder(), "nizdy", ((intProgression).endInclusive).compareTo(21899), StringBuilder(), {a: T -> "ggezi"}) +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (charProgression step 1).first.compareTo((charProgression step 44179653).first)..numberOfSuspensions) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:42:27,033 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-11 22:42:27,034 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-11 22:42:27,034 [main:54] - Getting value of type Function0<Boolean>
2021-03-11 22:42:27,242 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 22:42:27,247 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:42:27,253 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 22:42:27,253 [main:61] - GENERATED IS CALL =false
2021-03-11 22:42:27,265 [main:67] - randomType = UShort
2021-03-11 22:42:27,465 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 22:42:27,506 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:42:27,524 [main:106] - GETTING Function0<Boolean> from Float
2021-03-11 22:42:27,553 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:42:27,554 [main:106] - GETTING Function0<Boolean> from CharRange
2021-03-11 22:42:27,578 [main:106] - GETTING Function0<Boolean> from Char
2021-03-11 22:42:27,596 [main:106] - GETTING Function0<Boolean> from LongProgression
2021-03-11 22:42:27,609 [main:106] - GETTING Function0<Boolean> from UByte
2021-03-11 22:42:27,641 [main:106] - GETTING Function0<Boolean> from UByte
2021-03-11 22:42:27,642 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 22:42:27,691 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:42:27,692 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 22:42:27,693 [main:106] - GETTING Function0<Boolean> from CharProgression
2021-03-11 22:42:27,707 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 22:42:27,708 [main:106] - GETTING Function0<Boolean> from IntProgression
2021-03-11 22:42:27,720 [main:106] - GETTING Function0<Boolean> from CharProgression
2021-03-11 22:42:27,721 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 22:42:27,722 [main:106] - GETTING Function0<Boolean> from LongProgression
2021-03-11 22:42:27,723 [main:106] - GETTING Function0<Boolean> from LongRange
2021-03-11 22:42:27,745 [main:106] - GETTING Function0<Boolean> from CharProgression
2021-03-11 22:42:27,746 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:42:27,747 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:42:27,748 [main:106] - GETTING Function0<Boolean> from IntRange
2021-03-11 22:42:27,770 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 22:42:27,771 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:42:27,772 [main:106] - GETTING Function0<Boolean> from Char
2021-03-11 22:42:27,773 [main:106] - GETTING Function0<Boolean> from CharProgression
2021-03-11 22:42:27,774 [main:106] - GETTING Function0<Boolean> from CharProgression
2021-03-11 22:42:27,775 [main:106] - GETTING Function0<Boolean> from UShort
2021-03-11 22:42:27,822 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:42:27,823 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:42:27,824 [main:106] - GETTING Function0<Boolean> from CharProgression
2021-03-11 22:42:27,825 [main:106] - GETTING Function0<Boolean> from Long
2021-03-11 22:42:27,856 [main:106] - GETTING Function0<Boolean> from UShort
2021-03-11 22:42:27,857 [main:106] - GETTING Function0<Boolean> from IntProgression
2021-03-11 22:42:27,858 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:42:27,859 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:42:27,860 [main:106] - GETTING Function0<Boolean> from IntRange
2021-03-11 22:42:27,860 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { false}
2021-03-11 22:42:28,058 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:42:28,059 [main:66] - Compilation checking started
2021-03-11 22:42:28,870 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error("tail-call optimization miss: method at " + it + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (charProgression step 1).first.compareTo((charProgression step 44179653).first)..numberOfSuspensions) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:42:28,872 [main:107] - replacing (this.prope4, Any?)
2021-03-11 22:42:28,874 [main:50] - replacing this.prope4 Any?
2021-03-11 22:42:28,874 [main:54] - Getting value of type Any?
2021-03-11 22:42:29,079 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:42:29,080 [main:58] - GENERATED VALUE OF TYPE Any? = "ptkbs"
2021-03-11 22:42:29,080 [main:61] - GENERATED IS CALL =false
2021-03-11 22:42:29,555 [main:67] - randomType = Set<Double>
2021-03-11 22:42:29,556 [main:106] - GETTING Any? from Int
2021-03-11 22:42:29,588 [main:106] - GETTING Any? from Int
2021-03-11 22:42:29,588 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:42:29,601 [main:106] - GETTING Any? from Int
2021-03-11 22:42:29,602 [main:106] - GETTING Any? from IntProgression
2021-03-11 22:42:29,613 [main:106] - GETTING Any? from Char
2021-03-11 22:42:29,631 [main:106] - GETTING Any? from CharRange
2021-03-11 22:42:29,653 [main:106] - GETTING Any? from UByte
2021-03-11 22:42:29,676 [main:106] - GETTING Any? from Char
2021-03-11 22:42:29,676 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:42:29,677 [main:106] - GETTING Any? from String
2021-03-11 22:42:29,694 [main:106] - GETTING Any? from Int
2021-03-11 22:42:29,695 [main:106] - GETTING Any? from Int
2021-03-11 22:42:29,695 [main:106] - GETTING Any? from String
2021-03-11 22:42:29,696 [main:106] - GETTING Any? from LongProgression
2021-03-11 22:42:29,708 [main:106] - GETTING Any? from String
2021-03-11 22:42:29,708 [main:106] - GETTING Any? from String
2021-03-11 22:42:29,709 [main:106] - GETTING Any? from LongProgression
2021-03-11 22:42:29,710 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:42:29,710 [main:106] - GETTING Any? from IntRange
2021-03-11 22:42:29,732 [main:106] - GETTING Any? from UByte
2021-03-11 22:42:29,732 [main:106] - GETTING Any? from String
2021-03-11 22:42:29,733 [main:106] - GETTING Any? from String
2021-03-11 22:42:29,734 [main:106] - GETTING Any? from String
2021-03-11 22:42:29,734 [main:106] - GETTING Any? from String
2021-03-11 22:42:29,735 [main:106] - GETTING Any? from UShort
2021-03-11 22:42:29,758 [main:106] - GETTING Any? from Long
2021-03-11 22:42:29,787 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:42:29,788 [main:106] - GETTING Any? from UShort
2021-03-11 22:42:29,788 [main:106] - GETTING Any? from String
2021-03-11 22:42:29,789 [main:106] - GETTING Any? from IntProgression
2021-03-11 22:42:29,790 [main:106] - GETTING Any? from Float
2021-03-11 22:42:29,818 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:42:29,819 [main:106] - GETTING Any? from IntRange
2021-03-11 22:42:29,820 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:42:29,820 [main:106] - GETTING Any? from LongRange
2021-03-11 22:42:29,841 [main:106] - GETTING Any? from String
2021-03-11 22:42:29,842 [main:114] - replacement of this.prope4 of type Any? is "ptkbs"
2021-03-11 22:42:30,038 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 22:42:30,039 [main:66] - Compilation checking started
2021-03-11 22:42:30,603 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
"ptkbs" = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error("tail-call optimization miss: method at " + it + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (charProgression step 1).first.compareTo((charProgression step 44179653).first)..numberOfSuspensions) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:42:30,606 [main:107] - replacing ("tail-call optimization miss: method at ", String)
2021-03-11 22:42:30,606 [main:50] - replacing "tail-call optimization miss: method at " String
2021-03-11 22:42:30,606 [main:54] - Getting value of type String
2021-03-11 22:42:30,804 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:42:30,810 [main:58] - GENERATED VALUE OF TYPE String = "qsndc"
2021-03-11 22:42:30,810 [main:61] - GENERATED IS CALL =false
2021-03-11 22:42:31,067 [main:67] - randomType = ArrayList<Kla4>
2021-03-11 22:42:31,267 [main:302] - generating value of type = ArrayList<Kla4> false depth = 0
2021-03-11 22:42:31,473 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Kla4> = TODO()
2021-03-11 22:42:31,480 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Kla4> = TODO()
2021-03-11 22:42:31,726 [main:95] - GENERATED = arrayListOf<Kla4>()
2021-03-11 22:42:31,848 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:42:32,051 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:42:32,259 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:42:32,266 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:42:32,708 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:42:32,717 [main:95] - GENERATED = StringBuilder("upeoa")
2021-03-11 22:42:32,915 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:42:33,123 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:42:33,329 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:42:33,534 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:42:33,739 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:42:33,746 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:42:34,191 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:42:34,197 [main:95] - GENERATED = StringBuilder(-1546662705)
2021-03-11 22:42:34,395 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:42:34,400 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:42:34,409 [main:78] - Generated call from random type = (arrayListOf<Kla4>()).joinToString(StringBuilder("upeoa"), StringBuilder(), "gnkbz", -1466442722, StringBuilder(-1546662705), {a: T -> "meeyv"})
2021-03-11 22:42:34,410 [main:106] - GETTING String from CharProgression
2021-03-11 22:42:34,422 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]]
2021-03-11 22:42:34,422 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]
2021-03-11 22:42:34,423 [main:117] - GENERATED CALL = ((charProgression step 1)).first.lowercase()
2021-03-11 22:42:34,423 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@940a66], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:42:34,423 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:42:34,621 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:42:34,627 [main:117] - GENERATED CALL = ((charProgression step 1)).step.toString(-984006505)
2021-03-11 22:42:34,627 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]]
2021-03-11 22:42:34,627 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]
2021-03-11 22:42:34,627 [main:117] - GENERATED CALL = ((charProgression step 1)).first.titlecase()
2021-03-11 22:42:34,627 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]]
2021-03-11 22:42:34,627 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:42:34,627 [main:117] - GENERATED CALL = ((charProgression step 1)).first.uppercase()
2021-03-11 22:42:34,627 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:42:34,627 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:42:34,628 [main:117] - GENERATED CALL = ((charProgression step 1)).first.plus(fu3("nostart"))
2021-03-11 22:42:34,628 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:42:34,628 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:42:34,826 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:42:35,032 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:42:35,240 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:42:35,446 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:42:35,678 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:42:35,685 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:42:36,128 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:42:36,134 [main:95] - GENERATED = StringBuilder(1435269475)
2021-03-11 22:42:36,333 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:42:36,342 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:42:36,354 [main:117] - GENERATED CALL = ((charProgression step 1)).joinToString(StringBuilder(), "pwgea", "dpgkc", (2), StringBuilder(1435269475), {a: T -> "dkudz"})
2021-03-11 22:42:36,354 [main:114] - replacement of "tail-call optimization miss: method at " of type String is ((charProgression step 1)).step.toString(-984006505)
2021-03-11 22:42:36,552 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:42:36,552 [main:66] - Compilation checking started
2021-03-11 22:42:37,367 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error(((charProgression step 1)).step.toString(-984006505) + it + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (charProgression step 1).first.compareTo((charProgression step 44179653).first)..numberOfSuspensions) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:42:37,371 [main:107] - replacing ((charProgression step 1).first.compareTo((charProgression step 44179653).first)..numberOfSuspensions, IntRange)
2021-03-11 22:42:37,372 [main:50] - replacing (charProgression step 1).first.compareTo((charProgression step 44179653).first)..numberOfSuspensions IntRange
2021-03-11 22:42:37,372 [main:54] - Getting value of type IntRange
2021-03-11 22:42:37,588 [main:302] - generating value of type = IntRange false depth = 0
2021-03-11 22:42:37,796 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-11 22:42:37,803 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-11 22:42:38,485 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:42:38,491 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:42:38,496 [main:95] - GENERATED = IntRange(-1451616945, -1379251629)
2021-03-11 22:42:38,496 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(-1451616945, -1379251629)
2021-03-11 22:42:38,496 [main:61] - GENERATED IS CALL =true
2021-03-11 22:42:38,779 [main:67] - randomType = LinkedHashMap<String, Kla1>
2021-03-11 22:42:38,979 [main:302] - generating value of type = LinkedHashMap<String, Kla1> false depth = 0
2021-03-11 22:42:39,206 [main:43] - GENERATING CALL OF fun <V> linkedStringMapOf(pairs: Pair<String, Kla1>): LkedHashMap<Strg, Kla1> = TODO()
2021-03-11 22:42:39,213 [main:61] - WITHOUT TYPE PARAMS = fun <V> linkedStringMapOf(pairs: Pair<String, Kla1>): LkedHashMap<Strg, Kla1> = TODO()
2021-03-11 22:42:39,425 [main:302] - generating value of type = Pair<String, Kla1> false depth = 3
2021-03-11 22:42:39,633 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: String, second: Kla1): Pair<String, Kla1> = TODO()
2021-03-11 22:42:39,640 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: String, second: Kla1): Pair<String, Kla1> = TODO()
2021-03-11 22:42:39,887 [main:302] - generating value of type = String true depth = 6
2021-03-11 22:42:39,893 [main:302] - generating value of type = Kla1 false depth = 6
2021-03-11 22:42:39,899 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}
2021-03-11 22:42:40,102 [main:194] - Type params = []
2021-03-11 22:42:40,302 [main:302] - generating value of type = CoroutineContext false depth = 8
2021-03-11 22:42:40,511 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:42:40,518 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:42:40,982 [main:302] - generating value of type = Key<*> false depth = 11
2021-03-11 22:42:41,200 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:42:41,207 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:42:41,930 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 14
2021-03-11 22:42:42,145 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:42:42,153 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:42:42,864 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:42:42,864 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:42:42,864 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:42:42,864 [main:95] - GENERATED = Pair<String, Kla1>("romzl", Kla1())
2021-03-11 22:42:42,864 [main:95] - GENERATED = linkedStringMapOf<Kla1>(Pair<String, Kla1>("romzl", Kla1()))
2021-03-11 22:42:42,975 [main:78] - Generated call from random type = (linkedStringMapOf<Kla1>(Pair<String, Kla1>("romzl", Kla1()))).values.indices
2021-03-11 22:42:42,975 [main:106] - GETTING IntRange from UByte
2021-03-11 22:42:42,997 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1e34bf20], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1b1b13b3]]
2021-03-11 22:42:42,997 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1e34bf20]
2021-03-11 22:42:42,997 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1b1b13b3]
2021-03-11 22:42:43,199 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:42:43,205 [main:117] - GENERATED CALL = (9.toUByte()).toByte().rangeTo(54)
2021-03-11 22:42:43,205 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1cf04cdc], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6b3ccd93]]
2021-03-11 22:42:43,205 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1cf04cdc]
2021-03-11 22:42:43,205 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6b3ccd93]
2021-03-11 22:42:43,405 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:42:43,411 [main:117] - GENERATED CALL = (9.toUByte()).toShort().rangeTo(-38)
2021-03-11 22:42:43,411 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1cf04cdc], public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5795a136]]
2021-03-11 22:42:43,411 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1cf04cdc]
2021-03-11 22:42:43,412 [main:149] - GENERATING call of type public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5795a136]
2021-03-11 22:42:43,613 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:42:43,648 [main:117] - GENERATED CALL = (9.toUByte()).toShort().until(-30)
2021-03-11 22:42:43,648 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1e34bf20], public infix fun kotlin.Byte.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5900ee88]]
2021-03-11 22:42:43,648 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1e34bf20]
2021-03-11 22:42:43,648 [main:149] - GENERATING call of type public infix fun kotlin.Byte.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5900ee88]
2021-03-11 22:42:43,849 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:42:43,855 [main:117] - GENERATED CALL = (9.toUByte()).toByte().until(4)
2021-03-11 22:42:43,855 [main:113] - Case = [@kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@314f9652], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7d7681be]]
2021-03-11 22:42:43,855 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@314f9652]
2021-03-11 22:42:44,056 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:42:44,062 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7d7681be]
2021-03-11 22:42:44,262 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:42:44,268 [main:117] - GENERATED CALL = (9.toUByte()).compareTo(56.toUByte()).rangeTo(-101)
2021-03-11 22:42:44,268 [main:113] - Case = [@kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@314f9652], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@64ad2ba9]]
2021-03-11 22:42:44,268 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@314f9652]
2021-03-11 22:42:44,470 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:42:44,476 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@64ad2ba9]
2021-03-11 22:42:44,677 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:42:44,683 [main:117] - GENERATED CALL = (9.toUByte()).compareTo(15.toUByte()).until(-76)
2021-03-11 22:42:44,683 [main:114] - replacement of (charProgression step 1).first.compareTo((charProgression step 44179653).first)..numberOfSuspensions of type IntRange is (9.toUByte()).toShort().rangeTo(-38)
2021-03-11 22:42:44,884 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:42:44,884 [main:66] - Compilation checking started
2021-03-11 22:42:45,713 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error(((charProgression step 1)).step.toString(-984006505) + it + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:42:45,716 [main:107] - replacing (0, Int)
2021-03-11 22:42:45,716 [main:50] - replacing 0 Int
2021-03-11 22:42:45,716 [main:54] - Getting value of type Int
2021-03-11 22:42:45,915 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:42:45,921 [main:58] - GENERATED VALUE OF TYPE Int = 1658702966
2021-03-11 22:42:45,921 [main:61] - GENERATED IS CALL =false
2021-03-11 22:42:46,177 [main:67] - randomType = Kla4?
2021-03-11 22:42:46,377 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 22:42:46,382 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error(((charProgression step 1)).step.toString(-984006505) + it + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 22:42:46,388 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@59232593]
2021-03-11 22:42:46,591 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:42:46,591 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4bec43d4]
2021-03-11 22:42:46,792 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:42:46,797 [main:78] - Generated call from random type = (Kla4())?.equals("pasxo").compareTo(false)
2021-03-11 22:42:46,798 [main:106] - GETTING Int from String
2021-03-11 22:42:46,815 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56200a9b], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@e525b5f]]
2021-03-11 22:42:46,816 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56200a9b]
2021-03-11 22:42:47,015 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:42:47,021 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@e525b5f]
2021-03-11 22:42:47,022 [main:117] - GENERATED CALL = (fu5({ "lmriy"})).compareTo("ezjke").shl((2))
2021-03-11 22:42:47,022 [main:113] - Case = [public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ccfaa5]]
2021-03-11 22:42:47,022 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ccfaa5]
2021-03-11 22:42:47,225 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:42:47,230 [main:117] - GENERATED CALL = (fu5({ "lmriy"})).indexOf((2).toChar(), ((intProgression).endInclusive).compareTo(21899), true)
2021-03-11 22:42:47,231 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@178cdf4f], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@29144af1]]
2021-03-11 22:42:47,231 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@29144af1]
2021-03-11 22:42:47,231 [main:117] - GENERATED CALL = (fu5({ "lmriy"})).length.shr(((intProgression).endInclusive).compareTo(21899))
2021-03-11 22:42:47,231 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9], public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7465888d]]
2021-03-11 22:42:47,231 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9]
2021-03-11 22:42:47,431 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:42:47,436 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7465888d]
2021-03-11 22:42:47,636 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:42:47,641 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:42:47,647 [main:117] - GENERATED CALL = (fu5({ "lmriy"})).subSequence(-1622010360, ((intProgression).endInclusive)).indexOfLast({a: Char -> true})
2021-03-11 22:42:47,648 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@178cdf4f]]
2021-03-11 22:42:47,648 [main:117] - GENERATED CALL = (fu5({ "lmriy"})).length
2021-03-11 22:42:47,648 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@178cdf4f], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@24e97319]]
2021-03-11 22:42:47,648 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@24e97319]
2021-03-11 22:42:47,872 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:42:47,878 [main:117] - GENERATED CALL = (fu5({ "lmriy"})).length.coerceAtMost(1454032529)
2021-03-11 22:42:47,878 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@605ca0a8]]
2021-03-11 22:42:47,878 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386]
2021-03-11 22:42:48,077 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:42:48,083 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@605ca0a8]
2021-03-11 22:42:48,083 [main:117] - GENERATED CALL = (fu5({ "lmriy"})).get(2087475474).minus((charProgression step 44179653).first)
2021-03-11 22:42:48,084 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@178cdf4f], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4b7217a2]]
2021-03-11 22:42:48,084 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4b7217a2]
2021-03-11 22:42:48,292 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:42:48,298 [main:117] - GENERATED CALL = (fu5({ "lmriy"})).length.coerceIn((2), -509600568)
2021-03-11 22:42:48,298 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@178cdf4f], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75c1bb3d]]
2021-03-11 22:42:48,298 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75c1bb3d]
2021-03-11 22:42:48,498 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:42:48,505 [main:117] - GENERATED CALL = (fu5({ "lmriy"})).length.div(-51)
2021-03-11 22:42:48,505 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@178cdf4f], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@73fbe2ce]]
2021-03-11 22:42:48,505 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@73fbe2ce]
2021-03-11 22:42:48,505 [main:117] - GENERATED CALL = (fu5({ "lmriy"})).length.countLeadingZeroBits()
2021-03-11 22:42:48,505 [main:114] - replacement of 0 of type Int is (fu5({ "lmriy"})).subSequence(-1622010360, ((intProgression).endInclusive)).indexOfLast({a: Char -> true})
2021-03-11 22:42:48,715 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:42:48,715 [main:66] - Compilation checking started
2021-03-11 22:42:49,284 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return prope4
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error(((charProgression step 1)).step.toString(-984006505) + it + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = (fu5({ "lmriy"})).subSequence(-1622010360, ((intProgression).endInclusive)).indexOfLast({a: Char -> true})
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:42:49,287 [main:107] - replacing (c, Continuation<Unit>)
2021-03-11 22:42:49,287 [main:50] - replacing c Continuation<Unit>
2021-03-11 22:42:49,287 [main:54] - Getting value of type Continuation<Unit>
2021-03-11 22:42:49,489 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 22:42:49,698 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 22:42:49,705 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 22:42:50,412 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 22:42:50,619 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:42:50,626 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:42:51,090 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 22:42:51,304 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:42:51,312 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:42:52,068 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:42:52,068 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:42:52,068 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 22:42:52,068 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 22:42:52,328 [main:67] - randomType = Kla1?
2021-03-11 22:42:52,531 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 22:42:52,537 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}
2021-03-11 22:42:52,736 [main:194] - Type params = []
2021-03-11 22:42:52,936 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 22:42:53,144 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:42:53,151 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:42:53,616 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 22:42:53,831 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:42:53,838 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:42:54,553 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-11 22:42:54,769 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:42:54,777 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:42:55,492 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-11 22:42:55,707 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:42:55,715 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:42:56,492 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 14
2021-03-11 22:42:56,709 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:42:56,716 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:42:57,433 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:42:57,433 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:42:57,433 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:42:57,433 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:42:57,433 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:42:57,452 [main:106] - GETTING Continuation<Unit> from UByte
2021-03-11 22:42:57,475 [main:106] - GETTING Continuation<Unit> from CharProgression
2021-03-11 22:42:57,488 [main:106] - GETTING Continuation<Unit> from CharProgression
2021-03-11 22:42:57,489 [main:106] - GETTING Continuation<Unit> from String
2021-03-11 22:42:57,507 [main:106] - GETTING Continuation<Unit> from IntRange
2021-03-11 22:42:57,528 [main:106] - GETTING Continuation<Unit> from IntProgression
2021-03-11 22:42:57,540 [main:106] - GETTING Continuation<Unit> from LongProgression
2021-03-11 22:42:57,551 [main:106] - GETTING Continuation<Unit> from Float
2021-03-11 22:42:57,580 [main:106] - GETTING Continuation<Unit> from UByte
2021-03-11 22:42:57,581 [main:106] - GETTING Continuation<Unit> from CharProgression
2021-03-11 22:42:57,582 [main:106] - GETTING Continuation<Unit> from IntProgression
2021-03-11 22:42:57,583 [main:106] - GETTING Continuation<Unit> from String
2021-03-11 22:42:57,584 [main:106] - GETTING Continuation<Unit> from CharProgression
2021-03-11 22:42:57,585 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:42:57,617 [main:106] - GETTING Continuation<Unit> from Char
2021-03-11 22:42:57,635 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:42:57,636 [main:106] - GETTING Continuation<Unit> from CharProgression
2021-03-11 22:42:57,637 [main:106] - GETTING Continuation<Unit> from String
2021-03-11 22:42:57,637 [main:106] - GETTING Continuation<Unit> from Char
2021-03-11 22:42:57,638 [main:106] - GETTING Continuation<Unit> from LongRange
2021-03-11 22:42:57,660 [main:106] - GETTING Continuation<Unit> from String
2021-03-11 22:42:57,661 [main:106] - GETTING Continuation<Unit> from IntRange
2021-03-11 22:42:57,662 [main:106] - GETTING Continuation<Unit> from String
2021-03-11 22:42:57,663 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:42:57,664 [main:106] - GETTING Continuation<Unit> from String
2021-03-11 22:42:57,665 [main:106] - GETTING Continuation<Unit> from CharRange
2021-03-11 22:42:57,689 [main:106] - GETTING Continuation<Unit> from String
2021-03-11 22:42:57,690 [main:106] - GETTING Continuation<Unit> from Long
2021-03-11 22:42:57,720 [main:106] - GETTING Continuation<Unit> from LongProgression
2021-03-11 22:42:57,721 [main:106] - GETTING Continuation<Unit> from UShort
2021-03-11 22:42:57,744 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:42:57,745 [main:106] - GETTING Continuation<Unit> from String
2021-03-11 22:42:57,746 [main:106] - GETTING Continuation<Unit> from String
2021-03-11 22:42:57,746 [main:106] - GETTING Continuation<Unit> from UShort
2021-03-11 22:42:57,747 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:42:57,748 [main:106] - GETTING Continuation<Unit> from CharProgression
2021-03-11 22:42:57,749 [main:106] - GETTING Continuation<Unit> from String
2021-03-11 22:42:57,749 [main:111] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-11 22:42:57,749 [main:107] - replacing (prope4, String)
2021-03-11 22:42:57,749 [main:50] - replacing prope4 String
2021-03-11 22:42:57,749 [main:54] - Getting value of type String
2021-03-11 22:42:57,952 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:42:57,958 [main:58] - GENERATED VALUE OF TYPE String = "giruk"
2021-03-11 22:42:57,958 [main:61] - GENERATED IS CALL =false
2021-03-11 22:42:58,485 [main:67] - randomType = Map<Float, HashSet<Char>>
2021-03-11 22:42:58,486 [main:106] - GETTING String from IntProgression
2021-03-11 22:42:58,497 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:42:58,497 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:42:58,697 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:42:58,905 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:42:59,116 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:42:59,327 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:42:59,535 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:42:59,543 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:43:00,018 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:43:00,024 [main:95] - GENERATED = StringBuilder(-1691492865)
2021-03-11 22:43:00,222 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:43:00,228 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:43:00,434 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:43:00,441 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:43:00,890 [main:302] - generating value of type = String true depth = 4
2021-03-11 22:43:00,896 [main:95] - GENERATED = StringBuilder("ouydn")
2021-03-11 22:43:00,897 [main:117] - GENERATED CALL = ((intProgression step 2)).joinToString("fjpch", "hoavu", "sneza", (intProgression).endInclusive, StringBuilder(-1691492865), {a: T -> StringBuilder("ouydn")})
2021-03-11 22:43:00,897 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@475cd5ea], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:43:00,897 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:43:00,897 [main:117] - GENERATED CALL = ((intProgression step 2)).first.toString((2))
2021-03-11 22:43:00,897 [main:114] - replacement of prope4 of type String is "giruk"
2021-03-11 22:43:01,097 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 22:43:01,098 [main:66] - Compilation checking started
2021-03-11 22:43:01,908 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error(((charProgression step 1)).step.toString(-984006505) + it + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:43:01,911 [main:107] - replacing (false, Boolean)
2021-03-11 22:43:01,911 [main:50] - replacing false Boolean
2021-03-11 22:43:01,911 [main:54] - Getting value of type Boolean
2021-03-11 22:43:02,111 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:43:02,117 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 22:43:02,117 [main:61] - GENERATED IS CALL =false
2021-03-11 22:43:02,370 [main:67] - randomType = Kla6
2021-03-11 22:43:02,567 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 22:43:02,573 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}
2021-03-11 22:43:02,591 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla6[DeserializedSimpleFunctionDescriptor@3d17788b]
2021-03-11 22:43:02,789 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:43:02,789 [main:78] - Generated call from random type = (Kla6).equals("tsksh")
2021-03-11 22:43:02,790 [main:106] - GETTING Boolean from IntProgression
2021-03-11 22:43:02,802 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@57d14718], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2785b3c8]]
2021-03-11 22:43:02,802 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@57d14718]
2021-03-11 22:43:03,001 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:43:03,002 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2785b3c8]
2021-03-11 22:43:03,200 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:43:03,206 [main:117] - GENERATED CALL = ((intProgression step 2)).equals("nnbjt").xor(true)
2021-03-11 22:43:03,206 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@57d14718], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13a5d745]]
2021-03-11 22:43:03,206 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@57d14718]
2021-03-11 22:43:03,405 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:43:03,406 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13a5d745]
2021-03-11 22:43:03,609 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:43:03,615 [main:117] - GENERATED CALL = ((intProgression step 2)).equals("mduqw").and(false)
2021-03-11 22:43:03,615 [main:113] - Case = [public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@3b216d41]]
2021-03-11 22:43:03,616 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@3b216d41]
2021-03-11 22:43:03,616 [main:117] - GENERATED CALL = ((intProgression step 2)).isEmpty()
2021-03-11 22:43:03,616 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@57d14718], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43786fd8]]
2021-03-11 22:43:03,616 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@57d14718]
2021-03-11 22:43:03,824 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:43:03,825 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43786fd8]
2021-03-11 22:43:04,041 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:43:04,041 [main:117] - GENERATED CALL = ((intProgression step 2)).equals("ahlxw").equals("eggkq")
2021-03-11 22:43:04,042 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54a5728b]]
2021-03-11 22:43:04,042 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54a5728b]
2021-03-11 22:43:04,042 [main:117] - GENERATED CALL = ((intProgression step 2)).none()
2021-03-11 22:43:04,042 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@387eca32]]
2021-03-11 22:43:04,042 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@387eca32]
2021-03-11 22:43:04,240 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 22:43:04,246 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:43:04,252 [main:117] - GENERATED CALL = ((intProgression step 2)).all({a: T -> true})
2021-03-11 22:43:04,252 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@57d14718], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2f9f9876]]
2021-03-11 22:43:04,252 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@57d14718]
2021-03-11 22:43:04,450 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:43:04,450 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2f9f9876]
2021-03-11 22:43:04,650 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:43:04,656 [main:117] - GENERATED CALL = ((intProgression step 2)).equals("umgra").or(false)
2021-03-11 22:43:04,656 [main:113] - Case = [public operator fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.contains(element: T): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@200f818c]]
2021-03-11 22:43:04,656 [main:149] - GENERATING call of type public operator fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.contains(element: T): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@200f818c]
2021-03-11 22:43:04,853 [main:302] - generating value of type = T false depth = 0
2021-03-11 22:43:05,065 [main:43] - GENERATING CALL OF fun <T> maxOf(a: UShort, b: UShort, c: UShort): T = TODO()
2021-03-11 22:43:05,073 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: UShort, b: UShort, c: UShort): T = TODO()
2021-03-11 22:43:05,291 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 22:43:05,296 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 22:43:05,302 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 22:43:05,308 [main:95] - GENERATED = maxOf<UShort>(26453.toUShort(), 9713.toUShort(), 31963.toUShort())
2021-03-11 22:43:05,308 [main:117] - GENERATED CALL = ((intProgression step 2)).contains(maxOf<UShort>(26453.toUShort(), 9713.toUShort(), 31963.toUShort()))
2021-03-11 22:43:05,308 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@57d14718], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6448989]]
2021-03-11 22:43:05,308 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@57d14718]
2021-03-11 22:43:05,506 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:43:05,507 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6448989]
2021-03-11 22:43:05,507 [main:117] - GENERATED CALL = ((intProgression step 2)).equals("fjqhv").not()
2021-03-11 22:43:05,507 [main:113] - Case = [public open fun iterator(): kotlin.collections.IntIterator defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@69609a77], public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@67698c72]]
2021-03-11 22:43:05,507 [main:149] - GENERATING call of type public open fun iterator(): kotlin.collections.IntIterator defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@69609a77]
2021-03-11 22:43:05,507 [main:149] - GENERATING call of type public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@67698c72]
2021-03-11 22:43:05,507 [main:117] - GENERATED CALL = ((intProgression step 2)).iterator().hasNext()
2021-03-11 22:43:05,507 [main:114] - replacement of false of type Boolean is ((intProgression step 2)).all({a: T -> true})
2021-03-11 22:43:05,705 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:43:05,705 [main:66] - Compilation checking started
2021-03-11 22:43:06,289 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error(((charProgression step 1)).step.toString(-984006505) + it + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = ((intProgression step 2)).all({a: T -> true})

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:43:06,292 [main:107] - replacing (((charProgression step 1)).step.toString(-984006505) + it, String)
2021-03-11 22:43:06,292 [main:50] - replacing ((charProgression step 1)).step.toString(-984006505) + it String
2021-03-11 22:43:06,292 [main:54] - Getting value of type String
2021-03-11 22:43:06,491 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:43:06,497 [main:58] - GENERATED VALUE OF TYPE String = "lpopn"
2021-03-11 22:43:06,497 [main:61] - GENERATED IS CALL =false
2021-03-11 22:43:06,750 [main:67] - randomType = Short?
2021-03-11 22:43:06,949 [main:302] - generating value of type = Short true depth = 0
2021-03-11 22:43:06,987 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3f9f702c]
2021-03-11 22:43:06,987 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@704513f3]
2021-03-11 22:43:06,987 [main:78] - Generated call from random type = (5667)?.toByte().toString((intProgression).endInclusive)
2021-03-11 22:43:06,987 [main:114] - replacement of ((charProgression step 1)).step.toString(-984006505) + it of type String is (5667)?.toByte().toString((intProgression).endInclusive)
2021-03-11 22:43:07,185 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:43:07,186 [main:66] - Compilation checking started
2021-03-11 22:43:08,003 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:43:08,007 [main:107] - replacing (exception, Throwable)
2021-03-11 22:43:08,008 [main:50] - replacing exception Throwable
2021-03-11 22:43:08,008 [main:54] - Getting value of type Throwable
2021-03-11 22:43:08,209 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 22:43:08,441 [main:43] - GENERATING CALL OF fun IllegalStateException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 22:43:08,448 [main:61] - WITHOUT TYPE PARAMS = fun IllegalStateException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 22:43:09,132 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:43:09,137 [main:302] - generating value of type = Throwable false depth = 3
2021-03-11 22:43:09,348 [main:43] - GENERATING CALL OF fun IllegalStateException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 22:43:09,356 [main:61] - WITHOUT TYPE PARAMS = fun IllegalStateException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 22:43:10,046 [main:302] - generating value of type = String true depth = 6
2021-03-11 22:43:10,052 [main:302] - generating value of type = Throwable false depth = 6
2021-03-11 22:43:10,061 [main:95] - GENERATED = IllegalStateException("shlcr", NullPointerException())
2021-03-11 22:43:10,061 [main:95] - GENERATED = IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
2021-03-11 22:43:10,061 [main:58] - GENERATED VALUE OF TYPE Throwable = IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
2021-03-11 22:43:10,061 [main:61] - GENERATED IS CALL =true
2021-03-11 22:43:10,321 [main:67] - randomType = Kla2?
2021-03-11 22:43:10,531 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 22:43:10,537 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 22:43:10,560 [main:106] - GETTING Throwable from Int
2021-03-11 22:43:10,612 [main:106] - GETTING Throwable from UShort
2021-03-11 22:43:10,647 [main:106] - GETTING Throwable from Float
2021-03-11 22:43:10,685 [main:106] - GETTING Throwable from CharProgression
2021-03-11 22:43:10,698 [main:106] - GETTING Throwable from String
2021-03-11 22:43:10,714 [main:106] - GETTING Throwable from String
2021-03-11 22:43:10,715 [main:106] - GETTING Throwable from LongRange
2021-03-11 22:43:10,736 [main:106] - GETTING Throwable from CharProgression
2021-03-11 22:43:10,737 [main:106] - GETTING Throwable from Int
2021-03-11 22:43:10,737 [main:106] - GETTING Throwable from CharRange
2021-03-11 22:43:10,760 [main:106] - GETTING Throwable from Int
2021-03-11 22:43:10,761 [main:106] - GETTING Throwable from String
2021-03-11 22:43:10,762 [main:106] - GETTING Throwable from IntRange
2021-03-11 22:43:10,783 [main:106] - GETTING Throwable from String
2021-03-11 22:43:10,783 [main:106] - GETTING Throwable from IntProgression
2021-03-11 22:43:10,795 [main:106] - GETTING Throwable from Int
2021-03-11 22:43:10,795 [main:106] - GETTING Throwable from UByte
2021-03-11 22:43:10,818 [main:106] - GETTING Throwable from IntRange
2021-03-11 22:43:10,818 [main:106] - GETTING Throwable from CharProgression
2021-03-11 22:43:10,819 [main:106] - GETTING Throwable from Long
2021-03-11 22:43:10,848 [main:106] - GETTING Throwable from IntProgression
2021-03-11 22:43:10,849 [main:106] - GETTING Throwable from UByte
2021-03-11 22:43:10,849 [main:106] - GETTING Throwable from Char
2021-03-11 22:43:10,867 [main:106] - GETTING Throwable from String
2021-03-11 22:43:10,867 [main:106] - GETTING Throwable from CharProgression
2021-03-11 22:43:10,868 [main:106] - GETTING Throwable from String
2021-03-11 22:43:10,869 [main:106] - GETTING Throwable from Int
2021-03-11 22:43:10,869 [main:106] - GETTING Throwable from LongProgression
2021-03-11 22:43:10,881 [main:106] - GETTING Throwable from LongProgression
2021-03-11 22:43:10,882 [main:106] - GETTING Throwable from Char
2021-03-11 22:43:10,882 [main:106] - GETTING Throwable from CharProgression
2021-03-11 22:43:10,883 [main:106] - GETTING Throwable from UShort
2021-03-11 22:43:10,884 [main:106] - GETTING Throwable from String
2021-03-11 22:43:10,884 [main:106] - GETTING Throwable from CharProgression
2021-03-11 22:43:10,885 [main:106] - GETTING Throwable from String
2021-03-11 22:43:10,886 [main:106] - GETTING Throwable from String
2021-03-11 22:43:10,886 [main:106] - GETTING Throwable from String
2021-03-11 22:43:10,886 [main:114] - replacement of exception of type Throwable is IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
2021-03-11 22:43:11,086 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:43:11,087 [main:66] - Compilation checking started
2021-03-11 22:43:11,905 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:43:11,908 [main:107] - replacing (method, String)
2021-03-11 22:43:11,908 [main:50] - replacing method String
2021-03-11 22:43:11,908 [main:54] - Getting value of type String
2021-03-11 22:43:12,112 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:43:12,118 [main:58] - GENERATED VALUE OF TYPE String = "vffuv"
2021-03-11 22:43:12,118 [main:61] - GENERATED IS CALL =false
2021-03-11 22:43:12,141 [main:67] - randomType = Kla0
2021-03-11 22:43:12,341 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 22:43:12,347 [main:112] - generating klass Kla0 text = class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}
2021-03-11 22:43:12,567 [main:194] - Type params = []
2021-03-11 22:43:12,769 [main:302] - generating value of type = String true depth = 2
2021-03-11 22:43:12,782 [main:149] - GENERATING call of type public final suspend fun kotlin.Long.fu12(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@5eb23d35]
2021-03-11 22:43:12,782 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37e22e46]
2021-03-11 22:43:12,783 [main:78] - Generated call from random type = (Kla0("nlfte")).fu12().replaceAfter((charProgression step 44179653).first, fu6({ "isrgl"}), fu6({ "isrgl"}))
2021-03-11 22:43:12,784 [main:106] - GETTING String from CharProgression
2021-03-11 22:43:12,801 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@940a66], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:43:12,801 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:43:12,802 [main:117] - GENERATED CALL = ((charProgression step 2)).step.toString((intProgression).endInclusive)
2021-03-11 22:43:12,802 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:43:12,802 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:43:13,003 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:43:13,009 [main:117] - GENERATED CALL = ((charProgression step 2)).first.plus("hbuoe")
2021-03-11 22:43:13,010 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]]
2021-03-11 22:43:13,010 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]
2021-03-11 22:43:13,010 [main:117] - GENERATED CALL = ((charProgression step 2)).first.lowercase()
2021-03-11 22:43:13,010 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:43:13,010 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:43:13,213 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:43:13,424 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:43:13,431 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:43:13,880 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:43:13,886 [main:95] - GENERATED = StringBuilder("egpmx")
2021-03-11 22:43:14,086 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:43:14,305 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:43:14,520 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:43:14,733 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:43:14,739 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:43:14,948 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:43:14,956 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:43:15,409 [main:302] - generating value of type = String true depth = 4
2021-03-11 22:43:15,415 [main:95] - GENERATED = StringBuilder("braak")
2021-03-11 22:43:15,416 [main:117] - GENERATED CALL = ((charProgression step 2)).joinToString(StringBuilder("egpmx"), "qxbes", "optvz", (2), StringBuilder(), {a: T -> StringBuilder("braak")})
2021-03-11 22:43:15,416 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]]
2021-03-11 22:43:15,416 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:43:15,416 [main:117] - GENERATED CALL = ((charProgression step 2)).first.uppercase()
2021-03-11 22:43:15,416 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]]
2021-03-11 22:43:15,416 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]
2021-03-11 22:43:15,417 [main:117] - GENERATED CALL = ((charProgression step 2)).first.titlecase()
2021-03-11 22:43:15,417 [main:114] - replacement of method of type String is "vffuv"
2021-03-11 22:43:15,618 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 22:43:15,618 [main:66] - Compilation checking started
2021-03-11 22:43:16,444 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume(this.toString() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:43:16,447 [main:107] - replacing (this.toString(), String)
2021-03-11 22:43:16,447 [main:50] - replacing this.toString() String
2021-03-11 22:43:16,447 [main:54] - Getting value of type String
2021-03-11 22:43:16,651 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:43:16,657 [main:58] - GENERATED VALUE OF TYPE String = "yueiz"
2021-03-11 22:43:16,657 [main:61] - GENERATED IS CALL =false
2021-03-11 22:43:17,426 [main:67] - randomType = Set<HashSet<Kla2>>
2021-03-11 22:43:17,427 [main:106] - GETTING String from String
2021-03-11 22:43:17,444 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@147d069b]]
2021-03-11 22:43:17,444 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@147d069b]
2021-03-11 22:43:17,654 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:43:17,662 [main:117] - GENERATED CALL = (fu3("start")).removePrefix(StringBuilder())
2021-03-11 22:43:17,663 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39fab9e0]]
2021-03-11 22:43:17,663 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39fab9e0]
2021-03-11 22:43:17,870 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:43:18,077 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:43:18,083 [main:117] - GENERATED CALL = (fu3("start")).replaceIndentByMargin("wrhjv", "tlasy")
2021-03-11 22:43:18,083 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e65d99d]]
2021-03-11 22:43:18,083 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e65d99d]
2021-03-11 22:43:18,083 [main:117] - GENERATED CALL = (fu3("start")).substringBeforeLast((2).toChar(), fu6({ "isrgl"}))
2021-03-11 22:43:18,083 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75805a93]]
2021-03-11 22:43:18,083 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75805a93]
2021-03-11 22:43:18,084 [main:117] - GENERATED CALL = (fu3("start")).removeRange(((intProgression).endInclusive), (charProgression step 1).step)
2021-03-11 22:43:18,084 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b4c579]]
2021-03-11 22:43:18,084 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72b4c579]
2021-03-11 22:43:18,286 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:43:18,495 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:43:18,501 [main:117] - GENERATED CALL = (fu3("start")).commonSuffixWith("fieyy", false)
2021-03-11 22:43:18,501 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]]
2021-03-11 22:43:18,501 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386]
2021-03-11 22:43:18,702 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:43:18,708 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:43:18,708 [main:117] - GENERATED CALL = (fu3("start")).get(911712256).uppercase()
2021-03-11 22:43:18,708 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37e22e46]]
2021-03-11 22:43:18,708 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37e22e46]
2021-03-11 22:43:18,917 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:43:19,125 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:43:19,331 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:43:19,337 [main:117] - GENERATED CALL = (fu3("start")).replaceAfter('⃙', "qriwz", "rvuvd")
2021-03-11 22:43:19,337 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:43:19,337 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386]
2021-03-11 22:43:19,337 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:43:19,338 [main:117] - GENERATED CALL = (fu3("start")).get((charProgression step 1).step).plus(fu5({ "lmriy"}))
2021-03-11 22:43:19,338 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cd56732]]
2021-03-11 22:43:19,338 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cd56732]
2021-03-11 22:43:19,538 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:43:19,544 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:43:19,550 [main:117] - GENERATED CALL = (fu3("start")).takeWhile({a: Char -> true})
2021-03-11 22:43:19,550 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@77578d9f]]
2021-03-11 22:43:19,550 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@77578d9f]
2021-03-11 22:43:19,750 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:43:19,751 [main:117] - GENERATED CALL = (fu3("start")).plus("xgryn")
2021-03-11 22:43:19,751 [main:114] - replacement of this.toString() of type String is (fu3("start")).get(911712256).uppercase()
2021-03-11 22:43:19,951 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:43:19,951 [main:66] - Compilation checking started
2021-03-11 22:43:20,792 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:43:20,796 [main:107] - replacing ({
            prope2.prope7 = true
        }, Function0<Unit>)
2021-03-11 22:43:20,796 [main:50] - replacing {
            prope2.prope7 = true
        } Function0<Unit>
2021-03-11 22:43:20,796 [main:54] - Getting value of type Function0<Unit>
2021-03-11 22:43:21,008 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:43:21,014 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:43:21,247 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:43:21,254 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:43:21,960 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:43:21,966 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 22:43:21,971 [main:302] - generating value of type = Any false depth = 5
2021-03-11 22:43:21,971 [main:95] - GENERATED = check(false, { "inqfq"})
2021-03-11 22:43:21,971 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "inqfq"})}
2021-03-11 22:43:21,972 [main:61] - GENERATED IS CALL =false
2021-03-11 22:43:22,228 [main:67] - randomType = Sequence<Byte>
2021-03-11 22:43:22,229 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:43:22,247 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:43:22,278 [main:106] - GETTING Function0<Unit> from Float
2021-03-11 22:43:22,306 [main:106] - GETTING Function0<Unit> from UByte
2021-03-11 22:43:22,328 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-11 22:43:22,340 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:43:22,353 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 22:43:22,370 [main:106] - GETTING Function0<Unit> from LongProgression
2021-03-11 22:43:22,382 [main:106] - GETTING Function0<Unit> from CharRange
2021-03-11 22:43:22,405 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:43:22,406 [main:106] - GETTING Function0<Unit> from UShort
2021-03-11 22:43:22,429 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:43:22,430 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 22:43:22,451 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:43:22,452 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:43:22,453 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-11 22:43:22,454 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:43:22,455 [main:106] - GETTING Function0<Unit> from UShort
2021-03-11 22:43:22,456 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:43:22,457 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:43:22,458 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:43:22,459 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:43:22,460 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:43:22,461 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 22:43:22,461 [main:106] - GETTING Function0<Unit> from UByte
2021-03-11 22:43:22,462 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:43:22,463 [main:106] - GETTING Function0<Unit> from Long
2021-03-11 22:43:22,494 [main:106] - GETTING Function0<Unit> from LongRange
2021-03-11 22:43:22,515 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:43:22,516 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:43:22,517 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:43:22,518 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 22:43:22,519 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:43:22,520 [main:106] - GETTING Function0<Unit> from LongProgression
2021-03-11 22:43:22,521 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:43:22,522 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:43:22,522 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:43:22,523 [main:114] - replacement of {
            prope2.prope7 = true
        } of type Function0<Unit> is { check(false, { "inqfq"})}
2021-03-11 22:43:22,723 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:43:22,724 [main:66] - Compilation checking started
2021-03-11 22:43:23,567 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:43:23,570 [main:107] - replacing (prope6++, Int)
2021-03-11 22:43:23,570 [main:50] - replacing prope6++ Int
2021-03-11 22:43:23,570 [main:54] - Getting value of type Int
2021-03-11 22:43:23,777 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:43:23,782 [main:58] - GENERATED VALUE OF TYPE Int = -387896459
2021-03-11 22:43:23,783 [main:61] - GENERATED IS CALL =false
2021-03-11 22:43:24,320 [main:67] - randomType = Function2<Boolean, Int, LinkedHashSet<UShort>>
2021-03-11 22:43:24,321 [main:106] - GETTING Int from LongProgression
2021-03-11 22:43:24,332 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@4feb1e4], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4bec43d4]]
2021-03-11 22:43:24,332 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@4feb1e4]
2021-03-11 22:43:24,534 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:43:24,535 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4bec43d4]
2021-03-11 22:43:24,737 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:43:24,743 [main:117] - GENERATED CALL = (longProgression step 2L).equals("kogac").compareTo(true)
2021-03-11 22:43:24,743 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62317220]]
2021-03-11 22:43:24,743 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62317220]
2021-03-11 22:43:24,953 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-11 22:43:24,959 [main:302] - generating value of type = Int true depth = 1
2021-03-11 22:43:24,965 [main:117] - GENERATED CALL = (longProgression step 2L).sumOf({a: T -> 972104492})
2021-03-11 22:43:24,965 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@5f1d3712], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1ab672e0]]
2021-03-11 22:43:24,965 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1ab672e0]
2021-03-11 22:43:24,965 [main:117] - GENERATED CALL = (longProgression step 2L).first.toInt()
2021-03-11 22:43:24,965 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@5f1d3712], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3bb4ade3]]
2021-03-11 22:43:24,965 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3bb4ade3]
2021-03-11 22:43:24,965 [main:117] - GENERATED CALL = (longProgression step 2L).first.countOneBits()
2021-03-11 22:43:24,965 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6e1702e0]]
2021-03-11 22:43:24,965 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6e1702e0]
2021-03-11 22:43:25,168 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 22:43:25,174 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:43:25,180 [main:117] - GENERATED CALL = (longProgression step 2L).indexOfLast({a: T -> true})
2021-03-11 22:43:25,180 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@5f1d3712], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6707b9c3]]
2021-03-11 22:43:25,180 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6707b9c3]
2021-03-11 22:43:25,181 [main:117] - GENERATED CALL = (longProgression step 2L).first.countTrailingZeroBits()
2021-03-11 22:43:25,181 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@5f1d3712], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4ba53999]]
2021-03-11 22:43:25,181 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4ba53999]
2021-03-11 22:43:25,402 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:43:25,408 [main:117] - GENERATED CALL = (longProgression step 2L).first.compareTo(-95)
2021-03-11 22:43:25,409 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@67d8431d]]
2021-03-11 22:43:25,409 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@67d8431d]
2021-03-11 22:43:25,409 [main:117] - GENERATED CALL = (longProgression step 2L).count()
2021-03-11 22:43:25,409 [main:113] - Case = [public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.indexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@219f9031]]
2021-03-11 22:43:25,409 [main:149] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.indexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@219f9031]
2021-03-11 22:43:25,610 [main:302] - generating value of type = T false depth = 0
2021-03-11 22:43:25,827 [main:43] - GENERATING CALL OF fun <T> minOf(a: UShort, b: UShort, c: UShort): T = TODO()
2021-03-11 22:43:25,834 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: UShort, b: UShort, c: UShort): T = TODO()
2021-03-11 22:43:26,047 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 22:43:26,053 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 22:43:26,058 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 22:43:26,064 [main:95] - GENERATED = minOf<UShort>(14556.toUShort(), 9636.toUShort(), 32453.toUShort())
2021-03-11 22:43:26,065 [main:117] - GENERATED CALL = (longProgression step 2L).indexOf(minOf<UShort>(14556.toUShort(), 9636.toUShort(), 32453.toUShort()))
2021-03-11 22:43:26,065 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@5f1d3712], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@42f2cd9a]]
2021-03-11 22:43:26,065 [main:117] - GENERATED CALL = (longProgression step 2L).first.sign
2021-03-11 22:43:26,065 [main:114] - replacement of prope6++ of type Int is -387896459
2021-03-11 22:43:26,266 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 22:43:26,267 [main:66] - Compilation checking started
2021-03-11 22:43:27,084 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:43:27,087 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 22:43:27,087 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 22:43:27,087 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 22:43:27,297 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 22:43:27,305 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 22:43:27,329 [main:67] - randomType = Kla1
2021-03-11 22:43:27,531 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 22:43:27,537 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}
2021-03-11 22:43:27,740 [main:194] - Type params = []
2021-03-11 22:43:27,942 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 22:43:28,161 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:43:28,168 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:43:28,645 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 22:43:28,860 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:43:28,868 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:43:29,634 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-11 22:43:29,851 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:43:29,858 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:43:30,578 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:43:30,578 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:43:30,578 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:43:30,594 [main:106] - GETTING EmptyCoroutineContext from Long
2021-03-11 22:43:30,623 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-11 22:43:30,641 [main:106] - GETTING EmptyCoroutineContext from IntRange
2021-03-11 22:43:30,661 [main:106] - GETTING EmptyCoroutineContext from LongRange
2021-03-11 22:43:30,682 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:43:30,694 [main:106] - GETTING EmptyCoroutineContext from CharRange
2021-03-11 22:43:30,717 [main:106] - GETTING EmptyCoroutineContext from IntProgression
2021-03-11 22:43:30,728 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:43:30,758 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:43:30,775 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:43:30,776 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:43:30,776 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:43:30,777 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:43:30,778 [main:106] - GETTING EmptyCoroutineContext from UByte
2021-03-11 22:43:30,800 [main:106] - GETTING EmptyCoroutineContext from IntRange
2021-03-11 22:43:30,801 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:43:30,802 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:43:30,802 [main:106] - GETTING EmptyCoroutineContext from UShort
2021-03-11 22:43:30,824 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:43:30,825 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:43:30,826 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-11 22:43:30,826 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:43:30,827 [main:106] - GETTING EmptyCoroutineContext from LongProgression
2021-03-11 22:43:30,839 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:43:30,840 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:43:30,840 [main:106] - GETTING EmptyCoroutineContext from LongProgression
2021-03-11 22:43:30,841 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:43:30,841 [main:106] - GETTING EmptyCoroutineContext from UShort
2021-03-11 22:43:30,842 [main:106] - GETTING EmptyCoroutineContext from UByte
2021-03-11 22:43:30,843 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:43:30,843 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:43:30,844 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:43:30,845 [main:106] - GETTING EmptyCoroutineContext from Float
2021-03-11 22:43:30,874 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:43:30,874 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:43:30,875 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:43:30,876 [main:106] - GETTING EmptyCoroutineContext from IntProgression
2021-03-11 22:43:30,876 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 22:43:30,876 [main:107] - replacing (i, Int)
2021-03-11 22:43:30,876 [main:50] - replacing i Int
2021-03-11 22:43:30,876 [main:54] - Getting value of type Int
2021-03-11 22:43:31,080 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:43:31,086 [main:58] - GENERATED VALUE OF TYPE Int = -1061292359
2021-03-11 22:43:31,086 [main:61] - GENERATED IS CALL =false
2021-03-11 22:43:32,391 [main:67] - randomType = ArrayDeque<MutableMap<HashMap<Char, UByte?>, Int>>?
2021-03-11 22:43:32,593 [main:302] - generating value of type = ArrayDeque<MutableMap<HashMap<Char, UByte?>, Int>> false depth = 0
2021-03-11 22:43:32,805 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<MutableMap<HashMap<Char, UByte?>, Int>> = TODO()
2021-03-11 22:43:32,812 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<MutableMap<HashMap<Char, UByte?>, Int>> = TODO()
2021-03-11 22:43:33,267 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:43:33,273 [main:95] - GENERATED = ArrayDeque<MutableMap<HashMap<Char, UByte?>, Int>>(-585021748)
2021-03-11 22:43:33,541 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13331927]
2021-03-11 22:43:33,541 [main:78] - Generated call from random type = (ArrayDeque<MutableMap<HashMap<Char, UByte?>, Int>>(-585021748))?.size.xor((intProgression).endInclusive)
2021-03-11 22:43:33,542 [main:106] - GETTING Int from LongRange
2021-03-11 22:43:33,568 [main:113] - Case = [public open fun contains(value: kotlin.Long): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@5536d4c1], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4bec43d4]]
2021-03-11 22:43:33,568 [main:149] - GENERATING call of type public open fun contains(value: kotlin.Long): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@5536d4c1]
2021-03-11 22:43:33,786 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:43:33,792 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4bec43d4]
2021-03-11 22:43:33,995 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:43:34,001 [main:117] - GENERATED CALL = (longProgression).contains(8428449940761530267).compareTo(false)
2021-03-11 22:43:34,001 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@5f1d3712], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6707b9c3]]
2021-03-11 22:43:34,001 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6707b9c3]
2021-03-11 22:43:34,002 [main:117] - GENERATED CALL = (longProgression).first.countTrailingZeroBits()
2021-03-11 22:43:34,002 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@49ec6671], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@42f2cd9a]]
2021-03-11 22:43:34,002 [main:117] - GENERATED CALL = (longProgression).endInclusive.sign
2021-03-11 22:43:34,002 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@49ec6671], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1ab672e0]]
2021-03-11 22:43:34,002 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1ab672e0]
2021-03-11 22:43:34,002 [main:117] - GENERATED CALL = (longProgression).endInclusive.toInt()
2021-03-11 22:43:34,002 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@49ec6671], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6707b9c3]]
2021-03-11 22:43:34,002 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6707b9c3]
2021-03-11 22:43:34,002 [main:117] - GENERATED CALL = (longProgression).endInclusive.countTrailingZeroBits()
2021-03-11 22:43:34,002 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.sumBy(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@41dcf819]]
2021-03-11 22:43:34,002 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.sumBy(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@41dcf819]
2021-03-11 22:43:34,207 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-11 22:43:34,213 [main:302] - generating value of type = Int true depth = 1
2021-03-11 22:43:34,219 [main:117] - GENERATED CALL = (longProgression).sumBy({a: T -> -1209073847})
2021-03-11 22:43:34,219 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@49ec6671], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d578694]]
2021-03-11 22:43:34,220 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d578694]
2021-03-11 22:43:34,220 [main:117] - GENERATED CALL = (longProgression).endInclusive.countLeadingZeroBits()
2021-03-11 22:43:34,220 [main:113] - Case = [public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1badd75d]]
2021-03-11 22:43:34,220 [main:149] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1badd75d]
2021-03-11 22:43:34,423 [main:302] - generating value of type = T false depth = 0
2021-03-11 22:43:36,145 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>>, b: Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>>, c: Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>>, comparator: kotlin.Comparator<Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>>>): T = TODO()
2021-03-11 22:43:36,153 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>>, b: Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>>, c: Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>>, comparator: kotlin.Comparator<Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>>>): T = TODO()
2021-03-11 22:43:36,628 [main:302] - generating value of type = Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>> false depth = 3
2021-03-11 22:43:36,634 [main:302] - generating value of type = LinkedHashMap<Kla3<ULong?>, UInt> false depth = 4
2021-03-11 22:43:36,844 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(): LinkedHashMap<Kla3<ULong?>, UInt> = TODO()
2021-03-11 22:43:36,851 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(): LinkedHashMap<Kla3<ULong?>, UInt> = TODO()
2021-03-11 22:43:37,067 [main:95] - GENERATED = LinkedHashMap<Kla3<ULong?>, UInt>()
2021-03-11 22:43:37,067 [main:302] - generating value of type = Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>> false depth = 3
2021-03-11 22:43:37,073 [main:302] - generating value of type = LinkedHashMap<Kla3<ULong?>, UInt> false depth = 4
2021-03-11 22:43:37,285 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Kla3<ULong?>, UInt>): LkedHashMap<Kla3<ULong?>, UInt> = TODO()
2021-03-11 22:43:37,292 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Kla3<ULong?>, UInt>): LkedHashMap<Kla3<ULong?>, UInt> = TODO()
2021-03-11 22:43:37,543 [main:302] - generating value of type = Pair<Kla3<ULong?>, UInt> false depth = 7
2021-03-11 22:43:37,753 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla3<ULong?>, second: UInt): Pair<Kla3<ULong?>, UInt> = TODO()
2021-03-11 22:43:37,760 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla3<ULong?>, second: UInt): Pair<Kla3<ULong?>, UInt> = TODO()
2021-03-11 22:43:37,974 [main:302] - generating value of type = Kla3<ULong?> false depth = 10
2021-03-11 22:43:37,980 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 22:43:39,484 [main:302] - generating value of type = Kla6 false depth = 12
2021-03-11 22:43:39,490 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}
2021-03-11 22:43:39,490 [main:302] - generating value of type = UInt true depth = 10
2021-03-11 22:43:39,496 [main:95] - GENERATED = Pair<Kla3<ULong?>, UInt>(Kla6, 294539570.toUInt())
2021-03-11 22:43:39,496 [main:95] - GENERATED = linkedMapOf<Kla3<ULong?>, UInt>(Pair<Kla3<ULong?>, UInt>(Kla6, 294539570.toUInt()))
2021-03-11 22:43:39,496 [main:302] - generating value of type = Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>> false depth = 3
2021-03-11 22:43:39,502 [main:302] - generating value of type = LinkedHashMap<Kla3<ULong?>, UInt> false depth = 4
2021-03-11 22:43:39,713 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Kla3<ULong?>, UInt>): LkedHashMap<Kla3<ULong?>, UInt> = TODO()
2021-03-11 22:43:39,720 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Kla3<ULong?>, UInt>): LkedHashMap<Kla3<ULong?>, UInt> = TODO()
2021-03-11 22:43:39,933 [main:302] - generating value of type = Pair<Kla3<ULong?>, UInt> false depth = 7
2021-03-11 22:43:40,145 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla3<ULong?>, second: UInt): Pair<Kla3<ULong?>, UInt> = TODO()
2021-03-11 22:43:40,152 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla3<ULong?>, second: UInt): Pair<Kla3<ULong?>, UInt> = TODO()
2021-03-11 22:43:40,366 [main:302] - generating value of type = Kla3<ULong?> false depth = 10
2021-03-11 22:43:40,371 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 22:43:41,071 [main:302] - generating value of type = Kla6 false depth = 12
2021-03-11 22:43:41,077 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}
2021-03-11 22:43:41,078 [main:302] - generating value of type = UInt true depth = 10
2021-03-11 22:43:41,083 [main:95] - GENERATED = Pair<Kla3<ULong?>, UInt>(Kla6, 1054443311.toUInt())
2021-03-11 22:43:41,084 [main:95] - GENERATED = linkedMapOf<Kla3<ULong?>, UInt>(Pair<Kla3<ULong?>, UInt>(Kla6, 1054443311.toUInt()))
2021-03-11 22:43:41,084 [main:302] - generating value of type = Comparator<Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>>> false depth = 3
2021-03-11 22:43:41,299 [main:43] - GENERATING CALL OF fun <T> compareBy(selector: (Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>>)->kotlin.Comparable<*>?): Comparator<Function1<Kla4, LkedHashMap<Kla3<ULong?>, UInt>>> = TODO()
2021-03-11 22:43:41,306 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selector: (Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>>)->kotlin.Comparable<*>?): Comparator<Function1<Kla4, LkedHashMap<Kla3<ULong?>, UInt>>> = TODO()
2021-03-11 22:43:41,835 [main:302] - generating value of type = Function1<Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>>, Comparable<*>?> false depth = 6
2021-03-11 22:43:41,841 [main:302] - generating value of type = Comparable<*> false depth = 7
2021-03-11 22:43:41,851 [main:95] - GENERATED = compareBy<Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>>>({a: Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>> -> "qswjd"})
2021-03-11 22:43:41,851 [main:95] - GENERATED = maxOf<Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>>>({a: Kla4 -> LinkedHashMap<Kla3<ULong?>, UInt>()}, {a: Kla4 -> linkedMapOf<Kla3<ULong?>, UInt>(Pair<Kla3<ULong?>, UInt>(Kla6, 294539570.toUInt()))}, {a: Kla4 -> linkedMapOf<Kla3<ULong?>, UInt>(Pair<Kla3<ULong?>, UInt>(Kla6, 1054443311.toUInt()))}, compareBy<Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>>>({a: Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>> -> "qswjd"}))
2021-03-11 22:43:41,852 [main:117] - GENERATED CALL = (longProgression).lastIndexOf(maxOf<Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>>>({a: Kla4 -> LinkedHashMap<Kla3<ULong?>, UInt>()}, {a: Kla4 -> linkedMapOf<Kla3<ULong?>, UInt>(Pair<Kla3<ULong?>, UInt>(Kla6, 294539570.toUInt()))}, {a: Kla4 -> linkedMapOf<Kla3<ULong?>, UInt>(Pair<Kla3<ULong?>, UInt>(Kla6, 1054443311.toUInt()))}, compareBy<Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>>>({a: Function1<Kla4, LinkedHashMap<Kla3<ULong?>, UInt>> -> "qswjd"})))
2021-03-11 22:43:41,852 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@4feb1e4], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4bec43d4]]
2021-03-11 22:43:41,852 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@4feb1e4]
2021-03-11 22:43:42,063 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:43:42,063 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4bec43d4]
2021-03-11 22:43:42,266 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:43:42,272 [main:117] - GENERATED CALL = (longProgression).equals("ynebp").compareTo(true)
2021-03-11 22:43:42,272 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6e1702e0]]
2021-03-11 22:43:42,272 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6e1702e0]
2021-03-11 22:43:42,475 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 22:43:42,481 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:43:42,487 [main:117] - GENERATED CALL = (longProgression).indexOfLast({a: T -> false})
2021-03-11 22:43:42,487 [main:114] - replacement of i of type Int is (longProgression).endInclusive.countLeadingZeroBits()
2021-03-11 22:43:42,689 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:43:42,689 [main:66] - Compilation checking started
2021-03-11 22:43:43,607 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (longProgression).endInclusive.countLeadingZeroBits() + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:43:43,612 [main:107] - replacing ({}, Function0<Unit>)
2021-03-11 22:43:43,612 [main:50] - replacing {} Function0<Unit>
2021-03-11 22:43:43,612 [main:54] - Getting value of type Function0<Unit>
2021-03-11 22:43:43,844 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:43:43,850 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:43:44,063 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:43:44,070 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:43:44,523 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:43:44,529 [main:95] - GENERATED = check(true)
2021-03-11 22:43:44,529 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-11 22:43:44,529 [main:61] - GENERATED IS CALL =false
2021-03-11 22:43:44,541 [main:67] - randomType = UByte
2021-03-11 22:43:44,744 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:43:44,783 [main:106] - GETTING Function0<Unit> from CharRange
2021-03-11 22:43:44,806 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:43:44,819 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:43:44,849 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-11 22:43:44,861 [main:106] - GETTING Function0<Unit> from UByte
2021-03-11 22:43:44,883 [main:106] - GETTING Function0<Unit> from LongRange
2021-03-11 22:43:44,904 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 22:43:44,925 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:43:44,942 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:43:44,943 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:43:44,944 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:43:44,945 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-11 22:43:44,946 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:43:44,947 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:43:44,948 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 22:43:44,967 [main:106] - GETTING Function0<Unit> from Float
2021-03-11 22:43:44,995 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:43:44,996 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:43:44,997 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:43:44,998 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:43:44,999 [main:106] - GETTING Function0<Unit> from LongProgression
2021-03-11 22:43:45,011 [main:106] - GETTING Function0<Unit> from UShort
2021-03-11 22:43:45,033 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:43:45,034 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:43:45,035 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 22:43:45,036 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 22:43:45,037 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:43:45,038 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:43:45,039 [main:106] - GETTING Function0<Unit> from Long
2021-03-11 22:43:45,070 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:43:45,071 [main:106] - GETTING Function0<Unit> from UShort
2021-03-11 22:43:45,072 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:43:45,073 [main:106] - GETTING Function0<Unit> from UByte
2021-03-11 22:43:45,074 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:43:45,075 [main:106] - GETTING Function0<Unit> from LongProgression
2021-03-11 22:43:45,076 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:43:45,076 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:43:45,077 [main:114] - replacement of {} of type Function0<Unit> is { check(true)}
2021-03-11 22:43:45,280 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:43:45,280 [main:66] - Compilation checking started
2021-03-11 22:43:46,155 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if (prope3 == null) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (longProgression).endInclusive.countLeadingZeroBits() + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:43:46,158 [main:107] - replacing (prope3 == null, Boolean)
2021-03-11 22:43:46,158 [main:50] - replacing prope3 == null Boolean
2021-03-11 22:43:46,158 [main:54] - Getting value of type Boolean
2021-03-11 22:43:46,365 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:43:46,370 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 22:43:46,371 [main:61] - GENERATED IS CALL =false
2021-03-11 22:43:46,394 [main:67] - randomType = Kla4
2021-03-11 22:43:46,598 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 22:43:46,604 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 22:43:46,610 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@574a5a37]
2021-03-11 22:43:46,811 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:43:46,811 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6448989]
2021-03-11 22:43:46,812 [main:78] - Generated call from random type = (Kla4()).equals("gjrge").not()
2021-03-11 22:43:46,812 [main:114] - replacement of prope3 == null of type Boolean is (Kla4()).equals("gjrge").not()
2021-03-11 22:43:47,016 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:43:47,016 [main:66] - Compilation checking started
2021-03-11 22:43:47,846 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (longProgression).endInclusive.countLeadingZeroBits() + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:43:47,849 [main:107] - replacing (c, Continuation<*>)
2021-03-11 22:43:47,850 [main:50] - replacing c Continuation<*>
2021-03-11 22:43:47,850 [main:54] - Getting value of type Continuation<*>
2021-03-11 22:43:48,055 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 22:43:48,271 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:43:48,278 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:43:48,995 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 22:43:49,207 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:43:49,214 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:43:49,684 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 22:43:49,902 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:43:49,909 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:43:50,675 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:43:50,675 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:43:50,675 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:43:50,675 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 22:43:50,936 [main:67] - randomType = Kla0?
2021-03-11 22:43:51,141 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 22:43:51,146 [main:112] - generating klass Kla0 text = class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + w)
        COROUTINE_SUSPENDED
    }
}
2021-03-11 22:43:51,348 [main:194] - Type params = []
2021-03-11 22:43:51,551 [main:302] - generating value of type = String true depth = 2
2021-03-11 22:43:51,564 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:43:51,585 [main:106] - GETTING Continuation<*> from CharProgression
2021-03-11 22:43:51,597 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:43:51,627 [main:106] - GETTING Continuation<*> from CharProgression
2021-03-11 22:43:51,628 [main:106] - GETTING Continuation<*> from IntRange
2021-03-11 22:43:51,649 [main:106] - GETTING Continuation<*> from CharProgression
2021-03-11 22:43:51,650 [main:106] - GETTING Continuation<*> from LongRange
2021-03-11 22:43:51,671 [main:106] - GETTING Continuation<*> from LongProgression
2021-03-11 22:43:51,683 [main:106] - GETTING Continuation<*> from Float
2021-03-11 22:43:51,711 [main:106] - GETTING Continuation<*> from Char
2021-03-11 22:43:51,728 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:43:51,729 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:43:51,730 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:43:51,731 [main:106] - GETTING Continuation<*> from UByte
2021-03-11 22:43:51,757 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:43:51,758 [main:106] - GETTING Continuation<*> from IntProgression
2021-03-11 22:43:51,770 [main:106] - GETTING Continuation<*> from CharProgression
2021-03-11 22:43:51,771 [main:106] - GETTING Continuation<*> from IntProgression
2021-03-11 22:43:51,772 [main:106] - GETTING Continuation<*> from UShort
2021-03-11 22:43:51,794 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:43:51,795 [main:106] - GETTING Continuation<*> from CharRange
2021-03-11 22:43:51,818 [main:106] - GETTING Continuation<*> from UByte
2021-03-11 22:43:51,819 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:43:51,820 [main:106] - GETTING Continuation<*> from CharProgression
2021-03-11 22:43:51,821 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:43:51,821 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:43:51,822 [main:106] - GETTING Continuation<*> from Long
2021-03-11 22:43:51,853 [main:106] - GETTING Continuation<*> from CharProgression
2021-03-11 22:43:51,854 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:43:51,855 [main:106] - GETTING Continuation<*> from IntRange
2021-03-11 22:43:51,855 [main:106] - GETTING Continuation<*> from UShort
2021-03-11 22:43:51,856 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:43:51,857 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:43:51,858 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:43:51,859 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:43:51,859 [main:106] - GETTING Continuation<*> from LongProgression
2021-03-11 22:43:51,860 [main:106] - GETTING Continuation<*> from Char
2021-03-11 22:43:51,860 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 22:43:51,860 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected ", String)
2021-03-11 22:43:51,860 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " String
2021-03-11 22:43:51,861 [main:54] - Getting value of type String
2021-03-11 22:43:52,064 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:43:52,070 [main:58] - GENERATED VALUE OF TYPE String = "otdbv"
2021-03-11 22:43:52,070 [main:61] - GENERATED IS CALL =false
2021-03-11 22:43:52,549 [main:67] - randomType = UInt?
2021-03-11 22:43:52,751 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 22:43:52,784 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@dba1cb]
2021-03-11 22:43:52,785 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76345526]
2021-03-11 22:43:52,785 [main:78] - Generated call from random type = (696865151.toUInt())?.toShort().toString((2))
2021-03-11 22:43:52,785 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " of type String is (696865151.toUInt())?.toShort().toString((2))
2021-03-11 22:43:52,987 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:43:52,987 [main:66] - Compilation checking started
2021-03-11 22:43:53,843 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }?.let { error((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error((696865151.toUInt())?.toShort().toString((2)) + (longProgression).endInclusive.countLeadingZeroBits() + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:43:53,846 [main:107] - replacing ({ it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() }, Function0<Boolean>)
2021-03-11 22:43:53,847 [main:50] - replacing { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() } Function0<Boolean>
2021-03-11 22:43:53,847 [main:54] - Getting value of type Function0<Boolean>
2021-03-11 22:43:54,051 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 22:43:54,057 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:43:54,063 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 22:43:54,063 [main:61] - GENERATED IS CALL =false
2021-03-11 22:43:54,087 [main:67] - randomType = List<Char>
2021-03-11 22:43:54,089 [main:106] - GETTING Function0<Boolean> from CharProgression
2021-03-11 22:43:54,105 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:43:54,123 [main:106] - GETTING Function0<Boolean> from Char
2021-03-11 22:43:54,141 [main:106] - GETTING Function0<Boolean> from Float
2021-03-11 22:43:54,193 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 22:43:54,223 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 22:43:54,224 [main:106] - GETTING Function0<Boolean> from CharProgression
2021-03-11 22:43:54,225 [main:106] - GETTING Function0<Boolean> from IntProgression
2021-03-11 22:43:54,237 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:43:54,238 [main:106] - GETTING Function0<Boolean> from CharProgression
2021-03-11 22:43:54,239 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:43:54,240 [main:106] - GETTING Function0<Boolean> from IntProgression
2021-03-11 22:43:54,241 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:43:54,242 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:43:54,243 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:43:54,244 [main:106] - GETTING Function0<Boolean> from UShort
2021-03-11 22:43:54,268 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:43:54,269 [main:106] - GETTING Function0<Boolean> from LongProgression
2021-03-11 22:43:54,280 [main:106] - GETTING Function0<Boolean> from Char
2021-03-11 22:43:54,282 [main:106] - GETTING Function0<Boolean> from UShort
2021-03-11 22:43:54,282 [main:106] - GETTING Function0<Boolean> from UByte
2021-03-11 22:43:54,305 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 22:43:54,306 [main:106] - GETTING Function0<Boolean> from LongRange
2021-03-11 22:43:54,328 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:43:54,329 [main:106] - GETTING Function0<Boolean> from IntRange
2021-03-11 22:43:54,350 [main:106] - GETTING Function0<Boolean> from CharProgression
2021-03-11 22:43:54,351 [main:106] - GETTING Function0<Boolean> from CharProgression
2021-03-11 22:43:54,352 [main:106] - GETTING Function0<Boolean> from IntRange
2021-03-11 22:43:54,353 [main:106] - GETTING Function0<Boolean> from LongProgression
2021-03-11 22:43:54,354 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:43:54,355 [main:106] - GETTING Function0<Boolean> from Long
2021-03-11 22:43:54,386 [main:106] - GETTING Function0<Boolean> from CharRange
2021-03-11 22:43:54,409 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:43:54,410 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 22:43:54,411 [main:106] - GETTING Function0<Boolean> from UByte
2021-03-11 22:43:54,412 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 22:43:54,413 [main:106] - GETTING Function0<Boolean> from CharProgression
2021-03-11 22:43:54,413 [main:114] - replacement of { it?.methodName?.startsWith(((charProgression step 44179653).first).toByte().toString(((intProgression).endInclusive).compareTo(21899))) == ((longProgression step 2L)).equals("hbwog").not() } of type Function0<Boolean> is { false}
2021-03-11 22:43:54,615 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:43:54,615 [main:66] - Compilation checking started
2021-03-11 22:43:55,431 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { error((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error((696865151.toUInt())?.toShort().toString((2)) + (longProgression).endInclusive.countLeadingZeroBits() + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:43:55,434 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 22:43:55,434 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 22:43:55,434 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 22:43:55,637 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 22:43:55,645 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 22:43:55,665 [main:67] - randomType = Kla1
2021-03-11 22:43:55,867 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 22:43:55,872 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}
2021-03-11 22:43:56,075 [main:194] - Type params = []
2021-03-11 22:43:56,277 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 22:43:56,487 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:43:56,493 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:43:56,960 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 22:43:57,175 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:43:57,182 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:43:57,883 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-11 22:43:58,099 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:43:58,106 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:43:58,866 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-11 22:43:59,083 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:43:59,090 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:43:59,801 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:43:59,801 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:43:59,801 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:43:59,801 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:43:59,817 [main:106] - GETTING EmptyCoroutineContext from UByte
2021-03-11 22:43:59,845 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:43:59,864 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:43:59,864 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:43:59,865 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:43:59,896 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:43:59,896 [main:106] - GETTING EmptyCoroutineContext from IntProgression
2021-03-11 22:43:59,908 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:43:59,908 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:43:59,921 [main:106] - GETTING EmptyCoroutineContext from CharRange
2021-03-11 22:43:59,944 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:43:59,945 [main:106] - GETTING EmptyCoroutineContext from LongProgression
2021-03-11 22:43:59,956 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:43:59,957 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:43:59,958 [main:106] - GETTING EmptyCoroutineContext from UShort
2021-03-11 22:43:59,980 [main:106] - GETTING EmptyCoroutineContext from IntRange
2021-03-11 22:44:00,000 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:44:00,001 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:44:00,002 [main:106] - GETTING EmptyCoroutineContext from Float
2021-03-11 22:44:00,030 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-11 22:44:00,047 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:44:00,048 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:44:00,049 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:44:00,049 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-11 22:44:00,050 [main:106] - GETTING EmptyCoroutineContext from UShort
2021-03-11 22:44:00,051 [main:106] - GETTING EmptyCoroutineContext from UByte
2021-03-11 22:44:00,051 [main:106] - GETTING EmptyCoroutineContext from IntRange
2021-03-11 22:44:00,052 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:44:00,053 [main:106] - GETTING EmptyCoroutineContext from IntProgression
2021-03-11 22:44:00,053 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:44:00,054 [main:106] - GETTING EmptyCoroutineContext from LongProgression
2021-03-11 22:44:00,055 [main:106] - GETTING EmptyCoroutineContext from LongRange
2021-03-11 22:44:00,077 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:44:00,077 [main:106] - GETTING EmptyCoroutineContext from Long
2021-03-11 22:44:00,108 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:44:00,108 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:44:00,109 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:44:00,109 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 22:44:00,109 [main:107] - replacing (x, Continuation<String>)
2021-03-11 22:44:00,109 [main:50] - replacing x Continuation<String>
2021-03-11 22:44:00,109 [main:54] - Getting value of type Continuation<String>
2021-03-11 22:44:00,312 [main:302] - generating value of type = Continuation<String> false depth = 0
2021-03-11 22:44:00,522 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-11 22:44:00,528 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-11 22:44:01,230 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 22:44:01,440 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:44:01,447 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:44:01,910 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 22:44:02,126 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:44:02,133 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:44:02,879 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:44:02,879 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:44:02,879 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-11 22:44:02,879 [main:58] - GENERATED VALUE OF TYPE Continuation<String> = 
2021-03-11 22:44:04,089 [main:67] - randomType = Pair<Function1<ULong, Short?>, Double>
2021-03-11 22:44:04,291 [main:302] - generating value of type = Pair<Function1<ULong, Short?>, Double> false depth = 0
2021-03-11 22:44:04,506 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Function1<ULong, Short?>, second: Double): Pair<Function1<ULong, Short?>, Double> = TODO()
2021-03-11 22:44:04,513 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Function1<ULong, Short?>, second: Double): Pair<Function1<ULong, Short?>, Double> = TODO()
2021-03-11 22:44:04,728 [main:302] - generating value of type = Function1<ULong, Short?> false depth = 3
2021-03-11 22:44:04,733 [main:302] - generating value of type = Short true depth = 4
2021-03-11 22:44:04,738 [main:302] - generating value of type = Double true depth = 3
2021-03-11 22:44:04,743 [main:95] - GENERATED = Pair<Function1<ULong, Short?>, Double>({a: ULong -> -15463}, 0.7315388924708628)
2021-03-11 22:44:04,758 [main:106] - GETTING Continuation<String> from UShort
2021-03-11 22:44:04,781 [main:106] - GETTING Continuation<String> from Char
2021-03-11 22:44:04,799 [main:106] - GETTING Continuation<String> from LongProgression
2021-03-11 22:44:04,810 [main:106] - GETTING Continuation<String> from String
2021-03-11 22:44:04,827 [main:106] - GETTING Continuation<String> from CharProgression
2021-03-11 22:44:04,840 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:44:04,882 [main:106] - GETTING Continuation<String> from String
2021-03-11 22:44:04,883 [main:106] - GETTING Continuation<String> from Char
2021-03-11 22:44:04,884 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:44:04,885 [main:106] - GETTING Continuation<String> from Float
2021-03-11 22:44:04,934 [main:106] - GETTING Continuation<String> from String
2021-03-11 22:44:04,935 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:44:04,936 [main:106] - GETTING Continuation<String> from String
2021-03-11 22:44:04,937 [main:106] - GETTING Continuation<String> from CharProgression
2021-03-11 22:44:04,938 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:44:04,939 [main:106] - GETTING Continuation<String> from CharRange
2021-03-11 22:44:04,978 [main:106] - GETTING Continuation<String> from UByte
2021-03-11 22:44:05,017 [main:106] - GETTING Continuation<String> from IntProgression
2021-03-11 22:44:05,035 [main:106] - GETTING Continuation<String> from IntRange
2021-03-11 22:44:05,056 [main:106] - GETTING Continuation<String> from UByte
2021-03-11 22:44:05,057 [main:106] - GETTING Continuation<String> from String
2021-03-11 22:44:05,058 [main:106] - GETTING Continuation<String> from String
2021-03-11 22:44:05,059 [main:106] - GETTING Continuation<String> from String
2021-03-11 22:44:05,060 [main:106] - GETTING Continuation<String> from LongRange
2021-03-11 22:44:05,084 [main:106] - GETTING Continuation<String> from LongProgression
2021-03-11 22:44:05,085 [main:106] - GETTING Continuation<String> from CharProgression
2021-03-11 22:44:05,086 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:44:05,086 [main:106] - GETTING Continuation<String> from IntRange
2021-03-11 22:44:05,087 [main:106] - GETTING Continuation<String> from String
2021-03-11 22:44:05,088 [main:106] - GETTING Continuation<String> from UShort
2021-03-11 22:44:05,089 [main:106] - GETTING Continuation<String> from String
2021-03-11 22:44:05,090 [main:106] - GETTING Continuation<String> from CharProgression
2021-03-11 22:44:05,091 [main:106] - GETTING Continuation<String> from IntProgression
2021-03-11 22:44:05,092 [main:106] - GETTING Continuation<String> from CharProgression
2021-03-11 22:44:05,093 [main:106] - GETTING Continuation<String> from Long
2021-03-11 22:44:05,124 [main:106] - GETTING Continuation<String> from String
2021-03-11 22:44:05,125 [main:106] - GETTING Continuation<String> from CharProgression
2021-03-11 22:44:05,125 [main:111] - Cant find and generate replacement for x type Continuation<String>
2021-03-11 22:44:05,125 [main:107] - replacing (getOrThrow(), Any?)
2021-03-11 22:44:05,125 [main:50] - replacing getOrThrow() Any?
2021-03-11 22:44:05,125 [main:54] - Getting value of type Any?
2021-03-11 22:44:05,328 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:44:05,328 [main:58] - GENERATED VALUE OF TYPE Any? = "jrtwd"
2021-03-11 22:44:05,328 [main:61] - GENERATED IS CALL =false
2021-03-11 22:44:05,339 [main:67] - randomType = Long
2021-03-11 22:44:05,541 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:44:05,577 [main:106] - GETTING Any? from IntProgression
2021-03-11 22:44:05,589 [main:106] - GETTING Any? from Int
2021-03-11 22:44:05,620 [main:106] - GETTING Any? from String
2021-03-11 22:44:05,637 [main:106] - GETTING Any? from Char
2021-03-11 22:44:05,654 [main:106] - GETTING Any? from String
2021-03-11 22:44:05,655 [main:106] - GETTING Any? from IntRange
2021-03-11 22:44:05,676 [main:106] - GETTING Any? from Long
2021-03-11 22:44:05,706 [main:106] - GETTING Any? from LongProgression
2021-03-11 22:44:05,717 [main:106] - GETTING Any? from Int
2021-03-11 22:44:05,718 [main:106] - GETTING Any? from String
2021-03-11 22:44:05,719 [main:106] - GETTING Any? from String
2021-03-11 22:44:05,720 [main:106] - GETTING Any? from LongProgression
2021-03-11 22:44:05,721 [main:106] - GETTING Any? from CharRange
2021-03-11 22:44:05,745 [main:106] - GETTING Any? from UByte
2021-03-11 22:44:05,768 [main:106] - GETTING Any? from Int
2021-03-11 22:44:05,769 [main:106] - GETTING Any? from String
2021-03-11 22:44:05,770 [main:106] - GETTING Any? from UShort
2021-03-11 22:44:05,793 [main:106] - GETTING Any? from UShort
2021-03-11 22:44:05,794 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:44:05,807 [main:106] - GETTING Any? from IntProgression
2021-03-11 22:44:05,808 [main:106] - GETTING Any? from String
2021-03-11 22:44:05,809 [main:106] - GETTING Any? from IntRange
2021-03-11 22:44:05,810 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:44:05,811 [main:106] - GETTING Any? from String
2021-03-11 22:44:05,812 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:44:05,813 [main:106] - GETTING Any? from Int
2021-03-11 22:44:05,814 [main:106] - GETTING Any? from String
2021-03-11 22:44:05,814 [main:106] - GETTING Any? from Char
2021-03-11 22:44:05,815 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:44:05,816 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:44:05,817 [main:106] - GETTING Any? from LongRange
2021-03-11 22:44:05,839 [main:106] - GETTING Any? from String
2021-03-11 22:44:05,841 [main:106] - GETTING Any? from String
2021-03-11 22:44:05,841 [main:106] - GETTING Any? from UByte
2021-03-11 22:44:05,842 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:44:05,843 [main:106] - GETTING Any? from Float
2021-03-11 22:44:05,873 [main:106] - GETTING Any? from Int
2021-03-11 22:44:05,873 [main:114] - replacement of getOrThrow() of type Any? is "jrtwd"
2021-03-11 22:44:06,100 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 22:44:06,100 [main:66] - Compilation checking started
2021-03-11 22:44:06,682 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4."jrtwd"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { error((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error((696865151.toUInt())?.toShort().toString((2)) + (longProgression).endInclusive.countLeadingZeroBits() + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:44:06,685 [main:107] - replacing (c, Continuation<*>)
2021-03-11 22:44:06,685 [main:50] - replacing c Continuation<*>
2021-03-11 22:44:06,685 [main:54] - Getting value of type Continuation<*>
2021-03-11 22:44:06,887 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 22:44:07,097 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:44:07,104 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:44:07,807 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 22:44:08,017 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:44:08,024 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:44:08,488 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 22:44:08,703 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:44:08,710 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:44:09,420 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:44:09,420 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:44:09,420 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:44:09,420 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 22:44:09,431 [main:67] - randomType = Float
2021-03-11 22:44:09,633 [main:302] - generating value of type = Float true depth = 0
2021-03-11 22:44:09,668 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:44:09,685 [main:106] - GETTING Continuation<*> from UByte
2021-03-11 22:44:09,708 [main:106] - GETTING Continuation<*> from Float
2021-03-11 22:44:09,736 [main:106] - GETTING Continuation<*> from CharProgression
2021-03-11 22:44:09,748 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:44:09,749 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:44:09,780 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:44:09,781 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:44:09,781 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:44:09,782 [main:106] - GETTING Continuation<*> from CharProgression
2021-03-11 22:44:09,783 [main:106] - GETTING Continuation<*> from LongProgression
2021-03-11 22:44:09,795 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:44:09,796 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:44:09,797 [main:106] - GETTING Continuation<*> from IntProgression
2021-03-11 22:44:09,809 [main:106] - GETTING Continuation<*> from IntRange
2021-03-11 22:44:09,830 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:44:09,831 [main:106] - GETTING Continuation<*> from LongRange
2021-03-11 22:44:09,852 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:44:09,853 [main:106] - GETTING Continuation<*> from Char
2021-03-11 22:44:09,870 [main:106] - GETTING Continuation<*> from IntProgression
2021-03-11 22:44:09,871 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:44:09,872 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:44:09,873 [main:106] - GETTING Continuation<*> from CharProgression
2021-03-11 22:44:09,874 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:44:09,874 [main:106] - GETTING Continuation<*> from CharProgression
2021-03-11 22:44:09,875 [main:106] - GETTING Continuation<*> from UShort
2021-03-11 22:44:09,898 [main:106] - GETTING Continuation<*> from CharProgression
2021-03-11 22:44:09,899 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:44:09,900 [main:106] - GETTING Continuation<*> from CharRange
2021-03-11 22:44:09,924 [main:106] - GETTING Continuation<*> from UByte
2021-03-11 22:44:09,924 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:44:09,925 [main:106] - GETTING Continuation<*> from CharProgression
2021-03-11 22:44:09,926 [main:106] - GETTING Continuation<*> from IntRange
2021-03-11 22:44:09,927 [main:106] - GETTING Continuation<*> from LongProgression
2021-03-11 22:44:09,928 [main:106] - GETTING Continuation<*> from Char
2021-03-11 22:44:09,928 [main:106] - GETTING Continuation<*> from UShort
2021-03-11 22:44:09,929 [main:106] - GETTING Continuation<*> from Long
2021-03-11 22:44:09,958 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 22:44:09,959 [main:107] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-11 22:44:09,959 [main:50] - replacing c !is CoroutineStackFrame Boolean
2021-03-11 22:44:09,959 [main:54] - Getting value of type Boolean
2021-03-11 22:44:10,188 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:44:10,193 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 22:44:10,193 [main:61] - GENERATED IS CALL =false
2021-03-11 22:44:10,213 [main:67] - randomType = Kla2
2021-03-11 22:44:10,415 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 22:44:10,420 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 22:44:10,434 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla2[DeserializedSimpleFunctionDescriptor@532e8b1b]
2021-03-11 22:44:10,646 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:44:10,646 [main:78] - Generated call from random type = (Kla2()).equals("dzmzj")
2021-03-11 22:44:10,647 [main:106] - GETTING Boolean from UByte
2021-03-11 22:44:10,670 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1e34bf20], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6f2af764]]
2021-03-11 22:44:10,670 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1e34bf20]
2021-03-11 22:44:10,670 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6f2af764]
2021-03-11 22:44:10,875 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:44:10,875 [main:117] - GENERATED CALL = ((9.toUByte())).toByte().equals("ktapi")
2021-03-11 22:44:10,875 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@420dd14b], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2e681871]]
2021-03-11 22:44:10,875 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@420dd14b]
2021-03-11 22:44:10,875 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2e681871]
2021-03-11 22:44:10,876 [main:117] - GENERATED CALL = ((9.toUByte())).toFloat().isNaN()
2021-03-11 22:44:10,876 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5e9f55b1], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@75ba0974]]
2021-03-11 22:44:10,876 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5e9f55b1]
2021-03-11 22:44:11,078 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:44:11,083 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@75ba0974]
2021-03-11 22:44:11,084 [main:117] - GENERATED CALL = ((9.toUByte())).rangeTo(76.toUByte()).isEmpty()
2021-03-11 22:44:11,084 [main:113] - Case = [@kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@314f9652], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37d4440a]]
2021-03-11 22:44:11,084 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@314f9652]
2021-03-11 22:44:11,286 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:44:11,291 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37d4440a]
2021-03-11 22:44:11,494 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:44:11,494 [main:117] - GENERATED CALL = ((9.toUByte())).compareTo(89.toUByte()).equals("blrox")
2021-03-11 22:44:11,494 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5b91445c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@730f0746]]
2021-03-11 22:44:11,494 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5b91445c]
2021-03-11 22:44:11,695 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:44:11,700 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@730f0746]
2021-03-11 22:44:11,902 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:44:11,902 [main:117] - GENERATED CALL = ((9.toUByte())).div(119.toUByte()).equals("dtqjb")
2021-03-11 22:44:11,902 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5ce5ec01], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43786fd8]]
2021-03-11 22:44:11,902 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5ce5ec01]
2021-03-11 22:44:12,104 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:44:12,105 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43786fd8]
2021-03-11 22:44:12,307 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:44:12,307 [main:117] - GENERATED CALL = ((9.toUByte())).equals("ggrin").equals("rjacm")
2021-03-11 22:44:12,307 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5e9f55b1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@d698682]]
2021-03-11 22:44:12,307 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5e9f55b1]
2021-03-11 22:44:12,308 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@d698682]
2021-03-11 22:44:12,509 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:44:12,510 [main:117] - GENERATED CALL = ((9.toUByte())).rangeTo((9.toUByte())).equals("jxzkb")
2021-03-11 22:44:12,510 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5ce5ec01]]
2021-03-11 22:44:12,510 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5ce5ec01]
2021-03-11 22:44:12,711 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:44:12,711 [main:117] - GENERATED CALL = ((9.toUByte())).equals("estqq")
2021-03-11 22:44:12,712 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@420dd14b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@6c81ee61]]
2021-03-11 22:44:12,712 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@420dd14b]
2021-03-11 22:44:12,712 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@6c81ee61]
2021-03-11 22:44:12,913 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:44:12,914 [main:117] - GENERATED CALL = ((9.toUByte())).toFloat().equals("dkras")
2021-03-11 22:44:12,914 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@420dd14b], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@49329ce9]]
2021-03-11 22:44:12,914 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@420dd14b]
2021-03-11 22:44:12,914 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@49329ce9]
2021-03-11 22:44:12,914 [main:117] - GENERATED CALL = ((9.toUByte())).toFloat().isInfinite()
2021-03-11 22:44:12,914 [main:114] - replacement of c !is CoroutineStackFrame of type Boolean is ((9.toUByte())).toFloat().isInfinite()
2021-03-11 22:44:13,115 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:44:13,116 [main:66] - Compilation checking started
2021-03-11 22:44:13,684 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (((9.toUByte())).toFloat().isInfinite()) error("Continuation " + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { error((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error((696865151.toUInt())?.toShort().toString((2)) + (longProgression).endInclusive.countLeadingZeroBits() + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:44:13,687 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-11 22:44:13,687 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-11 22:44:13,687 [main:54] - Getting value of type Throwable?
2021-03-11 22:44:13,889 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 22:44:14,098 [main:43] - GENERATING CALL OF fun NumberFormatException(message: kotlin.String?): Throwable = TODO()
2021-03-11 22:44:14,105 [main:61] - WITHOUT TYPE PARAMS = fun NumberFormatException(message: kotlin.String?): Throwable = TODO()
2021-03-11 22:44:14,581 [main:95] - GENERATED = NumberFormatException(null)
2021-03-11 22:44:14,581 [main:58] - GENERATED VALUE OF TYPE Throwable? = NumberFormatException(null)
2021-03-11 22:44:14,581 [main:61] - GENERATED IS CALL =true
2021-03-11 22:44:15,062 [main:67] - randomType = Sequence<UInt?>
2021-03-11 22:44:15,063 [main:106] - GETTING Throwable? from Char
2021-03-11 22:44:15,082 [main:106] - GETTING Throwable? from IntProgression
2021-03-11 22:44:15,093 [main:106] - GETTING Throwable? from String
2021-03-11 22:44:15,110 [main:106] - GETTING Throwable? from String
2021-03-11 22:44:15,111 [main:106] - GETTING Throwable? from Int
2021-03-11 22:44:15,141 [main:106] - GETTING Throwable? from LongRange
2021-03-11 22:44:15,162 [main:106] - GETTING Throwable? from String
2021-03-11 22:44:15,163 [main:106] - GETTING Throwable? from IntRange
2021-03-11 22:44:15,184 [main:106] - GETTING Throwable? from Float
2021-03-11 22:44:15,212 [main:106] - GETTING Throwable? from String
2021-03-11 22:44:15,213 [main:106] - GETTING Throwable? from String
2021-03-11 22:44:15,213 [main:106] - GETTING Throwable? from Int
2021-03-11 22:44:15,214 [main:106] - GETTING Throwable? from CharRange
2021-03-11 22:44:15,237 [main:106] - GETTING Throwable? from CharProgression
2021-03-11 22:44:15,250 [main:106] - GETTING Throwable? from CharProgression
2021-03-11 22:44:15,250 [main:106] - GETTING Throwable? from CharProgression
2021-03-11 22:44:15,251 [main:106] - GETTING Throwable? from UByte
2021-03-11 22:44:15,273 [main:106] - GETTING Throwable? from Int
2021-03-11 22:44:15,274 [main:106] - GETTING Throwable? from String
2021-03-11 22:44:15,274 [main:106] - GETTING Throwable? from IntProgression
2021-03-11 22:44:15,275 [main:106] - GETTING Throwable? from Long
2021-03-11 22:44:15,304 [main:106] - GETTING Throwable? from LongProgression
2021-03-11 22:44:15,316 [main:106] - GETTING Throwable? from UByte
2021-03-11 22:44:15,316 [main:106] - GETTING Throwable? from Char
2021-03-11 22:44:15,317 [main:106] - GETTING Throwable? from CharProgression
2021-03-11 22:44:15,318 [main:106] - GETTING Throwable? from Int
2021-03-11 22:44:15,318 [main:106] - GETTING Throwable? from String
2021-03-11 22:44:15,319 [main:106] - GETTING Throwable? from CharProgression
2021-03-11 22:44:15,319 [main:106] - GETTING Throwable? from Int
2021-03-11 22:44:15,320 [main:106] - GETTING Throwable? from IntRange
2021-03-11 22:44:15,321 [main:106] - GETTING Throwable? from LongProgression
2021-03-11 22:44:15,321 [main:106] - GETTING Throwable? from String
2021-03-11 22:44:15,322 [main:106] - GETTING Throwable? from CharProgression
2021-03-11 22:44:15,323 [main:106] - GETTING Throwable? from UShort
2021-03-11 22:44:15,346 [main:106] - GETTING Throwable? from String
2021-03-11 22:44:15,346 [main:106] - GETTING Throwable? from UShort
2021-03-11 22:44:15,347 [main:106] - GETTING Throwable? from String
2021-03-11 22:44:15,347 [main:114] - replacement of exceptionOrNull() of type Throwable? is NumberFormatException(null)
2021-03-11 22:44:15,546 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:44:15,549 [main:107] - replacing ("Continuation ", String)
2021-03-11 22:44:15,549 [main:50] - replacing "Continuation " String
2021-03-11 22:44:15,549 [main:54] - Getting value of type String
2021-03-11 22:44:15,750 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:44:15,755 [main:58] - GENERATED VALUE OF TYPE String = "ddjnm"
2021-03-11 22:44:15,755 [main:61] - GENERATED IS CALL =false
2021-03-11 22:44:16,551 [main:67] - randomType = Triple<Kla2, Function1<Long, Sequence<Boolean>>, Char>
2021-03-11 22:44:16,751 [main:302] - generating value of type = Triple<Kla2, Function1<Long, Sequence<Boolean>>, Char> false depth = 0
2021-03-11 22:44:16,964 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla2, second: Function1<Long, Sequence<Boolean>>, third: Char): Triple<Kla2, Function1<Long, Sequence<Boolean>>, Char> = TODO()
2021-03-11 22:44:16,970 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla2, second: Function1<Long, Sequence<Boolean>>, third: Char): Triple<Kla2, Function1<Long, Sequence<Boolean>>, Char> = TODO()
2021-03-11 22:44:17,185 [main:302] - generating value of type = Kla2 false depth = 3
2021-03-11 22:44:17,190 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 22:44:17,190 [main:302] - generating value of type = Function1<Long, Sequence<Boolean>> false depth = 3
2021-03-11 22:44:17,195 [main:302] - generating value of type = Sequence<Boolean> false depth = 4
2021-03-11 22:44:17,405 [main:43] - GENERATING CALL OF fun <T> emptySequence(): Sequence<Boolean> = TODO()
2021-03-11 22:44:17,412 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptySequence(): Sequence<Boolean> = TODO()
2021-03-11 22:44:17,624 [main:95] - GENERATED = emptySequence<Boolean>()
2021-03-11 22:44:17,624 [main:302] - generating value of type = Char true depth = 3
2021-03-11 22:44:17,629 [main:95] - GENERATED = Triple<Kla2, Function1<Long, Sequence<Boolean>>, Char>(Kla2(), {a: Long -> emptySequence<Boolean>()}, '')
2021-03-11 22:44:17,647 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:44:17,647 [main:78] - Generated call from random type = (Triple<Kla2, Function1<Long, Sequence<Boolean>>, Char>(Kla2(), {a: Long -> emptySequence<Boolean>()}, '')).third.plus(fu4("start"))
2021-03-11 22:44:17,648 [main:106] - GETTING String from CharProgression
2021-03-11 22:44:17,661 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]]
2021-03-11 22:44:17,661 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:44:17,662 [main:117] - GENERATED CALL = ((charProgression step 1)).first.uppercase()
2021-03-11 22:44:17,662 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:44:17,662 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:44:17,863 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:44:17,868 [main:117] - GENERATED CALL = ((charProgression step 1)).first.plus("itvin")
2021-03-11 22:44:17,868 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:44:17,868 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:44:18,071 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:44:18,283 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:44:18,289 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:44:18,768 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:44:18,773 [main:95] - GENERATED = StringBuilder(831940159)
2021-03-11 22:44:18,974 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:44:19,184 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:44:19,393 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:44:19,602 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:44:19,607 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:44:19,615 [main:117] - GENERATED CALL = ((charProgression step 1)).joinToString(StringBuilder(831940159), "gtxnq", "vblxz", (intProgression).endInclusive, "dxceb", {a: T -> "qoddk"})
2021-03-11 22:44:19,615 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]]
2021-03-11 22:44:19,616 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]
2021-03-11 22:44:19,616 [main:117] - GENERATED CALL = ((charProgression step 1)).first.lowercase()
2021-03-11 22:44:19,616 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]]
2021-03-11 22:44:19,616 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]
2021-03-11 22:44:19,616 [main:117] - GENERATED CALL = ((charProgression step 1)).first.titlecase()
2021-03-11 22:44:19,616 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@940a66], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:44:19,616 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:44:19,817 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:44:19,822 [main:117] - GENERATED CALL = ((charProgression step 1)).step.toString(-1180870571)
2021-03-11 22:44:19,822 [main:114] - replacement of "Continuation " of type String is ((charProgression step 1)).step.toString(-1180870571)
2021-03-11 22:44:20,022 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:44:20,022 [main:66] - Compilation checking started
2021-03-11 22:44:20,846 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + w)
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { error((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error((696865151.toUInt())?.toShort().toString((2)) + (longProgression).endInclusive.countLeadingZeroBits() + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:44:20,849 [main:107] - replacing (w, String)
2021-03-11 22:44:20,849 [main:50] - replacing w String
2021-03-11 22:44:20,849 [main:54] - Getting value of type String
2021-03-11 22:44:21,051 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:44:21,056 [main:58] - GENERATED VALUE OF TYPE String = "rgveg"
2021-03-11 22:44:21,056 [main:61] - GENERATED IS CALL =false
2021-03-11 22:44:21,067 [main:67] - randomType = Char
2021-03-11 22:44:21,270 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:44:21,292 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7c4a3a84]
2021-03-11 22:44:21,293 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76345526]
2021-03-11 22:44:21,495 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:44:21,500 [main:78] - Generated call from random type = ('?').toShort().toString(-1655602974)
2021-03-11 22:44:21,501 [main:106] - GETTING String from String
2021-03-11 22:44:21,522 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37d64f34]]
2021-03-11 22:44:21,522 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37d64f34]
2021-03-11 22:44:21,725 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:44:21,935 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:44:21,940 [main:117] - GENERATED CALL = (fu2("teeiv")).commonPrefixWith("bfvlw", true)
2021-03-11 22:44:21,940 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@77578d9f]]
2021-03-11 22:44:21,940 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@77578d9f]
2021-03-11 22:44:22,144 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:44:22,144 [main:117] - GENERATED CALL = (fu2("teeiv")).plus("dvujv")
2021-03-11 22:44:22,144 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a81c96f]]
2021-03-11 22:44:22,144 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9]
2021-03-11 22:44:22,346 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:44:22,351 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a81c96f]
2021-03-11 22:44:22,351 [main:117] - GENERATED CALL = (fu2("teeiv")).subSequence(-25465767, ((intProgression).endInclusive).compareTo(21899)).substring(((intProgression).endInclusive).compareTo(21899), (charProgression step 1).step)
2021-03-11 22:44:22,352 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cb6b352]]
2021-03-11 22:44:22,352 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cb6b352]
2021-03-11 22:44:22,554 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:44:22,559 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:44:22,564 [main:117] - GENERATED CALL = (fu2("teeiv")).dropWhile({a: Char -> true})
2021-03-11 22:44:22,564 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@229ea125]]
2021-03-11 22:44:22,564 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@229ea125]
2021-03-11 22:44:22,766 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:44:22,999 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:44:23,006 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:44:23,455 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:44:23,460 [main:95] - GENERATED = StringBuilder(-121900843)
2021-03-11 22:44:23,461 [main:117] - GENERATED CALL = (fu2("teeiv")).replaceRange(((intProgression).endInclusive).compareTo(21899), (charProgression step 1).step, StringBuilder(-121900843))
2021-03-11 22:44:23,461 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37d64f34]]
2021-03-11 22:44:23,461 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9]
2021-03-11 22:44:23,461 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37d64f34]
2021-03-11 22:44:23,663 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:44:23,872 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:44:23,878 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:44:24,326 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:44:24,331 [main:95] - GENERATED = StringBuilder("apads")
2021-03-11 22:44:24,533 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:44:24,539 [main:117] - GENERATED CALL = (fu2("teeiv")).subSequence(((intProgression).endInclusive).compareTo(21899), (charProgression step 1).step).commonPrefixWith(StringBuilder("apads"), true)
2021-03-11 22:44:24,539 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39efa66a]]
2021-03-11 22:44:24,539 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39efa66a]
2021-03-11 22:44:24,740 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 22:44:24,746 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:44:24,751 [main:117] - GENERATED CALL = (fu2("teeiv")).filterIndexed({a: Int, b: Char -> true})
2021-03-11 22:44:24,751 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a6e34be]]
2021-03-11 22:44:24,751 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a6e34be]
2021-03-11 22:44:24,751 [main:117] - GENERATED CALL = (fu2("teeiv")).replaceBefore((charProgression step 44179653).first, fu6({ "isrgl"}), fu2("teeiv"))
2021-03-11 22:44:24,751 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:44:24,751 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386]
2021-03-11 22:44:24,954 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:44:24,959 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:44:25,163 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:44:25,168 [main:117] - GENERATED CALL = (fu2("teeiv")).get(26926116).plus("ogadi")
2021-03-11 22:44:25,168 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f993d68]]
2021-03-11 22:44:25,168 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f993d68]
2021-03-11 22:44:25,168 [main:117] - GENERATED CALL = (fu2("teeiv")).toUpperCase()
2021-03-11 22:44:25,168 [main:114] - replacement of w of type String is ('?').toShort().toString(-1655602974)
2021-03-11 22:44:25,370 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:44:25,370 [main:66] - Compilation checking started
2021-03-11 22:44:26,194 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { error((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error((696865151.toUInt())?.toShort().toString((2)) + (longProgression).endInclusive.countLeadingZeroBits() + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:44:26,197 [main:107] - replacing ("tail-call optimization hit: method " + "vffuv" + " has no state-machine ", String)
2021-03-11 22:44:26,198 [main:50] - replacing "tail-call optimization hit: method " + "vffuv" + " has no state-machine " String
2021-03-11 22:44:26,198 [main:54] - Getting value of type String
2021-03-11 22:44:26,400 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:44:26,405 [main:58] - GENERATED VALUE OF TYPE String = "jqcqv"
2021-03-11 22:44:26,405 [main:61] - GENERATED IS CALL =false
2021-03-11 22:44:26,664 [main:67] - randomType = Kla3<Boolean>
2021-03-11 22:44:26,868 [main:302] - generating value of type = Kla3<Boolean> false depth = 0
2021-03-11 22:44:26,873 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 22:44:27,832 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 22:44:27,837 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}
2021-03-11 22:44:27,851 [main:106] - GETTING String from IntProgression
2021-03-11 22:44:27,862 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:44:27,862 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:44:28,064 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:44:28,274 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:44:28,485 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:44:28,695 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:44:28,701 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:44:29,150 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:44:29,158 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-11 22:44:29,360 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:44:29,570 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:44:29,576 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:44:30,024 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:44:30,235 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:44:30,242 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:44:30,689 [main:302] - generating value of type = String true depth = 6
2021-03-11 22:44:30,694 [main:95] - GENERATED = StringBuilder("ohkkm")
2021-03-11 22:44:30,694 [main:95] - GENERATED = StringBuilder(StringBuilder("ohkkm"))
2021-03-11 22:44:30,897 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:44:30,902 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:44:30,910 [main:117] - GENERATED CALL = ((intProgression step 2)).joinToString("pujix", StringBuilder(), StringBuilder(StringBuilder()), (charProgression step 1).step, StringBuilder(StringBuilder("ohkkm")), {a: T -> "kvrwb"})
2021-03-11 22:44:30,910 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@475cd5ea], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:44:30,910 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:44:31,113 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:44:31,118 [main:117] - GENERATED CALL = ((intProgression step 2)).first.toString(560651944)
2021-03-11 22:44:31,118 [main:114] - replacement of "tail-call optimization hit: method " + "vffuv" + " has no state-machine " of type String is ((intProgression step 2)).joinToString("pujix", StringBuilder(), StringBuilder(StringBuilder()), (charProgression step 1).step, StringBuilder(StringBuilder("ohkkm")), {a: T -> "kvrwb"})
2021-03-11 22:44:31,320 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:44:31,321 [main:66] - Compilation checking started
2021-03-11 22:44:31,935 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { error((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error(((intProgression step 2)).joinToString("pujix", StringBuilder(), StringBuilder(StringBuilder()), (charProgression step 1).step, StringBuilder(StringBuilder("ohkkm")), {a: T -> "kvrwb"}) +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error((696865151.toUInt())?.toShort().toString((2)) + (longProgression).endInclusive.countLeadingZeroBits() + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:44:31,937 [main:107] - replacing (!prope7, Boolean)
2021-03-11 22:44:31,938 [main:50] - replacing !prope7 Boolean
2021-03-11 22:44:31,938 [main:54] - Getting value of type Boolean
2021-03-11 22:44:32,142 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:44:32,147 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 22:44:32,147 [main:61] - GENERATED IS CALL =false
2021-03-11 22:44:32,398 [main:67] - randomType = ArrayDeque<String>
2021-03-11 22:44:32,599 [main:302] - generating value of type = ArrayDeque<String> false depth = 0
2021-03-11 22:44:32,808 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<String>): ArrayDeque<String> = TODO()
2021-03-11 22:44:32,815 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<String>): ArrayDeque<String> = TODO()
2021-03-11 22:44:33,279 [main:302] - generating value of type = Collection<String> false depth = 3
2021-03-11 22:44:33,488 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): Collection<String> = TODO()
2021-03-11 22:44:33,494 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): Collection<String> = TODO()
2021-03-11 22:44:33,940 [main:302] - generating value of type = Int true depth = 6
2021-03-11 22:44:33,945 [main:95] - GENERATED = ArrayDeque<String>(1654044076)
2021-03-11 22:44:33,945 [main:95] - GENERATED = ArrayDeque<String>(ArrayDeque<String>(1654044076))
2021-03-11 22:44:34,091 [main:149] - GENERATING call of type public open fun listIterator(): kotlin.collections.MutableListIterator<kotlin.String> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@3fa6b16]
2021-03-11 22:44:34,091 [main:149] - GENERATING call of type public abstract fun hasPrevious(): kotlin.Boolean defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@663a4d2]
2021-03-11 22:44:34,092 [main:78] - Generated call from random type = (ArrayDeque<String>(ArrayDeque<String>(1654044076))).listIterator().hasPrevious()
2021-03-11 22:44:34,092 [main:106] - GETTING Boolean from String
2021-03-11 22:44:34,111 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@281d6f49]]
2021-03-11 22:44:34,112 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@281d6f49]
2021-03-11 22:44:34,313 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:44:34,318 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:44:34,324 [main:117] - GENERATED CALL = (fu6({ "xxmtx"})).all({a: Char -> true})
2021-03-11 22:44:34,324 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b06c999]]
2021-03-11 22:44:34,324 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386]
2021-03-11 22:44:34,324 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b06c999]
2021-03-11 22:44:34,324 [main:117] - GENERATED CALL = (fu6({ "xxmtx"})).get(((intProgression).endInclusive)).isHighSurrogate()
2021-03-11 22:44:34,324 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a3f5cff]]
2021-03-11 22:44:34,324 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386]
2021-03-11 22:44:34,324 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a3f5cff]
2021-03-11 22:44:34,324 [main:117] - GENERATED CALL = (fu6({ "xxmtx"})).get((charProgression step 1).step).isLetterOrDigit()
2021-03-11 22:44:34,324 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@510362d6]]
2021-03-11 22:44:34,324 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1adde386]
2021-03-11 22:44:34,526 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:44:34,531 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@510362d6]
2021-03-11 22:44:34,531 [main:117] - GENERATED CALL = (fu6({ "xxmtx"})).get(911451379).isDigit()
2021-03-11 22:44:34,531 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e31cf10]]
2021-03-11 22:44:34,531 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e31cf10]
2021-03-11 22:44:34,733 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:44:34,738 [main:117] - GENERATED CALL = (fu6({ "xxmtx"})).contains((charProgression step 44179653).first, false)
2021-03-11 22:44:34,738 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51911ca8]]
2021-03-11 22:44:34,738 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9]
2021-03-11 22:44:34,940 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:44:34,946 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51911ca8]
2021-03-11 22:44:34,946 [main:117] - GENERATED CALL = (fu6({ "xxmtx"})).subSequence((intProgression).endInclusive, -1787427756).hasSurrogatePairAt((2))
2021-03-11 22:44:34,946 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3add94b7]]
2021-03-11 22:44:34,946 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9]
2021-03-11 22:44:35,149 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:44:35,154 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3add94b7]
2021-03-11 22:44:35,155 [main:117] - GENERATED CALL = (fu6({ "xxmtx"})).subSequence(-1009078574, (intProgression).endInclusive).isNotBlank()
2021-03-11 22:44:35,155 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f7ba7ed]]
2021-03-11 22:44:35,155 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f7ba7ed]
2021-03-11 22:44:35,155 [main:117] - GENERATED CALL = (fu6({ "xxmtx"})).isNotEmpty()
2021-03-11 22:44:35,155 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9], public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e31cf10]]
2021-03-11 22:44:35,155 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9]
2021-03-11 22:44:35,155 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e31cf10]
2021-03-11 22:44:35,356 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:44:35,361 [main:117] - GENERATED CALL = (fu6({ "xxmtx"})).subSequence((2), ((intProgression).endInclusive)).contains((charProgression step 44179653).first, false)
2021-03-11 22:44:35,361 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f0eabe6]]
2021-03-11 22:44:35,361 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9]
2021-03-11 22:44:35,564 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:44:35,569 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f0eabe6]
2021-03-11 22:44:35,569 [main:117] - GENERATED CALL = (fu6({ "xxmtx"})).subSequence(129238570, ((intProgression).endInclusive)).any()
2021-03-11 22:44:35,569 [main:114] - replacement of !prope7 of type Boolean is (fu6({ "xxmtx"})).get(911451379).isDigit()
2021-03-11 22:44:35,772 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:44:35,773 [main:66] - Compilation checking started
2021-03-11 22:44:36,616 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { error((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error((696865151.toUInt())?.toShort().toString((2)) + (longProgression).endInclusive.countLeadingZeroBits() + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:44:36,620 [main:107] - replacing (prope4, Any?)
2021-03-11 22:44:36,620 [main:50] - replacing prope4 Any?
2021-03-11 22:44:36,620 [main:54] - Getting value of type Any?
2021-03-11 22:44:36,825 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:44:36,825 [main:58] - GENERATED VALUE OF TYPE Any? = "ywhzd"
2021-03-11 22:44:36,826 [main:61] - GENERATED IS CALL =false
2021-03-11 22:44:38,665 [main:67] - randomType = Kla3<Function2<Kla4?, Triple<UByte?, Short?, Boolean>, Long>>?
2021-03-11 22:44:38,866 [main:302] - generating value of type = Kla3<Function2<Kla4?, Triple<UByte?, Short?, Boolean>, Long>> false depth = 0
2021-03-11 22:44:38,871 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 22:44:40,356 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 22:44:40,361 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}
2021-03-11 22:44:40,543 [main:106] - GETTING Any? from IntRange
2021-03-11 22:44:40,564 [main:106] - GETTING Any? from IntRange
2021-03-11 22:44:40,565 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:44:40,578 [main:106] - GETTING Any? from Char
2021-03-11 22:44:40,595 [main:106] - GETTING Any? from Int
2021-03-11 22:44:40,625 [main:106] - GETTING Any? from String
2021-03-11 22:44:40,642 [main:106] - GETTING Any? from Long
2021-03-11 22:44:40,671 [main:106] - GETTING Any? from IntProgression
2021-03-11 22:44:40,682 [main:106] - GETTING Any? from String
2021-03-11 22:44:40,683 [main:106] - GETTING Any? from UByte
2021-03-11 22:44:40,706 [main:106] - GETTING Any? from Char
2021-03-11 22:44:40,707 [main:106] - GETTING Any? from String
2021-03-11 22:44:40,708 [main:106] - GETTING Any? from String
2021-03-11 22:44:40,708 [main:106] - GETTING Any? from UShort
2021-03-11 22:44:40,733 [main:106] - GETTING Any? from LongProgression
2021-03-11 22:44:40,744 [main:106] - GETTING Any? from UByte
2021-03-11 22:44:40,744 [main:106] - GETTING Any? from LongRange
2021-03-11 22:44:40,766 [main:106] - GETTING Any? from String
2021-03-11 22:44:40,766 [main:106] - GETTING Any? from Int
2021-03-11 22:44:40,767 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:44:40,768 [main:106] - GETTING Any? from IntProgression
2021-03-11 22:44:40,768 [main:106] - GETTING Any? from LongProgression
2021-03-11 22:44:40,769 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:44:40,770 [main:106] - GETTING Any? from Int
2021-03-11 22:44:40,770 [main:106] - GETTING Any? from UShort
2021-03-11 22:44:40,771 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:44:40,771 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:44:40,772 [main:106] - GETTING Any? from CharRange
2021-03-11 22:44:40,797 [main:106] - GETTING Any? from String
2021-03-11 22:44:40,798 [main:106] - GETTING Any? from Float
2021-03-11 22:44:40,835 [main:106] - GETTING Any? from String
2021-03-11 22:44:40,836 [main:106] - GETTING Any? from String
2021-03-11 22:44:40,837 [main:106] - GETTING Any? from Int
2021-03-11 22:44:40,837 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:44:40,838 [main:106] - GETTING Any? from String
2021-03-11 22:44:40,838 [main:106] - GETTING Any? from String
2021-03-11 22:44:40,839 [main:106] - GETTING Any? from Int
2021-03-11 22:44:40,839 [main:114] - replacement of prope4 of type Any? is "ywhzd"
2021-03-11 22:44:41,042 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 22:44:41,042 [main:66] - Compilation checking started
2021-03-11 22:44:41,621 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this."ywhzd" = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { error((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error((696865151.toUInt())?.toShort().toString((2)) + (longProgression).endInclusive.countLeadingZeroBits() + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:44:41,624 [main:107] - replacing (let(x), Unit?)
2021-03-11 22:44:41,624 [main:50] - replacing let(x) Unit?
2021-03-11 22:44:41,624 [main:54] - Getting value of type Unit?
2021-03-11 22:44:41,828 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 22:44:42,044 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:44:42,050 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:44:42,515 [main:302] - generating value of type = Any false depth = 3
2021-03-11 22:44:42,516 [main:95] - GENERATED = print("owjnt")
2021-03-11 22:44:42,516 [main:58] - GENERATED VALUE OF TYPE Unit? = print("owjnt")
2021-03-11 22:44:42,516 [main:61] - GENERATED IS CALL =true
2021-03-11 22:44:42,790 [main:67] - randomType = HashMap<Float, UInt>
2021-03-11 22:44:42,995 [main:302] - generating value of type = HashMap<Float, UInt> false depth = 0
2021-03-11 22:44:43,208 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(original: kotlin.collections.Map<Float, UInt>): HashMap<Float, UInt> = TODO()
2021-03-11 22:44:43,215 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(original: kotlin.collections.Map<Float, UInt>): HashMap<Float, UInt> = TODO()
2021-03-11 22:44:43,686 [main:302] - generating value of type = Map<Float, UInt> false depth = 3
2021-03-11 22:44:43,899 [main:43] - GENERATING CALL OF fun <K, V> mutableMapOf(pairs: Pair<Float, UInt>): Map<Float, UInt> = TODO()
2021-03-11 22:44:43,905 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mutableMapOf(pairs: Pair<Float, UInt>): Map<Float, UInt> = TODO()
2021-03-11 22:44:44,120 [main:302] - generating value of type = Pair<Float, UInt> false depth = 6
2021-03-11 22:44:44,331 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Float, second: UInt): Pair<Float, UInt> = TODO()
2021-03-11 22:44:44,337 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Float, second: UInt): Pair<Float, UInt> = TODO()
2021-03-11 22:44:44,551 [main:302] - generating value of type = Float true depth = 9
2021-03-11 22:44:44,556 [main:302] - generating value of type = UInt true depth = 9
2021-03-11 22:44:44,561 [main:95] - GENERATED = Pair<Float, UInt>(0.70538336f, 724545239.toUInt())
2021-03-11 22:44:44,561 [main:95] - GENERATED = mutableMapOf<Float, UInt>(Pair<Float, UInt>(0.70538336f, 724545239.toUInt()))
2021-03-11 22:44:44,561 [main:95] - GENERATED = LinkedHashMap<Float, UInt>(mutableMapOf<Float, UInt>(Pair<Float, UInt>(0.70538336f, 724545239.toUInt())))
2021-03-11 22:44:44,679 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <K, V> kotlin.collections.MutableMap<K, V>.minusAssign(key: K): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@38d6ad53]
2021-03-11 22:44:44,881 [main:302] - generating value of type = K false depth = 0
2021-03-11 22:44:44,889 [main:158] - CANT GENERATE PARAMS FOR @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <K, V> kotlin.collections.MutableMap<K, V>.minusAssign(key: K): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@38d6ad53]
2021-03-11 22:44:44,889 [main:78] - Generated call from random type = (LinkedHashMap<Float, UInt>(mutableMapOf<Float, UInt>(Pair<Float, UInt>(0.70538336f, 724545239.toUInt())))).null
2021-03-11 22:44:44,890 [main:106] - GETTING Unit? from CharProgression
2021-03-11 22:44:44,903 [main:113] - Case = [@kotlin.internal.HidesMembers public inline fun <T> kotlin.collections.Iterable<T>.forEach(action: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a810e7]]
2021-03-11 22:44:44,903 [main:149] - GENERATING call of type @kotlin.internal.HidesMembers public inline fun <T> kotlin.collections.Iterable<T>.forEach(action: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a810e7]
2021-03-11 22:44:45,107 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-11 22:44:45,112 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:44:45,322 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:44:45,328 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:44:45,775 [main:302] - generating value of type = Any false depth = 4
2021-03-11 22:44:45,775 [main:95] - GENERATED = println("jiqdw")
2021-03-11 22:44:45,776 [main:117] - GENERATED CALL = (charProgression step 2)?.forEach({a: T -> println("jiqdw")})
2021-03-11 22:44:45,776 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.forEachIndexed(action: (index: kotlin.Int, T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1b9685fe]]
2021-03-11 22:44:45,776 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.forEachIndexed(action: (index: kotlin.Int, T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1b9685fe]
2021-03-11 22:44:45,978 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, T, Unit> false depth = 0
2021-03-11 22:44:45,983 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:44:46,195 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:44:46,201 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:44:46,647 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:44:46,653 [main:95] - GENERATED = require(true)
2021-03-11 22:44:46,653 [main:117] - GENERATED CALL = (charProgression step 2)?.forEachIndexed({a: Int, b: T -> require(true)})
2021-03-11 22:44:46,653 [main:113] - Case = [public abstract operator fun iterator(): kotlin.collections.Iterator<kotlin.Char> defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@6e115d20], public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1b4f6b6d]]
2021-03-11 22:44:46,653 [main:149] - GENERATING call of type public abstract operator fun iterator(): kotlin.collections.Iterator<kotlin.Char> defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@6e115d20]
2021-03-11 22:44:46,653 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1b4f6b6d]
2021-03-11 22:44:46,855 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-11 22:44:46,861 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:44:47,075 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 22:44:47,082 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 22:44:47,780 [main:302] - generating value of type = Int true depth = 4
2021-03-11 22:44:47,785 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 22:44:47,790 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 22:44:47,999 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:44:48,006 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:44:48,456 [main:302] - generating value of type = Any false depth = 8
2021-03-11 22:44:48,457 [main:95] - GENERATED = print("htmeh")
2021-03-11 22:44:48,457 [main:95] - GENERATED = repeat(2037005751, {a: Int -> print("htmeh")})
2021-03-11 22:44:48,457 [main:117] - GENERATED CALL = (charProgression step 2)?.iterator().forEach({a: T -> repeat(2037005751, {a: Int -> print("htmeh")})})
2021-03-11 22:44:48,457 [main:114] - replacement of let(x) of type Unit? is (charProgression step 2)?.forEachIndexed({a: Int, b: T -> require(true)})
2021-03-11 22:44:48,660 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 22:44:48,660 [main:66] - Compilation checking started
2021-03-11 22:44:49,259 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.(charProgression step 2)?.forEachIndexed({a: Int, b: T -> require(true)})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { error((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error((696865151.toUInt())?.toShort().toString((2)) + (longProgression).endInclusive.countLeadingZeroBits() + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:44:49,262 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 22:44:49,262 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 22:44:49,263 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 22:44:49,466 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 22:44:49,473 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 22:44:50,218 [main:67] - randomType = ArrayList<UInt?>?
2021-03-11 22:44:50,430 [main:302] - generating value of type = ArrayList<UInt?> false depth = 0
2021-03-11 22:44:50,650 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<UInt?> = TODO()
2021-03-11 22:44:50,657 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<UInt?> = TODO()
2021-03-11 22:44:50,876 [main:95] - GENERATED = arrayListOf<UInt?>()
2021-03-11 22:44:51,003 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:44:51,020 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:44:51,021 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:44:51,022 [main:106] - GETTING EmptyCoroutineContext from IntProgression
2021-03-11 22:44:51,033 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:44:51,034 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:44:51,046 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:44:51,047 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:44:51,079 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:44:51,080 [main:106] - GETTING EmptyCoroutineContext from UShort
2021-03-11 22:44:51,102 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:44:51,103 [main:106] - GETTING EmptyCoroutineContext from IntRange
2021-03-11 22:44:51,125 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-11 22:44:51,142 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:44:51,143 [main:106] - GETTING EmptyCoroutineContext from UByte
2021-03-11 22:44:51,165 [main:106] - GETTING EmptyCoroutineContext from Long
2021-03-11 22:44:51,194 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:44:51,194 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:44:51,195 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-11 22:44:51,196 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:44:51,196 [main:106] - GETTING EmptyCoroutineContext from IntProgression
2021-03-11 22:44:51,197 [main:106] - GETTING EmptyCoroutineContext from CharRange
2021-03-11 22:44:51,221 [main:106] - GETTING EmptyCoroutineContext from UShort
2021-03-11 22:44:51,221 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:44:51,222 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:44:51,222 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:44:51,223 [main:106] - GETTING EmptyCoroutineContext from LongProgression
2021-03-11 22:44:51,235 [main:106] - GETTING EmptyCoroutineContext from UByte
2021-03-11 22:44:51,236 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:44:51,236 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:44:51,237 [main:106] - GETTING EmptyCoroutineContext from IntRange
2021-03-11 22:44:51,237 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 22:44:51,238 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:44:51,239 [main:106] - GETTING EmptyCoroutineContext from LongRange
2021-03-11 22:44:51,260 [main:106] - GETTING EmptyCoroutineContext from LongProgression
2021-03-11 22:44:51,261 [main:106] - GETTING EmptyCoroutineContext from Float
2021-03-11 22:44:51,289 [main:106] - GETTING EmptyCoroutineContext from CharProgression
2021-03-11 22:44:51,289 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 22:44:51,289 [main:107] - replacing ((696865151.toUInt())?.toShort().toString((2)) + (longProgression).endInclusive.countLeadingZeroBits() + ", got " + prope6, String)
2021-03-11 22:44:51,289 [main:50] - replacing (696865151.toUInt())?.toShort().toString((2)) + (longProgression).endInclusive.countLeadingZeroBits() + ", got " + prope6 String
2021-03-11 22:44:51,289 [main:54] - Getting value of type String
2021-03-11 22:44:51,501 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:44:51,506 [main:58] - GENERATED VALUE OF TYPE String = "wlggk"
2021-03-11 22:44:51,662 [main:61] - GENERATED IS CALL =false
2021-03-11 22:44:51,908 [main:67] - randomType = Kla6
2021-03-11 22:44:52,111 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 22:44:52,116 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}
2021-03-11 22:44:52,134 [main:106] - GETTING String from IntProgression
2021-03-11 22:44:52,145 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:44:52,145 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:44:52,347 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:44:52,557 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:44:52,563 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:44:53,013 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:44:53,021 [main:95] - GENERATED = StringBuilder("uodwa")
2021-03-11 22:44:53,224 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:44:53,460 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:44:53,670 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:44:53,676 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:44:54,125 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:44:54,131 [main:95] - GENERATED = StringBuilder(934576921)
2021-03-11 22:44:54,332 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:44:54,544 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:44:54,549 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:44:54,759 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:44:54,765 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:44:55,218 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-11 22:44:55,428 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:44:55,434 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:44:55,884 [main:302] - generating value of type = Int true depth = 7
2021-03-11 22:44:55,889 [main:95] - GENERATED = StringBuilder(-1889843669)
2021-03-11 22:44:55,890 [main:95] - GENERATED = StringBuilder(StringBuilder(-1889843669))
2021-03-11 22:44:55,890 [main:117] - GENERATED CALL = ((intProgression step 2)).joinToString(StringBuilder("uodwa"), StringBuilder(), StringBuilder(934576921), (2), "vifpm", {a: T -> StringBuilder(StringBuilder(-1889843669))})
2021-03-11 22:44:55,890 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@475cd5ea], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:44:55,890 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:44:55,890 [main:117] - GENERATED CALL = ((intProgression step 2)).first.toString((2))
2021-03-11 22:44:55,890 [main:114] - replacement of (696865151.toUInt())?.toShort().toString((2)) + (longProgression).endInclusive.countLeadingZeroBits() + ", got " + prope6 of type String is ((intProgression step 2)).first.toString((2))
2021-03-11 22:44:56,094 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:44:56,094 [main:66] - Compilation checking started
2021-03-11 22:44:56,928 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { error((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:44:56,931 [main:107] - replacing (c, Continuation<*>)
2021-03-11 22:44:56,931 [main:50] - replacing c Continuation<*>
2021-03-11 22:44:56,931 [main:54] - Getting value of type Continuation<*>
2021-03-11 22:44:57,135 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 22:44:57,346 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:44:57,352 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:44:58,090 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 22:44:58,298 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:44:58,305 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:44:58,765 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 22:44:58,980 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:44:58,987 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:44:59,693 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-11 22:44:59,908 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:44:59,915 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:45:00,622 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-11 22:45:00,837 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:45:00,844 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:45:01,550 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:45:01,551 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:45:01,551 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:45:01,551 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:45:01,551 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:45:01,551 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 22:45:02,576 [main:67] - randomType = MutableMap<Set<Kla3<UInt>>, Kla2>
2021-03-11 22:45:02,578 [main:106] - GETTING Continuation<*> from CharProgression
2021-03-11 22:45:02,591 [main:106] - GETTING Continuation<*> from Float
2021-03-11 22:45:02,619 [main:106] - GETTING Continuation<*> from CharProgression
2021-03-11 22:45:02,620 [main:106] - GETTING Continuation<*> from UByte
2021-03-11 22:45:02,643 [main:106] - GETTING Continuation<*> from CharProgression
2021-03-11 22:45:02,644 [main:106] - GETTING Continuation<*> from LongRange
2021-03-11 22:45:02,664 [main:106] - GETTING Continuation<*> from Char
2021-03-11 22:45:02,682 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:45:02,712 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:45:02,729 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:45:02,730 [main:106] - GETTING Continuation<*> from UShort
2021-03-11 22:45:02,752 [main:106] - GETTING Continuation<*> from CharProgression
2021-03-11 22:45:02,753 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:45:02,754 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:45:02,755 [main:106] - GETTING Continuation<*> from IntRange
2021-03-11 22:45:02,776 [main:106] - GETTING Continuation<*> from IntProgression
2021-03-11 22:45:02,787 [main:106] - GETTING Continuation<*> from CharProgression
2021-03-11 22:45:02,788 [main:106] - GETTING Continuation<*> from UShort
2021-03-11 22:45:02,789 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:45:02,790 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:45:02,791 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:45:02,792 [main:106] - GETTING Continuation<*> from Char
2021-03-11 22:45:02,792 [main:106] - GETTING Continuation<*> from UByte
2021-03-11 22:45:02,793 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:45:02,794 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:45:02,795 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:45:02,796 [main:106] - GETTING Continuation<*> from LongProgression
2021-03-11 22:45:02,808 [main:106] - GETTING Continuation<*> from CharRange
2021-03-11 22:45:02,831 [main:106] - GETTING Continuation<*> from IntRange
2021-03-11 22:45:02,832 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:45:02,833 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:45:02,833 [main:106] - GETTING Continuation<*> from IntProgression
2021-03-11 22:45:02,834 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:45:02,835 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:45:02,836 [main:106] - GETTING Continuation<*> from CharProgression
2021-03-11 22:45:02,837 [main:106] - GETTING Continuation<*> from LongProgression
2021-03-11 22:45:02,837 [main:106] - GETTING Continuation<*> from Long
2021-03-11 22:45:02,867 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 22:45:02,867 [main:107] - replacing ((5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase(), String)
2021-03-11 22:45:02,867 [main:50] - replacing (5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() String
2021-03-11 22:45:02,867 [main:54] - Getting value of type String
2021-03-11 22:45:03,068 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:45:03,073 [main:58] - GENERATED VALUE OF TYPE String = "tuhii"
2021-03-11 22:45:03,073 [main:61] - GENERATED IS CALL =false
2021-03-11 22:45:03,309 [main:67] - randomType = UInt
2021-03-11 22:45:03,509 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 22:45:03,543 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@43fa1c12]
2021-03-11 22:45:03,543 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d73b7f8]
2021-03-11 22:45:03,543 [main:78] - Generated call from random type = (1061973650.toUInt()).toLong().toString(((intProgression).endInclusive))
2021-03-11 22:45:03,544 [main:106] - GETTING String from CharProgression
2021-03-11 22:45:03,556 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:45:03,556 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:45:03,758 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:45:03,966 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:45:04,177 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:45:04,385 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:45:04,596 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:45:04,602 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:45:05,049 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:45:05,057 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-11 22:45:05,259 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:45:05,264 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:45:05,272 [main:117] - GENERATED CALL = ((charProgression step 44179653)).joinToString("maekv", "xdqfn", "xefnk", (intProgression).endInclusive, StringBuilder(StringBuilder()), {a: T -> "znwfh"})
2021-03-11 22:45:05,273 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]]
2021-03-11 22:45:05,273 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:45:05,273 [main:117] - GENERATED CALL = ((charProgression step 44179653)).first.uppercase()
2021-03-11 22:45:05,273 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@940a66], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:45:05,273 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:45:05,273 [main:117] - GENERATED CALL = ((charProgression step 44179653)).step.toString((intProgression).endInclusive)
2021-03-11 22:45:05,273 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]]
2021-03-11 22:45:05,273 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]
2021-03-11 22:45:05,273 [main:117] - GENERATED CALL = ((charProgression step 44179653)).first.titlecase()
2021-03-11 22:45:05,273 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:45:05,273 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:45:05,274 [main:117] - GENERATED CALL = ((charProgression step 44179653)).first.plus(fu5({ "lmriy"}))
2021-03-11 22:45:05,274 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]]
2021-03-11 22:45:05,274 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]
2021-03-11 22:45:05,274 [main:117] - GENERATED CALL = ((charProgression step 44179653)).first.lowercase()
2021-03-11 22:45:05,274 [main:114] - replacement of (5667)?.toByte().toString((intProgression).endInclusive) + (charProgression step 1).first.lowercase() of type String is ((charProgression step 44179653)).step.toString((intProgression).endInclusive)
2021-03-11 22:45:05,474 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:45:05,475 [main:66] - Compilation checking started
2021-03-11 22:45:06,279 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { error(((charProgression step 44179653)).step.toString((intProgression).endInclusive) +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:45:06,282 [main:107] - replacing (prope7, Boolean)
2021-03-11 22:45:06,282 [main:50] - replacing prope7 Boolean
2021-03-11 22:45:06,282 [main:54] - Getting value of type Boolean
2021-03-11 22:45:06,514 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:45:06,519 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 22:45:06,519 [main:61] - GENERATED IS CALL =false
2021-03-11 22:45:06,997 [main:67] - randomType = Kla3<Byte>
2021-03-11 22:45:07,199 [main:302] - generating value of type = Kla3<Byte> false depth = 0
2021-03-11 22:45:07,204 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 22:45:07,883 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 22:45:07,888 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}
2021-03-11 22:45:07,902 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@5654a1ae]
2021-03-11 22:45:08,103 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:45:08,103 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13a5d745]
2021-03-11 22:45:08,303 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:45:08,308 [main:78] - Generated call from random type = (Kla6).equals("uiabj").and(false)
2021-03-11 22:45:08,309 [main:106] - GETTING Boolean from Int
2021-03-11 22:45:08,340 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@cf9073a], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@49329ce9]]
2021-03-11 22:45:08,340 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@cf9073a]
2021-03-11 22:45:08,340 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@49329ce9]
2021-03-11 22:45:08,340 [main:117] - GENERATED CALL = ((charProgression step 1).step).toFloat().isInfinite()
2021-03-11 22:45:08,340 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@cf9073a], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a63d87e]]
2021-03-11 22:45:08,340 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@cf9073a]
2021-03-11 22:45:08,340 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a63d87e]
2021-03-11 22:45:08,340 [main:117] - GENERATED CALL = ((charProgression step 1).step).toFloat().isFinite()
2021-03-11 22:45:08,340 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a3f5cff]]
2021-03-11 22:45:08,340 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]
2021-03-11 22:45:08,340 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a3f5cff]
2021-03-11 22:45:08,340 [main:117] - GENERATED CALL = ((charProgression step 1).step).toChar().isLetterOrDigit()
2021-03-11 22:45:08,341 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63833438]]
2021-03-11 22:45:08,341 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]
2021-03-11 22:45:08,341 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63833438]
2021-03-11 22:45:08,341 [main:117] - GENERATED CALL = ((charProgression step 1).step).toChar().isTitleCase()
2021-03-11 22:45:08,341 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37d4440a], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13a5d745]]
2021-03-11 22:45:08,341 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37d4440a]
2021-03-11 22:45:08,541 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:45:08,541 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13a5d745]
2021-03-11 22:45:08,741 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:45:08,746 [main:117] - GENERATED CALL = ((charProgression step 1).step).equals("iiyhf").and(true)
2021-03-11 22:45:08,747 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37d4440a], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2f9f9876]]
2021-03-11 22:45:08,747 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37d4440a]
2021-03-11 22:45:08,947 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:45:08,947 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2f9f9876]
2021-03-11 22:45:09,149 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:45:09,154 [main:117] - GENERATED CALL = ((charProgression step 1).step).equals("heemc").or(true)
2021-03-11 22:45:09,154 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6a60a620], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@a6c816a]]
2021-03-11 22:45:09,154 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6a60a620]
2021-03-11 22:45:09,154 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@a6c816a]
2021-03-11 22:45:09,154 [main:117] - GENERATED CALL = ((charProgression step 1).step).toDouble().isNaN()
2021-03-11 22:45:09,154 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ebb1490]]
2021-03-11 22:45:09,154 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]
2021-03-11 22:45:09,154 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ebb1490]
2021-03-11 22:45:09,155 [main:117] - GENERATED CALL = ((charProgression step 1).step).toChar().isWhitespace()
2021-03-11 22:45:09,155 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7d7681be], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@344d852b]]
2021-03-11 22:45:09,155 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7d7681be]
2021-03-11 22:45:09,355 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:45:09,360 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@344d852b]
2021-03-11 22:45:09,360 [main:117] - GENERATED CALL = ((charProgression step 1).step).rangeTo(-124).isEmpty()
2021-03-11 22:45:09,360 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@cf9073a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@6c81ee61]]
2021-03-11 22:45:09,360 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@cf9073a]
2021-03-11 22:45:09,360 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@6c81ee61]
2021-03-11 22:45:09,561 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:45:09,562 [main:117] - GENERATED CALL = ((charProgression step 1).step).toFloat().equals("ceadu")
2021-03-11 22:45:09,562 [main:114] - replacement of prope7 of type Boolean is ((charProgression step 1).step).toFloat().isFinite()
2021-03-11 22:45:09,762 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:45:09,763 [main:66] - Compilation checking started
2021-03-11 22:45:10,347 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { error(((charProgression step 44179653)).step.toString((intProgression).endInclusive) +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        ((charProgression step 1).step).toFloat().isFinite() = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:45:10,350 [main:107] - replacing (x, Function1<Throwable, Unit>)
2021-03-11 22:45:10,350 [main:50] - replacing x Function1<Throwable, Unit>
2021-03-11 22:45:10,350 [main:54] - Getting value of type Function1<Throwable, Unit>
2021-03-11 22:45:10,551 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-11 22:45:10,556 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:45:10,765 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:45:10,771 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:45:11,249 [main:302] - generating value of type = Any false depth = 4
2021-03-11 22:45:11,249 [main:95] - GENERATED = println("bkzfg")
2021-03-11 22:45:11,249 [main:58] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> println("bkzfg")}
2021-03-11 22:45:11,249 [main:61] - GENERATED IS CALL =false
2021-03-11 22:45:13,046 [main:67] - randomType = Triple<Function1<Kla3<MutableMap<UShort, Char>>, Short>, Kla6, Kla1?>?
2021-03-11 22:45:13,248 [main:302] - generating value of type = Triple<Function1<Kla3<MutableMap<UShort, Char>>, Short>, Kla6, Kla1?> false depth = 0
2021-03-11 22:45:13,460 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Function1<Kla3<MutableMap<UShort, Char>>, Short>, second: Kla6, third: Kla1?): Triple<Function1<Kla3<MutableMap<UShort, Char>>, Short>, Kla6, Kla1?> = TODO()
2021-03-11 22:45:13,467 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Function1<Kla3<MutableMap<UShort, Char>>, Short>, second: Kla6, third: Kla1?): Triple<Function1<Kla3<MutableMap<UShort, Char>>, Short>, Kla6, Kla1?> = TODO()
2021-03-11 22:45:13,679 [main:302] - generating value of type = Function1<Kla3<MutableMap<UShort, Char>>, Short> false depth = 3
2021-03-11 22:45:13,684 [main:302] - generating value of type = Short true depth = 4
2021-03-11 22:45:13,688 [main:302] - generating value of type = Kla6 false depth = 3
2021-03-11 22:45:13,693 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}
2021-03-11 22:45:13,693 [main:302] - generating value of type = Kla1 false depth = 3
2021-03-11 22:45:13,698 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}
2021-03-11 22:45:13,899 [main:194] - Type params = []
2021-03-11 22:45:14,100 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-11 22:45:14,311 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:45:14,318 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:45:14,776 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-11 22:45:14,991 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:45:14,997 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:45:15,760 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:45:15,760 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:45:15,760 [main:95] - GENERATED = Triple<Function1<Kla3<MutableMap<UShort, Char>>, Short>, Kla6, Kla1?>({a: Kla3<MutableMap<UShort, Char>> -> 6033}, Kla6, Kla1())
2021-03-11 22:45:15,798 [main:106] - GETTING Function1<Throwable, Unit> from UShort
2021-03-11 22:45:15,825 [main:106] - GETTING Function1<Throwable, Unit> from CharProgression
2021-03-11 22:45:15,839 [main:106] - GETTING Function1<Throwable, Unit> from CharProgression
2021-03-11 22:45:15,840 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-11 22:45:15,858 [main:106] - GETTING Function1<Throwable, Unit> from UByte
2021-03-11 22:45:15,881 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-11 22:45:15,912 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-11 22:45:15,914 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-11 22:45:15,915 [main:106] - GETTING Function1<Throwable, Unit> from IntProgression
2021-03-11 22:45:15,927 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-11 22:45:15,928 [main:106] - GETTING Function1<Throwable, Unit> from UByte
2021-03-11 22:45:15,930 [main:106] - GETTING Function1<Throwable, Unit> from CharProgression
2021-03-11 22:45:15,931 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-11 22:45:15,932 [main:106] - GETTING Function1<Throwable, Unit> from LongProgression
2021-03-11 22:45:15,945 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-11 22:45:15,946 [main:106] - GETTING Function1<Throwable, Unit> from CharProgression
2021-03-11 22:45:15,947 [main:106] - GETTING Function1<Throwable, Unit> from Float
2021-03-11 22:45:15,977 [main:106] - GETTING Function1<Throwable, Unit> from CharProgression
2021-03-11 22:45:15,978 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-11 22:45:15,979 [main:106] - GETTING Function1<Throwable, Unit> from IntRange
2021-03-11 22:45:16,001 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-11 22:45:16,003 [main:106] - GETTING Function1<Throwable, Unit> from LongProgression
2021-03-11 22:45:16,004 [main:106] - GETTING Function1<Throwable, Unit> from CharRange
2021-03-11 22:45:16,028 [main:106] - GETTING Function1<Throwable, Unit> from IntProgression
2021-03-11 22:45:16,029 [main:106] - GETTING Function1<Throwable, Unit> from Char
2021-03-11 22:45:16,048 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-11 22:45:16,049 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-11 22:45:16,050 [main:106] - GETTING Function1<Throwable, Unit> from Long
2021-03-11 22:45:16,083 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-11 22:45:16,084 [main:106] - GETTING Function1<Throwable, Unit> from Char
2021-03-11 22:45:16,085 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-11 22:45:16,086 [main:106] - GETTING Function1<Throwable, Unit> from IntRange
2021-03-11 22:45:16,087 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-11 22:45:16,088 [main:106] - GETTING Function1<Throwable, Unit> from LongRange
2021-03-11 22:45:16,113 [main:106] - GETTING Function1<Throwable, Unit> from CharProgression
2021-03-11 22:45:16,114 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-11 22:45:16,116 [main:106] - GETTING Function1<Throwable, Unit> from UShort
2021-03-11 22:45:16,116 [main:114] - replacement of x of type Function1<Throwable, Unit> is {a: Throwable -> println("bkzfg")}
2021-03-11 22:45:16,316 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 22:45:16,316 [main:66] - Compilation checking started
2021-03-11 22:45:17,119 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { error(((charProgression step 44179653)).step.toString((intProgression).endInclusive) +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:45:17,122 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 22:45:17,122 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 22:45:17,122 [main:54] - Getting value of type Function0<Unit>
2021-03-11 22:45:17,324 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:45:17,329 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:45:17,538 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:45:17,544 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:45:18,231 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:45:18,235 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 22:45:18,240 [main:302] - generating value of type = Any false depth = 5
2021-03-11 22:45:18,240 [main:95] - GENERATED = check(false, { "gspnz"})
2021-03-11 22:45:18,240 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "gspnz"})}
2021-03-11 22:45:18,241 [main:61] - GENERATED IS CALL =false
2021-03-11 22:45:18,251 [main:67] - randomType = Float
2021-03-11 22:45:18,451 [main:302] - generating value of type = Float true depth = 0
2021-03-11 22:45:18,490 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:45:18,539 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:45:18,557 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:18,574 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:18,575 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:18,576 [main:106] - GETTING Function0<Unit> from LongProgression
2021-03-11 22:45:18,588 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:45:18,589 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:18,590 [main:106] - GETTING Function0<Unit> from LongProgression
2021-03-11 22:45:18,591 [main:106] - GETTING Function0<Unit> from UShort
2021-03-11 22:45:18,614 [main:106] - GETTING Function0<Unit> from CharRange
2021-03-11 22:45:18,637 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-11 22:45:18,649 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:18,650 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:18,651 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:45:18,651 [main:106] - GETTING Function0<Unit> from Long
2021-03-11 22:45:18,682 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:18,683 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:45:18,684 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:45:18,685 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:45:18,686 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:18,687 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-11 22:45:18,688 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 22:45:18,707 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 22:45:18,708 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 22:45:18,729 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 22:45:18,730 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:45:18,731 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:18,732 [main:106] - GETTING Function0<Unit> from UByte
2021-03-11 22:45:18,756 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:45:18,757 [main:106] - GETTING Function0<Unit> from Float
2021-03-11 22:45:18,787 [main:106] - GETTING Function0<Unit> from UByte
2021-03-11 22:45:18,788 [main:106] - GETTING Function0<Unit> from UShort
2021-03-11 22:45:18,789 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:45:18,790 [main:106] - GETTING Function0<Unit> from LongRange
2021-03-11 22:45:18,812 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:45:18,813 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:18,813 [main:114] - replacement of prope8 of type Function0<Unit> is { check(false, { "gspnz"})}
2021-03-11 22:45:19,014 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 22:45:19,015 [main:66] - Compilation checking started
2021-03-11 22:45:19,613 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { error(((charProgression step 44179653)).step.toString((intProgression).endInclusive) +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        { check(false, { "gspnz"})} = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:45:19,616 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 22:45:19,617 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 22:45:19,617 [main:54] - Getting value of type Function0<Unit>
2021-03-11 22:45:19,820 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:45:19,824 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:45:20,033 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:45:20,039 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:45:20,487 [main:302] - generating value of type = Any false depth = 4
2021-03-11 22:45:20,488 [main:95] - GENERATED = println("ignsw")
2021-03-11 22:45:20,488 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("ignsw")}
2021-03-11 22:45:20,488 [main:61] - GENERATED IS CALL =false
2021-03-11 22:45:20,722 [main:67] - randomType = Double
2021-03-11 22:45:20,924 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:45:20,969 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:20,989 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:45:21,003 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:21,004 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:21,005 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:45:21,042 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:21,043 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 22:45:21,066 [main:106] - GETTING Function0<Unit> from CharRange
2021-03-11 22:45:21,090 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:45:21,091 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:45:21,092 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:21,093 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:45:21,094 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 22:45:21,113 [main:106] - GETTING Function0<Unit> from LongRange
2021-03-11 22:45:21,135 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:45:21,136 [main:106] - GETTING Function0<Unit> from Float
2021-03-11 22:45:21,164 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:45:21,165 [main:106] - GETTING Function0<Unit> from UShort
2021-03-11 22:45:21,188 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:21,189 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:45:21,190 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:45:21,191 [main:106] - GETTING Function0<Unit> from Long
2021-03-11 22:45:21,221 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:45:21,222 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:21,223 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:21,224 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 22:45:21,225 [main:106] - GETTING Function0<Unit> from LongProgression
2021-03-11 22:45:21,237 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:45:21,238 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-11 22:45:21,250 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:21,251 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-11 22:45:21,252 [main:106] - GETTING Function0<Unit> from UShort
2021-03-11 22:45:21,253 [main:106] - GETTING Function0<Unit> from UByte
2021-03-11 22:45:21,276 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 22:45:21,277 [main:106] - GETTING Function0<Unit> from UByte
2021-03-11 22:45:21,278 [main:106] - GETTING Function0<Unit> from LongProgression
2021-03-11 22:45:21,279 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:21,279 [main:114] - replacement of prope8 of type Function0<Unit> is { println("ignsw")}
2021-03-11 22:45:21,479 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 22:45:21,480 [main:66] - Compilation checking started
2021-03-11 22:45:22,050 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { error(((charProgression step 44179653)).step.toString((intProgression).endInclusive) +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        { println("ignsw")} = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:45:22,054 [main:107] - replacing (prope9 != null, Boolean)
2021-03-11 22:45:22,054 [main:50] - replacing prope9 != null Boolean
2021-03-11 22:45:22,054 [main:54] - Getting value of type Boolean
2021-03-11 22:45:22,261 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:45:22,266 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 22:45:22,266 [main:61] - GENERATED IS CALL =false
2021-03-11 22:45:22,276 [main:67] - randomType = Short
2021-03-11 22:45:22,479 [main:302] - generating value of type = Short true depth = 0
2021-03-11 22:45:22,515 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@19583ef8]
2021-03-11 22:45:22,716 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:45:22,717 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2785b3c8]
2021-03-11 22:45:22,917 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:45:22,922 [main:78] - Generated call from random type = (57).equals("cuqxm").xor(false)
2021-03-11 22:45:22,923 [main:106] - GETTING Boolean from Int
2021-03-11 22:45:22,954 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37d4440a], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13a5d745]]
2021-03-11 22:45:22,954 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37d4440a]
2021-03-11 22:45:23,156 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:45:23,156 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13a5d745]
2021-03-11 22:45:23,364 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:45:23,369 [main:117] - GENERATED CALL = ((2)).equals("atypt").and(true)
2021-03-11 22:45:23,370 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7636f179]]
2021-03-11 22:45:23,370 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]
2021-03-11 22:45:23,370 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7636f179]
2021-03-11 22:45:23,370 [main:117] - GENERATED CALL = ((2)).toChar().isLowSurrogate()
2021-03-11 22:45:23,370 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6880f559], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6f2af764]]
2021-03-11 22:45:23,370 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6880f559]
2021-03-11 22:45:23,370 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6f2af764]
2021-03-11 22:45:23,574 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:45:23,574 [main:117] - GENERATED CALL = ((2)).toByte().equals("fsmyi")
2021-03-11 22:45:23,574 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d236b95], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37d4440a]]
2021-03-11 22:45:23,575 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d236b95]
2021-03-11 22:45:23,575 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37d4440a]
2021-03-11 22:45:23,778 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:45:23,778 [main:117] - GENERATED CALL = ((2)).compareTo(((intProgression).endInclusive)).equals("cgshu")
2021-03-11 22:45:23,779 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d11473]]
2021-03-11 22:45:23,779 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]
2021-03-11 22:45:23,779 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d11473]
2021-03-11 22:45:23,779 [main:117] - GENERATED CALL = ((2)).toChar().isLetter()
2021-03-11 22:45:23,779 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ebb1490]]
2021-03-11 22:45:23,779 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16030535]
2021-03-11 22:45:23,779 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ebb1490]
2021-03-11 22:45:23,779 [main:117] - GENERATED CALL = ((2)).toChar().isWhitespace()
2021-03-11 22:45:23,779 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35529bcc], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@a6c816a]]
2021-03-11 22:45:23,779 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35529bcc]
2021-03-11 22:45:24,010 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:45:24,015 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@a6c816a]
2021-03-11 22:45:24,015 [main:117] - GENERATED CALL = ((2)).div(0.33353795720355794).isNaN()
2021-03-11 22:45:24,015 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35529bcc], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3aa9fb3]]
2021-03-11 22:45:24,015 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35529bcc]
2021-03-11 22:45:24,218 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:45:24,223 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3aa9fb3]
2021-03-11 22:45:24,223 [main:117] - GENERATED CALL = ((2)).div(0.04799825804369806).isInfinite()
2021-03-11 22:45:24,223 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37d4440a]]
2021-03-11 22:45:24,223 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37d4440a]
2021-03-11 22:45:24,428 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:45:24,428 [main:117] - GENERATED CALL = ((2)).equals("kmouc")
2021-03-11 22:45:24,429 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@cf9073a], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a63d87e]]
2021-03-11 22:45:24,429 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@cf9073a]
2021-03-11 22:45:24,429 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a63d87e]
2021-03-11 22:45:24,429 [main:117] - GENERATED CALL = ((2)).toFloat().isFinite()
2021-03-11 22:45:24,429 [main:114] - replacement of prope9 != null of type Boolean is ((2)).toChar().isWhitespace()
2021-03-11 22:45:24,629 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:45:24,629 [main:66] - Compilation checking started
2021-03-11 22:45:25,198 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (((2)).toChar().isWhitespace()) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { error(((charProgression step 44179653)).step.toString((intProgression).endInclusive) +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:45:25,202 [main:107] - replacing ({
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }, Any?)
2021-03-11 22:45:25,202 [main:50] - replacing {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    } Any?
2021-03-11 22:45:25,202 [main:54] - Getting value of type Any?
2021-03-11 22:45:25,420 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:45:25,420 [main:58] - GENERATED VALUE OF TYPE Any? = "wydzn"
2021-03-11 22:45:25,420 [main:61] - GENERATED IS CALL =false
2021-03-11 22:45:25,915 [main:67] - randomType = Kla3<Long>
2021-03-11 22:45:26,119 [main:302] - generating value of type = Kla3<Long> false depth = 0
2021-03-11 22:45:26,124 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 22:45:26,823 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 22:45:26,829 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}
2021-03-11 22:45:26,845 [main:106] - GETTING Any? from IntRange
2021-03-11 22:45:26,867 [main:106] - GETTING Any? from UShort
2021-03-11 22:45:26,889 [main:106] - GETTING Any? from IntProgression
2021-03-11 22:45:26,901 [main:106] - GETTING Any? from String
2021-03-11 22:45:26,918 [main:106] - GETTING Any? from LongRange
2021-03-11 22:45:26,945 [main:106] - GETTING Any? from String
2021-03-11 22:45:26,946 [main:106] - GETTING Any? from LongProgression
2021-03-11 22:45:26,958 [main:106] - GETTING Any? from String
2021-03-11 22:45:26,959 [main:106] - GETTING Any? from LongProgression
2021-03-11 22:45:26,960 [main:106] - GETTING Any? from Char
2021-03-11 22:45:26,978 [main:106] - GETTING Any? from Int
2021-03-11 22:45:27,009 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:45:27,021 [main:106] - GETTING Any? from Float
2021-03-11 22:45:27,049 [main:106] - GETTING Any? from String
2021-03-11 22:45:27,050 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:45:27,051 [main:106] - GETTING Any? from UShort
2021-03-11 22:45:27,052 [main:106] - GETTING Any? from UByte
2021-03-11 22:45:27,077 [main:106] - GETTING Any? from IntProgression
2021-03-11 22:45:27,078 [main:106] - GETTING Any? from String
2021-03-11 22:45:27,079 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:45:27,080 [main:106] - GETTING Any? from String
2021-03-11 22:45:27,081 [main:106] - GETTING Any? from Char
2021-03-11 22:45:27,082 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:45:27,083 [main:106] - GETTING Any? from String
2021-03-11 22:45:27,084 [main:106] - GETTING Any? from String
2021-03-11 22:45:27,085 [main:106] - GETTING Any? from IntRange
2021-03-11 22:45:27,086 [main:106] - GETTING Any? from Long
2021-03-11 22:45:27,117 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:45:27,118 [main:106] - GETTING Any? from Int
2021-03-11 22:45:27,119 [main:106] - GETTING Any? from Int
2021-03-11 22:45:27,120 [main:106] - GETTING Any? from Int
2021-03-11 22:45:27,121 [main:106] - GETTING Any? from String
2021-03-11 22:45:27,122 [main:106] - GETTING Any? from UByte
2021-03-11 22:45:27,123 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:45:27,124 [main:106] - GETTING Any? from String
2021-03-11 22:45:27,125 [main:106] - GETTING Any? from CharRange
2021-03-11 22:45:27,149 [main:106] - GETTING Any? from Int
2021-03-11 22:45:27,149 [main:114] - replacement of {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    } of type Any? is "wydzn"
2021-03-11 22:45:27,349 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-11 22:45:27,350 [main:66] - Compilation checking started
2021-03-11 22:45:27,359 [main:71] - Wrong syntax or breaks conditions
2021-03-11 22:45:27,360 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) "wydzn"
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { error(((charProgression step 44179653)).step.toString((intProgression).endInclusive) +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:45:27,363 [main:107] - replacing ("tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n"), String)
2021-03-11 22:45:27,363 [main:50] - replacing "tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n") String
2021-03-11 22:45:27,363 [main:54] - Getting value of type String
2021-03-11 22:45:27,565 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:45:27,569 [main:58] - GENERATED VALUE OF TYPE String = "dbyoe"
2021-03-11 22:45:27,569 [main:61] - GENERATED IS CALL =false
2021-03-11 22:45:28,071 [main:67] - randomType = Kla3<Kla5>
2021-03-11 22:45:28,274 [main:302] - generating value of type = Kla3<Kla5> false depth = 0
2021-03-11 22:45:28,279 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 22:45:29,023 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 22:45:29,028 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}
2021-03-11 22:45:29,043 [main:106] - GETTING String from CharProgression
2021-03-11 22:45:29,054 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]]
2021-03-11 22:45:29,054 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443982c9]
2021-03-11 22:45:29,055 [main:117] - GENERATED CALL = (charProgression step 2).first.titlecase()
2021-03-11 22:45:29,055 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]]
2021-03-11 22:45:29,055 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2310500a]
2021-03-11 22:45:29,256 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:45:29,465 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:45:29,673 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:45:29,679 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:45:30,124 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:45:30,132 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-11 22:45:30,332 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:45:30,541 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:45:30,746 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:45:30,954 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:45:30,960 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:45:31,404 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:45:31,409 [main:95] - GENERATED = StringBuilder("bqddg")
2021-03-11 22:45:31,610 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 22:45:31,615 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 22:45:31,823 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:45:31,829 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:45:32,273 [main:302] - generating value of type = Int true depth = 4
2021-03-11 22:45:32,278 [main:95] - GENERATED = StringBuilder(-753411034)
2021-03-11 22:45:32,278 [main:117] - GENERATED CALL = (charProgression step 2).joinToString("vxuze", StringBuilder(StringBuilder()), "evdao", -1402875485, StringBuilder("bqddg"), {a: T -> StringBuilder(-753411034)})
2021-03-11 22:45:32,278 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]]
2021-03-11 22:45:32,278 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13721728]
2021-03-11 22:45:32,278 [main:117] - GENERATED CALL = (charProgression step 2).first.uppercase()
2021-03-11 22:45:32,278 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@940a66], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:45:32,278 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:45:32,480 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:45:32,485 [main:117] - GENERATED CALL = (charProgression step 2).step.toString(650195799)
2021-03-11 22:45:32,485 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]]
2021-03-11 22:45:32,485 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fd871c5]
2021-03-11 22:45:32,485 [main:117] - GENERATED CALL = (charProgression step 2).first.plus(fu3("emofm"))
2021-03-11 22:45:32,485 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]]
2021-03-11 22:45:32,485 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ed85d16]
2021-03-11 22:45:32,485 [main:117] - GENERATED CALL = (charProgression step 2).first.lowercase()
2021-03-11 22:45:32,485 [main:114] - replacement of "tail-call optimization hit: method " + "vffuv" + " has no state-machine " +
                prope5.joinToString(separator = "\n") of type String is (charProgression step 2).first.plus(fu3("emofm"))
2021-03-11 22:45:32,685 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:45:32,686 [main:66] - Compilation checking started
2021-03-11 22:45:33,510 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { error(((charProgression step 44179653)).step.toString((intProgression).endInclusive) +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error((charProgression step 2).first.plus(fu3("emofm")))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:45:33,513 [main:107] - replacing (prope2.prope8, Function0<Unit>)
2021-03-11 22:45:33,513 [main:50] - replacing prope2.prope8 Function0<Unit>
2021-03-11 22:45:33,513 [main:54] - Getting value of type Function0<Unit>
2021-03-11 22:45:33,718 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:45:33,723 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:45:33,936 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 22:45:33,942 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 22:45:34,634 [main:302] - generating value of type = Int true depth = 4
2021-03-11 22:45:34,639 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 22:45:34,644 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 22:45:34,856 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:45:34,862 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:45:35,316 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 22:45:35,321 [main:95] - GENERATED = require(false)
2021-03-11 22:45:35,321 [main:95] - GENERATED = repeat(-685609376, {a: Int -> require(false)})
2021-03-11 22:45:35,321 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-685609376, {a: Int -> require(false)})}
2021-03-11 22:45:35,321 [main:61] - GENERATED IS CALL =false
2021-03-11 22:45:36,067 [main:67] - randomType = Pair<Float, LinkedHashSet<Short?>>
2021-03-11 22:45:36,269 [main:302] - generating value of type = Pair<Float, LinkedHashSet<Short?>> false depth = 0
2021-03-11 22:45:36,479 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Float, second: LinkedHashSet<Short?>): Pair<Float, LinkedHashSet<Short?>> = TODO()
2021-03-11 22:45:36,485 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Float, second: LinkedHashSet<Short?>): Pair<Float, LinkedHashSet<Short?>> = TODO()
2021-03-11 22:45:36,697 [main:302] - generating value of type = Float true depth = 3
2021-03-11 22:45:36,702 [main:302] - generating value of type = LinkedHashSet<Short?> false depth = 3
2021-03-11 22:45:36,911 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<Short?> = TODO()
2021-03-11 22:45:36,918 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<Short?> = TODO()
2021-03-11 22:45:37,602 [main:302] - generating value of type = Int true depth = 6
2021-03-11 22:45:37,607 [main:302] - generating value of type = Float true depth = 6
2021-03-11 22:45:37,611 [main:95] - GENERATED = LinkedHashSet<Short?>(83626223, 0.9690155f)
2021-03-11 22:45:37,612 [main:95] - GENERATED = Pair<Float, LinkedHashSet<Short?>>(0.32311797f, LinkedHashSet<Short?>(83626223, 0.9690155f))
2021-03-11 22:45:37,631 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:45:37,643 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:45:37,644 [main:106] - GETTING Function0<Unit> from LongProgression
2021-03-11 22:45:37,656 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:45:37,687 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 22:45:37,705 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:45:37,706 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 22:45:37,727 [main:106] - GETTING Function0<Unit> from Long
2021-03-11 22:45:37,785 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:37,803 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:37,804 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:37,805 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:45:37,806 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:37,807 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-11 22:45:37,820 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:45:37,821 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:45:37,822 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:37,823 [main:106] - GETTING Function0<Unit> from LongRange
2021-03-11 22:45:37,845 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 22:45:37,846 [main:106] - GETTING Function0<Unit> from CharRange
2021-03-11 22:45:37,869 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:37,870 [main:106] - GETTING Function0<Unit> from UByte
2021-03-11 22:45:37,893 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 22:45:37,894 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:45:37,895 [main:106] - GETTING Function0<Unit> from UByte
2021-03-11 22:45:37,896 [main:106] - GETTING Function0<Unit> from UShort
2021-03-11 22:45:37,920 [main:106] - GETTING Function0<Unit> from UShort
2021-03-11 22:45:37,921 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:45:37,922 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:37,923 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:37,924 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:45:37,925 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:37,926 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-11 22:45:37,927 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:45:37,928 [main:106] - GETTING Function0<Unit> from Float
2021-03-11 22:45:37,957 [main:106] - GETTING Function0<Unit> from LongProgression
2021-03-11 22:45:37,958 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:45:37,958 [main:114] - replacement of prope2.prope8 of type Function0<Unit> is { repeat(-685609376, {a: Int -> require(false)})}
2021-03-11 22:45:38,160 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 22:45:38,161 [main:66] - Compilation checking started
2021-03-11 22:45:38,738 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { error(((charProgression step 44179653)).step.toString((intProgression).endInclusive) +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error((charProgression step 2).first.plus(fu3("emofm")))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{ repeat(-685609376, {a: Int -> require(false)})} = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:45:38,742 [main:107] - replacing (let({a: Throwable -> println("bkzfg")}), Unit?)
2021-03-11 22:45:38,742 [main:50] - replacing let({a: Throwable -> println("bkzfg")}) Unit?
2021-03-11 22:45:38,742 [main:54] - Getting value of type Unit?
2021-03-11 22:45:38,950 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 22:45:39,162 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:45:39,168 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:45:39,618 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 22:45:39,623 [main:95] - GENERATED = require(false)
2021-03-11 22:45:39,624 [main:58] - GENERATED VALUE OF TYPE Unit? = require(false)
2021-03-11 22:45:39,624 [main:61] - GENERATED IS CALL =true
2021-03-11 22:45:40,350 [main:67] - randomType = Kla3<Sequence<ULong>>
2021-03-11 22:45:40,555 [main:302] - generating value of type = Kla3<Sequence<ULong>> false depth = 0
2021-03-11 22:45:40,559 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 22:45:41,256 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 22:45:41,261 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}
2021-03-11 22:45:41,280 [main:149] - GENERATING call of type public open fun resumeWith(prope4: kotlin.Result<kotlin.sequences.Sequence<kotlin.ULong>>): kotlin.Unit defined in Kla3[SimpleFunctionDescriptorImpl@2423a135]
2021-03-11 22:45:41,482 [main:302] - generating value of type = Result<Sequence<ULong>> false depth = 0
2021-03-11 22:45:41,693 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Sequence<ULong>): Result<Sequence<ULong>> = TODO()
2021-03-11 22:45:41,700 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Sequence<ULong>): Result<Sequence<ULong>> = TODO()
2021-03-11 22:45:42,157 [main:302] - generating value of type = Function0<Sequence<ULong>> false depth = 3
2021-03-11 22:45:42,162 [main:302] - generating value of type = Sequence<ULong> false depth = 4
2021-03-11 22:45:42,413 [main:43] - GENERATING CALL OF fun <T> sequenceOf(elements: ULong): Sequence<ULong> = TODO()
2021-03-11 22:45:42,419 [main:61] - WITHOUT TYPE PARAMS = fun <T> sequenceOf(elements: ULong): Sequence<ULong> = TODO()
2021-03-11 22:45:42,633 [main:302] - generating value of type = ULong true depth = 7
2021-03-11 22:45:42,638 [main:95] - GENERATED = sequenceOf<ULong>(326186965737161677.toULong())
2021-03-11 22:45:42,638 [main:95] - GENERATED = runCatching<Sequence<ULong>>({ sequenceOf<ULong>(326186965737161677.toULong())})
2021-03-11 22:45:42,639 [main:78] - Generated call from random type = (Kla6).resumeWith(runCatching<Sequence<ULong>>({ sequenceOf<ULong>(326186965737161677.toULong())}))
2021-03-11 22:45:42,640 [main:106] - GETTING Unit? from String
2021-03-11 22:45:42,660 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1506a9d]]
2021-03-11 22:45:42,660 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1506a9d]
2021-03-11 22:45:42,864 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 22:45:42,868 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:45:43,082 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 22:45:43,088 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 22:45:43,545 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 22:45:43,550 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 22:45:43,558 [main:95] - GENERATED = contract({ println()})
2021-03-11 22:45:43,559 [main:117] - GENERATED CALL = (fu2("teeiv"))?.forEachIndexed({a: Int, b: Char -> contract({ println()})})
2021-03-11 22:45:43,559 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b2a3c9c]]
2021-03-11 22:45:43,559 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b2a3c9c]
2021-03-11 22:45:43,766 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 22:45:43,771 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:45:43,983 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 22:45:43,989 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 22:45:44,447 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 22:45:44,452 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 22:45:44,664 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 22:45:44,671 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 22:45:45,125 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-11 22:45:45,130 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 22:45:45,342 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 22:45:45,349 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 22:45:45,806 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 12
2021-03-11 22:45:45,811 [main:302] - generating value of type = Unit false depth = 13
2021-03-11 22:45:46,025 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:45:46,031 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:45:46,482 [main:302] - generating value of type = Boolean true depth = 16
2021-03-11 22:45:46,482 [main:385] - Cant generate call of fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:45:46,482 [main:95] - GENERATED = contract({ })
2021-03-11 22:45:46,482 [main:95] - GENERATED = contract({ contract({ })})
2021-03-11 22:45:46,483 [main:95] - GENERATED = contract({ contract({ contract({ })})})
2021-03-11 22:45:46,483 [main:117] - GENERATED CALL = (fu2("teeiv"))?.forEach({a: Char -> contract({ contract({ contract({ })})})})
2021-03-11 22:45:46,483 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b2a3c9c]]
2021-03-11 22:45:46,483 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9]
2021-03-11 22:45:46,483 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b2a3c9c]
2021-03-11 22:45:46,686 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 22:45:46,691 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:45:46,904 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:45:46,910 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:45:47,632 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:45:47,637 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 22:45:47,642 [main:302] - generating value of type = Any false depth = 5
2021-03-11 22:45:47,642 [main:95] - GENERATED = check(false, { "bkvcb"})
2021-03-11 22:45:47,642 [main:117] - GENERATED CALL = (fu2("teeiv"))?.subSequence((charProgression step 1).step, (intProgression).endInclusive).forEach({a: Char -> check(false, { "bkvcb"})})
2021-03-11 22:45:47,643 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1506a9d]]
2021-03-11 22:45:47,643 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9]
2021-03-11 22:45:47,643 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1506a9d]
2021-03-11 22:45:47,844 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 22:45:47,849 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:45:48,059 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:45:48,065 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:45:48,757 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:45:48,762 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 22:45:48,767 [main:302] - generating value of type = Any false depth = 5
2021-03-11 22:45:48,767 [main:95] - GENERATED = require(false, { "sednh"})
2021-03-11 22:45:48,767 [main:117] - GENERATED CALL = (fu2("teeiv"))?.subSequence(((intProgression).endInclusive).compareTo(21899), (intProgression).endInclusive).forEachIndexed({a: Int, b: Char -> require(false, { "sednh"})})
2021-03-11 22:45:48,767 [main:114] - replacement of let({a: Throwable -> println("bkzfg")}) of type Unit? is (fu2("teeiv"))?.forEachIndexed({a: Int, b: Char -> contract({ println()})})
2021-03-11 22:45:48,969 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 22:45:48,970 [main:66] - Compilation checking started
2021-03-11 22:45:49,540 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.(fu2("teeiv"))?.forEachIndexed({a: Int, b: Char -> contract({ println()})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { error(((charProgression step 44179653)).step.toString((intProgression).endInclusive) +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error((charProgression step 2).first.plus(fu3("emofm")))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:45:49,543 [main:107] - replacing ({ error(((charProgression step 44179653)).step.toString((intProgression).endInclusive) +
                prope5.joinToString(separator = "\n")) }, Function0<Nothing>)
2021-03-11 22:45:49,544 [main:50] - replacing { error(((charProgression step 44179653)).step.toString((intProgression).endInclusive) +
                prope5.joinToString(separator = "\n")) } Function0<Nothing>
2021-03-11 22:45:49,544 [main:54] - Getting value of type Function0<Nothing>
2021-03-11 22:45:49,748 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-11 22:45:49,752 [main:302] - generating value of type = Nothing false depth = 1
2021-03-11 22:45:49,760 [main:58] - GENERATED VALUE OF TYPE Function0<Nothing> = { TODO()}
2021-03-11 22:45:49,760 [main:61] - GENERATED IS CALL =false
2021-03-11 22:45:50,012 [main:67] - randomType = LinkedHashSet<UShort>
2021-03-11 22:45:50,218 [main:302] - generating value of type = LinkedHashSet<UShort> false depth = 0
2021-03-11 22:45:50,436 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<UShort> = TODO()
2021-03-11 22:45:50,443 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<UShort> = TODO()
2021-03-11 22:45:50,659 [main:95] - GENERATED = linkedSetOf<UShort>()
2021-03-11 22:45:50,774 [main:106] - GETTING Function0<Nothing> from CharProgression
2021-03-11 22:45:50,787 [main:106] - GETTING Function0<Nothing> from String
2021-03-11 22:45:50,804 [main:106] - GETTING Function0<Nothing> from Int
2021-03-11 22:45:50,835 [main:106] - GETTING Function0<Nothing> from CharProgression
2021-03-11 22:45:50,836 [main:106] - GETTING Function0<Nothing> from UShort
2021-03-11 22:45:50,859 [main:106] - GETTING Function0<Nothing> from String
2021-03-11 22:45:50,860 [main:106] - GETTING Function0<Nothing> from IntProgression
2021-03-11 22:45:50,872 [main:106] - GETTING Function0<Nothing> from Int
2021-03-11 22:45:50,873 [main:106] - GETTING Function0<Nothing> from UByte
2021-03-11 22:45:50,896 [main:106] - GETTING Function0<Nothing> from String
2021-03-11 22:45:50,897 [main:106] - GETTING Function0<Nothing> from UShort
2021-03-11 22:45:50,898 [main:106] - GETTING Function0<Nothing> from Float
2021-03-11 22:45:50,927 [main:106] - GETTING Function0<Nothing> from Int
2021-03-11 22:45:50,928 [main:106] - GETTING Function0<Nothing> from Int
2021-03-11 22:45:50,928 [main:106] - GETTING Function0<Nothing> from String
2021-03-11 22:45:50,929 [main:106] - GETTING Function0<Nothing> from String
2021-03-11 22:45:50,930 [main:106] - GETTING Function0<Nothing> from String
2021-03-11 22:45:50,931 [main:106] - GETTING Function0<Nothing> from String
2021-03-11 22:45:50,932 [main:106] - GETTING Function0<Nothing> from LongProgression
2021-03-11 22:45:50,945 [main:106] - GETTING Function0<Nothing> from Char
2021-03-11 22:45:50,963 [main:106] - GETTING Function0<Nothing> from String
2021-03-11 22:45:50,964 [main:106] - GETTING Function0<Nothing> from IntRange
2021-03-11 22:45:50,986 [main:106] - GETTING Function0<Nothing> from CharProgression
2021-03-11 22:45:50,987 [main:106] - GETTING Function0<Nothing> from String
2021-03-11 22:45:50,988 [main:106] - GETTING Function0<Nothing> from IntRange
2021-03-11 22:45:50,989 [main:106] - GETTING Function0<Nothing> from CharProgression
2021-03-11 22:45:50,990 [main:106] - GETTING Function0<Nothing> from Long
2021-03-11 22:45:51,020 [main:106] - GETTING Function0<Nothing> from LongProgression
2021-03-11 22:45:51,021 [main:106] - GETTING Function0<Nothing> from String
2021-03-11 22:45:51,022 [main:106] - GETTING Function0<Nothing> from LongRange
2021-03-11 22:45:51,044 [main:106] - GETTING Function0<Nothing> from Char
2021-03-11 22:45:51,045 [main:106] - GETTING Function0<Nothing> from CharProgression
2021-03-11 22:45:51,046 [main:106] - GETTING Function0<Nothing> from Int
2021-03-11 22:45:51,047 [main:106] - GETTING Function0<Nothing> from IntProgression
2021-03-11 22:45:51,048 [main:106] - GETTING Function0<Nothing> from CharProgression
2021-03-11 22:45:51,049 [main:106] - GETTING Function0<Nothing> from UByte
2021-03-11 22:45:51,050 [main:106] - GETTING Function0<Nothing> from CharRange
2021-03-11 22:45:51,075 [main:114] - replacement of { error(((charProgression step 44179653)).step.toString((intProgression).endInclusive) +
                prope5.joinToString(separator = "\n")) } of type Function0<Nothing> is { TODO()}
2021-03-11 22:45:51,282 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:45:51,283 [main:66] - Compilation checking started
2021-03-11 22:45:52,123 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { TODO()}
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error((charProgression step 2).first.plus(fu3("emofm")))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:45:52,126 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-11 22:45:52,126 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-11 22:45:52,126 [main:54] - Getting value of type Throwable?
2021-03-11 22:45:52,334 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 22:45:52,342 [main:58] - GENERATED VALUE OF TYPE Throwable? = CharacterCodingException()
2021-03-11 22:45:52,342 [main:61] - GENERATED IS CALL =true
2021-03-11 22:45:52,352 [main:67] - randomType = String
2021-03-11 22:45:52,553 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:45:52,575 [main:106] - GETTING Throwable? from UByte
2021-03-11 22:45:52,598 [main:106] - GETTING Throwable? from CharRange
2021-03-11 22:45:52,620 [main:106] - GETTING Throwable? from UShort
2021-03-11 22:45:52,642 [main:106] - GETTING Throwable? from String
2021-03-11 22:45:52,659 [main:106] - GETTING Throwable? from LongRange
2021-03-11 22:45:52,680 [main:106] - GETTING Throwable? from UByte
2021-03-11 22:45:52,680 [main:106] - GETTING Throwable? from Long
2021-03-11 22:45:52,710 [main:106] - GETTING Throwable? from Int
2021-03-11 22:45:52,740 [main:106] - GETTING Throwable? from LongProgression
2021-03-11 22:45:52,751 [main:106] - GETTING Throwable? from CharProgression
2021-03-11 22:45:52,763 [main:106] - GETTING Throwable? from IntProgression
2021-03-11 22:45:52,775 [main:106] - GETTING Throwable? from CharProgression
2021-03-11 22:45:52,775 [main:106] - GETTING Throwable? from IntRange
2021-03-11 22:45:52,796 [main:106] - GETTING Throwable? from Char
2021-03-11 22:45:52,814 [main:106] - GETTING Throwable? from String
2021-03-11 22:45:52,814 [main:106] - GETTING Throwable? from Int
2021-03-11 22:45:52,815 [main:106] - GETTING Throwable? from UShort
2021-03-11 22:45:52,816 [main:106] - GETTING Throwable? from CharProgression
2021-03-11 22:45:52,816 [main:106] - GETTING Throwable? from Int
2021-03-11 22:45:52,817 [main:106] - GETTING Throwable? from String
2021-03-11 22:45:52,818 [main:106] - GETTING Throwable? from IntProgression
2021-03-11 22:45:52,818 [main:106] - GETTING Throwable? from String
2021-03-11 22:45:52,819 [main:106] - GETTING Throwable? from Float
2021-03-11 22:45:52,848 [main:106] - GETTING Throwable? from String
2021-03-11 22:45:52,849 [main:106] - GETTING Throwable? from String
2021-03-11 22:45:52,849 [main:106] - GETTING Throwable? from LongProgression
2021-03-11 22:45:52,850 [main:106] - GETTING Throwable? from String
2021-03-11 22:45:52,850 [main:106] - GETTING Throwable? from String
2021-03-11 22:45:52,851 [main:106] - GETTING Throwable? from Int
2021-03-11 22:45:52,852 [main:106] - GETTING Throwable? from String
2021-03-11 22:45:52,852 [main:106] - GETTING Throwable? from IntRange
2021-03-11 22:45:52,853 [main:106] - GETTING Throwable? from Char
2021-03-11 22:45:52,854 [main:106] - GETTING Throwable? from String
2021-03-11 22:45:52,854 [main:106] - GETTING Throwable? from CharProgression
2021-03-11 22:45:52,855 [main:106] - GETTING Throwable? from CharProgression
2021-03-11 22:45:52,856 [main:106] - GETTING Throwable? from CharProgression
2021-03-11 22:45:52,856 [main:106] - GETTING Throwable? from Int
2021-03-11 22:45:52,856 [main:114] - replacement of exceptionOrNull() of type Throwable? is CharacterCodingException()
2021-03-11 22:45:53,056 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:45:53,056 [main:66] - Compilation checking started
2021-03-11 22:45:53,621 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = v?.fu12()
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).CharacterCodingException()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { TODO()}
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error((charProgression step 2).first.plus(fu3("emofm")))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:45:53,624 [main:107] - replacing (getOrThrow(), Ty1)
2021-03-11 22:45:53,624 [main:50] - replacing getOrThrow() Ty1
2021-03-11 22:45:53,624 [main:54] - Getting value of type Ty1
2021-03-11 22:45:53,824 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 22:45:53,832 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 22:45:53,851 [main:67] - randomType = Kla1
2021-03-11 22:45:54,052 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 22:45:54,057 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}
2021-03-11 22:45:54,260 [main:194] - Type params = []
2021-03-11 22:45:54,463 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 22:45:54,675 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:45:54,681 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:45:55,140 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 22:45:55,353 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:45:55,359 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:45:56,080 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:45:56,080 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:45:56,094 [main:106] - GETTING Ty1 from IntRange
2021-03-11 22:45:56,143 [main:106] - GETTING Ty1 from CharProgression
2021-03-11 22:45:56,155 [main:106] - GETTING Ty1 from CharProgression
2021-03-11 22:45:56,156 [main:106] - GETTING Ty1 from Char
2021-03-11 22:45:56,173 [main:106] - GETTING Ty1 from CharProgression
2021-03-11 22:45:56,174 [main:106] - GETTING Ty1 from CharProgression
2021-03-11 22:45:56,175 [main:106] - GETTING Ty1 from Float
2021-03-11 22:45:56,203 [main:106] - GETTING Ty1 from UByte
2021-03-11 22:45:56,225 [main:106] - GETTING Ty1 from UByte
2021-03-11 22:45:56,225 [main:106] - GETTING Ty1 from UShort
2021-03-11 22:45:56,247 [main:106] - GETTING Ty1 from Long
2021-03-11 22:45:56,276 [main:106] - GETTING Ty1 from String
2021-03-11 22:45:56,293 [main:106] - GETTING Ty1 from LongProgression
2021-03-11 22:45:56,304 [main:106] - GETTING Ty1 from String
2021-03-11 22:45:56,304 [main:106] - GETTING Ty1 from String
2021-03-11 22:45:56,305 [main:106] - GETTING Ty1 from Int
2021-03-11 22:45:56,335 [main:106] - GETTING Ty1 from UShort
2021-03-11 22:45:56,336 [main:106] - GETTING Ty1 from IntRange
2021-03-11 22:45:56,336 [main:106] - GETTING Ty1 from Int
2021-03-11 22:45:56,337 [main:106] - GETTING Ty1 from String
2021-03-11 22:45:56,337 [main:106] - GETTING Ty1 from Int
2021-03-11 22:45:56,338 [main:106] - GETTING Ty1 from Int
2021-03-11 22:45:56,339 [main:106] - GETTING Ty1 from LongRange
2021-03-11 22:45:56,360 [main:106] - GETTING Ty1 from IntProgression
2021-03-11 22:45:56,371 [main:106] - GETTING Ty1 from Char
2021-03-11 22:45:56,372 [main:106] - GETTING Ty1 from LongProgression
2021-03-11 22:45:56,373 [main:106] - GETTING Ty1 from IntProgression
2021-03-11 22:45:56,373 [main:106] - GETTING Ty1 from CharProgression
2021-03-11 22:45:56,374 [main:106] - GETTING Ty1 from String
2021-03-11 22:45:56,374 [main:106] - GETTING Ty1 from String
2021-03-11 22:45:56,375 [main:106] - GETTING Ty1 from String
2021-03-11 22:45:56,375 [main:106] - GETTING Ty1 from Int
2021-03-11 22:45:56,376 [main:106] - GETTING Ty1 from CharRange
2021-03-11 22:45:56,399 [main:106] - GETTING Ty1 from String
2021-03-11 22:45:56,400 [main:106] - GETTING Ty1 from String
2021-03-11 22:45:56,401 [main:106] - GETTING Ty1 from CharProgression
2021-03-11 22:45:56,401 [main:106] - GETTING Ty1 from String
2021-03-11 22:45:56,401 [main:111] - Cant find and generate replacement for getOrThrow() type Ty1
2021-03-11 22:45:56,401 [main:107] - replacing (getOrThrow(), Ty1)
2021-03-11 22:45:56,401 [main:50] - replacing getOrThrow() Ty1
2021-03-11 22:45:56,401 [main:54] - Getting value of type Ty1
2021-03-11 22:45:56,602 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 22:45:56,610 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 22:45:56,850 [main:67] - randomType = Kla6
2021-03-11 22:45:57,050 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 22:45:57,054 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}
2021-03-11 22:45:57,074 [main:106] - GETTING Ty1 from LongProgression
2021-03-11 22:45:57,085 [main:106] - GETTING Ty1 from CharProgression
2021-03-11 22:45:57,099 [main:106] - GETTING Ty1 from CharProgression
2021-03-11 22:45:57,099 [main:106] - GETTING Ty1 from IntRange
2021-03-11 22:45:57,124 [main:106] - GETTING Ty1 from String
2021-03-11 22:45:57,141 [main:106] - GETTING Ty1 from Float
2021-03-11 22:45:57,169 [main:106] - GETTING Ty1 from String
2021-03-11 22:45:57,170 [main:106] - GETTING Ty1 from Char
2021-03-11 22:45:57,187 [main:106] - GETTING Ty1 from CharProgression
2021-03-11 22:45:57,188 [main:106] - GETTING Ty1 from String
2021-03-11 22:45:57,188 [main:106] - GETTING Ty1 from String
2021-03-11 22:45:57,189 [main:106] - GETTING Ty1 from UByte
2021-03-11 22:45:57,212 [main:106] - GETTING Ty1 from Long
2021-03-11 22:45:57,240 [main:106] - GETTING Ty1 from IntProgression
2021-03-11 22:45:57,251 [main:106] - GETTING Ty1 from String
2021-03-11 22:45:57,252 [main:106] - GETTING Ty1 from String
2021-03-11 22:45:57,253 [main:106] - GETTING Ty1 from Int
2021-03-11 22:45:57,283 [main:106] - GETTING Ty1 from IntProgression
2021-03-11 22:45:57,284 [main:106] - GETTING Ty1 from UShort
2021-03-11 22:45:57,306 [main:106] - GETTING Ty1 from CharProgression
2021-03-11 22:45:57,306 [main:106] - GETTING Ty1 from String
2021-03-11 22:45:57,307 [main:106] - GETTING Ty1 from IntRange
2021-03-11 22:45:57,308 [main:106] - GETTING Ty1 from LongRange
2021-03-11 22:45:57,331 [main:106] - GETTING Ty1 from Char
2021-03-11 22:45:57,331 [main:106] - GETTING Ty1 from Int
2021-03-11 22:45:57,332 [main:106] - GETTING Ty1 from Int
2021-03-11 22:45:57,332 [main:106] - GETTING Ty1 from CharRange
2021-03-11 22:45:57,361 [main:106] - GETTING Ty1 from UByte
2021-03-11 22:45:57,361 [main:106] - GETTING Ty1 from Int
2021-03-11 22:45:57,362 [main:106] - GETTING Ty1 from CharProgression
2021-03-11 22:45:57,362 [main:106] - GETTING Ty1 from String
2021-03-11 22:45:57,363 [main:106] - GETTING Ty1 from LongProgression
2021-03-11 22:45:57,364 [main:106] - GETTING Ty1 from String
2021-03-11 22:45:57,364 [main:106] - GETTING Ty1 from UShort
2021-03-11 22:45:57,365 [main:106] - GETTING Ty1 from String
2021-03-11 22:45:57,365 [main:106] - GETTING Ty1 from Int
2021-03-11 22:45:57,366 [main:106] - GETTING Ty1 from CharProgression
2021-03-11 22:45:57,366 [main:111] - Cant find and generate replacement for getOrThrow() type Ty1
2021-03-11 22:45:57,366 [main:107] - replacing (v?.fu12(), String?)
2021-03-11 22:45:57,366 [main:50] - replacing v?.fu12() String?
2021-03-11 22:45:57,366 [main:54] - Getting value of type String?
2021-03-11 22:45:57,567 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:45:57,572 [main:58] - GENERATED VALUE OF TYPE String? = "njrvq"
2021-03-11 22:45:57,572 [main:61] - GENERATED IS CALL =false
2021-03-11 22:45:57,812 [main:67] - randomType = Boolean?
2021-03-11 22:45:58,015 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:45:58,034 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4bec43d4]
2021-03-11 22:45:58,237 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:45:58,242 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:45:58,242 [main:78] - Generated call from random type = (true)?.compareTo(false).toString(((intProgression).endInclusive).compareTo(21899))
2021-03-11 22:45:58,243 [main:106] - GETTING String? from String
2021-03-11 22:45:58,264 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a933349]]
2021-03-11 22:45:58,264 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a933349]
2021-03-11 22:45:58,264 [main:117] - GENERATED CALL = (fu2("teeiv"))?.decapitalize()
2021-03-11 22:45:58,264 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37d64f34]]
2021-03-11 22:45:58,265 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37d64f34]
2021-03-11 22:45:58,466 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:45:58,676 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:45:58,681 [main:117] - GENERATED CALL = (fu2("teeiv"))?.commonPrefixWith("udrvq", false)
2021-03-11 22:45:58,681 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@178cdf4f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]]
2021-03-11 22:45:58,681 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a51086f]
2021-03-11 22:45:58,681 [main:117] - GENERATED CALL = (fu2("teeiv"))?.length.toString((2))
2021-03-11 22:45:58,681 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1552f868]]
2021-03-11 22:45:58,681 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1552f868]
2021-03-11 22:45:58,883 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:45:58,888 [main:117] - GENERATED CALL = (fu2("teeiv"))?.substring(1112827286)
2021-03-11 22:45:59,046 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b8eda2e]]
2021-03-11 22:45:59,047 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b8eda2e]
2021-03-11 22:45:59,048 [main:117] - GENERATED CALL = (fu2("teeiv"))?.substringBefore((2).toChar(), fu3("emofm"))
2021-03-11 22:45:59,048 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37e22e46]]
2021-03-11 22:45:59,048 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37e22e46]
2021-03-11 22:45:59,250 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:45:59,455 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:45:59,460 [main:117] - GENERATED CALL = (fu2("teeiv"))?.replaceAfter('륇', "fyimb", fu3("start"))
2021-03-11 22:45:59,460 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5867b79a]]
2021-03-11 22:45:59,460 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5867b79a]
2021-03-11 22:45:59,460 [main:117] - GENERATED CALL = (fu2("teeiv"))?.uppercase()
2021-03-11 22:45:59,460 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ce8be6a]]
2021-03-11 22:45:59,460 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7af649e9]
2021-03-11 22:45:59,662 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:45:59,667 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ce8be6a]
2021-03-11 22:45:59,667 [main:117] - GENERATED CALL = (fu2("teeiv"))?.subSequence(-942162682, (2)).repeat((charProgression step 1).step)
2021-03-11 22:45:59,668 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2beed03b]]
2021-03-11 22:45:59,668 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2beed03b]
2021-03-11 22:45:59,668 [main:117] - GENERATED CALL = (fu2("teeiv"))?.trimStart()
2021-03-11 22:45:59,668 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@459febd8]]
2021-03-11 22:45:59,668 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@459febd8]
2021-03-11 22:45:59,871 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:45:59,875 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:45:59,880 [main:117] - GENERATED CALL = (fu2("teeiv"))?.filter({a: Char -> false})
2021-03-11 22:45:59,880 [main:114] - replacement of v?.fu12() of type String? is fu2("teeiv")
2021-03-11 22:46:00,081 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:46:00,082 [main:66] - Compilation checking started
2021-03-11 22:46:00,892 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = fu2("teeiv")
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { TODO()}
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error((charProgression step 2).first.plus(fu3("emofm")))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:46:00,895 [main:107] - replacing (prope2.prope8, Function0<Unit>)
2021-03-11 22:46:00,895 [main:50] - replacing prope2.prope8 Function0<Unit>
2021-03-11 22:46:00,895 [main:54] - Getting value of type Function0<Unit>
2021-03-11 22:46:01,108 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:46:01,113 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:46:01,324 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 22:46:01,331 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 22:46:01,784 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 22:46:01,789 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 22:46:01,997 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:46:02,004 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:46:02,448 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 22:46:02,453 [main:95] - GENERATED = check(true)
2021-03-11 22:46:02,454 [main:95] - GENERATED = contract({ check(true)})
2021-03-11 22:46:02,454 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ check(true)})}
2021-03-11 22:46:02,454 [main:61] - GENERATED IS CALL =false
2021-03-11 22:46:02,464 [main:67] - randomType = Float
2021-03-11 22:46:02,663 [main:302] - generating value of type = Float true depth = 0
2021-03-11 22:46:02,698 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:46:02,716 [main:106] - GETTING Function0<Unit> from Long
2021-03-11 22:46:02,745 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 22:46:02,767 [main:106] - GETTING Function0<Unit> from UByte
2021-03-11 22:46:02,789 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:46:02,820 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:46:02,821 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:46:02,822 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:46:02,823 [main:106] - GETTING Function0<Unit> from LongProgression
2021-03-11 22:46:02,835 [main:106] - GETTING Function0<Unit> from CharRange
2021-03-11 22:46:02,858 [main:106] - GETTING Function0<Unit> from LongProgression
2021-03-11 22:46:02,859 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:46:02,860 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-11 22:46:02,872 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:46:02,873 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:46:02,886 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:46:02,887 [main:106] - GETTING Function0<Unit> from Float
2021-03-11 22:46:02,915 [main:106] - GETTING Function0<Unit> from UByte
2021-03-11 22:46:02,916 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:46:02,917 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:46:02,918 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-11 22:46:02,919 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:46:02,920 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 22:46:02,938 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:46:02,939 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:46:02,940 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:46:02,941 [main:106] - GETTING Function0<Unit> from UShort
2021-03-11 22:46:02,964 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:46:02,965 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 22:46:02,966 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:46:02,967 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:46:02,968 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:46:02,969 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:46:02,970 [main:106] - GETTING Function0<Unit> from LongRange
2021-03-11 22:46:02,992 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 22:46:02,993 [main:106] - GETTING Function0<Unit> from UShort
2021-03-11 22:46:02,994 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:46:02,994 [main:114] - replacement of prope2.prope8 of type Function0<Unit> is { contract({ check(true)})}
2021-03-11 22:46:03,194 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 22:46:03,194 [main:66] - Compilation checking started
2021-03-11 22:46:03,757 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = fu2("teeiv")
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { TODO()}
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error((charProgression step 2).first.plus(fu3("emofm")))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{ contract({ check(true)})} = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:46:03,760 [main:107] - replacing (prope2, Kla5)
2021-03-11 22:46:03,760 [main:50] - replacing prope2 Kla5
2021-03-11 22:46:03,760 [main:54] - Getting value of type Kla5
2021-03-11 22:46:03,961 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 22:46:03,966 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 22:46:03,966 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-11 22:46:03,966 [main:61] - GENERATED IS CALL =true
2021-03-11 22:46:05,258 [main:67] - randomType = Triple<Kla3<UShort>, Float, Map<Float, Float?>>
2021-03-11 22:46:05,469 [main:302] - generating value of type = Triple<Kla3<UShort>, Float, Map<Float, Float?>> false depth = 0
2021-03-11 22:46:05,683 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla3<UShort>, second: Float, third: Map<Float, Float?>): Triple<Kla3<UShort>, Float, Map<Float, Float?>> = TODO()
2021-03-11 22:46:05,689 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla3<UShort>, second: Float, third: Map<Float, Float?>): Triple<Kla3<UShort>, Float, Map<Float, Float?>> = TODO()
2021-03-11 22:46:05,904 [main:302] - generating value of type = Kla3<UShort> false depth = 3
2021-03-11 22:46:05,909 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 22:46:06,835 [main:302] - generating value of type = Kla6 false depth = 5
2021-03-11 22:46:06,840 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope2.prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}
2021-03-11 22:46:06,840 [main:302] - generating value of type = Float true depth = 3
2021-03-11 22:46:06,845 [main:302] - generating value of type = Map<Float, Float?> false depth = 3
2021-03-11 22:46:07,056 [main:43] - GENERATING CALL OF fun <K, V> emptyMap(): Map<Float, Float?> = TODO()
2021-03-11 22:46:07,062 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> emptyMap(): Map<Float, Float?> = TODO()
2021-03-11 22:46:07,275 [main:95] - GENERATED = emptyMap<Float, Float?>()
2021-03-11 22:46:07,276 [main:95] - GENERATED = Triple<Kla3<UShort>, Float, Map<Float, Float?>>(Kla6, 0.55349785f, emptyMap<Float, Float?>())
2021-03-11 22:46:07,298 [main:106] - GETTING Kla5 from String
2021-03-11 22:46:07,322 [main:106] - GETTING Kla5 from String
2021-03-11 22:46:07,323 [main:106] - GETTING Kla5 from String
2021-03-11 22:46:07,324 [main:106] - GETTING Kla5 from IntProgression
2021-03-11 22:46:07,337 [main:106] - GETTING Kla5 from Int
2021-03-11 22:46:07,369 [main:106] - GETTING Kla5 from Int
2021-03-11 22:46:07,369 [main:106] - GETTING Kla5 from String
2021-03-11 22:46:07,370 [main:106] - GETTING Kla5 from UShort
2021-03-11 22:46:07,393 [main:106] - GETTING Kla5 from String
2021-03-11 22:46:07,393 [main:106] - GETTING Kla5 from Char
2021-03-11 22:46:07,411 [main:106] - GETTING Kla5 from UShort
2021-03-11 22:46:07,411 [main:106] - GETTING Kla5 from UByte
2021-03-11 22:46:07,433 [main:106] - GETTING Kla5 from IntRange
2021-03-11 22:46:07,454 [main:106] - GETTING Kla5 from CharProgression
2021-03-11 22:46:07,466 [main:106] - GETTING Kla5 from LongRange
2021-03-11 22:46:07,487 [main:106] - GETTING Kla5 from Long
2021-03-11 22:46:07,516 [main:106] - GETTING Kla5 from Float
2021-03-11 22:46:07,544 [main:106] - GETTING Kla5 from LongProgression
2021-03-11 22:46:07,555 [main:106] - GETTING Kla5 from String
2021-03-11 22:46:07,555 [main:106] - GETTING Kla5 from CharProgression
2021-03-11 22:46:07,556 [main:106] - GETTING Kla5 from CharRange
2021-03-11 22:46:07,579 [main:106] - GETTING Kla5 from CharProgression
2021-03-11 22:46:07,580 [main:106] - GETTING Kla5 from IntRange
2021-03-11 22:46:07,580 [main:106] - GETTING Kla5 from Int
2021-03-11 22:46:07,581 [main:106] - GETTING Kla5 from LongProgression
2021-03-11 22:46:07,582 [main:106] - GETTING Kla5 from Char
2021-03-11 22:46:07,582 [main:106] - GETTING Kla5 from CharProgression
2021-03-11 22:46:07,583 [main:106] - GETTING Kla5 from IntProgression
2021-03-11 22:46:07,583 [main:106] - GETTING Kla5 from CharProgression
2021-03-11 22:46:07,584 [main:106] - GETTING Kla5 from String
2021-03-11 22:46:07,584 [main:106] - GETTING Kla5 from CharProgression
2021-03-11 22:46:07,585 [main:106] - GETTING Kla5 from Int
2021-03-11 22:46:07,586 [main:106] - GETTING Kla5 from String
2021-03-11 22:46:07,586 [main:106] - GETTING Kla5 from String
2021-03-11 22:46:07,587 [main:106] - GETTING Kla5 from String
2021-03-11 22:46:07,587 [main:106] - GETTING Kla5 from UByte
2021-03-11 22:46:07,588 [main:106] - GETTING Kla5 from Int
2021-03-11 22:46:07,588 [main:114] - replacement of prope2 of type Kla5 is Kla5()
2021-03-11 22:46:07,787 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:46:07,787 [main:66] - Compilation checking started
2021-03-11 22:46:08,588 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = fu2("teeiv")
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { TODO()}
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error((charProgression step 2).first.plus(fu3("emofm")))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
Kla5().prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:46:08,591 [main:107] - replacing (checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit(), Boolean)
2021-03-11 22:46:08,591 [main:50] - replacing checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit() Boolean
2021-03-11 22:46:08,591 [main:54] - Getting value of type Boolean
2021-03-11 22:46:08,793 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:46:08,797 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 22:46:08,798 [main:61] - GENERATED IS CALL =false
2021-03-11 22:46:09,031 [main:67] - randomType = Double
2021-03-11 22:46:09,232 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:46:09,265 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3ea14e1d]
2021-03-11 22:46:09,266 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ebb1490]
2021-03-11 22:46:09,266 [main:78] - Generated call from random type = (0.744607445798114).toChar().isWhitespace()
2021-03-11 22:46:09,266 [main:106] - GETTING Boolean from UByte
2021-03-11 22:46:09,288 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5e9f55b1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@d698682]]
2021-03-11 22:46:09,288 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5e9f55b1]
2021-03-11 22:46:09,288 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@d698682]
2021-03-11 22:46:09,490 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:46:09,490 [main:117] - GENERATED CALL = ((9.toUByte())).rangeTo(9.toUByte()).equals("qazns")
2021-03-11 22:46:09,490 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1cf04cdc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@19583ef8]]
2021-03-11 22:46:09,490 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1cf04cdc]
2021-03-11 22:46:09,490 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@19583ef8]
2021-03-11 22:46:09,691 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:46:09,692 [main:117] - GENERATED CALL = ((9.toUByte())).toShort().equals("favkc")
2021-03-11 22:46:09,692 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@420dd14b], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2e681871]]
2021-03-11 22:46:09,692 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@420dd14b]
2021-03-11 22:46:09,692 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2e681871]
2021-03-11 22:46:09,692 [main:117] - GENERATED CALL = ((9.toUByte())).toFloat().isNaN()
2021-03-11 22:46:09,692 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5ce5ec01], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43786fd8]]
2021-03-11 22:46:09,692 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5ce5ec01]
2021-03-11 22:46:09,918 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:46:09,919 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43786fd8]
2021-03-11 22:46:10,122 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:46:10,122 [main:117] - GENERATED CALL = ((9.toUByte())).equals("sessy").equals("mjgxn")
2021-03-11 22:46:10,122 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5b91445c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@730f0746]]
2021-03-11 22:46:10,122 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5b91445c]
2021-03-11 22:46:10,123 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@730f0746]
2021-03-11 22:46:10,325 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:46:10,325 [main:117] - GENERATED CALL = ((9.toUByte())).div(9.toUByte()).equals("kahsj")
2021-03-11 22:46:10,325 [main:113] - Case = [@kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@314f9652], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37d4440a]]
2021-03-11 22:46:10,325 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@314f9652]
2021-03-11 22:46:10,325 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37d4440a]
2021-03-11 22:46:10,526 [main:117] - GENERATED CALL = ((9.toUByte())).compareTo(9.toUByte()).equals(null)
2021-03-11 22:46:10,526 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@e3babe2], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@a6c816a]]
2021-03-11 22:46:10,526 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@e3babe2]
2021-03-11 22:46:10,526 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@a6c816a]
2021-03-11 22:46:10,526 [main:117] - GENERATED CALL = ((9.toUByte())).toDouble().isNaN()
2021-03-11 22:46:10,526 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@e3babe2], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3aa9fb3]]
2021-03-11 22:46:10,526 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@e3babe2]
2021-03-11 22:46:10,527 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3aa9fb3]
2021-03-11 22:46:10,527 [main:117] - GENERATED CALL = ((9.toUByte())).toDouble().isInfinite()
2021-03-11 22:46:10,527 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5ce5ec01], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6448989]]
2021-03-11 22:46:10,527 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5ce5ec01]
2021-03-11 22:46:10,727 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:46:10,727 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6448989]
2021-03-11 22:46:10,728 [main:117] - GENERATED CALL = ((9.toUByte())).equals("zwurv").not()
2021-03-11 22:46:10,728 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@420dd14b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@6c81ee61]]
2021-03-11 22:46:10,728 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@420dd14b]
2021-03-11 22:46:10,728 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@6c81ee61]
2021-03-11 22:46:10,928 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:46:10,929 [main:117] - GENERATED CALL = ((9.toUByte())).toFloat().equals("mpujq")
2021-03-11 22:46:10,929 [main:114] - replacement of checkFinished && (fu6({ "xxmtx"})).get(911451379).isDigit() of type Boolean is ((9.toUByte())).toShort().equals("favkc")
2021-03-11 22:46:11,129 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:46:11,130 [main:66] - Compilation checking started
2021-03-11 22:46:11,915 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = fu2("teeiv")
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { TODO()}
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error((charProgression step 2).first.plus(fu3("emofm")))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (((9.toUByte())).toShort().equals("favkc")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
Kla5().prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:46:11,917 [main:107] - replacing (prope4, Result<Ty1>)
2021-03-11 22:46:11,918 [main:50] - replacing prope4 Result<Ty1>
2021-03-11 22:46:11,918 [main:54] - Getting value of type Result<Ty1>
2021-03-11 22:46:12,119 [main:302] - generating value of type = Result<Ty1> false depth = 0
2021-03-11 22:46:12,329 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 22:46:12,336 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 22:46:12,783 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 22:46:12,783 [main:58] - GENERATED VALUE OF TYPE Result<Ty1> = 
2021-03-11 22:46:13,248 [main:67] - randomType = Byte?
2021-03-11 22:46:13,451 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:46:13,489 [main:106] - GETTING Result<Ty1> from Long
2021-03-11 22:46:13,519 [main:106] - GETTING Result<Ty1> from String
2021-03-11 22:46:13,537 [main:106] - GETTING Result<Ty1> from UShort
2021-03-11 22:46:13,560 [main:106] - GETTING Result<Ty1> from IntRange
2021-03-11 22:46:13,581 [main:106] - GETTING Result<Ty1> from IntRange
2021-03-11 22:46:13,582 [main:106] - GETTING Result<Ty1> from String
2021-03-11 22:46:13,583 [main:106] - GETTING Result<Ty1> from Int
2021-03-11 22:46:13,615 [main:106] - GETTING Result<Ty1> from IntProgression
2021-03-11 22:46:13,627 [main:106] - GETTING Result<Ty1> from LongProgression
2021-03-11 22:46:13,638 [main:106] - GETTING Result<Ty1> from IntProgression
2021-03-11 22:46:13,640 [main:106] - GETTING Result<Ty1> from Char
2021-03-11 22:46:13,658 [main:106] - GETTING Result<Ty1> from UByte
2021-03-11 22:46:13,681 [main:106] - GETTING Result<Ty1> from UByte
2021-03-11 22:46:13,682 [main:106] - GETTING Result<Ty1> from Int
2021-03-11 22:46:13,683 [main:106] - GETTING Result<Ty1> from CharProgression
2021-03-11 22:46:13,696 [main:106] - GETTING Result<Ty1> from String
2021-03-11 22:46:13,698 [main:106] - GETTING Result<Ty1> from String
2021-03-11 22:46:13,699 [main:106] - GETTING Result<Ty1> from LongRange
2021-03-11 22:46:13,722 [main:106] - GETTING Result<Ty1> from String
2021-03-11 22:46:13,723 [main:106] - GETTING Result<Ty1> from Int
2021-03-11 22:46:13,724 [main:106] - GETTING Result<Ty1> from CharProgression
2021-03-11 22:46:13,725 [main:106] - GETTING Result<Ty1> from CharRange
2021-03-11 22:46:13,749 [main:106] - GETTING Result<Ty1> from String
2021-03-11 22:46:13,750 [main:106] - GETTING Result<Ty1> from CharProgression
2021-03-11 22:46:13,752 [main:106] - GETTING Result<Ty1> from String
2021-03-11 22:46:13,753 [main:106] - GETTING Result<Ty1> from Char
2021-03-11 22:46:13,754 [main:106] - GETTING Result<Ty1> from Int
2021-03-11 22:46:13,755 [main:106] - GETTING Result<Ty1> from CharProgression
2021-03-11 22:46:13,756 [main:106] - GETTING Result<Ty1> from String
2021-03-11 22:46:13,757 [main:106] - GETTING Result<Ty1> from Int
2021-03-11 22:46:13,758 [main:106] - GETTING Result<Ty1> from UShort
2021-03-11 22:46:13,759 [main:106] - GETTING Result<Ty1> from CharProgression
2021-03-11 22:46:13,760 [main:106] - GETTING Result<Ty1> from CharProgression
2021-03-11 22:46:13,762 [main:106] - GETTING Result<Ty1> from LongProgression
2021-03-11 22:46:13,763 [main:106] - GETTING Result<Ty1> from String
2021-03-11 22:46:13,764 [main:106] - GETTING Result<Ty1> from Float
2021-03-11 22:46:13,794 [main:106] - GETTING Result<Ty1> from String
2021-03-11 22:46:13,794 [main:111] - Cant find and generate replacement for prope4 type Result<Ty1>
2021-03-11 22:46:13,794 [main:107] - replacing (getOrThrow(), Any?)
2021-03-11 22:46:13,794 [main:50] - replacing getOrThrow() Any?
2021-03-11 22:46:13,794 [main:54] - Getting value of type Any?
2021-03-11 22:46:13,994 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:46:13,995 [main:58] - GENERATED VALUE OF TYPE Any? = "czshm"
2021-03-11 22:46:13,995 [main:61] - GENERATED IS CALL =false
2021-03-11 22:46:14,513 [main:67] - randomType = ArrayDeque<Float>
2021-03-11 22:46:14,713 [main:302] - generating value of type = ArrayDeque<Float> false depth = 0
2021-03-11 22:46:14,922 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Float> = TODO()
2021-03-11 22:46:14,928 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Float> = TODO()
2021-03-11 22:46:15,370 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:46:15,375 [main:95] - GENERATED = ArrayDeque<Float>(690194062)
2021-03-11 22:46:15,493 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@5598e7]
2021-03-11 22:46:15,493 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@53902278]
2021-03-11 22:46:15,493 [main:78] - Generated call from random type = (ArrayDeque<Float>(690194062)).toArray().get((2))
2021-03-11 22:46:15,494 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:46:15,507 [main:106] - GETTING Any? from String
2021-03-11 22:46:15,524 [main:106] - GETTING Any? from String
2021-03-11 22:46:15,525 [main:106] - GETTING Any? from UByte
2021-03-11 22:46:15,548 [main:106] - GETTING Any? from UByte
2021-03-11 22:46:15,549 [main:106] - GETTING Any? from String
2021-03-11 22:46:15,550 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:46:15,551 [main:106] - GETTING Any? from String
2021-03-11 22:46:15,552 [main:106] - GETTING Any? from LongRange
2021-03-11 22:46:15,574 [main:106] - GETTING Any? from Int
2021-03-11 22:46:15,604 [main:106] - GETTING Any? from String
2021-03-11 22:46:15,605 [main:106] - GETTING Any? from UShort
2021-03-11 22:46:15,628 [main:106] - GETTING Any? from Int
2021-03-11 22:46:15,629 [main:106] - GETTING Any? from Char
2021-03-11 22:46:15,647 [main:106] - GETTING Any? from IntProgression
2021-03-11 22:46:15,659 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:46:15,660 [main:106] - GETTING Any? from String
2021-03-11 22:46:15,661 [main:106] - GETTING Any? from String
2021-03-11 22:46:15,662 [main:106] - GETTING Any? from LongProgression
2021-03-11 22:46:15,674 [main:106] - GETTING Any? from Int
2021-03-11 22:46:15,675 [main:106] - GETTING Any? from Float
2021-03-11 22:46:15,703 [main:106] - GETTING Any? from CharRange
2021-03-11 22:46:15,727 [main:106] - GETTING Any? from String
2021-03-11 22:46:15,728 [main:106] - GETTING Any? from Char
2021-03-11 22:46:15,729 [main:106] - GETTING Any? from String
2021-03-11 22:46:15,730 [main:106] - GETTING Any? from UShort
2021-03-11 22:46:15,730 [main:106] - GETTING Any? from IntRange
2021-03-11 22:46:15,752 [main:106] - GETTING Any? from Long
2021-03-11 22:46:15,782 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:46:15,783 [main:106] - GETTING Any? from IntProgression
2021-03-11 22:46:15,784 [main:106] - GETTING Any? from Int
2021-03-11 22:46:15,785 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:46:15,786 [main:106] - GETTING Any? from Int
2021-03-11 22:46:15,787 [main:106] - GETTING Any? from IntRange
2021-03-11 22:46:15,788 [main:106] - GETTING Any? from String
2021-03-11 22:46:15,789 [main:106] - GETTING Any? from LongProgression
2021-03-11 22:46:15,790 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:46:15,790 [main:114] - replacement of getOrThrow() of type Any? is (ArrayDeque<Float>(690194062)).toArray().get((2))
2021-03-11 22:46:15,989 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:46:15,990 [main:66] - Compilation checking started
2021-03-11 22:46:16,560 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = fu2("teeiv")
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.(ArrayDeque<Float>(690194062)).toArray().get((2))
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { TODO()}
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error((charProgression step 2).first.plus(fu3("emofm")))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (((9.toUByte())).toShort().equals("favkc")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
Kla5().prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:46:16,563 [main:107] - replacing (prope6, Int)
2021-03-11 22:46:16,563 [main:50] - replacing prope6 Int
2021-03-11 22:46:16,563 [main:54] - Getting value of type Int
2021-03-11 22:46:16,766 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:46:16,770 [main:58] - GENERATED VALUE OF TYPE Int = -387156751
2021-03-11 22:46:16,770 [main:61] - GENERATED IS CALL =false
2021-03-11 22:46:18,503 [main:67] - randomType = Pair<Byte, MutableMap<UShort, Function1<ULong, Float?>>>?
2021-03-11 22:46:18,706 [main:302] - generating value of type = Pair<Byte, MutableMap<UShort, Function1<ULong, Float?>>> false depth = 0
2021-03-11 22:46:18,945 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Byte, second: MutableMap<UShort, Function1<ULong, Float?>>): Pair<Byte, MutableMap<UShort, Function1<ULong, Float?>>> = TODO()
2021-03-11 22:46:18,951 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Byte, second: MutableMap<UShort, Function1<ULong, Float?>>): Pair<Byte, MutableMap<UShort, Function1<ULong, Float?>>> = TODO()
2021-03-11 22:46:19,168 [main:302] - generating value of type = Byte true depth = 3
2021-03-11 22:46:19,173 [main:302] - generating value of type = MutableMap<UShort, Function1<ULong, Float?>> false depth = 3
2021-03-11 22:46:19,384 [main:43] - GENERATING CALL OF fun <K, V> HashMap(original: kotlin.collections.Map<UShort, Function1<ULong, Float?>>): MutableMap<UShort, Function1<ULong, Float?>> = TODO()
2021-03-11 22:46:19,390 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(original: kotlin.collections.Map<UShort, Function1<ULong, Float?>>): MutableMap<UShort, Function1<ULong, Float?>> = TODO()
2021-03-11 22:46:19,861 [main:302] - generating value of type = Map<UShort, Function1<ULong, Float?>> false depth = 6
2021-03-11 22:46:20,070 [main:43] - GENERATING CALL OF fun <K, V> mapOf(): Map<UShort, Function1<ULong, Float?>> = TODO()
2021-03-11 22:46:20,076 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mapOf(): Map<UShort, Function1<ULong, Float?>> = TODO()
2021-03-11 22:46:20,288 [main:95] - GENERATED = mapOf<UShort, Function1<ULong, Float?>>()
2021-03-11 22:46:20,288 [main:95] - GENERATED = HashMap<UShort, Function1<ULong, Float?>>(mapOf<UShort, Function1<ULong, Float?>>())
2021-03-11 22:46:20,288 [main:95] - GENERATED = Pair<Byte, MutableMap<UShort, Function1<ULong, Float?>>>(-99, HashMap<UShort, Function1<ULong, Float?>>(mapOf<UShort, Function1<ULong, Float?>>()))
2021-03-11 22:46:20,314 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@52b4e063]
2021-03-11 22:46:20,315 [main:78] - Generated call from random type = (Pair<Byte, MutableMap<UShort, Function1<ULong, Float?>>>(-99, HashMap<UShort, Function1<ULong, Float?>>(mapOf<UShort, Function1<ULong, Float?>>())))?.first.countTrailingZeroBits()
2021-03-11 22:46:20,316 [main:106] - GETTING Int from CharProgression
2021-03-11 22:46:20,327 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@940a66], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d7006d3]]
2021-03-11 22:46:20,327 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d7006d3]
2021-03-11 22:46:20,328 [main:117] - GENERATED CALL = ((charProgression step 2)).step.inc()
2021-03-11 22:46:20,328 [main:113] - Case = [public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1badd75d]]
2021-03-11 22:46:20,328 [main:149] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1badd75d]
2021-03-11 22:46:20,529 [main:302] - generating value of type = T false depth = 0
2021-03-11 22:46:20,989 [main:43] - GENERATING CALL OF fun <T> checkNotNull(value: Set<Int>, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 22:46:20,995 [main:61] - WITHOUT TYPE PARAMS = fun <T> checkNotNull(value: Set<Int>, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 22:46:21,444 [main:302] - generating value of type = Set<Int> false depth = 3
2021-03-11 22:46:21,652 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(element: Int): Set<Int> = TODO()
2021-03-11 22:46:21,658 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(element: Int): Set<Int> = TODO()
2021-03-11 22:46:21,871 [main:302] - generating value of type = Int true depth = 6
2021-03-11 22:46:21,876 [main:95] - GENERATED = setOfNotNull<Int>(-8671005)
2021-03-11 22:46:21,876 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-11 22:46:21,881 [main:302] - generating value of type = Any false depth = 4
2021-03-11 22:46:21,881 [main:95] - GENERATED = checkNotNull<Set<Int>>(setOfNotNull<Int>(-8671005), { "epmpu"})
2021-03-11 22:46:21,881 [main:117] - GENERATED CALL = ((charProgression step 2)).lastIndexOf(checkNotNull<Set<Int>>(setOfNotNull<Int>(-8671005), { "epmpu"}))
2021-03-11 22:46:21,881 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@940a66], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13331927]]
2021-03-11 22:46:21,881 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13331927]
2021-03-11 22:46:21,881 [main:117] - GENERATED CALL = ((charProgression step 2)).step.xor((intProgression).endInclusive)
2021-03-11 22:46:21,882 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@940a66], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@29144af1]]
2021-03-11 22:46:21,882 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@29144af1]
2021-03-11 22:46:22,086 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:46:22,091 [main:117] - GENERATED CALL = ((charProgression step 2)).step.shr(1374631380)
2021-03-11 22:46:22,091 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@940a66], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74991745]]
2021-03-11 22:46:22,091 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74991745]
2021-03-11 22:46:22,292 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:46:22,297 [main:117] - GENERATED CALL = ((charProgression step 2)).step.minus(59)
2021-03-11 22:46:22,297 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@481bc57a], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@cb91c97]]
2021-03-11 22:46:22,297 [main:117] - GENERATED CALL = ((charProgression step 2)).first.code
2021-03-11 22:46:22,297 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@16529196]]
2021-03-11 22:46:22,297 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@16529196]
2021-03-11 22:46:22,501 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 22:46:22,506 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:46:22,511 [main:117] - GENERATED CALL = ((charProgression step 2)).indexOfFirst({a: T -> false})
2021-03-11 22:46:22,511 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@67d8431d]]
2021-03-11 22:46:22,511 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@67d8431d]
2021-03-11 22:46:22,511 [main:117] - GENERATED CALL = ((charProgression step 2)).count()
2021-03-11 22:46:22,511 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@940a66], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4b7217a2]]
2021-03-11 22:46:22,511 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4b7217a2]
2021-03-11 22:46:22,512 [main:117] - GENERATED CALL = ((charProgression step 2)).step.coerceIn((intProgression).endInclusive, (intProgression).endInclusive)
2021-03-11 22:46:22,512 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@940a66], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@40574edf]]
2021-03-11 22:46:22,512 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@40574edf]
2021-03-11 22:46:22,512 [main:117] - GENERATED CALL = ((charProgression step 2)).step.takeHighestOneBit()
2021-03-11 22:46:22,512 [main:114] - replacement of prope6 of type Int is -387156751
2021-03-11 22:46:22,713 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 22:46:22,714 [main:66] - Compilation checking started
2021-03-11 22:46:23,283 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = fu2("teeiv")
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { TODO()}
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error((charProgression step 2).first.plus(fu3("emofm")))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
-387156751 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (((9.toUByte())).toShort().equals("favkc")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
Kla5().prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:46:23,287 [main:107] - replacing (this.prope4, Any?)
2021-03-11 22:46:23,287 [main:50] - replacing this.prope4 Any?
2021-03-11 22:46:23,287 [main:54] - Getting value of type Any?
2021-03-11 22:46:23,489 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:46:23,489 [main:58] - GENERATED VALUE OF TYPE Any? = "zljya"
2021-03-11 22:46:23,489 [main:61] - GENERATED IS CALL =false
2021-03-11 22:46:23,508 [main:67] - randomType = Kla1
2021-03-11 22:46:23,736 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 22:46:23,741 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}
2021-03-11 22:46:23,943 [main:194] - Type params = []
2021-03-11 22:46:24,146 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 22:46:24,354 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:46:24,360 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:46:24,819 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 22:46:25,032 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:46:25,038 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:46:25,746 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:46:25,746 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:46:25,764 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:46:25,778 [main:106] - GETTING Any? from Char
2021-03-11 22:46:25,796 [main:106] - GETTING Any? from Int
2021-03-11 22:46:25,827 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:46:25,827 [main:106] - GETTING Any? from Int
2021-03-11 22:46:25,828 [main:106] - GETTING Any? from CharRange
2021-03-11 22:46:25,851 [main:106] - GETTING Any? from Int
2021-03-11 22:46:25,852 [main:106] - GETTING Any? from UByte
2021-03-11 22:46:25,874 [main:106] - GETTING Any? from UByte
2021-03-11 22:46:25,875 [main:106] - GETTING Any? from Char
2021-03-11 22:46:25,876 [main:106] - GETTING Any? from IntProgression
2021-03-11 22:46:25,887 [main:106] - GETTING Any? from Float
2021-03-11 22:46:25,915 [main:106] - GETTING Any? from String
2021-03-11 22:46:25,932 [main:106] - GETTING Any? from LongProgression
2021-03-11 22:46:25,943 [main:106] - GETTING Any? from String
2021-03-11 22:46:25,944 [main:106] - GETTING Any? from LongProgression
2021-03-11 22:46:25,945 [main:106] - GETTING Any? from IntRange
2021-03-11 22:46:25,966 [main:106] - GETTING Any? from String
2021-03-11 22:46:25,967 [main:106] - GETTING Any? from IntRange
2021-03-11 22:46:25,967 [main:106] - GETTING Any? from Long
2021-03-11 22:46:25,997 [main:106] - GETTING Any? from String
2021-03-11 22:46:25,998 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:46:25,998 [main:106] - GETTING Any? from Int
2021-03-11 22:46:25,999 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:46:26,000 [main:106] - GETTING Any? from String
2021-03-11 22:46:26,000 [main:106] - GETTING Any? from LongRange
2021-03-11 22:46:26,022 [main:106] - GETTING Any? from Int
2021-03-11 22:46:26,022 [main:106] - GETTING Any? from UShort
2021-03-11 22:46:26,045 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:46:26,046 [main:106] - GETTING Any? from String
2021-03-11 22:46:26,047 [main:106] - GETTING Any? from IntProgression
2021-03-11 22:46:26,047 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:46:26,048 [main:106] - GETTING Any? from String
2021-03-11 22:46:26,048 [main:106] - GETTING Any? from String
2021-03-11 22:46:26,049 [main:106] - GETTING Any? from UShort
2021-03-11 22:46:26,050 [main:106] - GETTING Any? from String
2021-03-11 22:46:26,050 [main:106] - GETTING Any? from String
2021-03-11 22:46:26,050 [main:114] - replacement of this.prope4 of type Any? is "zljya"
2021-03-11 22:46:26,253 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 22:46:26,253 [main:66] - Compilation checking started
2021-03-11 22:46:26,812 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = fu2("teeiv")
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
"zljya" = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { TODO()}
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error((charProgression step 2).first.plus(fu3("emofm")))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (((9.toUByte())).toShort().equals("favkc")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
Kla5().prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:46:26,816 [main:107] - replacing (prope7, Boolean)
2021-03-11 22:46:26,816 [main:50] - replacing prope7 Boolean
2021-03-11 22:46:26,816 [main:54] - Getting value of type Boolean
2021-03-11 22:46:27,018 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:46:27,023 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 22:46:27,023 [main:61] - GENERATED IS CALL =false
2021-03-11 22:46:27,033 [main:67] - randomType = Boolean
2021-03-11 22:46:27,235 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:46:27,251 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6448989]
2021-03-11 22:46:27,252 [main:78] - Generated call from random type = (false).not()
2021-03-11 22:46:27,252 [main:114] - replacement of prope7 of type Boolean is (false).not()
2021-03-11 22:46:27,452 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:46:27,453 [main:66] - Compilation checking started
2021-03-11 22:46:28,008 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = fu2("teeiv")
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { TODO()}
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error((charProgression step 2).first.plus(fu3("emofm")))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        (false).not() = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (((9.toUByte())).toShort().equals("favkc")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
Kla5().prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:46:28,011 [main:107] - replacing (getOrThrow(), Any?)
2021-03-11 22:46:28,011 [main:50] - replacing getOrThrow() Any?
2021-03-11 22:46:28,011 [main:54] - Getting value of type Any?
2021-03-11 22:46:28,243 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:46:28,243 [main:58] - GENERATED VALUE OF TYPE Any? = "nbeik"
2021-03-11 22:46:28,243 [main:61] - GENERATED IS CALL =false
2021-03-11 22:46:29,959 [main:67] - randomType = HashMap<ULong?, Pair<Byte, Kla3<UShort>>>?
2021-03-11 22:46:30,165 [main:302] - generating value of type = HashMap<ULong?, Pair<Byte, Kla3<UShort>>> false depth = 0
2021-03-11 22:46:30,377 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<ULong?, Pair<Byte, Kla3<UShort>>>): HashMap<ULong?, Pair<Byte, Kla3<UShort>>> = TODO()
2021-03-11 22:46:30,383 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<ULong?, Pair<Byte, Kla3<UShort>>>): HashMap<ULong?, Pair<Byte, Kla3<UShort>>> = TODO()
2021-03-11 22:46:30,601 [main:302] - generating value of type = Pair<ULong?, Pair<Byte, Kla3<UShort>>> false depth = 3
2021-03-11 22:46:30,815 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ULong?, second: Pair<Byte, Kla3<UShort>>): Pair<ULong?, Pair<Byte, Kla3<UShort>>> = TODO()
2021-03-11 22:46:30,822 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ULong?, second: Pair<Byte, Kla3<UShort>>): Pair<ULong?, Pair<Byte, Kla3<UShort>>> = TODO()
2021-03-11 22:46:31,034 [main:302] - generating value of type = ULong true depth = 6
2021-03-11 22:46:31,039 [main:302] - generating value of type = Pair<Byte, Kla3<UShort>> false depth = 6
2021-03-11 22:46:31,251 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Byte, second: Kla3<UShort>): Pair<Byte, Kla3<UShort>> = TODO()
2021-03-11 22:46:31,257 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Byte, second: Kla3<UShort>): Pair<Byte, Kla3<UShort>> = TODO()
2021-03-11 22:46:31,470 [main:302] - generating value of type = Byte true depth = 9
2021-03-11 22:46:31,475 [main:302] - generating value of type = Kla3<UShort> false depth = 9
2021-03-11 22:46:31,479 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 22:46:34,468 [main:302] - generating value of type = Kla6 false depth = 11
2021-03-11 22:46:34,473 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
Kla5().prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}
2021-03-11 22:46:34,473 [main:95] - GENERATED = Pair<Byte, Kla3<UShort>>(-13, Kla6)
2021-03-11 22:46:34,474 [main:95] - GENERATED = Pair<ULong?, Pair<Byte, Kla3<UShort>>>(6210750901795500058.toULong(), Pair<Byte, Kla3<UShort>>(-13, Kla6))
2021-03-11 22:46:34,474 [main:95] - GENERATED = linkedMapOf<ULong?, Pair<Byte, Kla3<UShort>>>(Pair<ULong?, Pair<Byte, Kla3<UShort>>>(6210750901795500058.toULong(), Pair<Byte, Kla3<UShort>>(-13, Kla6)))
2021-03-11 22:46:34,629 [main:106] - GETTING Any? from UShort
2021-03-11 22:46:34,659 [main:106] - GETTING Any? from IntProgression
2021-03-11 22:46:34,673 [main:106] - GETTING Any? from String
2021-03-11 22:46:34,693 [main:106] - GETTING Any? from String
2021-03-11 22:46:34,694 [main:106] - GETTING Any? from LongProgression
2021-03-11 22:46:34,707 [main:106] - GETTING Any? from Int
2021-03-11 22:46:34,738 [main:106] - GETTING Any? from UByte
2021-03-11 22:46:34,761 [main:106] - GETTING Any? from IntRange
2021-03-11 22:46:34,782 [main:106] - GETTING Any? from String
2021-03-11 22:46:34,783 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:46:34,796 [main:106] - GETTING Any? from Char
2021-03-11 22:46:34,814 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:46:34,815 [main:106] - GETTING Any? from LongRange
2021-03-11 22:46:34,836 [main:106] - GETTING Any? from CharRange
2021-03-11 22:46:34,859 [main:106] - GETTING Any? from String
2021-03-11 22:46:34,860 [main:106] - GETTING Any? from IntProgression
2021-03-11 22:46:34,861 [main:106] - GETTING Any? from Int
2021-03-11 22:46:34,862 [main:106] - GETTING Any? from String
2021-03-11 22:46:34,863 [main:106] - GETTING Any? from Char
2021-03-11 22:46:34,864 [main:106] - GETTING Any? from String
2021-03-11 22:46:34,865 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:46:34,866 [main:106] - GETTING Any? from String
2021-03-11 22:46:34,867 [main:106] - GETTING Any? from Long
2021-03-11 22:46:34,898 [main:106] - GETTING Any? from IntRange
2021-03-11 22:46:34,899 [main:106] - GETTING Any? from Float
2021-03-11 22:46:34,928 [main:106] - GETTING Any? from String
2021-03-11 22:46:34,929 [main:106] - GETTING Any? from String
2021-03-11 22:46:34,930 [main:106] - GETTING Any? from Int
2021-03-11 22:46:34,931 [main:106] - GETTING Any? from UByte
2021-03-11 22:46:34,932 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:46:34,933 [main:106] - GETTING Any? from LongProgression
2021-03-11 22:46:34,934 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:46:34,935 [main:106] - GETTING Any? from String
2021-03-11 22:46:34,936 [main:106] - GETTING Any? from Int
2021-03-11 22:46:34,937 [main:106] - GETTING Any? from CharProgression
2021-03-11 22:46:34,938 [main:106] - GETTING Any? from UShort
2021-03-11 22:46:34,939 [main:106] - GETTING Any? from Int
2021-03-11 22:46:34,939 [main:114] - replacement of getOrThrow() of type Any? is "nbeik"
2021-03-11 22:46:35,139 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 22:46:35,140 [main:66] - Compilation checking started
2021-03-11 22:46:35,703 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = fu2("teeiv")
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4."nbeik"
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { TODO()}
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error((charProgression step 2).first.plus(fu3("emofm")))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (((9.toUByte())).toShort().equals("favkc")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
Kla5().prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:46:35,706 [main:107] - replacing (Kla1, Kla7)
2021-03-11 22:46:35,706 [main:50] - replacing Kla1 Kla7
2021-03-11 22:46:35,706 [main:54] - Getting value of type Kla7
2021-03-11 22:46:35,910 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-11 22:46:35,915 [main:112] - generating klass Kla7 text = companion object Kla7 : Kla1()
2021-03-11 22:46:35,915 [main:58] - GENERATED VALUE OF TYPE Kla7 = 
2021-03-11 22:46:36,400 [main:67] - randomType = List<Boolean?>
2021-03-11 22:46:36,401 [main:106] - GETTING Kla7 from CharProgression
2021-03-11 22:46:36,415 [main:106] - GETTING Kla7 from Long
2021-03-11 22:46:36,444 [main:106] - GETTING Kla7 from Int
2021-03-11 22:46:36,474 [main:106] - GETTING Kla7 from LongProgression
2021-03-11 22:46:36,485 [main:106] - GETTING Kla7 from String
2021-03-11 22:46:36,502 [main:106] - GETTING Kla7 from Float
2021-03-11 22:46:36,530 [main:106] - GETTING Kla7 from CharRange
2021-03-11 22:46:36,553 [main:106] - GETTING Kla7 from Char
2021-03-11 22:46:36,570 [main:106] - GETTING Kla7 from CharProgression
2021-03-11 22:46:36,571 [main:106] - GETTING Kla7 from UByte
2021-03-11 22:46:36,593 [main:106] - GETTING Kla7 from String
2021-03-11 22:46:36,594 [main:106] - GETTING Kla7 from String
2021-03-11 22:46:36,594 [main:106] - GETTING Kla7 from UByte
2021-03-11 22:46:36,595 [main:106] - GETTING Kla7 from CharProgression
2021-03-11 22:46:36,595 [main:106] - GETTING Kla7 from UShort
2021-03-11 22:46:36,618 [main:106] - GETTING Kla7 from String
2021-03-11 22:46:36,619 [main:106] - GETTING Kla7 from String
2021-03-11 22:46:36,619 [main:106] - GETTING Kla7 from Int
2021-03-11 22:46:36,620 [main:106] - GETTING Kla7 from Int
2021-03-11 22:46:36,620 [main:106] - GETTING Kla7 from String
2021-03-11 22:46:36,621 [main:106] - GETTING Kla7 from CharProgression
2021-03-11 22:46:36,622 [main:106] - GETTING Kla7 from Char
2021-03-11 22:46:36,622 [main:106] - GETTING Kla7 from IntRange
2021-03-11 22:46:36,643 [main:106] - GETTING Kla7 from IntRange
2021-03-11 22:46:36,644 [main:106] - GETTING Kla7 from String
2021-03-11 22:46:36,645 [main:106] - GETTING Kla7 from UShort
2021-03-11 22:46:36,645 [main:106] - GETTING Kla7 from IntProgression
2021-03-11 22:46:36,657 [main:106] - GETTING Kla7 from IntProgression
2021-03-11 22:46:36,658 [main:106] - GETTING Kla7 from String
2021-03-11 22:46:36,658 [main:106] - GETTING Kla7 from LongRange
2021-03-11 22:46:36,679 [main:106] - GETTING Kla7 from CharProgression
2021-03-11 22:46:36,680 [main:106] - GETTING Kla7 from CharProgression
2021-03-11 22:46:36,681 [main:106] - GETTING Kla7 from Int
2021-03-11 22:46:36,681 [main:106] - GETTING Kla7 from String
2021-03-11 22:46:36,682 [main:106] - GETTING Kla7 from String
2021-03-11 22:46:36,682 [main:106] - GETTING Kla7 from Int
2021-03-11 22:46:36,683 [main:106] - GETTING Kla7 from LongProgression
2021-03-11 22:46:36,683 [main:111] - Cant find and generate replacement for Kla1 type Kla7
2021-03-11 22:46:36,683 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 22:46:36,683 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 22:46:36,683 [main:54] - Getting value of type Function0<Unit>
2021-03-11 22:46:36,883 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:46:36,888 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:46:37,096 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:46:37,102 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:46:37,585 [main:302] - generating value of type = Any false depth = 4
2021-03-11 22:46:37,586 [main:95] - GENERATED = println("keumb")
2021-03-11 22:46:37,586 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("keumb")}
2021-03-11 22:46:37,586 [main:61] - GENERATED IS CALL =false
2021-03-11 22:46:37,862 [main:67] - randomType = Map<UByte, Kla1>
2021-03-11 22:46:37,863 [main:106] - GETTING Function0<Unit> from CharRange
2021-03-11 22:46:37,892 [main:106] - GETTING Function0<Unit> from LongProgression
2021-03-11 22:46:37,904 [main:106] - GETTING Function0<Unit> from UShort
2021-03-11 22:46:37,926 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 22:46:37,947 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:46:37,964 [main:106] - GETTING Function0<Unit> from Float
2021-03-11 22:46:37,993 [main:106] - GETTING Function0<Unit> from UByte
2021-03-11 22:46:38,015 [main:106] - GETTING Function0<Unit> from UByte
2021-03-11 22:46:38,016 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:46:38,017 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:46:38,018 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:46:38,019 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:46:38,020 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-11 22:46:38,032 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:46:38,064 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:46:38,065 [main:106] - GETTING Function0<Unit> from Long
2021-03-11 22:46:38,095 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:46:38,108 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-11 22:46:38,109 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:46:38,110 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 22:46:38,111 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:46:38,112 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:46:38,114 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:46:38,115 [main:106] - GETTING Function0<Unit> from UShort
2021-03-11 22:46:38,116 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:46:38,117 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:46:38,118 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:46:38,119 [main:106] - GETTING Function0<Unit> from LongProgression
2021-03-11 22:46:38,120 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:46:38,121 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 22:46:38,140 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 22:46:38,141 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:46:38,142 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:46:38,143 [main:106] - GETTING Function0<Unit> from LongRange
2021-03-11 22:46:38,165 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:46:38,166 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:46:38,167 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-11 22:46:38,167 [main:114] - replacement of prope8 of type Function0<Unit> is { println("keumb")}
2021-03-11 22:46:38,367 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 22:46:38,367 [main:66] - Compilation checking started
2021-03-11 22:46:38,926 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = fu2("teeiv")
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { TODO()}
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error((charProgression step 2).first.plus(fu3("emofm")))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (((9.toUByte())).toShort().equals("favkc")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
Kla5().{ println("keumb")} = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:46:38,929 [main:107] - replacing (prope7, Boolean)
2021-03-11 22:46:38,929 [main:50] - replacing prope7 Boolean
2021-03-11 22:46:38,929 [main:54] - Getting value of type Boolean
2021-03-11 22:46:39,134 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:46:39,139 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 22:46:39,139 [main:61] - GENERATED IS CALL =false
2021-03-11 22:46:39,150 [main:67] - randomType = Short
2021-03-11 22:46:39,353 [main:302] - generating value of type = Short true depth = 0
2021-03-11 22:46:39,396 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6a60a620]
2021-03-11 22:46:39,396 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3aa9fb3]
2021-03-11 22:46:39,396 [main:78] - Generated call from random type = (-25074).toDouble().isInfinite()
2021-03-11 22:46:39,397 [main:106] - GETTING Boolean from Char
2021-03-11 22:46:39,414 [main:113] - Case = [public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a75e27b]]
2021-03-11 22:46:39,414 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a75e27b]
2021-03-11 22:46:39,414 [main:117] - GENERATED CALL = ((2).toChar()).isISOControl()
2021-03-11 22:46:39,414 [main:113] - Case = [public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@daac320], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@a6c816a]]
2021-03-11 22:46:39,414 [main:149] - GENERATING call of type public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@daac320]
2021-03-11 22:46:39,414 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@a6c816a]
2021-03-11 22:46:39,414 [main:117] - GENERATED CALL = ((2).toChar()).toDouble().isNaN()
2021-03-11 22:46:39,414 [main:113] - Case = [public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ccb45]]
2021-03-11 22:46:39,414 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11ccb45]
2021-03-11 22:46:39,415 [main:117] - GENERATED CALL = ((2).toChar()).isUpperCase()
2021-03-11 22:46:39,415 [main:113] - Case = [public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d11473]]
2021-03-11 22:46:39,415 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64d11473]
2021-03-11 22:46:39,415 [main:117] - GENERATED CALL = ((2).toChar()).isLetter()
2021-03-11 22:46:39,415 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5eec0c3f], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2785b3c8]]
2021-03-11 22:46:39,415 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5eec0c3f]
2021-03-11 22:46:39,617 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:46:39,617 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2785b3c8]
2021-03-11 22:46:39,817 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:46:39,822 [main:117] - GENERATED CALL = ((2).toChar()).equals("atcwj").xor(false)
2021-03-11 22:46:39,822 [main:113] - Case = [public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@510362d6]]
2021-03-11 22:46:39,822 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@510362d6]
2021-03-11 22:46:39,822 [main:117] - GENERATED CALL = ((2).toChar()).isDigit()
2021-03-11 22:46:39,822 [main:113] - Case = [public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7636f179]]
2021-03-11 22:46:39,822 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7636f179]
2021-03-11 22:46:39,822 [main:117] - GENERATED CALL = ((2).toChar()).isLowSurrogate()
2021-03-11 22:46:39,823 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@27225e83], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@16e0d7b]]
2021-03-11 22:46:39,823 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@27225e83]
2021-03-11 22:46:39,823 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@16e0d7b]
2021-03-11 22:46:40,023 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:46:40,023 [main:117] - GENERATED CALL = ((2).toChar()).toLong().equals("lplvo")
2021-03-11 22:46:40,023 [main:113] - Case = [public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a92bf4b]]
2021-03-11 22:46:40,023 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a92bf4b]
2021-03-11 22:46:40,225 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:46:40,230 [main:117] - GENERATED CALL = ((2).toChar()).equals((2).toChar(), false)
2021-03-11 22:46:40,230 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5eec0c3f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43786fd8]]
2021-03-11 22:46:40,230 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5eec0c3f]
2021-03-11 22:46:40,430 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43786fd8]
2021-03-11 22:46:40,631 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:46:40,631 [main:117] - GENERATED CALL = ((2).toChar()).equals(null).equals("iaqlw")
2021-03-11 22:46:40,631 [main:114] - replacement of prope7 of type Boolean is ((2).toChar()).isUpperCase()
2021-03-11 22:46:40,831 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:46:40,832 [main:66] - Compilation checking started
2021-03-11 22:46:41,400 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = fu2("teeiv")
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { TODO()}
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error((charProgression step 2).first.plus(fu3("emofm")))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        ((2).toChar()).isUpperCase() = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (((9.toUByte())).toShort().equals("favkc")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
Kla5().prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:46:41,403 [main:107] - replacing (COROUTINE_SUSPENDED, Any)
2021-03-11 22:46:41,403 [main:50] - replacing COROUTINE_SUSPENDED Any
2021-03-11 22:46:41,403 [main:54] - Getting value of type Any
2021-03-11 22:46:41,603 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:46:41,604 [main:58] - GENERATED VALUE OF TYPE Any = "rnagc"
2021-03-11 22:46:41,604 [main:61] - GENERATED IS CALL =false
2021-03-11 22:46:41,623 [main:67] - randomType = Kla0
2021-03-11 22:46:41,824 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 22:46:41,828 [main:112] - generating klass Kla0 text = class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        COROUTINE_SUSPENDED
    }
}
2021-03-11 22:46:42,030 [main:194] - Type params = []
2021-03-11 22:46:42,263 [main:302] - generating value of type = String true depth = 2
2021-03-11 22:46:42,277 [main:106] - GETTING Any from String
2021-03-11 22:46:42,297 [main:114] - replacement of COROUTINE_SUSPENDED of type Any is fu3("start")
2021-03-11 22:46:42,498 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:46:42,499 [main:66] - Compilation checking started
2021-03-11 22:46:43,305 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        fu3("start")
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = fu2("teeiv")
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { TODO()}
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error((charProgression step 2).first.plus(fu3("emofm")))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (((9.toUByte())).toShort().equals("favkc")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
Kla5().prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:46:43,308 [main:107] - replacing (this, Kla2)
2021-03-11 22:46:43,308 [main:50] - replacing this Kla2
2021-03-11 22:46:43,308 [main:54] - Getting value of type Kla2
2021-03-11 22:46:43,510 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 22:46:43,515 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 22:46:43,515 [main:58] - GENERATED VALUE OF TYPE Kla2 = Kla2()
2021-03-11 22:46:43,515 [main:61] - GENERATED IS CALL =true
2021-03-11 22:46:43,535 [main:67] - randomType = Kla5
2021-03-11 22:46:43,744 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 22:46:43,749 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (((9.toUByte())).toShort().equals("favkc")) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 22:46:43,760 [main:106] - GETTING Kla2 from Long
2021-03-11 22:46:43,789 [main:106] - GETTING Kla2 from UByte
2021-03-11 22:46:43,812 [main:106] - GETTING Kla2 from IntRange
2021-03-11 22:46:43,832 [main:106] - GETTING Kla2 from IntProgression
2021-03-11 22:46:43,844 [main:106] - GETTING Kla2 from CharProgression
2021-03-11 22:46:43,856 [main:106] - GETTING Kla2 from LongProgression
2021-03-11 22:46:43,867 [main:106] - GETTING Kla2 from UByte
2021-03-11 22:46:43,868 [main:106] - GETTING Kla2 from CharProgression
2021-03-11 22:46:43,869 [main:106] - GETTING Kla2 from Char
2021-03-11 22:46:43,886 [main:106] - GETTING Kla2 from Int
2021-03-11 22:46:43,916 [main:106] - GETTING Kla2 from CharProgression
2021-03-11 22:46:43,917 [main:106] - GETTING Kla2 from Int
2021-03-11 22:46:43,918 [main:106] - GETTING Kla2 from Int
2021-03-11 22:46:43,918 [main:106] - GETTING Kla2 from LongProgression
2021-03-11 22:46:43,919 [main:106] - GETTING Kla2 from CharProgression
2021-03-11 22:46:43,920 [main:106] - GETTING Kla2 from IntProgression
2021-03-11 22:46:43,920 [main:106] - GETTING Kla2 from String
2021-03-11 22:46:43,938 [main:106] - GETTING Kla2 from String
2021-03-11 22:46:43,938 [main:106] - GETTING Kla2 from String
2021-03-11 22:46:43,939 [main:106] - GETTING Kla2 from CharRange
2021-03-11 22:46:43,962 [main:106] - GETTING Kla2 from Int
2021-03-11 22:46:43,962 [main:106] - GETTING Kla2 from CharProgression
2021-03-11 22:46:43,963 [main:106] - GETTING Kla2 from String
2021-03-11 22:46:43,964 [main:106] - GETTING Kla2 from UShort
2021-03-11 22:46:43,986 [main:106] - GETTING Kla2 from String
2021-03-11 22:46:43,987 [main:106] - GETTING Kla2 from String
2021-03-11 22:46:43,987 [main:106] - GETTING Kla2 from String
2021-03-11 22:46:43,988 [main:106] - GETTING Kla2 from String
2021-03-11 22:46:43,989 [main:106] - GETTING Kla2 from UShort
2021-03-11 22:46:43,989 [main:106] - GETTING Kla2 from Float
2021-03-11 22:46:44,018 [main:106] - GETTING Kla2 from LongRange
2021-03-11 22:46:44,039 [main:106] - GETTING Kla2 from CharProgression
2021-03-11 22:46:44,040 [main:106] - GETTING Kla2 from String
2021-03-11 22:46:44,040 [main:106] - GETTING Kla2 from IntRange
2021-03-11 22:46:44,041 [main:106] - GETTING Kla2 from Int
2021-03-11 22:46:44,041 [main:106] - GETTING Kla2 from String
2021-03-11 22:46:44,042 [main:106] - GETTING Kla2 from Char
2021-03-11 22:46:44,042 [main:114] - replacement of this of type Kla2 is Kla2()
2021-03-11 22:46:44,241 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:46:44,242 [main:66] - Compilation checking started
2021-03-11 22:46:45,019 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun box(): String {
    val intList = mutableListOf<Int>()
    val intProgression = 1 until 9
    for (i in (intProgression step 2).reversed()) {
        intList += i
    }
    assertEquals(listOf(7, 5, 3, 1), intList)

    val longList = mutableListOf<Long>()
    val longProgression = 1L until 9L
    for (i in (longProgression step 2L).reversed()) {
        longList += i
    }
    assertEquals(listOf(7L, 5L, 3L, 1L), longList)

    val charList = mutableListOf<Char>()
    val charProgression = 'a' until 'i'
    for (i in (charProgression step 2).reversed()) {
        charList += i
    }
    assertEquals(listOf('g', 'e', 'c', 'a'), charList)

    return "OK"
}

fun fu0(suffix: String, l: (s: String) -> Unit)  {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: String -> repeat(-44179653, {a: Int -> println()})}((charProgression).endInclusive.plus("fcncn"))
}

fun <Ty0> fu1(arg: Ty0, f: (Ty0) -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty0 -> println()}(arg)
}

inline fun fu2(a: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
return (intProgression).endInclusive.toString((21899)).toString()
}

fun fu3(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    fu1(param) {a: String -> check(((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart", { "sgtpt"})}

    return "olqgb"
}

fun fu4(param: String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "lvypc"
    fu1("stub") { a ->
        fu0((charProgression step 2).first.titlecase()) {
            prope0 = fu2(param).toString()
        }
    }

    return prope0
}

inline fun fu5(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = ((longProgression step 1L)).first.toString(2)
    fu1(((charProgression step 2).step)?.toChar().lowercase()) {a: String -> check(true, { "jdopi"})}

    return (intProgression).endInclusive.toString(2)
}

inline fun fu6(crossinline param: () -> String): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope0 = "fail1"
    { print("yskco")}()

    return prope0
}

fun box512(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (fu3("start") != "bixst") return "fjjuh"
    if (((intProgression).endInclusive).compareTo(21899).toString(1) != "nostart") return "fail2: ${fu3("nostart")}"
    if (fu4("start") != "start") return "fpbxs"

    if ((44179653.toUShort())?.toFloat().isInfinite()) return (charProgression step 44179653).first.uppercase()
    if (fu6({ "isrgl"}) != (2).toChar().plus("prqrm")) return (9.toUByte()).toLong().toString(1)

    return (charProgression step 1).step.toString(9)
}

class Kla0(val w: String) {
    suspend fun Long.fu12(): String = suspendCoroutineUninterceptedOrReturn {
        x ->
        x.resume((fu3("start")).get(911712256).uppercase() + ('?').toShort().toString(-1655602974))
        fu3("start")
    }
}

suspend fun Kla0.fu7(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = fu2("teeiv")
    if ((Kla4()).equals("gjrge").not()) return (-961975344)?.toChar().uppercase()
    return (fu6({ "isrgl"})).plus("auqys")
}

suspend fun Kla0.fu8(v: Long?): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
val prope3 = (fu3("emofm")).subSequence((intProgression).endInclusive, -51517381).repeat((2))
    return (((intProgression).endInclusive).compareTo(21899).toString(1)).replaceIndent(fu4("start"))
}

fun fu9(c: suspend () -> Unit) {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
c.startCoroutine(Kla1)
}

fun box766(): String {
    val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
var prope4 = "fail 2"

    fu9 { check(false, { "rygug"})}

    return "giruk"
}

fun <Ty1> fu10(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
{a: Ty1 -> require(false)}(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
runCatching<Any?>({ "twjhg"}).exceptionOrNull()?.let({a: Throwable -> println("bkzfg")})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
Kla2().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty1>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "qdrwh"})}

    fun fu15(c: Continuation<*>) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
if (c !is CoroutineStackFrame) error(((charProgression step 1)).step.toString(-1180870571) + c + "ecvkv")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu16(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false}?.let { TODO()}
    }

    fun fu17(method: String) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope5.find { false} ?: error((charProgression step 2).first.plus(fu3("emofm")))
    }
}

val prope1 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu18() {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
prope6 = (((intProgression).endInclusive).compareTo(21899)).toInt().minus(113)
        prope7 = false
        prope8 = { check(true)}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        -387896459
        prope8 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
for (i in (9.toUByte()).toShort().rangeTo(-38)) {
            if ((longProgression).iterator().equals("bjwsk")) error(((intProgression step 2)).first.toString((2)))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("ijygi")
        if (prope7) error("Wrong state-machine generated: it is finished early")
        (Kla5()).prope8()
        if (((9.toUByte())).toShort().equals("favkc")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
Kla5().prope8 = { check(false, { "inqfq"})}
    }

    override fun fu13(exception: Throwable) {
        val intList = mutableListOf<Int>()
val intProgression = 1 until 9
val longList = mutableListOf<Long>()
val longProgression = 1L until 9L
val charList = mutableListOf<Char>()
val charProgression = 'a' until 'i'
throw IllegalStateException("jcjkx", IllegalStateException("shlcr", NullPointerException()))
    }
}


2021-03-11 22:46:45,023 [main:107] - replacing (c, SuspendFunction0<Unit>)
2021-03-11 22:46:45,023 [main:50] - replacing c SuspendFunction0<Unit>
2021-03-11 22:46:45,023 [main:54] - Getting value of type SuspendFunction0<Unit>
